
task6_evaluation.elf:     file format elf32-littlenios2
task6_evaluation.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000ff70 memsz 0x0000ff70 flags r-x
    LOAD off    0x00010f90 vaddr 0x0080ff90 paddr 0x00811a00 align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags rw-
    LOAD off    0x00013470 vaddr 0x00813470 paddr 0x00813470 align 2**12
         filesz 0x00000000 memsz 0x00008158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f8ac  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004a0  0080faf0  0080faf0  00010af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a70  0080ff90  00811a00  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00008158  00813470  00813470  00013470  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081b5c8  0081b5c8  00012a00  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012a00  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010c8  00000000  00000000  00012a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000225c3  00000000  00000000  00013af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009b8e  00000000  00000000  000360b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bcf3  00000000  00000000  0003fc41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000024a8  00000000  00000000  0004b934  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003bb3  00000000  00000000  0004dddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000162c5  00000000  00000000  0005198f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00067c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001940  00000000  00000000  00067c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006c91a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006c91d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006c920  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006c921  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006c922  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006c926  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006c92a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006c92e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006c937  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006c940  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0006c949  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004c  00000000  00000000  0006c95b  2**0
                  CONTENTS, READONLY
 29 .jdi          00004f66  00000000  00000000  0006c9a7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003fb70  00000000  00000000  0007190d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080faf0 l    d  .rodata	00000000 .rodata
0080ff90 l    d  .rwdata	00000000 .rwdata
00813470 l    d  .bss	00000000 .bss
0081b5c8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../task6_evaluation_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 e_fmod.c
0080fb3c l     O .rodata	00000010 Zero
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0080fbcc l     O .rodata	00000108 two_over_pi
0080fb4c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0080fd14 l     O .rodata	00000010 init_jk
0080fcd4 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0080ff90 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 ecvtbuf.c
00807100 l     F .text	000001d0 print_e
00000000 l    df *ABS*	00000000 findfp.c
00807c28 l     F .text	00000008 __fp_unlock
00807c3c l     F .text	0000019c __sinit.part.1
00807dd8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0080fe2c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0080ad14 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080d19c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080d2a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080d2d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080d3c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080d4a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080d58c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
0080d79c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008119f0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0080d9e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0080da9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080dbd0 l     F .text	00000034 alt_dev_reg
00810964 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080dec4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080e0d0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080e708 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080e970 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080ede4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080ef24 l     F .text	0000003c alt_get_errno
0080ef60 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081349c g     O .bss	00000004 alt_instruction_exception_handler
0080a14c g     F .text	00000074 _mprec_log10
0080a238 g     F .text	0000008c __any_on
0080d054 g     F .text	00000054 _isatty_r
0080fe38 g     O .rodata	00000028 __mprec_tinytens
0080d69c g     F .text	0000007c alt_main
0080a9b8 g     F .text	00000090 strcpy
00806f94 g     F .text	000000c0 _puts_r
0081b4c8 g     O .bss	00000100 alt_irq
00802acc g     F .text	00000014 fabs
0080cd7c g     F .text	00000060 _lseek_r
00800290 g     F .text	000000d0 initLookup
00811a00 g       *ABS*	00000000 __flash_rwdata_start
00805714 g     F .text	00000088 .hidden __eqdf2
0081b5c8 g       *ABS*	00000000 __alt_heap_start
0080a954 g     F .text	0000005c __sseek
00807f78 g     F .text	00000010 __sinit
008072d0 g     F .text	000001a4 fcvtbuf
00807de0 g     F .text	00000068 __sfmoreglue
0080d73c g     F .text	00000024 __malloc_unlock
008134c8 g     O .bss	00008000 lookupTable
0080357c g     F .text	00000440 .hidden __divsf3
00809044 g     F .text	0000015c memmove
00807f60 g     F .text	00000018 _cleanup
008092c8 g     F .text	000000a8 _Balloc
00804420 g     F .text	00000070 .hidden __fixsfsi
0080d760 g     F .text	0000003c alt_putstr
0080579c g     F .text	000000dc .hidden __gtdf2
0080f31c g     F .text	00000024 altera_nios2_gen2_irq_init
00806f84 g     F .text	00000010 __errno
00800000 g     F .entry	0000001c __reset
0080da24 g     F .text	00000078 times
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080cff8 g     F .text	0000005c _fstat_r
00800b20 g     F .text	00000340 __ieee754_fmod
00813480 g     O .bss	00000004 errno
00802ae0 g     F .text	000001ec floor
0080a8d0 g     F .text	00000008 __seofread
00813488 g     O .bss	00000004 alt_argv
008199c4 g       *ABS*	00000000 _gp
00803f3c g     F .text	000004e4 .hidden __subsf3
008107e4 g     O .rwdata	00000180 alt_fd_list
00800e60 g     F .text	0000076c __ieee754_rem_pio2
0080f340 g     F .text	00000090 alt_find_dev
00808efc g     F .text	00000148 memcpy
00807c30 g     F .text	0000000c _cleanup_r
0080690c g     F .text	000000dc .hidden __floatsidf
0080eea8 g     F .text	0000007c alt_io_redirect
0080d0a8 g     F .text	000000f4 .hidden __ltdf2
0080faf0 g       *ABS*	00000000 __DTOR_END__
00807054 g     F .text	00000014 puts
0080f60c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00802ccc g     F .text	00000074 __fpclassifyd
0080a0a8 g     F .text	000000a4 __ratio
0080e2c8 g     F .text	0000021c altera_avalon_jtag_uart_read
00802ff8 g     F .text	00000064 .hidden __udivsi3
0080d3fc g     F .text	000000a4 isatty
0080fe88 g     O .rodata	000000c8 __mprec_tens
008015cc g     F .text	000004a4 __kernel_cos
00803a78 g     F .text	000000c8 .hidden __lesf2
00806f44 g     F .text	00000040 gcvtf
0080f57c g     F .text	00000090 alt_icache_flush
0081347c g     O .bss	00000004 __malloc_top_pad
008096d4 g     F .text	0000003c __i2b
00807fc8 g     F .text	000004bc __sfvwrite_r
0080a828 g     F .text	00000054 _sbrk_r
0080cf98 g     F .text	00000060 _read_r
008119e8 g     O .rwdata	00000004 alt_max_fd
0080c59c g     F .text	000000f0 _fclose_r
0080c918 g     F .text	00000030 fflush
00813478 g     O .bss	00000004 __malloc_max_sbrked_mem
00802800 g     F .text	000002cc __kernel_sin
00806a90 g     F .text	00000110 .hidden __extendsfdf2
00804580 g     F .text	000008ac .hidden __adddf3
00809e50 g     F .text	0000010c __b2d
0080d5c8 g     F .text	000000d4 lseek
008119c4 g     O .rwdata	00000004 __fdlib_version
008119c8 g     O .rwdata	00000004 _global_impure_ptr
0080a2c4 g     F .text	00000564 _realloc_r
0081b5c8 g       *ABS*	00000000 __bss_end
0080ecf4 g     F .text	000000f0 alt_iic_isr_register
0080f214 g     F .text	00000108 alt_tick
0080fe60 g     O .rodata	00000028 __mprec_bigtens
008094b8 g     F .text	00000104 __s2b
008069e8 g     F .text	000000a8 .hidden __floatunsidf
00809b90 g     F .text	00000060 __mcmp
00807f98 g     F .text	00000018 __fp_lock_all
0080eca8 g     F .text	0000004c alt_ic_irq_enabled
0080f178 g     F .text	0000009c alt_alarm_stop
00813490 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
008107bc g     O .rwdata	00000028 alt_dev_null
00801a70 g     F .text	00000d90 __kernel_rem_pio2
0080e928 g     F .text	00000048 alt_dcache_flush_all
008095bc g     F .text	00000068 __hi0bits
0080688c g     F .text	00000080 .hidden __fixdfsi
00811a00 g       *ABS*	00000000 __ram_rwdata_end
008119e0 g     O .rwdata	00000008 alt_dev_list
0080dad8 g     F .text	000000f8 write
008039bc g     F .text	000000bc .hidden __gtsf2
0080ff90 g       *ABS*	00000000 __ram_rodata_end
0080d310 g     F .text	000000b0 fstat
0080d0a8 g     F .text	000000f4 .hidden __ledf2
00809908 g     F .text	00000140 __pow5mult
0080305c g     F .text	00000058 .hidden __umodsi3
0081b5c8 g       *ABS*	00000000 end
0080de04 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080faf0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00807918 g     F .text	00000310 _dcvt
0080e780 g     F .text	0000007c alt_avalon_timer_sc_init
00806d48 g     F .text	00000064 .hidden __clzsi2
008009c8 g     F .text	00000158 fmod
0080e4e4 g     F .text	00000224 altera_avalon_jtag_uart_write
008008dc g     F .text	000000ec cos
00807f88 g     F .text	00000004 __sfp_lock_acquire
00808e18 g     F .text	000000e4 memchr
0080ca6c g     F .text	00000310 _free_r
0080f93c g     F .text	00000180 __call_exitprocs
008119d0 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00813494 g     O .bss	00000004 _alt_tick_rate
008075b4 g     F .text	00000364 _gcvt
00809a48 g     F .text	00000148 __lshift
00813498 g     O .bss	00000004 _alt_nticks
0080d7d8 g     F .text	000000fc read
0080dc3c g     F .text	00000064 alt_sys_init
0080f824 g     F .text	00000118 __register_exitproc
00809710 g     F .text	000001f8 __multiply
0080e170 g     F .text	00000068 altera_avalon_jtag_uart_close
00800360 g     F .text	00000184 cosine
0080ff90 g       *ABS*	00000000 __ram_rwdata_start
0080faf0 g       *ABS*	00000000 __ram_rodata_start
008134a0 g     O .bss	00000028 __malloc_current_mallinfo
00809f5c g     F .text	0000014c __d2b
0080dca0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080f4d8 g     F .text	000000a4 alt_get_fd
0080abfc g     F .text	00000054 _close_r
008004e4 g     F .text	00000098 generateVector
0080f7a8 g     F .text	0000007c memcmp
0080dd60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081b5c8 g       *ABS*	00000000 __alt_stack_base
0080ddb0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080aaa8 g     F .text	00000154 __swsetup_r
00804e2c g     F .text	000008e8 .hidden __divdf3
00807e48 g     F .text	00000118 __sfp
0080a1c0 g     F .text	00000078 __copybits
008103b4 g     O .rwdata	00000408 __malloc_av_
00807f94 g     F .text	00000004 __sinit_lock_release
00805878 g     F .text	00000718 .hidden __muldf3
0080a87c g     F .text	00000054 __sread
0080f3d0 g     F .text	00000108 alt_find_file
0080e9ac g     F .text	000000a4 alt_dev_llist_insert
0080d718 g     F .text	00000024 __malloc_lock
0080d938 g     F .text	000000b0 sbrk
0080c8bc g     F .text	0000005c _fflush_r
0080ac50 g     F .text	000000c4 _calloc_r
00813470 g       *ABS*	00000000 __bss_start
008091a0 g     F .text	00000128 memset
00800690 g     F .text	0000024c main
00806dac g     F .text	00000024 fcvt
0081348c g     O .bss	00000004 alt_envp
00813474 g     O .bss	00000004 __malloc_max_total_mem
0080dd00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00803a78 g     F .text	000000c8 .hidden __ltsf2
00807474 g     F .text	00000140 ecvtbuf
0080a9b0 g     F .text	00000008 __sclose
00802d40 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
0080c68c g     F .text	00000014 fclose
00806ba0 g     F .text	000001a8 .hidden __truncdfsf2
0080af14 g     F .text	00001688 _dtoa_r
0080860c g     F .text	0000080c _malloc_r
008119ec g     O .rwdata	00000004 alt_errno
00806e4c g     F .text	00000058 ecvtf
00808484 g     F .text	000000c4 _fwalk
00802f00 g     F .text	00000084 .hidden __divsi3
0080c948 g     F .text	00000124 _malloc_trim_r
0080faf0 g       *ABS*	00000000 __CTOR_END__
00803b40 g     F .text	000003fc .hidden __mulsf3
0080faf0 g       *ABS*	00000000 __flash_rodata_start
0080faf0 g       *ABS*	00000000 __DTOR_LIST__
00802ee4 g     F .text	0000001c copysign
00805714 g     F .text	00000088 .hidden __nedf2
0080dc04 g     F .text	00000038 alt_irq_init
0080d8d4 g     F .text	00000064 alt_release_fd
0080fd24 g     O .rodata	00000100 .hidden __clz_tab
0080f6a8 g     F .text	00000014 atexit
008039bc g     F .text	000000bc .hidden __gesf2
0080057c g     F .text	00000114 sumVector
0080aa48 g     F .text	00000060 _write_r
008119cc g     O .rwdata	00000004 _impure_ptr
00813484 g     O .bss	00000004 alt_argc
0080c6a0 g     F .text	0000021c __sflush_r
00802d48 g     F .text	0000019c scalbn
0080eab0 g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00809dec g     F .text	00000064 __ulp
00807fb0 g     F .text	00000018 __fp_unlock_all
00806e28 g     F .text	00000024 ecvt
008119d8 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080eb44 g     F .text	00000050 alt_ic_isr_register
00811a00 g       *ABS*	00000000 _edata
0081b5c8 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080e1d8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080f6f4 g     F .text	0000009c _fputs_r
0080ec1c g     F .text	0000008c alt_ic_irq_disable
0080a8d8 g     F .text	0000007c __swrite
008119d4 g     O .rwdata	00000004 __malloc_trim_threshold
00806dd0 g     F .text	00000058 fcvtf
0080f6bc g     F .text	00000038 exit
00808548 g     F .text	000000c4 _fwalk_reent
00804490 g     F .text	000000f0 .hidden __floatunsisf
00809bf0 g     F .text	000001fc __mdiff
00802f84 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00807f8c g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00813470 g     O .bss	00000004 e
00806ea4 g     F .text	000000a0 gcvt
0080fabc g     F .text	00000034 _exit
0080e7fc g     F .text	0000012c alt_alarm_start
0080cddc g     F .text	000001bc __smakebuf_r
00807068 g     F .text	00000098 strlen
0080f024 g     F .text	00000154 open
0080579c g     F .text	000000dc .hidden __gedf2
0080eb10 g     F .text	00000034 alt_icache_flush_all
0080f790 g     F .text	00000018 fputs
008119f4 g     O .rwdata	00000004 alt_priority_mask
0080eb94 g     F .text	00000088 alt_ic_irq_enable
00805f90 g     F .text	000008fc .hidden __subdf3
00809624 g     F .text	000000b0 __lo0bits
008119f8 g     O .rwdata	00000008 alt_alarm_list
0080ea50 g     F .text	00000060 _do_ctors
0080d1d8 g     F .text	000000d0 close
008030b4 g     F .text	000004c8 .hidden __addsf3
0080d508 g     F .text	00000084 alt_load
00807f90 g     F .text	00000004 __sinit_lock_acquire
00809398 g     F .text	00000120 __multadd
00809370 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10ad3204 	addi	r2,r2,-19256
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10ad3204 	addi	r2,r2,-19256
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a6b617 	ldw	r2,-25896(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a6b617 	ldw	r2,-25896(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

#if NIOS2_DCACHE_SIZE > 0 && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
  800244:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_DCACHE_SIZE
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6a67114 	ori	gp,gp,39364
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	108d1c14 	ori	r2,r2,13424

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18ed7214 	ori	r3,r3,46536

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080d5080 	call	80d508 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080d69c0 	call	80d69c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <initLookup>:

float lookupTable[TABLE_SIZE];
// Generates the vector x and stores it in the memory

void initLookup()
{
  800290:	defffd04 	addi	sp,sp,-12
  800294:	dfc00215 	stw	ra,8(sp)
  800298:	df000115 	stw	fp,4(sp)
  80029c:	df000104 	addi	fp,sp,4
	for (unsigned int i = 0; i < TABLE_SIZE; ++i)
  8002a0:	e03fff15 	stw	zero,-4(fp)
  8002a4:	00002506 	br	80033c <initLookup+0xac>
		lookupTable[i] = cos(HALF_PI * (float)i / (float)TABLE_SIZE);
  8002a8:	e13fff17 	ldw	r4,-4(fp)
  8002ac:	08044900 	call	804490 <__floatunsisf>
  8002b0:	1007883a 	mov	r3,r2
  8002b4:	014ff274 	movhi	r5,16329
  8002b8:	2943f6c4 	addi	r5,r5,4059
  8002bc:	1809883a 	mov	r4,r3
  8002c0:	0803b400 	call	803b40 <__mulsf3>
  8002c4:	1007883a 	mov	r3,r2
  8002c8:	1805883a 	mov	r2,r3
  8002cc:	01518034 	movhi	r5,17920
  8002d0:	1009883a 	mov	r4,r2
  8002d4:	080357c0 	call	80357c <__divsf3>
  8002d8:	1007883a 	mov	r3,r2
  8002dc:	1805883a 	mov	r2,r3
  8002e0:	1009883a 	mov	r4,r2
  8002e4:	0806a900 	call	806a90 <__extendsfdf2>
  8002e8:	100b883a 	mov	r5,r2
  8002ec:	180d883a 	mov	r6,r3
  8002f0:	2809883a 	mov	r4,r5
  8002f4:	300b883a 	mov	r5,r6
  8002f8:	08008dc0 	call	8008dc <cos>
  8002fc:	100b883a 	mov	r5,r2
  800300:	180d883a 	mov	r6,r3
  800304:	2809883a 	mov	r4,r5
  800308:	300b883a 	mov	r5,r6
  80030c:	0806ba00 	call	806ba0 <__truncdfsf2>
  800310:	1009883a 	mov	r4,r2
  800314:	00802074 	movhi	r2,129
  800318:	108d3204 	addi	r2,r2,13512
  80031c:	e0ffff17 	ldw	r3,-4(fp)
  800320:	18c7883a 	add	r3,r3,r3
  800324:	18c7883a 	add	r3,r3,r3
  800328:	10c5883a 	add	r2,r2,r3
  80032c:	11000015 	stw	r4,0(r2)
float lookupTable[TABLE_SIZE];
// Generates the vector x and stores it in the memory

void initLookup()
{
	for (unsigned int i = 0; i < TABLE_SIZE; ++i)
  800330:	e0bfff17 	ldw	r2,-4(fp)
  800334:	10800044 	addi	r2,r2,1
  800338:	e0bfff15 	stw	r2,-4(fp)
  80033c:	e0bfff17 	ldw	r2,-4(fp)
  800340:	10880030 	cmpltui	r2,r2,8192
  800344:	103fd81e 	bne	r2,zero,8002a8 <__alt_data_end+0xff8002a8>
		lookupTable[i] = cos(HALF_PI * (float)i / (float)TABLE_SIZE);
}
  800348:	0001883a 	nop
  80034c:	e037883a 	mov	sp,fp
  800350:	dfc00117 	ldw	ra,4(sp)
  800354:	df000017 	ldw	fp,0(sp)
  800358:	dec00204 	addi	sp,sp,8
  80035c:	f800283a 	ret

00800360 <cosine>:

float cosine(float x)
{
  800360:	defffd04 	addi	sp,sp,-12
  800364:	dfc00215 	stw	ra,8(sp)
  800368:	df000115 	stw	fp,4(sp)
  80036c:	df000104 	addi	fp,sp,4
  800370:	e13fff15 	stw	r4,-4(fp)
	x = fmod(fabs(x), TWO_PI);
  800374:	e0ffff17 	ldw	r3,-4(fp)
  800378:	00a00034 	movhi	r2,32768
  80037c:	10bfffc4 	addi	r2,r2,-1
  800380:	1884703a 	and	r2,r3,r2
  800384:	1009883a 	mov	r4,r2
  800388:	0806a900 	call	806a90 <__extendsfdf2>
  80038c:	1011883a 	mov	r8,r2
  800390:	1813883a 	mov	r9,r3
  800394:	01980034 	movhi	r6,24576
  800398:	01d00674 	movhi	r7,16409
  80039c:	39c87ec4 	addi	r7,r7,8699
  8003a0:	4009883a 	mov	r4,r8
  8003a4:	480b883a 	mov	r5,r9
  8003a8:	08009c80 	call	8009c8 <fmod>
  8003ac:	100b883a 	mov	r5,r2
  8003b0:	180d883a 	mov	r6,r3
  8003b4:	2809883a 	mov	r4,r5
  8003b8:	300b883a 	mov	r5,r6
  8003bc:	0806ba00 	call	806ba0 <__truncdfsf2>
  8003c0:	1007883a 	mov	r3,r2
  8003c4:	e0ffff15 	stw	r3,-4(fp)
	if (x > PI)
  8003c8:	01501274 	movhi	r5,16457
  8003cc:	2943f6c4 	addi	r5,r5,4059
  8003d0:	e13fff17 	ldw	r4,-4(fp)
  8003d4:	08039bc0 	call	8039bc <__gesf2>
  8003d8:	0080060e 	bge	zero,r2,8003f4 <cosine+0x94>
		x = PI - x;
  8003dc:	e17fff17 	ldw	r5,-4(fp)
  8003e0:	01101274 	movhi	r4,16457
  8003e4:	2103f6c4 	addi	r4,r4,4059
  8003e8:	0803f3c0 	call	803f3c <__subsf3>
  8003ec:	1007883a 	mov	r3,r2
  8003f0:	e0ffff15 	stw	r3,-4(fp)
	if (x < HALF_PI)
  8003f4:	014ff274 	movhi	r5,16329
  8003f8:	2943f6c4 	addi	r5,r5,4059
  8003fc:	e13fff17 	ldw	r4,-4(fp)
  800400:	0803a780 	call	803a78 <__lesf2>
  800404:	1000150e 	bge	r2,zero,80045c <cosine+0xfc>
		return lookupTable[(int)(x * (float)TABLE_SIZE / HALF_PI)];
  800408:	01518034 	movhi	r5,17920
  80040c:	e13fff17 	ldw	r4,-4(fp)
  800410:	0803b400 	call	803b40 <__mulsf3>
  800414:	1007883a 	mov	r3,r2
  800418:	1805883a 	mov	r2,r3
  80041c:	014ff274 	movhi	r5,16329
  800420:	2943f6c4 	addi	r5,r5,4059
  800424:	1009883a 	mov	r4,r2
  800428:	080357c0 	call	80357c <__divsf3>
  80042c:	1007883a 	mov	r3,r2
  800430:	1805883a 	mov	r2,r3
  800434:	1009883a 	mov	r4,r2
  800438:	08044200 	call	804420 <__fixsfsi>
  80043c:	1007883a 	mov	r3,r2
  800440:	00802074 	movhi	r2,129
  800444:	108d3204 	addi	r2,r2,13512
  800448:	18c7883a 	add	r3,r3,r3
  80044c:	18c7883a 	add	r3,r3,r3
  800450:	10c7883a 	add	r3,r2,r3
  800454:	18800017 	ldw	r2,0(r3)
  800458:	00001b06 	br	8004c8 <cosine+0x168>
	else
		return -lookupTable[(int)((HALF_PI - x) * (float)TABLE_SIZE / HALF_PI)];
  80045c:	e17fff17 	ldw	r5,-4(fp)
  800460:	010ff274 	movhi	r4,16329
  800464:	2103f6c4 	addi	r4,r4,4059
  800468:	0803f3c0 	call	803f3c <__subsf3>
  80046c:	1007883a 	mov	r3,r2
  800470:	1805883a 	mov	r2,r3
  800474:	01518034 	movhi	r5,17920
  800478:	1009883a 	mov	r4,r2
  80047c:	0803b400 	call	803b40 <__mulsf3>
  800480:	1007883a 	mov	r3,r2
  800484:	1805883a 	mov	r2,r3
  800488:	014ff274 	movhi	r5,16329
  80048c:	2943f6c4 	addi	r5,r5,4059
  800490:	1009883a 	mov	r4,r2
  800494:	080357c0 	call	80357c <__divsf3>
  800498:	1007883a 	mov	r3,r2
  80049c:	1805883a 	mov	r2,r3
  8004a0:	1009883a 	mov	r4,r2
  8004a4:	08044200 	call	804420 <__fixsfsi>
  8004a8:	1007883a 	mov	r3,r2
  8004ac:	00802074 	movhi	r2,129
  8004b0:	108d3204 	addi	r2,r2,13512
  8004b4:	18c7883a 	add	r3,r3,r3
  8004b8:	18c7883a 	add	r3,r3,r3
  8004bc:	10c7883a 	add	r3,r2,r3
  8004c0:	18800017 	ldw	r2,0(r3)
  8004c4:	10a0003c 	xorhi	r2,r2,32768
  8004c8:	1007883a 	mov	r3,r2
}
  8004cc:	1805883a 	mov	r2,r3
  8004d0:	e037883a 	mov	sp,fp
  8004d4:	dfc00117 	ldw	ra,4(sp)
  8004d8:	df000017 	ldw	fp,0(sp)
  8004dc:	dec00204 	addi	sp,sp,8
  8004e0:	f800283a 	ret

008004e4 <generateVector>:

void generateVector(float *x, int length, float STEP)
{
  8004e4:	defff904 	addi	sp,sp,-28
  8004e8:	dfc00615 	stw	ra,24(sp)
  8004ec:	df000515 	stw	fp,20(sp)
  8004f0:	dc000415 	stw	r16,16(sp)
  8004f4:	df000504 	addi	fp,sp,20
  8004f8:	e13ffc15 	stw	r4,-16(fp)
  8004fc:	e17ffd15 	stw	r5,-12(fp)
  800500:	e1bffe15 	stw	r6,-8(fp)
	for (unsigned int i = 0; i < length; ++i)
  800504:	e03ffb15 	stw	zero,-20(fp)
  800508:	00001206 	br	800554 <generateVector+0x70>
	{
		x[i] = i*STEP;
  80050c:	e0bffb17 	ldw	r2,-20(fp)
  800510:	1085883a 	add	r2,r2,r2
  800514:	1085883a 	add	r2,r2,r2
  800518:	1007883a 	mov	r3,r2
  80051c:	e0bffc17 	ldw	r2,-16(fp)
  800520:	10e1883a 	add	r16,r2,r3
  800524:	e13ffb17 	ldw	r4,-20(fp)
  800528:	08044900 	call	804490 <__floatunsisf>
  80052c:	1007883a 	mov	r3,r2
  800530:	e17ffe17 	ldw	r5,-8(fp)
  800534:	1809883a 	mov	r4,r3
  800538:	0803b400 	call	803b40 <__mulsf3>
  80053c:	1007883a 	mov	r3,r2
  800540:	1805883a 	mov	r2,r3
  800544:	80800015 	stw	r2,0(r16)
		return -lookupTable[(int)((HALF_PI - x) * (float)TABLE_SIZE / HALF_PI)];
}

void generateVector(float *x, int length, float STEP)
{
	for (unsigned int i = 0; i < length; ++i)
  800548:	e0bffb17 	ldw	r2,-20(fp)
  80054c:	10800044 	addi	r2,r2,1
  800550:	e0bffb15 	stw	r2,-20(fp)
  800554:	e0bffd17 	ldw	r2,-12(fp)
  800558:	e0fffb17 	ldw	r3,-20(fp)
  80055c:	18bfeb36 	bltu	r3,r2,80050c <__alt_data_end+0xff80050c>
	{
		x[i] = i*STEP;
	}
}
  800560:	0001883a 	nop
  800564:	e6ffff04 	addi	sp,fp,-4
  800568:	dfc00217 	ldw	ra,8(sp)
  80056c:	df000117 	ldw	fp,4(sp)
  800570:	dc000017 	ldw	r16,0(sp)
  800574:	dec00304 	addi	sp,sp,12
  800578:	f800283a 	ret

0080057c <sumVector>:

float sumVector(float x[], int M)
{
  80057c:	defff804 	addi	sp,sp,-32
  800580:	dfc00715 	stw	ra,28(sp)
  800584:	df000615 	stw	fp,24(sp)
  800588:	df000604 	addi	fp,sp,24
  80058c:	e13ffe15 	stw	r4,-8(fp)
  800590:	e17fff15 	stw	r5,-4(fp)
    float k = 0;
  800594:	e03ffa15 	stw	zero,-24(fp)
    for (int i=0; i<M; i++){
  800598:	e03ffb15 	stw	zero,-20(fp)
  80059c:	00003106 	br	800664 <sumVector+0xe8>
    	float a = cosine(x[i]/128-1);
  8005a0:	e0bffb17 	ldw	r2,-20(fp)
  8005a4:	1085883a 	add	r2,r2,r2
  8005a8:	1085883a 	add	r2,r2,r2
  8005ac:	1007883a 	mov	r3,r2
  8005b0:	e0bffe17 	ldw	r2,-8(fp)
  8005b4:	10c5883a 	add	r2,r2,r3
  8005b8:	10c00017 	ldw	r3,0(r2)
  8005bc:	0150c034 	movhi	r5,17152
  8005c0:	1809883a 	mov	r4,r3
  8005c4:	080357c0 	call	80357c <__divsf3>
  8005c8:	1007883a 	mov	r3,r2
  8005cc:	1805883a 	mov	r2,r3
  8005d0:	014fe034 	movhi	r5,16256
  8005d4:	1009883a 	mov	r4,r2
  8005d8:	0803f3c0 	call	803f3c <__subsf3>
  8005dc:	1007883a 	mov	r3,r2
  8005e0:	1805883a 	mov	r2,r3
  8005e4:	1009883a 	mov	r4,r2
  8005e8:	08003600 	call	800360 <cosine>
  8005ec:	e0bffc15 	stw	r2,-16(fp)
    	float b = ALT_CI_FP32ADD_0(0.5, ALT_CI_FP32MULT_0(x[i], a));
  8005f0:	e0bffb17 	ldw	r2,-20(fp)
  8005f4:	1085883a 	add	r2,r2,r2
  8005f8:	1085883a 	add	r2,r2,r2
  8005fc:	1007883a 	mov	r3,r2
  800600:	e0bffe17 	ldw	r2,-8(fp)
  800604:	10c7883a 	add	r3,r2,r3
  800608:	18800017 	ldw	r2,0(r3)
  80060c:	e0fffc17 	ldw	r3,-16(fp)
  800610:	10c7c032 	custom	0,r3,r2,r3
  800614:	008fc034 	movhi	r2,16128
  800618:	10c5c072 	custom	1,r2,r2,r3
  80061c:	e0bffd15 	stw	r2,-12(fp)
        k += ALT_CI_FP32MULT_0(x[i],b);  //x[i]*(0.5 + x[i]*cos(x[i]/128-1));
  800620:	e0bffb17 	ldw	r2,-20(fp)
  800624:	1085883a 	add	r2,r2,r2
  800628:	1085883a 	add	r2,r2,r2
  80062c:	1007883a 	mov	r3,r2
  800630:	e0bffe17 	ldw	r2,-8(fp)
  800634:	10c7883a 	add	r3,r2,r3
  800638:	18800017 	ldw	r2,0(r3)
  80063c:	e0fffd17 	ldw	r3,-12(fp)
  800640:	10c5c032 	custom	0,r2,r2,r3
  800644:	100b883a 	mov	r5,r2
  800648:	e13ffa17 	ldw	r4,-24(fp)
  80064c:	08030b40 	call	8030b4 <__addsf3>
  800650:	1007883a 	mov	r3,r2
  800654:	e0fffa15 	stw	r3,-24(fp)
}

float sumVector(float x[], int M)
{
    float k = 0;
    for (int i=0; i<M; i++){
  800658:	e0bffb17 	ldw	r2,-20(fp)
  80065c:	10800044 	addi	r2,r2,1
  800660:	e0bffb15 	stw	r2,-20(fp)
  800664:	e0fffb17 	ldw	r3,-20(fp)
  800668:	e0bfff17 	ldw	r2,-4(fp)
  80066c:	18bfcc16 	blt	r3,r2,8005a0 <__alt_data_end+0xff8005a0>
    	float a = cosine(x[i]/128-1);
    	float b = ALT_CI_FP32ADD_0(0.5, ALT_CI_FP32MULT_0(x[i], a));
        k += ALT_CI_FP32MULT_0(x[i],b);  //x[i]*(0.5 + x[i]*cos(x[i]/128-1));
    }
    return(k);
  800670:	e0bffa17 	ldw	r2,-24(fp)
  800674:	1007883a 	mov	r3,r2
}
  800678:	1805883a 	mov	r2,r3
  80067c:	e037883a 	mov	sp,fp
  800680:	dfc00117 	ldw	ra,4(sp)
  800684:	df000017 	ldw	fp,0(sp)
  800688:	dec00204 	addi	sp,sp,8
  80068c:	f800283a 	ret

00800690 <main>:
int main()
{
  800690:	defffe04 	addi	sp,sp,-8
  800694:	dfc00115 	stw	ra,4(sp)
  800698:	df000015 	stw	fp,0(sp)
  80069c:	d839883a 	mov	fp,sp
  8006a0:	023ffc34 	movhi	r8,65520
  8006a4:	4203ee04 	addi	r8,r8,4024
  8006a8:	da37883a 	add	sp,sp,r8
	 printf("Task 2!\n");
  8006ac:	01002074 	movhi	r4,129
  8006b0:	213ebc04 	addi	r4,r4,-1296
  8006b4:	08070540 	call	807054 <puts>
	 // Define input vector
	 float x[N];
	 // Returned result
	 float y;
	 generateVector(x, N, step);
  8006b8:	00fffc34 	movhi	r3,65520
  8006bc:	18c3f204 	addi	r3,r3,4040
  8006c0:	e0c5883a 	add	r2,fp,r3
  8006c4:	018ea034 	movhi	r6,14976
  8006c8:	01400134 	movhi	r5,4
  8006cc:	297f0044 	addi	r5,r5,-1023
  8006d0:	1009883a 	mov	r4,r2
  8006d4:	08004e40 	call	8004e4 <generateVector>
	 // The following is used for timing
	 char buf[50];
	 clock_t exec_t1, exec_t2;
	 exec_t1 = times(NULL); // get system time before starting the process
  8006d8:	0009883a 	mov	r4,zero
  8006dc:	080da240 	call	80da24 <times>
  8006e0:	013ffc34 	movhi	r4,65520
  8006e4:	2103f004 	addi	r4,r4,4032
  8006e8:	2709883a 	add	r4,r4,fp
  8006ec:	20800015 	stw	r2,0(r4)

	// The code that you want to time goes here
	 y = sumVector(x, N);
  8006f0:	00fffc34 	movhi	r3,65520
  8006f4:	18c3f204 	addi	r3,r3,4040
  8006f8:	e0c5883a 	add	r2,fp,r3
  8006fc:	01400134 	movhi	r5,4
  800700:	297f0044 	addi	r5,r5,-1023
  800704:	1009883a 	mov	r4,r2
  800708:	080057c0 	call	80057c <sumVector>
  80070c:	013ffc34 	movhi	r4,65520
  800710:	2103ee04 	addi	r4,r4,4024
  800714:	2709883a 	add	r4,r4,fp
  800718:	20800015 	stw	r2,0(r4)
	 // till her
	 exec_t2 = times(NULL); // get system time after finishing the process
  80071c:	0009883a 	mov	r4,zero
  800720:	080da240 	call	80da24 <times>
  800724:	00fffc34 	movhi	r3,65520
  800728:	18c3f104 	addi	r3,r3,4036
  80072c:	1f07883a 	add	r3,r3,fp
  800730:	18800015 	stw	r2,0(r3)

	 gcvt((exec_t2 - exec_t1), 10, buf);
  800734:	013ffc34 	movhi	r4,65520
  800738:	2103f104 	addi	r4,r4,4036
  80073c:	2709883a 	add	r4,r4,fp
  800740:	20c00017 	ldw	r3,0(r4)
  800744:	013ffc34 	movhi	r4,65520
  800748:	2103f004 	addi	r4,r4,4032
  80074c:	2709883a 	add	r4,r4,fp
  800750:	20800017 	ldw	r2,0(r4)
  800754:	1885c83a 	sub	r2,r3,r2
  800758:	1009883a 	mov	r4,r2
  80075c:	08069e80 	call	8069e8 <__floatunsidf>
  800760:	1011883a 	mov	r8,r2
  800764:	1813883a 	mov	r9,r3
  800768:	00800434 	movhi	r2,16
  80076c:	10bc0504 	addi	r2,r2,-4076
  800770:	00fffc34 	movhi	r3,65520
  800774:	18c3ee04 	addi	r3,r3,4024
  800778:	1f07883a 	add	r3,r3,fp
  80077c:	1885883a 	add	r2,r3,r2
  800780:	100f883a 	mov	r7,r2
  800784:	01800284 	movi	r6,10
  800788:	4009883a 	mov	r4,r8
  80078c:	480b883a 	mov	r5,r9
  800790:	0806ea40 	call	806ea4 <gcvt>
	 alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" ticks \n");
  800794:	01002074 	movhi	r4,129
  800798:	213ebe04 	addi	r4,r4,-1288
  80079c:	080d7600 	call	80d760 <alt_putstr>
  8007a0:	00800434 	movhi	r2,16
  8007a4:	10bc0504 	addi	r2,r2,-4076
  8007a8:	013ffc34 	movhi	r4,65520
  8007ac:	2103ee04 	addi	r4,r4,4024
  8007b0:	2709883a 	add	r4,r4,fp
  8007b4:	2085883a 	add	r2,r4,r2
  8007b8:	1009883a 	mov	r4,r2
  8007bc:	080d7600 	call	80d760 <alt_putstr>
  8007c0:	01002074 	movhi	r4,129
  8007c4:	213ec204 	addi	r4,r4,-1272
  8007c8:	080d7600 	call	80d760 <alt_putstr>
	 // printf could be used if there was enough memory
	 int i;
	 for (i=0; i<10; i++)
  8007cc:	00bffc34 	movhi	r2,65520
  8007d0:	1083ef04 	addi	r2,r2,4028
  8007d4:	1705883a 	add	r2,r2,fp
  8007d8:	10000015 	stw	zero,0(r2)
  8007dc:	00001406 	br	800830 <main+0x1a0>
	 y = y/2.0;
  8007e0:	01500034 	movhi	r5,16384
  8007e4:	00fffc34 	movhi	r3,65520
  8007e8:	18c3ee04 	addi	r3,r3,4024
  8007ec:	1f07883a 	add	r3,r3,fp
  8007f0:	19000017 	ldw	r4,0(r3)
  8007f4:	080357c0 	call	80357c <__divsf3>
  8007f8:	1007883a 	mov	r3,r2
  8007fc:	013ffc34 	movhi	r4,65520
  800800:	2103ee04 	addi	r4,r4,4024
  800804:	2709883a 	add	r4,r4,fp
  800808:	20c00015 	stw	r3,0(r4)

	 gcvt((exec_t2 - exec_t1), 10, buf);
	 alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" ticks \n");
	 // printf could be used if there was enough memory
	 int i;
	 for (i=0; i<10; i++)
  80080c:	00fffc34 	movhi	r3,65520
  800810:	18c3ef04 	addi	r3,r3,4028
  800814:	1f07883a 	add	r3,r3,fp
  800818:	18800017 	ldw	r2,0(r3)
  80081c:	10800044 	addi	r2,r2,1
  800820:	013ffc34 	movhi	r4,65520
  800824:	2103ef04 	addi	r4,r4,4028
  800828:	2709883a 	add	r4,r4,fp
  80082c:	20800015 	stw	r2,0(r4)
  800830:	00fffc34 	movhi	r3,65520
  800834:	18c3ef04 	addi	r3,r3,4028
  800838:	1f07883a 	add	r3,r3,fp
  80083c:	18800017 	ldw	r2,0(r3)
  800840:	10800290 	cmplti	r2,r2,10
  800844:	103fe61e 	bne	r2,zero,8007e0 <__alt_data_end+0xff8007e0>
	 y = y/2.0;
	 gcvt(((int) y), 10, buf);
  800848:	00bffc34 	movhi	r2,65520
  80084c:	1083ee04 	addi	r2,r2,4024
  800850:	1705883a 	add	r2,r2,fp
  800854:	11000017 	ldw	r4,0(r2)
  800858:	08044200 	call	804420 <__fixsfsi>
  80085c:	1009883a 	mov	r4,r2
  800860:	080690c0 	call	80690c <__floatsidf>
  800864:	1011883a 	mov	r8,r2
  800868:	1813883a 	mov	r9,r3
  80086c:	00800434 	movhi	r2,16
  800870:	10bc0504 	addi	r2,r2,-4076
  800874:	00fffc34 	movhi	r3,65520
  800878:	18c3ee04 	addi	r3,r3,4024
  80087c:	1f07883a 	add	r3,r3,fp
  800880:	1885883a 	add	r2,r3,r2
  800884:	100f883a 	mov	r7,r2
  800888:	01800284 	movi	r6,10
  80088c:	4009883a 	mov	r4,r8
  800890:	480b883a 	mov	r5,r9
  800894:	0806ea40 	call	806ea4 <gcvt>

	 alt_putstr(" Result (divided by 1024) = "); alt_putstr(buf);
  800898:	01002074 	movhi	r4,129
  80089c:	213ec504 	addi	r4,r4,-1260
  8008a0:	080d7600 	call	80d760 <alt_putstr>
  8008a4:	00800434 	movhi	r2,16
  8008a8:	10bc0504 	addi	r2,r2,-4076
  8008ac:	013ffc34 	movhi	r4,65520
  8008b0:	2103ee04 	addi	r4,r4,4024
  8008b4:	2709883a 	add	r4,r4,fp
  8008b8:	2085883a 	add	r2,r4,r2
  8008bc:	1009883a 	mov	r4,r2
  8008c0:	080d7600 	call	80d760 <alt_putstr>
	 // printf could be used if there was enough memory
	 return 0;
  8008c4:	0005883a 	mov	r2,zero
}
  8008c8:	e037883a 	mov	sp,fp
  8008cc:	dfc00117 	ldw	ra,4(sp)
  8008d0:	df000017 	ldw	fp,0(sp)
  8008d4:	dec00204 	addi	sp,sp,8
  8008d8:	f800283a 	ret

008008dc <cos>:
  8008dc:	00a00034 	movhi	r2,32768
  8008e0:	defffa04 	addi	sp,sp,-24
  8008e4:	10bfffc4 	addi	r2,r2,-1
  8008e8:	00cffa74 	movhi	r3,16361
  8008ec:	dfc00515 	stw	ra,20(sp)
  8008f0:	2884703a 	and	r2,r5,r2
  8008f4:	18c87ec4 	addi	r3,r3,8699
  8008f8:	1880180e 	bge	r3,r2,80095c <cos+0x80>
  8008fc:	00dffc34 	movhi	r3,32752
  800900:	18ffffc4 	addi	r3,r3,-1
  800904:	1880060e 	bge	r3,r2,800920 <cos+0x44>
  800908:	280f883a 	mov	r7,r5
  80090c:	200d883a 	mov	r6,r4
  800910:	0805f900 	call	805f90 <__subdf3>
  800914:	dfc00517 	ldw	ra,20(sp)
  800918:	dec00604 	addi	sp,sp,24
  80091c:	f800283a 	ret
  800920:	d9800104 	addi	r6,sp,4
  800924:	0800e600 	call	800e60 <__ieee754_rem_pio2>
  800928:	108000cc 	andi	r2,r2,3
  80092c:	00c00044 	movi	r3,1
  800930:	10c01726 	beq	r2,r3,800990 <cos+0xb4>
  800934:	01000084 	movi	r4,2
  800938:	11000e26 	beq	r2,r4,800974 <cos+0x98>
  80093c:	10001c26 	beq	r2,zero,8009b0 <cos+0xd4>
  800940:	d9800317 	ldw	r6,12(sp)
  800944:	d9c00417 	ldw	r7,16(sp)
  800948:	d9000117 	ldw	r4,4(sp)
  80094c:	d9400217 	ldw	r5,8(sp)
  800950:	d8c00015 	stw	r3,0(sp)
  800954:	08028000 	call	802800 <__kernel_sin>
  800958:	003fee06 	br	800914 <__alt_data_end+0xff800914>
  80095c:	000d883a 	mov	r6,zero
  800960:	000f883a 	mov	r7,zero
  800964:	08015cc0 	call	8015cc <__kernel_cos>
  800968:	dfc00517 	ldw	ra,20(sp)
  80096c:	dec00604 	addi	sp,sp,24
  800970:	f800283a 	ret
  800974:	d9800317 	ldw	r6,12(sp)
  800978:	d9c00417 	ldw	r7,16(sp)
  80097c:	d9000117 	ldw	r4,4(sp)
  800980:	d9400217 	ldw	r5,8(sp)
  800984:	08015cc0 	call	8015cc <__kernel_cos>
  800988:	18e0003c 	xorhi	r3,r3,32768
  80098c:	003fe106 	br	800914 <__alt_data_end+0xff800914>
  800990:	d9800317 	ldw	r6,12(sp)
  800994:	d9c00417 	ldw	r7,16(sp)
  800998:	d9000117 	ldw	r4,4(sp)
  80099c:	d9400217 	ldw	r5,8(sp)
  8009a0:	d8800015 	stw	r2,0(sp)
  8009a4:	08028000 	call	802800 <__kernel_sin>
  8009a8:	18e0003c 	xorhi	r3,r3,32768
  8009ac:	003fd906 	br	800914 <__alt_data_end+0xff800914>
  8009b0:	d9800317 	ldw	r6,12(sp)
  8009b4:	d9c00417 	ldw	r7,16(sp)
  8009b8:	d9000117 	ldw	r4,4(sp)
  8009bc:	d9400217 	ldw	r5,8(sp)
  8009c0:	08015cc0 	call	8015cc <__kernel_cos>
  8009c4:	003fd306 	br	800914 <__alt_data_end+0xff800914>

008009c8 <fmod>:
  8009c8:	deffef04 	addi	sp,sp,-68
  8009cc:	dc400a15 	stw	r17,40(sp)
  8009d0:	04402074 	movhi	r17,129
  8009d4:	dd800f15 	stw	r22,60(sp)
  8009d8:	dd400e15 	stw	r21,56(sp)
  8009dc:	dd000d15 	stw	r20,52(sp)
  8009e0:	dcc00c15 	stw	r19,48(sp)
  8009e4:	dc800b15 	stw	r18,44(sp)
  8009e8:	dc000915 	stw	r16,36(sp)
  8009ec:	202b883a 	mov	r21,r4
  8009f0:	dfc01015 	stw	ra,64(sp)
  8009f4:	8c467104 	addi	r17,r17,6596
  8009f8:	2829883a 	mov	r20,r5
  8009fc:	3027883a 	mov	r19,r6
  800a00:	3825883a 	mov	r18,r7
  800a04:	0800b200 	call	800b20 <__ieee754_fmod>
  800a08:	89000017 	ldw	r4,0(r17)
  800a0c:	1021883a 	mov	r16,r2
  800a10:	00bfffc4 	movi	r2,-1
  800a14:	182d883a 	mov	r22,r3
  800a18:	20800426 	beq	r4,r2,800a2c <fmod+0x64>
  800a1c:	9809883a 	mov	r4,r19
  800a20:	900b883a 	mov	r5,r18
  800a24:	0802ccc0 	call	802ccc <__fpclassifyd>
  800a28:	10000c1e 	bne	r2,zero,800a5c <fmod+0x94>
  800a2c:	8005883a 	mov	r2,r16
  800a30:	b007883a 	mov	r3,r22
  800a34:	dfc01017 	ldw	ra,64(sp)
  800a38:	dd800f17 	ldw	r22,60(sp)
  800a3c:	dd400e17 	ldw	r21,56(sp)
  800a40:	dd000d17 	ldw	r20,52(sp)
  800a44:	dcc00c17 	ldw	r19,48(sp)
  800a48:	dc800b17 	ldw	r18,44(sp)
  800a4c:	dc400a17 	ldw	r17,40(sp)
  800a50:	dc000917 	ldw	r16,36(sp)
  800a54:	dec01104 	addi	sp,sp,68
  800a58:	f800283a 	ret
  800a5c:	a809883a 	mov	r4,r21
  800a60:	a00b883a 	mov	r5,r20
  800a64:	0802ccc0 	call	802ccc <__fpclassifyd>
  800a68:	103ff026 	beq	r2,zero,800a2c <__alt_data_end+0xff800a2c>
  800a6c:	000d883a 	mov	r6,zero
  800a70:	000f883a 	mov	r7,zero
  800a74:	9809883a 	mov	r4,r19
  800a78:	900b883a 	mov	r5,r18
  800a7c:	08057140 	call	805714 <__eqdf2>
  800a80:	103fea1e 	bne	r2,zero,800a2c <__alt_data_end+0xff800a2c>
  800a84:	00800044 	movi	r2,1
  800a88:	d8800015 	stw	r2,0(sp)
  800a8c:	8c000017 	ldw	r16,0(r17)
  800a90:	00802074 	movhi	r2,129
  800a94:	10becd04 	addi	r2,r2,-1228
  800a98:	d8800115 	stw	r2,4(sp)
  800a9c:	dd400215 	stw	r21,8(sp)
  800aa0:	dd000315 	stw	r20,12(sp)
  800aa4:	dcc00415 	stw	r19,16(sp)
  800aa8:	dc800515 	stw	r18,20(sp)
  800aac:	d8000815 	stw	zero,32(sp)
  800ab0:	80001126 	beq	r16,zero,800af8 <fmod+0x130>
  800ab4:	000d883a 	mov	r6,zero
  800ab8:	000f883a 	mov	r7,zero
  800abc:	0009883a 	mov	r4,zero
  800ac0:	000b883a 	mov	r5,zero
  800ac4:	0804e2c0 	call	804e2c <__divdf3>
  800ac8:	d8800615 	stw	r2,24(sp)
  800acc:	d8c00715 	stw	r3,28(sp)
  800ad0:	00800084 	movi	r2,2
  800ad4:	80800a1e 	bne	r16,r2,800b00 <fmod+0x138>
  800ad8:	0806f840 	call	806f84 <__errno>
  800adc:	00c00844 	movi	r3,33
  800ae0:	10c00015 	stw	r3,0(r2)
  800ae4:	d8800817 	ldw	r2,32(sp)
  800ae8:	1000091e 	bne	r2,zero,800b10 <fmod+0x148>
  800aec:	d8800617 	ldw	r2,24(sp)
  800af0:	d8c00717 	ldw	r3,28(sp)
  800af4:	003fcf06 	br	800a34 <__alt_data_end+0xff800a34>
  800af8:	dd400615 	stw	r21,24(sp)
  800afc:	dd000715 	stw	r20,28(sp)
  800b00:	d809883a 	mov	r4,sp
  800b04:	0802d400 	call	802d40 <matherr>
  800b08:	103ff61e 	bne	r2,zero,800ae4 <__alt_data_end+0xff800ae4>
  800b0c:	003ff206 	br	800ad8 <__alt_data_end+0xff800ad8>
  800b10:	0806f840 	call	806f84 <__errno>
  800b14:	d8c00817 	ldw	r3,32(sp)
  800b18:	10c00015 	stw	r3,0(r2)
  800b1c:	003ff306 	br	800aec <__alt_data_end+0xff800aec>

00800b20 <__ieee754_fmod>:
  800b20:	00a00034 	movhi	r2,32768
  800b24:	10bfffc4 	addi	r2,r2,-1
  800b28:	deffff04 	addi	sp,sp,-4
  800b2c:	3896703a 	and	r11,r7,r2
  800b30:	dfc00015 	stw	ra,0(sp)
  800b34:	32c4b03a 	or	r2,r6,r11
  800b38:	10001926 	beq	r2,zero,800ba0 <__ieee754_fmod+0x80>
  800b3c:	28e0002c 	andhi	r3,r5,32768
  800b40:	025ffc34 	movhi	r9,32752
  800b44:	28d8f03a 	xor	r12,r5,r3
  800b48:	4a7fffc4 	addi	r9,r9,-1
  800b4c:	4b001416 	blt	r9,r12,800ba0 <__ieee754_fmod+0x80>
  800b50:	0185c83a 	sub	r2,zero,r6
  800b54:	1184b03a 	or	r2,r2,r6
  800b58:	1004d7fa 	srli	r2,r2,31
  800b5c:	025ffc34 	movhi	r9,32752
  800b60:	12c4b03a 	or	r2,r2,r11
  800b64:	48800e36 	bltu	r9,r2,800ba0 <__ieee754_fmod+0x80>
  800b68:	2011883a 	mov	r8,r4
  800b6c:	301d883a 	mov	r14,r6
  800b70:	5b001416 	blt	r11,r12,800bc4 <__ieee754_fmod+0xa4>
  800b74:	62c01e16 	blt	r12,r11,800bf0 <__ieee754_fmod+0xd0>
  800b78:	21801d36 	bltu	r4,r6,800bf0 <__ieee754_fmod+0xd0>
  800b7c:	2180111e 	bne	r4,r6,800bc4 <__ieee754_fmod+0xa4>
  800b80:	1806d7fa 	srli	r3,r3,31
  800b84:	180490fa 	slli	r2,r3,3
  800b88:	00c02074 	movhi	r3,129
  800b8c:	18fecf04 	addi	r3,r3,-1220
  800b90:	1887883a 	add	r3,r3,r2
  800b94:	18800017 	ldw	r2,0(r3)
  800b98:	18c00117 	ldw	r3,4(r3)
  800b9c:	00000606 	br	800bb8 <__ieee754_fmod+0x98>
  800ba0:	08058780 	call	805878 <__muldf3>
  800ba4:	100d883a 	mov	r6,r2
  800ba8:	180f883a 	mov	r7,r3
  800bac:	1009883a 	mov	r4,r2
  800bb0:	180b883a 	mov	r5,r3
  800bb4:	0804e2c0 	call	804e2c <__divdf3>
  800bb8:	dfc00017 	ldw	ra,0(sp)
  800bbc:	dec00104 	addi	sp,sp,4
  800bc0:	f800283a 	ret
  800bc4:	00800434 	movhi	r2,16
  800bc8:	10bfffc4 	addi	r2,r2,-1
  800bcc:	13000b16 	blt	r2,r12,800bfc <__ieee754_fmod+0xdc>
  800bd0:	6000741e 	bne	r12,zero,800da4 <__ieee754_fmod+0x284>
  800bd4:	2013883a 	mov	r9,r4
  800bd8:	02befb44 	movi	r10,-1043
  800bdc:	0100090e 	bge	zero,r4,800c04 <__ieee754_fmod+0xe4>
  800be0:	4a53883a 	add	r9,r9,r9
  800be4:	52bfffc4 	addi	r10,r10,-1
  800be8:	027ffd16 	blt	zero,r9,800be0 <__alt_data_end+0xff800be0>
  800bec:	00000506 	br	800c04 <__ieee754_fmod+0xe4>
  800bf0:	2005883a 	mov	r2,r4
  800bf4:	2807883a 	mov	r3,r5
  800bf8:	003fef06 	br	800bb8 <__alt_data_end+0xff800bb8>
  800bfc:	6015d53a 	srai	r10,r12,20
  800c00:	52bf0044 	addi	r10,r10,-1023
  800c04:	00800434 	movhi	r2,16
  800c08:	10bfffc4 	addi	r2,r2,-1
  800c0c:	12c00816 	blt	r2,r11,800c30 <__ieee754_fmod+0x110>
  800c10:	58006b1e 	bne	r11,zero,800dc0 <__ieee754_fmod+0x2a0>
  800c14:	3013883a 	mov	r9,r6
  800c18:	03fefb44 	movi	r15,-1043
  800c1c:	0180060e 	bge	zero,r6,800c38 <__ieee754_fmod+0x118>
  800c20:	4a53883a 	add	r9,r9,r9
  800c24:	7bffffc4 	addi	r15,r15,-1
  800c28:	027ffd16 	blt	zero,r9,800c20 <__alt_data_end+0xff800c20>
  800c2c:	00000206 	br	800c38 <__ieee754_fmod+0x118>
  800c30:	581fd53a 	srai	r15,r11,20
  800c34:	7bff0044 	addi	r15,r15,-1023
  800c38:	00bf0084 	movi	r2,-1022
  800c3c:	50804d16 	blt	r10,r2,800d74 <__ieee754_fmod+0x254>
  800c40:	00800434 	movhi	r2,16
  800c44:	10bfffc4 	addi	r2,r2,-1
  800c48:	6088703a 	and	r4,r12,r2
  800c4c:	21000434 	orhi	r4,r4,16
  800c50:	00bf0084 	movi	r2,-1022
  800c54:	78803d16 	blt	r15,r2,800d4c <__ieee754_fmod+0x22c>
  800c58:	02400434 	movhi	r9,16
  800c5c:	4a7fffc4 	addi	r9,r9,-1
  800c60:	3a4e703a 	and	r7,r7,r9
  800c64:	39800434 	orhi	r6,r7,16
  800c68:	53d5c83a 	sub	r10,r10,r15
  800c6c:	00000406 	br	800c80 <__ieee754_fmod+0x160>
  800c70:	60001126 	beq	r12,zero,800cb8 <__ieee754_fmod+0x198>
  800c74:	4a51883a 	add	r8,r9,r9
  800c78:	6ac9883a 	add	r4,r13,r11
  800c7c:	52bfffc4 	addi	r10,r10,-1
  800c80:	4393c83a 	sub	r9,r8,r14
  800c84:	4816d7fa 	srli	r11,r9,31
  800c88:	50001326 	beq	r10,zero,800cd8 <__ieee754_fmod+0x1b8>
  800c8c:	218fc83a 	sub	r7,r4,r6
  800c90:	4380012e 	bgeu	r8,r14,800c98 <__ieee754_fmod+0x178>
  800c94:	39ffffc4 	addi	r7,r7,-1
  800c98:	3a58b03a 	or	r12,r7,r9
  800c9c:	39db883a 	add	r13,r7,r7
  800ca0:	383ff30e 	bge	r7,zero,800c70 <__alt_data_end+0xff800c70>
  800ca4:	4004d7fa 	srli	r2,r8,31
  800ca8:	2109883a 	add	r4,r4,r4
  800cac:	4211883a 	add	r8,r8,r8
  800cb0:	2089883a 	add	r4,r4,r2
  800cb4:	003ff106 	br	800c7c <__alt_data_end+0xff800c7c>
  800cb8:	1806d7fa 	srli	r3,r3,31
  800cbc:	00802074 	movhi	r2,129
  800cc0:	10becf04 	addi	r2,r2,-1220
  800cc4:	180690fa 	slli	r3,r3,3
  800cc8:	10c7883a 	add	r3,r2,r3
  800ccc:	18800017 	ldw	r2,0(r3)
  800cd0:	18c00117 	ldw	r3,4(r3)
  800cd4:	003fb806 	br	800bb8 <__alt_data_end+0xff800bb8>
  800cd8:	218dc83a 	sub	r6,r4,r6
  800cdc:	43802f36 	bltu	r8,r14,800d9c <__ieee754_fmod+0x27c>
  800ce0:	30004f16 	blt	r6,zero,800e20 <__ieee754_fmod+0x300>
  800ce4:	4391c83a 	sub	r8,r8,r14
  800ce8:	3204b03a 	or	r2,r6,r8
  800cec:	103ff226 	beq	r2,zero,800cb8 <__alt_data_end+0xff800cb8>
  800cf0:	01000434 	movhi	r4,16
  800cf4:	213fffc4 	addi	r4,r4,-1
  800cf8:	21800616 	blt	r4,r6,800d14 <__ieee754_fmod+0x1f4>
  800cfc:	4004d7fa 	srli	r2,r8,31
  800d00:	318d883a 	add	r6,r6,r6
  800d04:	4211883a 	add	r8,r8,r8
  800d08:	308d883a 	add	r6,r6,r2
  800d0c:	7bffffc4 	addi	r15,r15,-1
  800d10:	21bffa0e 	bge	r4,r6,800cfc <__alt_data_end+0xff800cfc>
  800d14:	01ff0084 	movi	r7,-1022
  800d18:	79c0390e 	bge	r15,r7,800e00 <__ieee754_fmod+0x2e0>
  800d1c:	3bcfc83a 	sub	r7,r7,r15
  800d20:	00800504 	movi	r2,20
  800d24:	11c04016 	blt	r2,r7,800e28 <__ieee754_fmod+0x308>
  800d28:	00800804 	movi	r2,32
  800d2c:	11c5c83a 	sub	r2,r2,r7
  800d30:	41d0d83a 	srl	r8,r8,r7
  800d34:	3084983a 	sll	r2,r6,r2
  800d38:	31cfd83a 	sra	r7,r6,r7
  800d3c:	1208b03a 	or	r4,r2,r8
  800d40:	2005883a 	mov	r2,r4
  800d44:	38c6b03a 	or	r3,r7,r3
  800d48:	003f9b06 	br	800bb8 <__alt_data_end+0xff800bb8>
  800d4c:	13c5c83a 	sub	r2,r2,r15
  800d50:	014007c4 	movi	r5,31
  800d54:	28802516 	blt	r5,r2,800dec <__ieee754_fmod+0x2cc>
  800d58:	01400804 	movi	r5,32
  800d5c:	288bc83a 	sub	r5,r5,r2
  800d60:	314ad83a 	srl	r5,r6,r5
  800d64:	588e983a 	sll	r7,r11,r2
  800d68:	309c983a 	sll	r14,r6,r2
  800d6c:	29ccb03a 	or	r6,r5,r7
  800d70:	003fbd06 	br	800c68 <__alt_data_end+0xff800c68>
  800d74:	1285c83a 	sub	r2,r2,r10
  800d78:	014007c4 	movi	r5,31
  800d7c:	28801616 	blt	r5,r2,800dd8 <__ieee754_fmod+0x2b8>
  800d80:	02400804 	movi	r9,32
  800d84:	4893c83a 	sub	r9,r9,r2
  800d88:	2252d83a 	srl	r9,r4,r9
  800d8c:	608a983a 	sll	r5,r12,r2
  800d90:	2090983a 	sll	r8,r4,r2
  800d94:	4948b03a 	or	r4,r9,r5
  800d98:	003fad06 	br	800c50 <__alt_data_end+0xff800c50>
  800d9c:	31bfffc4 	addi	r6,r6,-1
  800da0:	003fcf06 	br	800ce0 <__alt_data_end+0xff800ce0>
  800da4:	601292fa 	slli	r9,r12,11
  800da8:	02bf0084 	movi	r10,-1022
  800dac:	027f950e 	bge	zero,r9,800c04 <__alt_data_end+0xff800c04>
  800db0:	4a53883a 	add	r9,r9,r9
  800db4:	52bfffc4 	addi	r10,r10,-1
  800db8:	027ffd16 	blt	zero,r9,800db0 <__alt_data_end+0xff800db0>
  800dbc:	003f9106 	br	800c04 <__alt_data_end+0xff800c04>
  800dc0:	581292fa 	slli	r9,r11,11
  800dc4:	03ff0084 	movi	r15,-1022
  800dc8:	4a53883a 	add	r9,r9,r9
  800dcc:	7bffffc4 	addi	r15,r15,-1
  800dd0:	027ffd16 	blt	zero,r9,800dc8 <__alt_data_end+0xff800dc8>
  800dd4:	003f9806 	br	800c38 <__alt_data_end+0xff800c38>
  800dd8:	017ef884 	movi	r5,-1054
  800ddc:	2a8bc83a 	sub	r5,r5,r10
  800de0:	2148983a 	sll	r4,r4,r5
  800de4:	0011883a 	mov	r8,zero
  800de8:	003f9906 	br	800c50 <__alt_data_end+0xff800c50>
  800dec:	00bef884 	movi	r2,-1054
  800df0:	13c5c83a 	sub	r2,r2,r15
  800df4:	308c983a 	sll	r6,r6,r2
  800df8:	001d883a 	mov	r14,zero
  800dfc:	003f9a06 	br	800c68 <__alt_data_end+0xff800c68>
  800e00:	7900ffc4 	addi	r4,r15,1023
  800e04:	00bffc34 	movhi	r2,65520
  800e08:	2008953a 	slli	r4,r4,20
  800e0c:	308d883a 	add	r6,r6,r2
  800e10:	30c6b03a 	or	r3,r6,r3
  800e14:	4005883a 	mov	r2,r8
  800e18:	1906b03a 	or	r3,r3,r4
  800e1c:	003f6606 	br	800bb8 <__alt_data_end+0xff800bb8>
  800e20:	200d883a 	mov	r6,r4
  800e24:	003fb006 	br	800ce8 <__alt_data_end+0xff800ce8>
  800e28:	008007c4 	movi	r2,31
  800e2c:	11c00716 	blt	r2,r7,800e4c <__ieee754_fmod+0x32c>
  800e30:	01000804 	movi	r4,32
  800e34:	21c9c83a 	sub	r4,r4,r7
  800e38:	41d0d83a 	srl	r8,r8,r7
  800e3c:	310c983a 	sll	r6,r6,r4
  800e40:	180f883a 	mov	r7,r3
  800e44:	3208b03a 	or	r4,r6,r8
  800e48:	003fbd06 	br	800d40 <__alt_data_end+0xff800d40>
  800e4c:	013ef884 	movi	r4,-1054
  800e50:	23c9c83a 	sub	r4,r4,r15
  800e54:	3109d83a 	sra	r4,r6,r4
  800e58:	180f883a 	mov	r7,r3
  800e5c:	003fb806 	br	800d40 <__alt_data_end+0xff800d40>

00800e60 <__ieee754_rem_pio2>:
  800e60:	02200034 	movhi	r8,32768
  800e64:	deffea04 	addi	sp,sp,-88
  800e68:	423fffc4 	addi	r8,r8,-1
  800e6c:	00cffa74 	movhi	r3,16361
  800e70:	ddc01315 	stw	r23,76(sp)
  800e74:	dc400d15 	stw	r17,52(sp)
  800e78:	dfc01515 	stw	ra,84(sp)
  800e7c:	df001415 	stw	fp,80(sp)
  800e80:	dd801215 	stw	r22,72(sp)
  800e84:	dd401115 	stw	r21,68(sp)
  800e88:	dd001015 	stw	r20,64(sp)
  800e8c:	dcc00f15 	stw	r19,60(sp)
  800e90:	dc800e15 	stw	r18,56(sp)
  800e94:	dc000c15 	stw	r16,48(sp)
  800e98:	2a2e703a 	and	r23,r5,r8
  800e9c:	18c87ec4 	addi	r3,r3,8699
  800ea0:	2823883a 	mov	r17,r5
  800ea4:	1dc0790e 	bge	r3,r23,80108c <__ieee754_rem_pio2+0x22c>
  800ea8:	009000f4 	movhi	r2,16387
  800eac:	10b65ec4 	addi	r2,r2,-9861
  800eb0:	3021883a 	mov	r16,r6
  800eb4:	2027883a 	mov	r19,r4
  800eb8:	15c02316 	blt	r2,r23,800f48 <__ieee754_rem_pio2+0xe8>
  800ebc:	01cffe74 	movhi	r7,16377
  800ec0:	39c87ec4 	addi	r7,r7,8699
  800ec4:	01951034 	movhi	r6,21568
  800ec8:	01417a0e 	bge	zero,r5,8014b4 <__ieee754_rem_pio2+0x654>
  800ecc:	0805f900 	call	805f90 <__subdf3>
  800ed0:	1025883a 	mov	r18,r2
  800ed4:	008ffe74 	movhi	r2,16377
  800ed8:	10887ec4 	addi	r2,r2,8699
  800edc:	1823883a 	mov	r17,r3
  800ee0:	b8808426 	beq	r23,r2,8010f4 <__ieee754_rem_pio2+0x294>
  800ee4:	018698b4 	movhi	r6,6754
  800ee8:	01cf7474 	movhi	r7,15825
  800eec:	3198cc44 	addi	r6,r6,25393
  800ef0:	39ed1844 	addi	r7,r7,-19359
  800ef4:	9009883a 	mov	r4,r18
  800ef8:	180b883a 	mov	r5,r3
  800efc:	0805f900 	call	805f90 <__subdf3>
  800f00:	100d883a 	mov	r6,r2
  800f04:	180f883a 	mov	r7,r3
  800f08:	9009883a 	mov	r4,r18
  800f0c:	880b883a 	mov	r5,r17
  800f10:	80800015 	stw	r2,0(r16)
  800f14:	80c00115 	stw	r3,4(r16)
  800f18:	0805f900 	call	805f90 <__subdf3>
  800f1c:	018698b4 	movhi	r6,6754
  800f20:	01cf7474 	movhi	r7,15825
  800f24:	3198cc44 	addi	r6,r6,25393
  800f28:	39ed1844 	addi	r7,r7,-19359
  800f2c:	1009883a 	mov	r4,r2
  800f30:	180b883a 	mov	r5,r3
  800f34:	0805f900 	call	805f90 <__subdf3>
  800f38:	80800215 	stw	r2,8(r16)
  800f3c:	80c00315 	stw	r3,12(r16)
  800f40:	00800044 	movi	r2,1
  800f44:	00005606 	br	8010a0 <__ieee754_rem_pio2+0x240>
  800f48:	00904e74 	movhi	r2,16697
  800f4c:	10887ec4 	addi	r2,r2,8699
  800f50:	15c0830e 	bge	r2,r23,801160 <__ieee754_rem_pio2+0x300>
  800f54:	009ffc34 	movhi	r2,32752
  800f58:	10bfffc4 	addi	r2,r2,-1
  800f5c:	15c05c16 	blt	r2,r23,8010d0 <__ieee754_rem_pio2+0x270>
  800f60:	b829d53a 	srai	r20,r23,20
  800f64:	a53efa84 	addi	r20,r20,-1046
  800f68:	a024953a 	slli	r18,r20,20
  800f6c:	bca5c83a 	sub	r18,r23,r18
  800f70:	900b883a 	mov	r5,r18
  800f74:	080688c0 	call	80688c <__fixdfsi>
  800f78:	1009883a 	mov	r4,r2
  800f7c:	080690c0 	call	80690c <__floatsidf>
  800f80:	9809883a 	mov	r4,r19
  800f84:	900b883a 	mov	r5,r18
  800f88:	100d883a 	mov	r6,r2
  800f8c:	180f883a 	mov	r7,r3
  800f90:	d8800215 	stw	r2,8(sp)
  800f94:	d8c00315 	stw	r3,12(sp)
  800f98:	0805f900 	call	805f90 <__subdf3>
  800f9c:	000d883a 	mov	r6,zero
  800fa0:	01d05c34 	movhi	r7,16752
  800fa4:	1009883a 	mov	r4,r2
  800fa8:	180b883a 	mov	r5,r3
  800fac:	08058780 	call	805878 <__muldf3>
  800fb0:	180b883a 	mov	r5,r3
  800fb4:	1009883a 	mov	r4,r2
  800fb8:	182b883a 	mov	r21,r3
  800fbc:	102d883a 	mov	r22,r2
  800fc0:	080688c0 	call	80688c <__fixdfsi>
  800fc4:	1009883a 	mov	r4,r2
  800fc8:	080690c0 	call	80690c <__floatsidf>
  800fcc:	100d883a 	mov	r6,r2
  800fd0:	180f883a 	mov	r7,r3
  800fd4:	b009883a 	mov	r4,r22
  800fd8:	a80b883a 	mov	r5,r21
  800fdc:	1027883a 	mov	r19,r2
  800fe0:	1825883a 	mov	r18,r3
  800fe4:	d8800415 	stw	r2,16(sp)
  800fe8:	d8c00515 	stw	r3,20(sp)
  800fec:	0805f900 	call	805f90 <__subdf3>
  800ff0:	000d883a 	mov	r6,zero
  800ff4:	01d05c34 	movhi	r7,16752
  800ff8:	1009883a 	mov	r4,r2
  800ffc:	180b883a 	mov	r5,r3
  801000:	08058780 	call	805878 <__muldf3>
  801004:	000d883a 	mov	r6,zero
  801008:	000f883a 	mov	r7,zero
  80100c:	1009883a 	mov	r4,r2
  801010:	180b883a 	mov	r5,r3
  801014:	d8800615 	stw	r2,24(sp)
  801018:	d8c00715 	stw	r3,28(sp)
  80101c:	08057140 	call	805714 <__eqdf2>
  801020:	1001431e 	bne	r2,zero,801530 <__ieee754_rem_pio2+0x6d0>
  801024:	000f883a 	mov	r7,zero
  801028:	000d883a 	mov	r6,zero
  80102c:	9809883a 	mov	r4,r19
  801030:	900b883a 	mov	r5,r18
  801034:	08057140 	call	805714 <__eqdf2>
  801038:	100f003a 	cmpeq	r7,r2,zero
  80103c:	00800084 	movi	r2,2
  801040:	11cfc83a 	sub	r7,r2,r7
  801044:	00800084 	movi	r2,2
  801048:	d8800015 	stw	r2,0(sp)
  80104c:	00802074 	movhi	r2,129
  801050:	10bef304 	addi	r2,r2,-1076
  801054:	d8800115 	stw	r2,4(sp)
  801058:	a00d883a 	mov	r6,r20
  80105c:	800b883a 	mov	r5,r16
  801060:	d9000204 	addi	r4,sp,8
  801064:	0801a700 	call	801a70 <__kernel_rem_pio2>
  801068:	88000d0e 	bge	r17,zero,8010a0 <__ieee754_rem_pio2+0x240>
  80106c:	81000117 	ldw	r4,4(r16)
  801070:	80c00317 	ldw	r3,12(r16)
  801074:	0085c83a 	sub	r2,zero,r2
  801078:	2120003c 	xorhi	r4,r4,32768
  80107c:	18e0003c 	xorhi	r3,r3,32768
  801080:	81000115 	stw	r4,4(r16)
  801084:	80c00315 	stw	r3,12(r16)
  801088:	00000506 	br	8010a0 <__ieee754_rem_pio2+0x240>
  80108c:	31000015 	stw	r4,0(r6)
  801090:	31400115 	stw	r5,4(r6)
  801094:	30000215 	stw	zero,8(r6)
  801098:	30000315 	stw	zero,12(r6)
  80109c:	0005883a 	mov	r2,zero
  8010a0:	dfc01517 	ldw	ra,84(sp)
  8010a4:	df001417 	ldw	fp,80(sp)
  8010a8:	ddc01317 	ldw	r23,76(sp)
  8010ac:	dd801217 	ldw	r22,72(sp)
  8010b0:	dd401117 	ldw	r21,68(sp)
  8010b4:	dd001017 	ldw	r20,64(sp)
  8010b8:	dcc00f17 	ldw	r19,60(sp)
  8010bc:	dc800e17 	ldw	r18,56(sp)
  8010c0:	dc400d17 	ldw	r17,52(sp)
  8010c4:	dc000c17 	ldw	r16,48(sp)
  8010c8:	dec01604 	addi	sp,sp,88
  8010cc:	f800283a 	ret
  8010d0:	200d883a 	mov	r6,r4
  8010d4:	280f883a 	mov	r7,r5
  8010d8:	0805f900 	call	805f90 <__subdf3>
  8010dc:	80800215 	stw	r2,8(r16)
  8010e0:	80800015 	stw	r2,0(r16)
  8010e4:	80c00315 	stw	r3,12(r16)
  8010e8:	80c00115 	stw	r3,4(r16)
  8010ec:	0005883a 	mov	r2,zero
  8010f0:	003feb06 	br	8010a0 <__alt_data_end+0xff8010a0>
  8010f4:	01cf7474 	movhi	r7,15825
  8010f8:	9009883a 	mov	r4,r18
  8010fc:	39ed1844 	addi	r7,r7,-19359
  801100:	01869834 	movhi	r6,6752
  801104:	180b883a 	mov	r5,r3
  801108:	0805f900 	call	805f90 <__subdf3>
  80110c:	018b80f4 	movhi	r6,11779
  801110:	01cee8f4 	movhi	r7,15267
  801114:	319c1cc4 	addi	r6,r6,28787
  801118:	39c66284 	addi	r7,r7,6538
  80111c:	1009883a 	mov	r4,r2
  801120:	180b883a 	mov	r5,r3
  801124:	1025883a 	mov	r18,r2
  801128:	1823883a 	mov	r17,r3
  80112c:	0805f900 	call	805f90 <__subdf3>
  801130:	100d883a 	mov	r6,r2
  801134:	180f883a 	mov	r7,r3
  801138:	9009883a 	mov	r4,r18
  80113c:	880b883a 	mov	r5,r17
  801140:	80800015 	stw	r2,0(r16)
  801144:	80c00115 	stw	r3,4(r16)
  801148:	0805f900 	call	805f90 <__subdf3>
  80114c:	018b80f4 	movhi	r6,11779
  801150:	01cee8f4 	movhi	r7,15267
  801154:	319c1cc4 	addi	r6,r6,28787
  801158:	39c66284 	addi	r7,r7,6538
  80115c:	003f7306 	br	800f2c <__alt_data_end+0xff800f2c>
  801160:	0802acc0 	call	802acc <fabs>
  801164:	019b72b4 	movhi	r6,28106
  801168:	01cff934 	movhi	r7,16356
  80116c:	31b220c4 	addi	r6,r6,-14205
  801170:	39d7cc04 	addi	r7,r7,24368
  801174:	1009883a 	mov	r4,r2
  801178:	180b883a 	mov	r5,r3
  80117c:	102d883a 	mov	r22,r2
  801180:	182b883a 	mov	r21,r3
  801184:	08058780 	call	805878 <__muldf3>
  801188:	000d883a 	mov	r6,zero
  80118c:	01cff834 	movhi	r7,16352
  801190:	1009883a 	mov	r4,r2
  801194:	180b883a 	mov	r5,r3
  801198:	08045800 	call	804580 <__adddf3>
  80119c:	180b883a 	mov	r5,r3
  8011a0:	1009883a 	mov	r4,r2
  8011a4:	080688c0 	call	80688c <__fixdfsi>
  8011a8:	1009883a 	mov	r4,r2
  8011ac:	1025883a 	mov	r18,r2
  8011b0:	080690c0 	call	80690c <__floatsidf>
  8011b4:	01cffe74 	movhi	r7,16377
  8011b8:	39c87ec4 	addi	r7,r7,8699
  8011bc:	01951034 	movhi	r6,21568
  8011c0:	1009883a 	mov	r4,r2
  8011c4:	180b883a 	mov	r5,r3
  8011c8:	1029883a 	mov	r20,r2
  8011cc:	1827883a 	mov	r19,r3
  8011d0:	08058780 	call	805878 <__muldf3>
  8011d4:	b009883a 	mov	r4,r22
  8011d8:	a80b883a 	mov	r5,r21
  8011dc:	100d883a 	mov	r6,r2
  8011e0:	180f883a 	mov	r7,r3
  8011e4:	0805f900 	call	805f90 <__subdf3>
  8011e8:	018698b4 	movhi	r6,6754
  8011ec:	01cf7474 	movhi	r7,15825
  8011f0:	a009883a 	mov	r4,r20
  8011f4:	3198cc44 	addi	r6,r6,25393
  8011f8:	39ed1844 	addi	r7,r7,-19359
  8011fc:	980b883a 	mov	r5,r19
  801200:	1039883a 	mov	fp,r2
  801204:	d8c00815 	stw	r3,32(sp)
  801208:	08058780 	call	805878 <__muldf3>
  80120c:	010007c4 	movi	r4,31
  801210:	e017883a 	mov	r11,fp
  801214:	da800817 	ldw	r10,32(sp)
  801218:	102d883a 	mov	r22,r2
  80121c:	182b883a 	mov	r21,r3
  801220:	24802816 	blt	r4,r18,8012c4 <__ieee754_rem_pio2+0x464>
  801224:	913fffc4 	addi	r4,r18,-1
  801228:	2109883a 	add	r4,r4,r4
  80122c:	01402074 	movhi	r5,129
  801230:	2109883a 	add	r4,r4,r4
  801234:	297ed304 	addi	r5,r5,-1204
  801238:	2909883a 	add	r4,r5,r4
  80123c:	21000017 	ldw	r4,0(r4)
  801240:	b9002026 	beq	r23,r4,8012c4 <__ieee754_rem_pio2+0x464>
  801244:	100d883a 	mov	r6,r2
  801248:	180f883a 	mov	r7,r3
  80124c:	e009883a 	mov	r4,fp
  801250:	500b883a 	mov	r5,r10
  801254:	da800b15 	stw	r10,44(sp)
  801258:	df000a15 	stw	fp,40(sp)
  80125c:	0805f900 	call	805f90 <__subdf3>
  801260:	da800b17 	ldw	r10,44(sp)
  801264:	dac00a17 	ldw	r11,40(sp)
  801268:	1019883a 	mov	r12,r2
  80126c:	1813883a 	mov	r9,r3
  801270:	80800015 	stw	r2,0(r16)
  801274:	80c00115 	stw	r3,4(r16)
  801278:	600d883a 	mov	r6,r12
  80127c:	480f883a 	mov	r7,r9
  801280:	5809883a 	mov	r4,r11
  801284:	500b883a 	mov	r5,r10
  801288:	da400b15 	stw	r9,44(sp)
  80128c:	db000a15 	stw	r12,40(sp)
  801290:	0805f900 	call	805f90 <__subdf3>
  801294:	b00d883a 	mov	r6,r22
  801298:	a80f883a 	mov	r7,r21
  80129c:	1009883a 	mov	r4,r2
  8012a0:	180b883a 	mov	r5,r3
  8012a4:	0805f900 	call	805f90 <__subdf3>
  8012a8:	80800215 	stw	r2,8(r16)
  8012ac:	80c00315 	stw	r3,12(r16)
  8012b0:	da400b17 	ldw	r9,44(sp)
  8012b4:	db000a17 	ldw	r12,40(sp)
  8012b8:	88009f16 	blt	r17,zero,801538 <__ieee754_rem_pio2+0x6d8>
  8012bc:	9005883a 	mov	r2,r18
  8012c0:	003f7706 	br	8010a0 <__alt_data_end+0xff8010a0>
  8012c4:	d9400817 	ldw	r5,32(sp)
  8012c8:	100d883a 	mov	r6,r2
  8012cc:	180f883a 	mov	r7,r3
  8012d0:	e009883a 	mov	r4,fp
  8012d4:	da800b15 	stw	r10,44(sp)
  8012d8:	dac00a15 	stw	r11,40(sp)
  8012dc:	0805f900 	call	805f90 <__subdf3>
  8012e0:	1019883a 	mov	r12,r2
  8012e4:	1804d53a 	srli	r2,r3,20
  8012e8:	b811d53a 	srai	r8,r23,20
  8012ec:	1813883a 	mov	r9,r3
  8012f0:	1081ffcc 	andi	r2,r2,2047
  8012f4:	80c00115 	stw	r3,4(r16)
  8012f8:	83000015 	stw	r12,0(r16)
  8012fc:	4085c83a 	sub	r2,r8,r2
  801300:	00c00404 	movi	r3,16
  801304:	da800b17 	ldw	r10,44(sp)
  801308:	dac00a17 	ldw	r11,40(sp)
  80130c:	18bfda0e 	bge	r3,r2,801278 <__alt_data_end+0xff801278>
  801310:	01cf7474 	movhi	r7,15825
  801314:	39ed1844 	addi	r7,r7,-19359
  801318:	01869834 	movhi	r6,6752
  80131c:	a009883a 	mov	r4,r20
  801320:	980b883a 	mov	r5,r19
  801324:	da000a15 	stw	r8,40(sp)
  801328:	08058780 	call	805878 <__muldf3>
  80132c:	d9400817 	ldw	r5,32(sp)
  801330:	100d883a 	mov	r6,r2
  801334:	180f883a 	mov	r7,r3
  801338:	e009883a 	mov	r4,fp
  80133c:	102d883a 	mov	r22,r2
  801340:	182b883a 	mov	r21,r3
  801344:	0805f900 	call	805f90 <__subdf3>
  801348:	d9400817 	ldw	r5,32(sp)
  80134c:	100d883a 	mov	r6,r2
  801350:	180f883a 	mov	r7,r3
  801354:	e009883a 	mov	r4,fp
  801358:	182f883a 	mov	r23,r3
  80135c:	d8800915 	stw	r2,36(sp)
  801360:	0805f900 	call	805f90 <__subdf3>
  801364:	b00d883a 	mov	r6,r22
  801368:	a80f883a 	mov	r7,r21
  80136c:	1009883a 	mov	r4,r2
  801370:	180b883a 	mov	r5,r3
  801374:	0805f900 	call	805f90 <__subdf3>
  801378:	018b80f4 	movhi	r6,11779
  80137c:	01cee8f4 	movhi	r7,15267
  801380:	319c1cc4 	addi	r6,r6,28787
  801384:	39c66284 	addi	r7,r7,6538
  801388:	a009883a 	mov	r4,r20
  80138c:	980b883a 	mov	r5,r19
  801390:	102d883a 	mov	r22,r2
  801394:	182b883a 	mov	r21,r3
  801398:	08058780 	call	805878 <__muldf3>
  80139c:	b00d883a 	mov	r6,r22
  8013a0:	a80f883a 	mov	r7,r21
  8013a4:	1009883a 	mov	r4,r2
  8013a8:	180b883a 	mov	r5,r3
  8013ac:	0805f900 	call	805f90 <__subdf3>
  8013b0:	d9000917 	ldw	r4,36(sp)
  8013b4:	100d883a 	mov	r6,r2
  8013b8:	180f883a 	mov	r7,r3
  8013bc:	b80b883a 	mov	r5,r23
  8013c0:	102d883a 	mov	r22,r2
  8013c4:	182b883a 	mov	r21,r3
  8013c8:	0805f900 	call	805f90 <__subdf3>
  8013cc:	1019883a 	mov	r12,r2
  8013d0:	1804d53a 	srli	r2,r3,20
  8013d4:	da000a17 	ldw	r8,40(sp)
  8013d8:	83000015 	stw	r12,0(r16)
  8013dc:	1081ffcc 	andi	r2,r2,2047
  8013e0:	4091c83a 	sub	r8,r8,r2
  8013e4:	80c00115 	stw	r3,4(r16)
  8013e8:	00800c44 	movi	r2,49
  8013ec:	1813883a 	mov	r9,r3
  8013f0:	1200730e 	bge	r2,r8,8015c0 <__ieee754_rem_pio2+0x760>
  8013f4:	01cee8f4 	movhi	r7,15267
  8013f8:	39c66284 	addi	r7,r7,6538
  8013fc:	018b8034 	movhi	r6,11776
  801400:	a009883a 	mov	r4,r20
  801404:	980b883a 	mov	r5,r19
  801408:	08058780 	call	805878 <__muldf3>
  80140c:	d9000917 	ldw	r4,36(sp)
  801410:	100d883a 	mov	r6,r2
  801414:	180f883a 	mov	r7,r3
  801418:	b80b883a 	mov	r5,r23
  80141c:	102d883a 	mov	r22,r2
  801420:	182b883a 	mov	r21,r3
  801424:	0805f900 	call	805f90 <__subdf3>
  801428:	d9000917 	ldw	r4,36(sp)
  80142c:	100d883a 	mov	r6,r2
  801430:	180f883a 	mov	r7,r3
  801434:	b80b883a 	mov	r5,r23
  801438:	d8c00b15 	stw	r3,44(sp)
  80143c:	d8800a15 	stw	r2,40(sp)
  801440:	0805f900 	call	805f90 <__subdf3>
  801444:	b00d883a 	mov	r6,r22
  801448:	a80f883a 	mov	r7,r21
  80144c:	1009883a 	mov	r4,r2
  801450:	180b883a 	mov	r5,r3
  801454:	0805f900 	call	805f90 <__subdf3>
  801458:	01894834 	movhi	r6,9504
  80145c:	01ce5f34 	movhi	r7,14716
  801460:	31927044 	addi	r6,r6,18881
  801464:	39e0e684 	addi	r7,r7,-31846
  801468:	a009883a 	mov	r4,r20
  80146c:	980b883a 	mov	r5,r19
  801470:	102d883a 	mov	r22,r2
  801474:	182b883a 	mov	r21,r3
  801478:	08058780 	call	805878 <__muldf3>
  80147c:	b00d883a 	mov	r6,r22
  801480:	a80f883a 	mov	r7,r21
  801484:	1009883a 	mov	r4,r2
  801488:	180b883a 	mov	r5,r3
  80148c:	0805f900 	call	805f90 <__subdf3>
  801490:	dac00a17 	ldw	r11,40(sp)
  801494:	da800b17 	ldw	r10,44(sp)
  801498:	102d883a 	mov	r22,r2
  80149c:	182b883a 	mov	r21,r3
  8014a0:	100d883a 	mov	r6,r2
  8014a4:	180f883a 	mov	r7,r3
  8014a8:	5809883a 	mov	r4,r11
  8014ac:	500b883a 	mov	r5,r10
  8014b0:	003f6a06 	br	80125c <__alt_data_end+0xff80125c>
  8014b4:	08045800 	call	804580 <__adddf3>
  8014b8:	1025883a 	mov	r18,r2
  8014bc:	008ffe74 	movhi	r2,16377
  8014c0:	10887ec4 	addi	r2,r2,8699
  8014c4:	1823883a 	mov	r17,r3
  8014c8:	b8802226 	beq	r23,r2,801554 <__ieee754_rem_pio2+0x6f4>
  8014cc:	018698b4 	movhi	r6,6754
  8014d0:	01cf7474 	movhi	r7,15825
  8014d4:	3198cc44 	addi	r6,r6,25393
  8014d8:	39ed1844 	addi	r7,r7,-19359
  8014dc:	9009883a 	mov	r4,r18
  8014e0:	180b883a 	mov	r5,r3
  8014e4:	08045800 	call	804580 <__adddf3>
  8014e8:	100d883a 	mov	r6,r2
  8014ec:	180f883a 	mov	r7,r3
  8014f0:	9009883a 	mov	r4,r18
  8014f4:	880b883a 	mov	r5,r17
  8014f8:	80800015 	stw	r2,0(r16)
  8014fc:	80c00115 	stw	r3,4(r16)
  801500:	0805f900 	call	805f90 <__subdf3>
  801504:	018698b4 	movhi	r6,6754
  801508:	01cf7474 	movhi	r7,15825
  80150c:	3198cc44 	addi	r6,r6,25393
  801510:	39ed1844 	addi	r7,r7,-19359
  801514:	1009883a 	mov	r4,r2
  801518:	180b883a 	mov	r5,r3
  80151c:	08045800 	call	804580 <__adddf3>
  801520:	80800215 	stw	r2,8(r16)
  801524:	80c00315 	stw	r3,12(r16)
  801528:	00bfffc4 	movi	r2,-1
  80152c:	003edc06 	br	8010a0 <__alt_data_end+0xff8010a0>
  801530:	01c000c4 	movi	r7,3
  801534:	003ec306 	br	801044 <__alt_data_end+0xff801044>
  801538:	4a60003c 	xorhi	r9,r9,32768
  80153c:	18e0003c 	xorhi	r3,r3,32768
  801540:	83000015 	stw	r12,0(r16)
  801544:	82400115 	stw	r9,4(r16)
  801548:	80c00315 	stw	r3,12(r16)
  80154c:	0485c83a 	sub	r2,zero,r18
  801550:	003ed306 	br	8010a0 <__alt_data_end+0xff8010a0>
  801554:	01cf7474 	movhi	r7,15825
  801558:	9009883a 	mov	r4,r18
  80155c:	39ed1844 	addi	r7,r7,-19359
  801560:	01869834 	movhi	r6,6752
  801564:	180b883a 	mov	r5,r3
  801568:	08045800 	call	804580 <__adddf3>
  80156c:	018b80f4 	movhi	r6,11779
  801570:	01cee8f4 	movhi	r7,15267
  801574:	319c1cc4 	addi	r6,r6,28787
  801578:	39c66284 	addi	r7,r7,6538
  80157c:	1009883a 	mov	r4,r2
  801580:	180b883a 	mov	r5,r3
  801584:	1025883a 	mov	r18,r2
  801588:	1823883a 	mov	r17,r3
  80158c:	08045800 	call	804580 <__adddf3>
  801590:	100d883a 	mov	r6,r2
  801594:	180f883a 	mov	r7,r3
  801598:	9009883a 	mov	r4,r18
  80159c:	880b883a 	mov	r5,r17
  8015a0:	80800015 	stw	r2,0(r16)
  8015a4:	80c00115 	stw	r3,4(r16)
  8015a8:	0805f900 	call	805f90 <__subdf3>
  8015ac:	018b80f4 	movhi	r6,11779
  8015b0:	01cee8f4 	movhi	r7,15267
  8015b4:	319c1cc4 	addi	r6,r6,28787
  8015b8:	39c66284 	addi	r7,r7,6538
  8015bc:	003fd506 	br	801514 <__alt_data_end+0xff801514>
  8015c0:	dac00917 	ldw	r11,36(sp)
  8015c4:	b815883a 	mov	r10,r23
  8015c8:	003f2b06 	br	801278 <__alt_data_end+0xff801278>

008015cc <__kernel_cos>:
  8015cc:	defff304 	addi	sp,sp,-52
  8015d0:	dc000315 	stw	r16,12(sp)
  8015d4:	04200034 	movhi	r16,32768
  8015d8:	843fffc4 	addi	r16,r16,-1
  8015dc:	008f9034 	movhi	r2,15936
  8015e0:	df000b15 	stw	fp,44(sp)
  8015e4:	ddc00a15 	stw	r23,40(sp)
  8015e8:	dd800915 	stw	r22,36(sp)
  8015ec:	dcc00615 	stw	r19,24(sp)
  8015f0:	dfc00c15 	stw	ra,48(sp)
  8015f4:	dd400815 	stw	r21,32(sp)
  8015f8:	dd000715 	stw	r20,28(sp)
  8015fc:	dc800515 	stw	r18,20(sp)
  801600:	dc400415 	stw	r17,16(sp)
  801604:	2c20703a 	and	r16,r5,r16
  801608:	10bfffc4 	addi	r2,r2,-1
  80160c:	2827883a 	mov	r19,r5
  801610:	202d883a 	mov	r22,r4
  801614:	302f883a 	mov	r23,r6
  801618:	3839883a 	mov	fp,r7
  80161c:	14007516 	blt	r2,r16,8017f4 <__kernel_cos+0x228>
  801620:	080688c0 	call	80688c <__fixdfsi>
  801624:	10010f26 	beq	r2,zero,801a64 <__kernel_cos+0x498>
  801628:	b00d883a 	mov	r6,r22
  80162c:	980f883a 	mov	r7,r19
  801630:	b009883a 	mov	r4,r22
  801634:	980b883a 	mov	r5,r19
  801638:	08058780 	call	805878 <__muldf3>
  80163c:	01afa234 	movhi	r6,48776
  801640:	01ef6a74 	movhi	r7,48553
  801644:	318e3504 	addi	r6,r6,14548
  801648:	39feba44 	addi	r7,r7,-1303
  80164c:	1009883a 	mov	r4,r2
  801650:	180b883a 	mov	r5,r3
  801654:	102b883a 	mov	r21,r2
  801658:	1829883a 	mov	r20,r3
  80165c:	08058780 	call	805878 <__muldf3>
  801660:	01af6d74 	movhi	r6,48565
  801664:	01cf88b4 	movhi	r7,15906
  801668:	31ac7104 	addi	r6,r6,-20028
  80166c:	39fba784 	addi	r7,r7,-4450
  801670:	1009883a 	mov	r4,r2
  801674:	180b883a 	mov	r5,r3
  801678:	08045800 	call	804580 <__adddf3>
  80167c:	a80d883a 	mov	r6,r21
  801680:	a00f883a 	mov	r7,r20
  801684:	1009883a 	mov	r4,r2
  801688:	180b883a 	mov	r5,r3
  80168c:	08058780 	call	805878 <__muldf3>
  801690:	01a02734 	movhi	r6,32924
  801694:	01cfa4b4 	movhi	r7,16018
  801698:	3194ab44 	addi	r6,r6,21165
  80169c:	39df93c4 	addi	r7,r7,32335
  8016a0:	1009883a 	mov	r4,r2
  8016a4:	180b883a 	mov	r5,r3
  8016a8:	0805f900 	call	805f90 <__subdf3>
  8016ac:	a80d883a 	mov	r6,r21
  8016b0:	a00f883a 	mov	r7,r20
  8016b4:	1009883a 	mov	r4,r2
  8016b8:	180b883a 	mov	r5,r3
  8016bc:	08058780 	call	805878 <__muldf3>
  8016c0:	018672f4 	movhi	r6,6603
  8016c4:	01cfbeb4 	movhi	r7,16122
  8016c8:	31856404 	addi	r6,r6,5520
  8016cc:	39c06804 	addi	r7,r7,416
  8016d0:	1009883a 	mov	r4,r2
  8016d4:	180b883a 	mov	r5,r3
  8016d8:	08045800 	call	804580 <__adddf3>
  8016dc:	a80d883a 	mov	r6,r21
  8016e0:	a00f883a 	mov	r7,r20
  8016e4:	1009883a 	mov	r4,r2
  8016e8:	180b883a 	mov	r5,r3
  8016ec:	08058780 	call	805878 <__muldf3>
  8016f0:	0185b074 	movhi	r6,5825
  8016f4:	01cfd5f4 	movhi	r7,16215
  8016f8:	31945dc4 	addi	r6,r6,20855
  8016fc:	39f05b04 	addi	r7,r7,-16020
  801700:	1009883a 	mov	r4,r2
  801704:	180b883a 	mov	r5,r3
  801708:	0805f900 	call	805f90 <__subdf3>
  80170c:	a80d883a 	mov	r6,r21
  801710:	a00f883a 	mov	r7,r20
  801714:	1009883a 	mov	r4,r2
  801718:	180b883a 	mov	r5,r3
  80171c:	08058780 	call	805878 <__muldf3>
  801720:	01955574 	movhi	r6,21845
  801724:	01cfe974 	movhi	r7,16293
  801728:	31955304 	addi	r6,r6,21836
  80172c:	39d55544 	addi	r7,r7,21845
  801730:	1009883a 	mov	r4,r2
  801734:	180b883a 	mov	r5,r3
  801738:	08045800 	call	804580 <__adddf3>
  80173c:	a80d883a 	mov	r6,r21
  801740:	a00f883a 	mov	r7,r20
  801744:	1009883a 	mov	r4,r2
  801748:	180b883a 	mov	r5,r3
  80174c:	08058780 	call	805878 <__muldf3>
  801750:	1017883a 	mov	r11,r2
  801754:	1815883a 	mov	r10,r3
  801758:	a809883a 	mov	r4,r21
  80175c:	a00b883a 	mov	r5,r20
  801760:	000d883a 	mov	r6,zero
  801764:	01cff834 	movhi	r7,16352
  801768:	da800215 	stw	r10,8(sp)
  80176c:	dac00115 	stw	r11,4(sp)
  801770:	08058780 	call	805878 <__muldf3>
  801774:	dac00117 	ldw	r11,4(sp)
  801778:	da800217 	ldw	r10,8(sp)
  80177c:	a809883a 	mov	r4,r21
  801780:	580d883a 	mov	r6,r11
  801784:	500f883a 	mov	r7,r10
  801788:	a00b883a 	mov	r5,r20
  80178c:	1023883a 	mov	r17,r2
  801790:	1821883a 	mov	r16,r3
  801794:	08058780 	call	805878 <__muldf3>
  801798:	b80d883a 	mov	r6,r23
  80179c:	e00f883a 	mov	r7,fp
  8017a0:	b009883a 	mov	r4,r22
  8017a4:	980b883a 	mov	r5,r19
  8017a8:	1029883a 	mov	r20,r2
  8017ac:	1825883a 	mov	r18,r3
  8017b0:	08058780 	call	805878 <__muldf3>
  8017b4:	a009883a 	mov	r4,r20
  8017b8:	900b883a 	mov	r5,r18
  8017bc:	100d883a 	mov	r6,r2
  8017c0:	180f883a 	mov	r7,r3
  8017c4:	0805f900 	call	805f90 <__subdf3>
  8017c8:	8809883a 	mov	r4,r17
  8017cc:	800b883a 	mov	r5,r16
  8017d0:	100d883a 	mov	r6,r2
  8017d4:	180f883a 	mov	r7,r3
  8017d8:	0805f900 	call	805f90 <__subdf3>
  8017dc:	100d883a 	mov	r6,r2
  8017e0:	180f883a 	mov	r7,r3
  8017e4:	0009883a 	mov	r4,zero
  8017e8:	014ffc34 	movhi	r5,16368
  8017ec:	0805f900 	call	805f90 <__subdf3>
  8017f0:	00008b06 	br	801a20 <__kernel_cos+0x454>
  8017f4:	200d883a 	mov	r6,r4
  8017f8:	280f883a 	mov	r7,r5
  8017fc:	08058780 	call	805878 <__muldf3>
  801800:	01afa234 	movhi	r6,48776
  801804:	01ef6a74 	movhi	r7,48553
  801808:	318e3504 	addi	r6,r6,14548
  80180c:	39feba44 	addi	r7,r7,-1303
  801810:	1009883a 	mov	r4,r2
  801814:	180b883a 	mov	r5,r3
  801818:	1025883a 	mov	r18,r2
  80181c:	1823883a 	mov	r17,r3
  801820:	08058780 	call	805878 <__muldf3>
  801824:	01af6d74 	movhi	r6,48565
  801828:	01cf88b4 	movhi	r7,15906
  80182c:	31ac7104 	addi	r6,r6,-20028
  801830:	39fba784 	addi	r7,r7,-4450
  801834:	1009883a 	mov	r4,r2
  801838:	180b883a 	mov	r5,r3
  80183c:	08045800 	call	804580 <__adddf3>
  801840:	900d883a 	mov	r6,r18
  801844:	880f883a 	mov	r7,r17
  801848:	1009883a 	mov	r4,r2
  80184c:	180b883a 	mov	r5,r3
  801850:	08058780 	call	805878 <__muldf3>
  801854:	01a02734 	movhi	r6,32924
  801858:	01cfa4b4 	movhi	r7,16018
  80185c:	3194ab44 	addi	r6,r6,21165
  801860:	39df93c4 	addi	r7,r7,32335
  801864:	1009883a 	mov	r4,r2
  801868:	180b883a 	mov	r5,r3
  80186c:	0805f900 	call	805f90 <__subdf3>
  801870:	900d883a 	mov	r6,r18
  801874:	880f883a 	mov	r7,r17
  801878:	1009883a 	mov	r4,r2
  80187c:	180b883a 	mov	r5,r3
  801880:	08058780 	call	805878 <__muldf3>
  801884:	018672f4 	movhi	r6,6603
  801888:	01cfbeb4 	movhi	r7,16122
  80188c:	31856404 	addi	r6,r6,5520
  801890:	39c06804 	addi	r7,r7,416
  801894:	1009883a 	mov	r4,r2
  801898:	180b883a 	mov	r5,r3
  80189c:	08045800 	call	804580 <__adddf3>
  8018a0:	900d883a 	mov	r6,r18
  8018a4:	880f883a 	mov	r7,r17
  8018a8:	1009883a 	mov	r4,r2
  8018ac:	180b883a 	mov	r5,r3
  8018b0:	08058780 	call	805878 <__muldf3>
  8018b4:	0185b074 	movhi	r6,5825
  8018b8:	01cfd5f4 	movhi	r7,16215
  8018bc:	31945dc4 	addi	r6,r6,20855
  8018c0:	39f05b04 	addi	r7,r7,-16020
  8018c4:	1009883a 	mov	r4,r2
  8018c8:	180b883a 	mov	r5,r3
  8018cc:	0805f900 	call	805f90 <__subdf3>
  8018d0:	900d883a 	mov	r6,r18
  8018d4:	880f883a 	mov	r7,r17
  8018d8:	1009883a 	mov	r4,r2
  8018dc:	180b883a 	mov	r5,r3
  8018e0:	08058780 	call	805878 <__muldf3>
  8018e4:	01955574 	movhi	r6,21845
  8018e8:	01cfe974 	movhi	r7,16293
  8018ec:	31955304 	addi	r6,r6,21836
  8018f0:	39d55544 	addi	r7,r7,21845
  8018f4:	1009883a 	mov	r4,r2
  8018f8:	180b883a 	mov	r5,r3
  8018fc:	08045800 	call	804580 <__adddf3>
  801900:	900d883a 	mov	r6,r18
  801904:	880f883a 	mov	r7,r17
  801908:	1009883a 	mov	r4,r2
  80190c:	180b883a 	mov	r5,r3
  801910:	08058780 	call	805878 <__muldf3>
  801914:	1013883a 	mov	r9,r2
  801918:	1017883a 	mov	r11,r2
  80191c:	008ff4f4 	movhi	r2,16339
  801920:	108ccc84 	addi	r2,r2,13106
  801924:	1811883a 	mov	r8,r3
  801928:	902b883a 	mov	r21,r18
  80192c:	8829883a 	mov	r20,r17
  801930:	1815883a 	mov	r10,r3
  801934:	143f880e 	bge	r2,r16,801758 <__alt_data_end+0xff801758>
  801938:	008ffa74 	movhi	r2,16361
  80193c:	14004416 	blt	r2,r16,801a50 <__kernel_cos+0x484>
  801940:	00bff834 	movhi	r2,65504
  801944:	80a1883a 	add	r16,r16,r2
  801948:	000d883a 	mov	r6,zero
  80194c:	800f883a 	mov	r7,r16
  801950:	0009883a 	mov	r4,zero
  801954:	014ffc34 	movhi	r5,16368
  801958:	da400115 	stw	r9,4(sp)
  80195c:	d8c00215 	stw	r3,8(sp)
  801960:	0805f900 	call	805f90 <__subdf3>
  801964:	da000217 	ldw	r8,8(sp)
  801968:	da400117 	ldw	r9,4(sp)
  80196c:	102b883a 	mov	r21,r2
  801970:	d8c00015 	stw	r3,0(sp)
  801974:	9009883a 	mov	r4,r18
  801978:	880b883a 	mov	r5,r17
  80197c:	000d883a 	mov	r6,zero
  801980:	01cff834 	movhi	r7,16352
  801984:	da000215 	stw	r8,8(sp)
  801988:	da400115 	stw	r9,4(sp)
  80198c:	08058780 	call	805878 <__muldf3>
  801990:	800f883a 	mov	r7,r16
  801994:	000d883a 	mov	r6,zero
  801998:	1009883a 	mov	r4,r2
  80199c:	180b883a 	mov	r5,r3
  8019a0:	0805f900 	call	805f90 <__subdf3>
  8019a4:	da400117 	ldw	r9,4(sp)
  8019a8:	da000217 	ldw	r8,8(sp)
  8019ac:	9009883a 	mov	r4,r18
  8019b0:	480d883a 	mov	r6,r9
  8019b4:	400f883a 	mov	r7,r8
  8019b8:	880b883a 	mov	r5,r17
  8019bc:	1029883a 	mov	r20,r2
  8019c0:	1821883a 	mov	r16,r3
  8019c4:	08058780 	call	805878 <__muldf3>
  8019c8:	b80d883a 	mov	r6,r23
  8019cc:	e00f883a 	mov	r7,fp
  8019d0:	b009883a 	mov	r4,r22
  8019d4:	980b883a 	mov	r5,r19
  8019d8:	1025883a 	mov	r18,r2
  8019dc:	1823883a 	mov	r17,r3
  8019e0:	08058780 	call	805878 <__muldf3>
  8019e4:	100d883a 	mov	r6,r2
  8019e8:	180f883a 	mov	r7,r3
  8019ec:	9009883a 	mov	r4,r18
  8019f0:	880b883a 	mov	r5,r17
  8019f4:	0805f900 	call	805f90 <__subdf3>
  8019f8:	100d883a 	mov	r6,r2
  8019fc:	180f883a 	mov	r7,r3
  801a00:	a009883a 	mov	r4,r20
  801a04:	800b883a 	mov	r5,r16
  801a08:	0805f900 	call	805f90 <__subdf3>
  801a0c:	d9400017 	ldw	r5,0(sp)
  801a10:	100d883a 	mov	r6,r2
  801a14:	180f883a 	mov	r7,r3
  801a18:	a809883a 	mov	r4,r21
  801a1c:	0805f900 	call	805f90 <__subdf3>
  801a20:	dfc00c17 	ldw	ra,48(sp)
  801a24:	df000b17 	ldw	fp,44(sp)
  801a28:	ddc00a17 	ldw	r23,40(sp)
  801a2c:	dd800917 	ldw	r22,36(sp)
  801a30:	dd400817 	ldw	r21,32(sp)
  801a34:	dd000717 	ldw	r20,28(sp)
  801a38:	dcc00617 	ldw	r19,24(sp)
  801a3c:	dc800517 	ldw	r18,20(sp)
  801a40:	dc400417 	ldw	r17,16(sp)
  801a44:	dc000317 	ldw	r16,12(sp)
  801a48:	dec00d04 	addi	sp,sp,52
  801a4c:	f800283a 	ret
  801a50:	008ff9f4 	movhi	r2,16359
  801a54:	002b883a 	mov	r21,zero
  801a58:	d8800015 	stw	r2,0(sp)
  801a5c:	040ff4b4 	movhi	r16,16338
  801a60:	003fc406 	br	801974 <__alt_data_end+0xff801974>
  801a64:	0005883a 	mov	r2,zero
  801a68:	00cffc34 	movhi	r3,16368
  801a6c:	003fec06 	br	801a20 <__alt_data_end+0xff801a20>

00801a70 <__kernel_rem_pio2>:
  801a70:	deff5a04 	addi	sp,sp,-664
  801a74:	da00a617 	ldw	r8,664(sp)
  801a78:	00c02074 	movhi	r3,129
  801a7c:	18ff4504 	addi	r3,r3,-748
  801a80:	4205883a 	add	r2,r8,r8
  801a84:	1085883a 	add	r2,r2,r2
  801a88:	1885883a 	add	r2,r3,r2
  801a8c:	d9008e15 	stw	r4,568(sp)
  801a90:	d9408f15 	stw	r5,572(sp)
  801a94:	313fff44 	addi	r4,r6,-3
  801a98:	01400604 	movi	r5,24
  801a9c:	dd80a215 	stw	r22,648(sp)
  801aa0:	dc009c15 	stw	r16,624(sp)
  801aa4:	dfc0a515 	stw	ra,660(sp)
  801aa8:	df00a415 	stw	fp,656(sp)
  801aac:	ddc0a315 	stw	r23,652(sp)
  801ab0:	dd40a115 	stw	r21,644(sp)
  801ab4:	dd00a015 	stw	r20,640(sp)
  801ab8:	dcc09f15 	stw	r19,636(sp)
  801abc:	dc809e15 	stw	r18,632(sp)
  801ac0:	dc409d15 	stw	r17,628(sp)
  801ac4:	3021883a 	mov	r16,r6
  801ac8:	d9c09315 	stw	r7,588(sp)
  801acc:	15800017 	ldw	r22,0(r2)
  801ad0:	0802f000 	call	802f00 <__divsi3>
  801ad4:	da009317 	ldw	r8,588(sp)
  801ad8:	d8809215 	stw	r2,584(sp)
  801adc:	423fffc4 	addi	r8,r8,-1
  801ae0:	da008d15 	stw	r8,564(sp)
  801ae4:	10033b16 	blt	r2,zero,8027d4 <__kernel_rem_pio2+0xd64>
  801ae8:	da009217 	ldw	r8,584(sp)
  801aec:	d9009217 	ldw	r4,584(sp)
  801af0:	42000044 	addi	r8,r8,1
  801af4:	40fffa24 	muli	r3,r8,-24
  801af8:	da009515 	stw	r8,596(sp)
  801afc:	da008d17 	ldw	r8,564(sp)
  801b00:	1c07883a 	add	r3,r3,r16
  801b04:	d8c09015 	stw	r3,576(sp)
  801b08:	b205883a 	add	r2,r22,r8
  801b0c:	2223c83a 	sub	r17,r4,r8
  801b10:	10001016 	blt	r2,zero,801b54 <__kernel_rem_pio2+0xe4>
  801b14:	da00a717 	ldw	r8,668(sp)
  801b18:	8c65883a 	add	r18,r17,r17
  801b1c:	94a5883a 	add	r18,r18,r18
  801b20:	1445883a 	add	r2,r2,r17
  801b24:	dcc05004 	addi	r19,sp,320
  801b28:	44a5883a 	add	r18,r8,r18
  801b2c:	14000044 	addi	r16,r2,1
  801b30:	88015316 	blt	r17,zero,802080 <__kernel_rem_pio2+0x610>
  801b34:	91000017 	ldw	r4,0(r18)
  801b38:	080690c0 	call	80690c <__floatsidf>
  801b3c:	98800015 	stw	r2,0(r19)
  801b40:	98c00115 	stw	r3,4(r19)
  801b44:	8c400044 	addi	r17,r17,1
  801b48:	9cc00204 	addi	r19,r19,8
  801b4c:	94800104 	addi	r18,r18,4
  801b50:	8c3ff71e 	bne	r17,r16,801b30 <__alt_data_end+0xff801b30>
  801b54:	b0002816 	blt	r22,zero,801bf8 <__kernel_rem_pio2+0x188>
  801b58:	da008d17 	ldw	r8,564(sp)
  801b5c:	b4c00044 	addi	r19,r22,1
  801b60:	982690fa 	slli	r19,r19,3
  801b64:	402490fa 	slli	r18,r8,3
  801b68:	da008e17 	ldw	r8,568(sp)
  801b6c:	d8805004 	addi	r2,sp,320
  801b70:	94000204 	addi	r16,r18,8
  801b74:	d823883a 	mov	r17,sp
  801b78:	14a5883a 	add	r18,r2,r18
  801b7c:	dcef883a 	add	r23,sp,r19
  801b80:	4421883a 	add	r16,r8,r16
  801b84:	dd809115 	stw	r22,580(sp)
  801b88:	4039883a 	mov	fp,r8
  801b8c:	da008d17 	ldw	r8,564(sp)
  801b90:	40016016 	blt	r8,zero,802114 <__kernel_rem_pio2+0x6a4>
  801b94:	e027883a 	mov	r19,fp
  801b98:	9029883a 	mov	r20,r18
  801b9c:	002d883a 	mov	r22,zero
  801ba0:	002b883a 	mov	r21,zero
  801ba4:	a1800017 	ldw	r6,0(r20)
  801ba8:	a1c00117 	ldw	r7,4(r20)
  801bac:	99000017 	ldw	r4,0(r19)
  801bb0:	99400117 	ldw	r5,4(r19)
  801bb4:	9cc00204 	addi	r19,r19,8
  801bb8:	a53ffe04 	addi	r20,r20,-8
  801bbc:	08058780 	call	805878 <__muldf3>
  801bc0:	b009883a 	mov	r4,r22
  801bc4:	a80b883a 	mov	r5,r21
  801bc8:	100d883a 	mov	r6,r2
  801bcc:	180f883a 	mov	r7,r3
  801bd0:	08045800 	call	804580 <__adddf3>
  801bd4:	102d883a 	mov	r22,r2
  801bd8:	182b883a 	mov	r21,r3
  801bdc:	9c3ff11e 	bne	r19,r16,801ba4 <__alt_data_end+0xff801ba4>
  801be0:	8d800015 	stw	r22,0(r17)
  801be4:	8d400115 	stw	r21,4(r17)
  801be8:	8c400204 	addi	r17,r17,8
  801bec:	94800204 	addi	r18,r18,8
  801bf0:	8dffe61e 	bne	r17,r23,801b8c <__alt_data_end+0xff801b8c>
  801bf4:	dd809117 	ldw	r22,580(sp)
  801bf8:	00d00034 	movhi	r3,16384
  801bfc:	da009317 	ldw	r8,588(sp)
  801c00:	18ffff84 	addi	r3,r3,-2
  801c04:	b0c7883a 	add	r3,r22,r3
  801c08:	18c7883a 	add	r3,r3,r3
  801c0c:	402090fa 	slli	r16,r8,3
  801c10:	18c7883a 	add	r3,r3,r3
  801c14:	da007804 	addi	r8,sp,480
  801c18:	40d1883a 	add	r8,r8,r3
  801c1c:	b0bfffc4 	addi	r2,r22,-1
  801c20:	da009615 	stw	r8,600(sp)
  801c24:	da008e17 	ldw	r8,568(sp)
  801c28:	1085883a 	add	r2,r2,r2
  801c2c:	1085883a 	add	r2,r2,r2
  801c30:	19000104 	addi	r4,r3,4
  801c34:	d885883a 	add	r2,sp,r2
  801c38:	4421883a 	add	r16,r8,r16
  801c3c:	da007804 	addi	r8,sp,480
  801c40:	4111883a 	add	r8,r8,r4
  801c44:	10807804 	addi	r2,r2,480
  801c48:	da009715 	stw	r8,604(sp)
  801c4c:	b025883a 	mov	r18,r22
  801c50:	d8809815 	stw	r2,608(sp)
  801c54:	dd809415 	stw	r22,592(sp)
  801c58:	900490fa 	slli	r2,r18,3
  801c5c:	d885883a 	add	r2,sp,r2
  801c60:	17000017 	ldw	fp,0(r2)
  801c64:	15400117 	ldw	r21,4(r2)
  801c68:	04802b0e 	bge	zero,r18,801d18 <__kernel_rem_pio2+0x2a8>
  801c6c:	00880034 	movhi	r2,8192
  801c70:	10bfffc4 	addi	r2,r2,-1
  801c74:	90a9883a 	add	r20,r18,r2
  801c78:	a02890fa 	slli	r20,r20,3
  801c7c:	dc407804 	addi	r17,sp,480
  801c80:	dcfffe04 	addi	r19,sp,-8
  801c84:	dd29883a 	add	r20,sp,r20
  801c88:	000d883a 	mov	r6,zero
  801c8c:	01cf9c34 	movhi	r7,15984
  801c90:	e009883a 	mov	r4,fp
  801c94:	a80b883a 	mov	r5,r21
  801c98:	08058780 	call	805878 <__muldf3>
  801c9c:	180b883a 	mov	r5,r3
  801ca0:	1009883a 	mov	r4,r2
  801ca4:	080688c0 	call	80688c <__fixdfsi>
  801ca8:	1009883a 	mov	r4,r2
  801cac:	080690c0 	call	80690c <__floatsidf>
  801cb0:	000d883a 	mov	r6,zero
  801cb4:	01d05c34 	movhi	r7,16752
  801cb8:	1009883a 	mov	r4,r2
  801cbc:	180b883a 	mov	r5,r3
  801cc0:	102f883a 	mov	r23,r2
  801cc4:	182d883a 	mov	r22,r3
  801cc8:	08058780 	call	805878 <__muldf3>
  801ccc:	100d883a 	mov	r6,r2
  801cd0:	180f883a 	mov	r7,r3
  801cd4:	e009883a 	mov	r4,fp
  801cd8:	a80b883a 	mov	r5,r21
  801cdc:	0805f900 	call	805f90 <__subdf3>
  801ce0:	180b883a 	mov	r5,r3
  801ce4:	1009883a 	mov	r4,r2
  801ce8:	080688c0 	call	80688c <__fixdfsi>
  801cec:	a1800017 	ldw	r6,0(r20)
  801cf0:	a1c00117 	ldw	r7,4(r20)
  801cf4:	88800015 	stw	r2,0(r17)
  801cf8:	b809883a 	mov	r4,r23
  801cfc:	b00b883a 	mov	r5,r22
  801d00:	08045800 	call	804580 <__adddf3>
  801d04:	a53ffe04 	addi	r20,r20,-8
  801d08:	1039883a 	mov	fp,r2
  801d0c:	182b883a 	mov	r21,r3
  801d10:	8c400104 	addi	r17,r17,4
  801d14:	a4ffdc1e 	bne	r20,r19,801c88 <__alt_data_end+0xff801c88>
  801d18:	d9809017 	ldw	r6,576(sp)
  801d1c:	a80b883a 	mov	r5,r21
  801d20:	e009883a 	mov	r4,fp
  801d24:	0802d480 	call	802d48 <scalbn>
  801d28:	000d883a 	mov	r6,zero
  801d2c:	01cff034 	movhi	r7,16320
  801d30:	1009883a 	mov	r4,r2
  801d34:	180b883a 	mov	r5,r3
  801d38:	1027883a 	mov	r19,r2
  801d3c:	1823883a 	mov	r17,r3
  801d40:	08058780 	call	805878 <__muldf3>
  801d44:	1009883a 	mov	r4,r2
  801d48:	180b883a 	mov	r5,r3
  801d4c:	0802ae00 	call	802ae0 <floor>
  801d50:	000d883a 	mov	r6,zero
  801d54:	01d00834 	movhi	r7,16416
  801d58:	1009883a 	mov	r4,r2
  801d5c:	180b883a 	mov	r5,r3
  801d60:	08058780 	call	805878 <__muldf3>
  801d64:	100d883a 	mov	r6,r2
  801d68:	180f883a 	mov	r7,r3
  801d6c:	9809883a 	mov	r4,r19
  801d70:	880b883a 	mov	r5,r17
  801d74:	0805f900 	call	805f90 <__subdf3>
  801d78:	180b883a 	mov	r5,r3
  801d7c:	1009883a 	mov	r4,r2
  801d80:	1827883a 	mov	r19,r3
  801d84:	1029883a 	mov	r20,r2
  801d88:	080688c0 	call	80688c <__fixdfsi>
  801d8c:	1009883a 	mov	r4,r2
  801d90:	1023883a 	mov	r17,r2
  801d94:	080690c0 	call	80690c <__floatsidf>
  801d98:	a009883a 	mov	r4,r20
  801d9c:	100d883a 	mov	r6,r2
  801da0:	180f883a 	mov	r7,r3
  801da4:	980b883a 	mov	r5,r19
  801da8:	0805f900 	call	805f90 <__subdf3>
  801dac:	d9009017 	ldw	r4,576(sp)
  801db0:	1013883a 	mov	r9,r2
  801db4:	102b883a 	mov	r21,r2
  801db8:	1811883a 	mov	r8,r3
  801dbc:	0100b30e 	bge	zero,r4,80208c <__kernel_rem_pio2+0x61c>
  801dc0:	90bfffc4 	addi	r2,r18,-1
  801dc4:	1085883a 	add	r2,r2,r2
  801dc8:	1085883a 	add	r2,r2,r2
  801dcc:	d885883a 	add	r2,sp,r2
  801dd0:	10807804 	addi	r2,r2,480
  801dd4:	d9809017 	ldw	r6,576(sp)
  801dd8:	11400017 	ldw	r5,0(r2)
  801ddc:	01000604 	movi	r4,24
  801de0:	2189c83a 	sub	r4,r4,r6
  801de4:	290dd83a 	sra	r6,r5,r4
  801de8:	d9c09017 	ldw	r7,576(sp)
  801dec:	04c005c4 	movi	r19,23
  801df0:	3108983a 	sll	r4,r6,r4
  801df4:	99e7c83a 	sub	r19,r19,r7
  801df8:	89a3883a 	add	r17,r17,r6
  801dfc:	2909c83a 	sub	r4,r5,r4
  801e00:	24e7d83a 	sra	r19,r4,r19
  801e04:	11000015 	stw	r4,0(r2)
  801e08:	04c02a0e 	bge	zero,r19,801eb4 <__kernel_rem_pio2+0x444>
  801e0c:	8c400044 	addi	r17,r17,1
  801e10:	0481570e 	bge	zero,r18,802370 <__kernel_rem_pio2+0x900>
  801e14:	02804034 	movhi	r10,256
  801e18:	52bfffc4 	addi	r10,r10,-1
  801e1c:	d8807804 	addi	r2,sp,480
  801e20:	000b883a 	mov	r5,zero
  801e24:	0029883a 	mov	r20,zero
  801e28:	01c04034 	movhi	r7,256
  801e2c:	00000706 	br	801e4c <__kernel_rem_pio2+0x3dc>
  801e30:	390dc83a 	sub	r6,r7,r4
  801e34:	20000226 	beq	r4,zero,801e40 <__kernel_rem_pio2+0x3d0>
  801e38:	11800015 	stw	r6,0(r2)
  801e3c:	05000044 	movi	r20,1
  801e40:	29400044 	addi	r5,r5,1
  801e44:	10800104 	addi	r2,r2,4
  801e48:	2c80080e 	bge	r5,r18,801e6c <__kernel_rem_pio2+0x3fc>
  801e4c:	11000017 	ldw	r4,0(r2)
  801e50:	a03ff726 	beq	r20,zero,801e30 <__alt_data_end+0xff801e30>
  801e54:	5109c83a 	sub	r4,r10,r4
  801e58:	11000015 	stw	r4,0(r2)
  801e5c:	29400044 	addi	r5,r5,1
  801e60:	05000044 	movi	r20,1
  801e64:	10800104 	addi	r2,r2,4
  801e68:	2cbff816 	blt	r5,r18,801e4c <__alt_data_end+0xff801e4c>
  801e6c:	d9009017 	ldw	r4,576(sp)
  801e70:	01000e0e 	bge	zero,r4,801eac <__kernel_rem_pio2+0x43c>
  801e74:	00800044 	movi	r2,1
  801e78:	20808d26 	beq	r4,r2,8020b0 <__kernel_rem_pio2+0x640>
  801e7c:	00800084 	movi	r2,2
  801e80:	20800a1e 	bne	r4,r2,801eac <__kernel_rem_pio2+0x43c>
  801e84:	90bfffc4 	addi	r2,r18,-1
  801e88:	1085883a 	add	r2,r2,r2
  801e8c:	1085883a 	add	r2,r2,r2
  801e90:	d885883a 	add	r2,sp,r2
  801e94:	10807804 	addi	r2,r2,480
  801e98:	11400017 	ldw	r5,0(r2)
  801e9c:	01001034 	movhi	r4,64
  801ea0:	213fffc4 	addi	r4,r4,-1
  801ea4:	2908703a 	and	r4,r5,r4
  801ea8:	11000015 	stw	r4,0(r2)
  801eac:	00800084 	movi	r2,2
  801eb0:	98805d26 	beq	r19,r2,802028 <__kernel_rem_pio2+0x5b8>
  801eb4:	400b883a 	mov	r5,r8
  801eb8:	000d883a 	mov	r6,zero
  801ebc:	000f883a 	mov	r7,zero
  801ec0:	a809883a 	mov	r4,r21
  801ec4:	da009b15 	stw	r8,620(sp)
  801ec8:	08057140 	call	805714 <__eqdf2>
  801ecc:	da009b17 	ldw	r8,620(sp)
  801ed0:	10012b1e 	bne	r2,zero,802380 <__kernel_rem_pio2+0x910>
  801ed4:	da009417 	ldw	r8,592(sp)
  801ed8:	917fffc4 	addi	r5,r18,-1
  801edc:	2a000e16 	blt	r5,r8,801f18 <__kernel_rem_pio2+0x4a8>
  801ee0:	00900034 	movhi	r2,16384
  801ee4:	10bfffc4 	addi	r2,r2,-1
  801ee8:	9085883a 	add	r2,r18,r2
  801eec:	1085883a 	add	r2,r2,r2
  801ef0:	d9809717 	ldw	r6,604(sp)
  801ef4:	1085883a 	add	r2,r2,r2
  801ef8:	d9007804 	addi	r4,sp,480
  801efc:	0007883a 	mov	r3,zero
  801f00:	2085883a 	add	r2,r4,r2
  801f04:	11000017 	ldw	r4,0(r2)
  801f08:	10bfff04 	addi	r2,r2,-4
  801f0c:	1906b03a 	or	r3,r3,r4
  801f10:	11bffc1e 	bne	r2,r6,801f04 <__alt_data_end+0xff801f04>
  801f14:	1800821e 	bne	r3,zero,802120 <__kernel_rem_pio2+0x6b0>
  801f18:	da009817 	ldw	r8,608(sp)
  801f1c:	40800017 	ldw	r2,0(r8)
  801f20:	1001151e 	bne	r2,zero,802378 <__kernel_rem_pio2+0x908>
  801f24:	d8809617 	ldw	r2,600(sp)
  801f28:	05000044 	movi	r20,1
  801f2c:	10bfff04 	addi	r2,r2,-4
  801f30:	10c00117 	ldw	r3,4(r2)
  801f34:	a5000044 	addi	r20,r20,1
  801f38:	183ffc26 	beq	r3,zero,801f2c <__alt_data_end+0xff801f2c>
  801f3c:	9529883a 	add	r20,r18,r20
  801f40:	90800044 	addi	r2,r18,1
  801f44:	dd009115 	stw	r20,580(sp)
  801f48:	a0803216 	blt	r20,r2,802014 <__kernel_rem_pio2+0x5a4>
  801f4c:	da009317 	ldw	r8,588(sp)
  801f50:	d8c09117 	ldw	r3,580(sp)
  801f54:	44a3883a 	add	r17,r8,r18
  801f58:	da009217 	ldw	r8,584(sp)
  801f5c:	882290fa 	slli	r17,r17,3
  801f60:	40a5883a 	add	r18,r8,r2
  801f64:	da009517 	ldw	r8,596(sp)
  801f68:	100490fa 	slli	r2,r2,3
  801f6c:	94a5883a 	add	r18,r18,r18
  801f70:	40eb883a 	add	r21,r8,r3
  801f74:	da00a717 	ldw	r8,668(sp)
  801f78:	ad6b883a 	add	r21,r21,r21
  801f7c:	94a5883a 	add	r18,r18,r18
  801f80:	ad6b883a 	add	r21,r21,r21
  801f84:	d8c05004 	addi	r3,sp,320
  801f88:	44a5883a 	add	r18,r8,r18
  801f8c:	1c63883a 	add	r17,r3,r17
  801f90:	d8a7883a 	add	r19,sp,r2
  801f94:	456b883a 	add	r21,r8,r21
  801f98:	91000017 	ldw	r4,0(r18)
  801f9c:	080690c0 	call	80690c <__floatsidf>
  801fa0:	da008d17 	ldw	r8,564(sp)
  801fa4:	88800015 	stw	r2,0(r17)
  801fa8:	88c00115 	stw	r3,4(r17)
  801fac:	40001b16 	blt	r8,zero,80201c <__kernel_rem_pio2+0x5ac>
  801fb0:	dd008e17 	ldw	r20,568(sp)
  801fb4:	882d883a 	mov	r22,r17
  801fb8:	002f883a 	mov	r23,zero
  801fbc:	0039883a 	mov	fp,zero
  801fc0:	b1800017 	ldw	r6,0(r22)
  801fc4:	b1c00117 	ldw	r7,4(r22)
  801fc8:	a1000017 	ldw	r4,0(r20)
  801fcc:	a1400117 	ldw	r5,4(r20)
  801fd0:	a5000204 	addi	r20,r20,8
  801fd4:	b5bffe04 	addi	r22,r22,-8
  801fd8:	08058780 	call	805878 <__muldf3>
  801fdc:	b809883a 	mov	r4,r23
  801fe0:	e00b883a 	mov	r5,fp
  801fe4:	100d883a 	mov	r6,r2
  801fe8:	180f883a 	mov	r7,r3
  801fec:	08045800 	call	804580 <__adddf3>
  801ff0:	102f883a 	mov	r23,r2
  801ff4:	1839883a 	mov	fp,r3
  801ff8:	a43ff11e 	bne	r20,r16,801fc0 <__alt_data_end+0xff801fc0>
  801ffc:	9dc00015 	stw	r23,0(r19)
  802000:	9f000115 	stw	fp,4(r19)
  802004:	94800104 	addi	r18,r18,4
  802008:	8c400204 	addi	r17,r17,8
  80200c:	9cc00204 	addi	r19,r19,8
  802010:	957fe11e 	bne	r18,r21,801f98 <__alt_data_end+0xff801f98>
  802014:	dc809117 	ldw	r18,580(sp)
  802018:	003f0f06 	br	801c58 <__alt_data_end+0xff801c58>
  80201c:	002f883a 	mov	r23,zero
  802020:	0039883a 	mov	fp,zero
  802024:	003ff506 	br	801ffc <__alt_data_end+0xff801ffc>
  802028:	480d883a 	mov	r6,r9
  80202c:	180f883a 	mov	r7,r3
  802030:	0009883a 	mov	r4,zero
  802034:	014ffc34 	movhi	r5,16368
  802038:	0805f900 	call	805f90 <__subdf3>
  80203c:	102b883a 	mov	r21,r2
  802040:	1811883a 	mov	r8,r3
  802044:	a03f9b26 	beq	r20,zero,801eb4 <__alt_data_end+0xff801eb4>
  802048:	d9809017 	ldw	r6,576(sp)
  80204c:	0009883a 	mov	r4,zero
  802050:	014ffc34 	movhi	r5,16368
  802054:	d8c09b15 	stw	r3,620(sp)
  802058:	0802d480 	call	802d48 <scalbn>
  80205c:	da009b17 	ldw	r8,620(sp)
  802060:	a809883a 	mov	r4,r21
  802064:	100d883a 	mov	r6,r2
  802068:	400b883a 	mov	r5,r8
  80206c:	180f883a 	mov	r7,r3
  802070:	0805f900 	call	805f90 <__subdf3>
  802074:	102b883a 	mov	r21,r2
  802078:	1811883a 	mov	r8,r3
  80207c:	003f8d06 	br	801eb4 <__alt_data_end+0xff801eb4>
  802080:	0005883a 	mov	r2,zero
  802084:	0007883a 	mov	r3,zero
  802088:	003eac06 	br	801b3c <__alt_data_end+0xff801b3c>
  80208c:	d8809017 	ldw	r2,576(sp)
  802090:	1000121e 	bne	r2,zero,8020dc <__kernel_rem_pio2+0x66c>
  802094:	90bfffc4 	addi	r2,r18,-1
  802098:	1085883a 	add	r2,r2,r2
  80209c:	1085883a 	add	r2,r2,r2
  8020a0:	d885883a 	add	r2,sp,r2
  8020a4:	14c07817 	ldw	r19,480(r2)
  8020a8:	9827d5fa 	srai	r19,r19,23
  8020ac:	003f5606 	br	801e08 <__alt_data_end+0xff801e08>
  8020b0:	90bfffc4 	addi	r2,r18,-1
  8020b4:	1085883a 	add	r2,r2,r2
  8020b8:	1085883a 	add	r2,r2,r2
  8020bc:	d885883a 	add	r2,sp,r2
  8020c0:	10807804 	addi	r2,r2,480
  8020c4:	11000017 	ldw	r4,0(r2)
  8020c8:	01402034 	movhi	r5,128
  8020cc:	297fffc4 	addi	r5,r5,-1
  8020d0:	2148703a 	and	r4,r4,r5
  8020d4:	11000015 	stw	r4,0(r2)
  8020d8:	003f7406 	br	801eac <__alt_data_end+0xff801eac>
  8020dc:	4809883a 	mov	r4,r9
  8020e0:	180b883a 	mov	r5,r3
  8020e4:	000d883a 	mov	r6,zero
  8020e8:	01cff834 	movhi	r7,16352
  8020ec:	d8c09a15 	stw	r3,616(sp)
  8020f0:	d8c09b15 	stw	r3,620(sp)
  8020f4:	da409915 	stw	r9,612(sp)
  8020f8:	080579c0 	call	80579c <__gedf2>
  8020fc:	d8c09a17 	ldw	r3,616(sp)
  802100:	da009b17 	ldw	r8,620(sp)
  802104:	da409917 	ldw	r9,612(sp)
  802108:	1000920e 	bge	r2,zero,802354 <__kernel_rem_pio2+0x8e4>
  80210c:	0027883a 	mov	r19,zero
  802110:	003f6806 	br	801eb4 <__alt_data_end+0xff801eb4>
  802114:	002d883a 	mov	r22,zero
  802118:	002b883a 	mov	r21,zero
  80211c:	003eb006 	br	801be0 <__alt_data_end+0xff801be0>
  802120:	2945883a 	add	r2,r5,r5
  802124:	da009017 	ldw	r8,576(sp)
  802128:	1085883a 	add	r2,r2,r2
  80212c:	d885883a 	add	r2,sp,r2
  802130:	10807817 	ldw	r2,480(r2)
  802134:	423ffa04 	addi	r8,r8,-24
  802138:	dc409115 	stw	r17,580(sp)
  80213c:	dcc08d15 	stw	r19,564(sp)
  802140:	da009015 	stw	r8,576(sp)
  802144:	dd809417 	ldw	r22,592(sp)
  802148:	2823883a 	mov	r17,r5
  80214c:	10000e1e 	bne	r2,zero,802188 <__kernel_rem_pio2+0x718>
  802150:	00900034 	movhi	r2,16384
  802154:	10bfffc4 	addi	r2,r2,-1
  802158:	2885883a 	add	r2,r5,r2
  80215c:	1085883a 	add	r2,r2,r2
  802160:	d8c07804 	addi	r3,sp,480
  802164:	1085883a 	add	r2,r2,r2
  802168:	1885883a 	add	r2,r3,r2
  80216c:	4007883a 	mov	r3,r8
  802170:	10bfff04 	addi	r2,r2,-4
  802174:	11000117 	ldw	r4,4(r2)
  802178:	8c7fffc4 	addi	r17,r17,-1
  80217c:	18fffa04 	addi	r3,r3,-24
  802180:	203ffb26 	beq	r4,zero,802170 <__alt_data_end+0xff802170>
  802184:	d8c09015 	stw	r3,576(sp)
  802188:	d9809017 	ldw	r6,576(sp)
  80218c:	0009883a 	mov	r4,zero
  802190:	014ffc34 	movhi	r5,16368
  802194:	0802d480 	call	802d48 <scalbn>
  802198:	1029883a 	mov	r20,r2
  80219c:	182b883a 	mov	r21,r3
  8021a0:	88018416 	blt	r17,zero,8027b4 <__kernel_rem_pio2+0xd44>
  8021a4:	881090fa 	slli	r8,r17,3
  8021a8:	d8c07804 	addi	r3,sp,480
  8021ac:	da008e15 	stw	r8,568(sp)
  8021b0:	d8808e17 	ldw	r2,568(sp)
  8021b4:	8c51883a 	add	r8,r17,r17
  8021b8:	4211883a 	add	r8,r8,r8
  8021bc:	d8a1883a 	add	r16,sp,r2
  8021c0:	1a25883a 	add	r18,r3,r8
  8021c4:	da3ffe04 	addi	r8,sp,-8
  8021c8:	da008c15 	stw	r8,560(sp)
  8021cc:	8039883a 	mov	fp,r16
  8021d0:	91000017 	ldw	r4,0(r18)
  8021d4:	e73ffe04 	addi	fp,fp,-8
  8021d8:	94bfff04 	addi	r18,r18,-4
  8021dc:	080690c0 	call	80690c <__floatsidf>
  8021e0:	a00d883a 	mov	r6,r20
  8021e4:	a80f883a 	mov	r7,r21
  8021e8:	1009883a 	mov	r4,r2
  8021ec:	180b883a 	mov	r5,r3
  8021f0:	08058780 	call	805878 <__muldf3>
  8021f4:	a009883a 	mov	r4,r20
  8021f8:	a80b883a 	mov	r5,r21
  8021fc:	e0800215 	stw	r2,8(fp)
  802200:	e0c00315 	stw	r3,12(fp)
  802204:	000d883a 	mov	r6,zero
  802208:	01cf9c34 	movhi	r7,15984
  80220c:	08058780 	call	805878 <__muldf3>
  802210:	da008c17 	ldw	r8,560(sp)
  802214:	1029883a 	mov	r20,r2
  802218:	182b883a 	mov	r21,r3
  80221c:	e23fec1e 	bne	fp,r8,8021d0 <__alt_data_end+0xff8021d0>
  802220:	0029883a 	mov	r20,zero
  802224:	b0004f16 	blt	r22,zero,802364 <__kernel_rem_pio2+0x8f4>
  802228:	05402074 	movhi	r21,129
  80222c:	014ffe74 	movhi	r5,16377
  802230:	ad7f3704 	addi	r21,r21,-804
  802234:	8027883a 	mov	r19,r16
  802238:	01100034 	movhi	r4,16384
  80223c:	29487ec4 	addi	r5,r5,8699
  802240:	0039883a 	mov	fp,zero
  802244:	002f883a 	mov	r23,zero
  802248:	0025883a 	mov	r18,zero
  80224c:	00000506 	br	802264 <__kernel_rem_pio2+0x7f4>
  802250:	9cc00204 	addi	r19,r19,8
  802254:	a4800f16 	blt	r20,r18,802294 <__kernel_rem_pio2+0x824>
  802258:	a9000017 	ldw	r4,0(r21)
  80225c:	a9400117 	ldw	r5,4(r21)
  802260:	ad400204 	addi	r21,r21,8
  802264:	99800017 	ldw	r6,0(r19)
  802268:	99c00117 	ldw	r7,4(r19)
  80226c:	94800044 	addi	r18,r18,1
  802270:	08058780 	call	805878 <__muldf3>
  802274:	e009883a 	mov	r4,fp
  802278:	b80b883a 	mov	r5,r23
  80227c:	100d883a 	mov	r6,r2
  802280:	180f883a 	mov	r7,r3
  802284:	08045800 	call	804580 <__adddf3>
  802288:	1039883a 	mov	fp,r2
  80228c:	182f883a 	mov	r23,r3
  802290:	b4bfef0e 	bge	r22,r18,802250 <__alt_data_end+0xff802250>
  802294:	a00490fa 	slli	r2,r20,3
  802298:	da008c17 	ldw	r8,560(sp)
  80229c:	843ffe04 	addi	r16,r16,-8
  8022a0:	d885883a 	add	r2,sp,r2
  8022a4:	10802804 	addi	r2,r2,160
  8022a8:	17000015 	stw	fp,0(r2)
  8022ac:	15c00115 	stw	r23,4(r2)
  8022b0:	a5000044 	addi	r20,r20,1
  8022b4:	823fdb1e 	bne	r16,r8,802224 <__alt_data_end+0xff802224>
  8022b8:	da00a617 	ldw	r8,664(sp)
  8022bc:	00800084 	movi	r2,2
  8022c0:	12006616 	blt	r2,r8,80245c <__kernel_rem_pio2+0x9ec>
  8022c4:	0200de16 	blt	zero,r8,802640 <__kernel_rem_pio2+0xbd0>
  8022c8:	4000141e 	bne	r8,zero,80231c <__kernel_rem_pio2+0x8ac>
  8022cc:	da008e17 	ldw	r8,568(sp)
  8022d0:	d8802804 	addi	r2,sp,160
  8022d4:	0007883a 	mov	r3,zero
  8022d8:	1225883a 	add	r18,r2,r8
  8022dc:	043fffc4 	movi	r16,-1
  8022e0:	0005883a 	mov	r2,zero
  8022e4:	91800017 	ldw	r6,0(r18)
  8022e8:	91c00117 	ldw	r7,4(r18)
  8022ec:	1009883a 	mov	r4,r2
  8022f0:	180b883a 	mov	r5,r3
  8022f4:	8c7fffc4 	addi	r17,r17,-1
  8022f8:	08045800 	call	804580 <__adddf3>
  8022fc:	94bffe04 	addi	r18,r18,-8
  802300:	8c3ff81e 	bne	r17,r16,8022e4 <__alt_data_end+0xff8022e4>
  802304:	da008d17 	ldw	r8,564(sp)
  802308:	40000126 	beq	r8,zero,802310 <__kernel_rem_pio2+0x8a0>
  80230c:	18e0003c 	xorhi	r3,r3,32768
  802310:	da008f17 	ldw	r8,572(sp)
  802314:	40800015 	stw	r2,0(r8)
  802318:	40c00115 	stw	r3,4(r8)
  80231c:	da009117 	ldw	r8,580(sp)
  802320:	408001cc 	andi	r2,r8,7
  802324:	dfc0a517 	ldw	ra,660(sp)
  802328:	df00a417 	ldw	fp,656(sp)
  80232c:	ddc0a317 	ldw	r23,652(sp)
  802330:	dd80a217 	ldw	r22,648(sp)
  802334:	dd40a117 	ldw	r21,644(sp)
  802338:	dd00a017 	ldw	r20,640(sp)
  80233c:	dcc09f17 	ldw	r19,636(sp)
  802340:	dc809e17 	ldw	r18,632(sp)
  802344:	dc409d17 	ldw	r17,628(sp)
  802348:	dc009c17 	ldw	r16,624(sp)
  80234c:	dec0a604 	addi	sp,sp,664
  802350:	f800283a 	ret
  802354:	8c400044 	addi	r17,r17,1
  802358:	04810d0e 	bge	zero,r18,802790 <__kernel_rem_pio2+0xd20>
  80235c:	04c00084 	movi	r19,2
  802360:	003eac06 	br	801e14 <__alt_data_end+0xff801e14>
  802364:	0039883a 	mov	fp,zero
  802368:	002f883a 	mov	r23,zero
  80236c:	003fc906 	br	802294 <__alt_data_end+0xff802294>
  802370:	0029883a 	mov	r20,zero
  802374:	003ebd06 	br	801e6c <__alt_data_end+0xff801e6c>
  802378:	05000044 	movi	r20,1
  80237c:	003eef06 	br	801f3c <__alt_data_end+0xff801f3c>
  802380:	4029883a 	mov	r20,r8
  802384:	da009017 	ldw	r8,576(sp)
  802388:	a809883a 	mov	r4,r21
  80238c:	a00b883a 	mov	r5,r20
  802390:	020dc83a 	sub	r6,zero,r8
  802394:	dc409115 	stw	r17,580(sp)
  802398:	dd809417 	ldw	r22,592(sp)
  80239c:	dcc08d15 	stw	r19,564(sp)
  8023a0:	0802d480 	call	802d48 <scalbn>
  8023a4:	000d883a 	mov	r6,zero
  8023a8:	01d05c34 	movhi	r7,16752
  8023ac:	1009883a 	mov	r4,r2
  8023b0:	180b883a 	mov	r5,r3
  8023b4:	102b883a 	mov	r21,r2
  8023b8:	1823883a 	mov	r17,r3
  8023bc:	080579c0 	call	80579c <__gedf2>
  8023c0:	1000e916 	blt	r2,zero,802768 <__kernel_rem_pio2+0xcf8>
  8023c4:	000d883a 	mov	r6,zero
  8023c8:	01cf9c34 	movhi	r7,15984
  8023cc:	880b883a 	mov	r5,r17
  8023d0:	a809883a 	mov	r4,r21
  8023d4:	08058780 	call	805878 <__muldf3>
  8023d8:	180b883a 	mov	r5,r3
  8023dc:	1009883a 	mov	r4,r2
  8023e0:	080688c0 	call	80688c <__fixdfsi>
  8023e4:	1029883a 	mov	r20,r2
  8023e8:	9485883a 	add	r2,r18,r18
  8023ec:	1085883a 	add	r2,r2,r2
  8023f0:	a009883a 	mov	r4,r20
  8023f4:	d8a1883a 	add	r16,sp,r2
  8023f8:	080690c0 	call	80690c <__floatsidf>
  8023fc:	000d883a 	mov	r6,zero
  802400:	01d05c34 	movhi	r7,16752
  802404:	1009883a 	mov	r4,r2
  802408:	180b883a 	mov	r5,r3
  80240c:	08058780 	call	805878 <__muldf3>
  802410:	880b883a 	mov	r5,r17
  802414:	100d883a 	mov	r6,r2
  802418:	180f883a 	mov	r7,r3
  80241c:	a809883a 	mov	r4,r21
  802420:	0805f900 	call	805f90 <__subdf3>
  802424:	180b883a 	mov	r5,r3
  802428:	1009883a 	mov	r4,r2
  80242c:	080688c0 	call	80688c <__fixdfsi>
  802430:	da009017 	ldw	r8,576(sp)
  802434:	94400044 	addi	r17,r18,1
  802438:	8c47883a 	add	r3,r17,r17
  80243c:	84007804 	addi	r16,r16,480
  802440:	18c7883a 	add	r3,r3,r3
  802444:	80800015 	stw	r2,0(r16)
  802448:	d8c7883a 	add	r3,sp,r3
  80244c:	42000604 	addi	r8,r8,24
  802450:	da009015 	stw	r8,576(sp)
  802454:	1d007815 	stw	r20,480(r3)
  802458:	003f4b06 	br	802188 <__alt_data_end+0xff802188>
  80245c:	da00a617 	ldw	r8,664(sp)
  802460:	008000c4 	movi	r2,3
  802464:	40bfad1e 	bne	r8,r2,80231c <__alt_data_end+0xff80231c>
  802468:	0440bc0e 	bge	zero,r17,80275c <__kernel_rem_pio2+0xcec>
  80246c:	da008e17 	ldw	r8,568(sp)
  802470:	882090fa 	slli	r16,r17,3
  802474:	dd402804 	addi	r21,sp,160
  802478:	da05883a 	add	r2,sp,r8
  80247c:	10802804 	addi	r2,r2,160
  802480:	15c00017 	ldw	r23,0(r2)
  802484:	15800117 	ldw	r22,4(r2)
  802488:	8029883a 	mov	r20,r16
  80248c:	843ffe04 	addi	r16,r16,-8
  802490:	ac21883a 	add	r16,r21,r16
  802494:	ad29883a 	add	r20,r21,r20
  802498:	dac02604 	addi	r11,sp,152
  80249c:	8811883a 	mov	r8,r17
  8024a0:	84400017 	ldw	r17,0(r16)
  8024a4:	87000117 	ldw	fp,4(r16)
  8024a8:	b80d883a 	mov	r6,r23
  8024ac:	b00f883a 	mov	r7,r22
  8024b0:	8809883a 	mov	r4,r17
  8024b4:	e00b883a 	mov	r5,fp
  8024b8:	da009b15 	stw	r8,620(sp)
  8024bc:	dac09915 	stw	r11,612(sp)
  8024c0:	08045800 	call	804580 <__adddf3>
  8024c4:	100d883a 	mov	r6,r2
  8024c8:	180f883a 	mov	r7,r3
  8024cc:	8809883a 	mov	r4,r17
  8024d0:	e00b883a 	mov	r5,fp
  8024d4:	1027883a 	mov	r19,r2
  8024d8:	1825883a 	mov	r18,r3
  8024dc:	0805f900 	call	805f90 <__subdf3>
  8024e0:	b80d883a 	mov	r6,r23
  8024e4:	b00f883a 	mov	r7,r22
  8024e8:	1009883a 	mov	r4,r2
  8024ec:	180b883a 	mov	r5,r3
  8024f0:	08045800 	call	804580 <__adddf3>
  8024f4:	dac09917 	ldw	r11,612(sp)
  8024f8:	a0800015 	stw	r2,0(r20)
  8024fc:	a0c00115 	stw	r3,4(r20)
  802500:	84c00015 	stw	r19,0(r16)
  802504:	84800115 	stw	r18,4(r16)
  802508:	843ffe04 	addi	r16,r16,-8
  80250c:	a53ffe04 	addi	r20,r20,-8
  802510:	982f883a 	mov	r23,r19
  802514:	902d883a 	mov	r22,r18
  802518:	da009b17 	ldw	r8,620(sp)
  80251c:	5c3fe01e 	bne	r11,r16,8024a0 <__alt_data_end+0xff8024a0>
  802520:	00800044 	movi	r2,1
  802524:	12008d0e 	bge	r2,r8,80275c <__kernel_rem_pio2+0xcec>
  802528:	402090fa 	slli	r16,r8,3
  80252c:	da008e17 	ldw	r8,568(sp)
  802530:	8023883a 	mov	r17,r16
  802534:	da05883a 	add	r2,sp,r8
  802538:	10802804 	addi	r2,r2,160
  80253c:	15800017 	ldw	r22,0(r2)
  802540:	15000117 	ldw	r20,4(r2)
  802544:	ac63883a 	add	r17,r21,r17
  802548:	843ffe04 	addi	r16,r16,-8
  80254c:	ac21883a 	add	r16,r21,r16
  802550:	8825883a 	mov	r18,r17
  802554:	8811883a 	mov	r8,r17
  802558:	84400017 	ldw	r17,0(r16)
  80255c:	87000117 	ldw	fp,4(r16)
  802560:	b009883a 	mov	r4,r22
  802564:	a00b883a 	mov	r5,r20
  802568:	880d883a 	mov	r6,r17
  80256c:	e00f883a 	mov	r7,fp
  802570:	da009b15 	stw	r8,620(sp)
  802574:	08045800 	call	804580 <__adddf3>
  802578:	100d883a 	mov	r6,r2
  80257c:	180f883a 	mov	r7,r3
  802580:	8809883a 	mov	r4,r17
  802584:	e00b883a 	mov	r5,fp
  802588:	102f883a 	mov	r23,r2
  80258c:	1827883a 	mov	r19,r3
  802590:	0805f900 	call	805f90 <__subdf3>
  802594:	b00d883a 	mov	r6,r22
  802598:	a00f883a 	mov	r7,r20
  80259c:	1009883a 	mov	r4,r2
  8025a0:	180b883a 	mov	r5,r3
  8025a4:	08045800 	call	804580 <__adddf3>
  8025a8:	90800015 	stw	r2,0(r18)
  8025ac:	90c00115 	stw	r3,4(r18)
  8025b0:	85c00015 	stw	r23,0(r16)
  8025b4:	84c00115 	stw	r19,4(r16)
  8025b8:	843ffe04 	addi	r16,r16,-8
  8025bc:	94bffe04 	addi	r18,r18,-8
  8025c0:	b82d883a 	mov	r22,r23
  8025c4:	9829883a 	mov	r20,r19
  8025c8:	da009b17 	ldw	r8,620(sp)
  8025cc:	ac3fe21e 	bne	r21,r16,802558 <__alt_data_end+0xff802558>
  8025d0:	4023883a 	mov	r17,r8
  8025d4:	dc002a04 	addi	r16,sp,168
  8025d8:	0005883a 	mov	r2,zero
  8025dc:	0007883a 	mov	r3,zero
  8025e0:	89800017 	ldw	r6,0(r17)
  8025e4:	89c00117 	ldw	r7,4(r17)
  8025e8:	1009883a 	mov	r4,r2
  8025ec:	8c7ffe04 	addi	r17,r17,-8
  8025f0:	180b883a 	mov	r5,r3
  8025f4:	08045800 	call	804580 <__adddf3>
  8025f8:	847ff91e 	bne	r16,r17,8025e0 <__alt_data_end+0xff8025e0>
  8025fc:	da008d17 	ldw	r8,564(sp)
  802600:	40004726 	beq	r8,zero,802720 <__kernel_rem_pio2+0xcb0>
  802604:	d9002b17 	ldw	r4,172(sp)
  802608:	d9402917 	ldw	r5,164(sp)
  80260c:	d9802a17 	ldw	r6,168(sp)
  802610:	da008f17 	ldw	r8,572(sp)
  802614:	d9c02817 	ldw	r7,160(sp)
  802618:	2960003c 	xorhi	r5,r5,32768
  80261c:	2120003c 	xorhi	r4,r4,32768
  802620:	18e0003c 	xorhi	r3,r3,32768
  802624:	41c00015 	stw	r7,0(r8)
  802628:	41400115 	stw	r5,4(r8)
  80262c:	41800215 	stw	r6,8(r8)
  802630:	41000315 	stw	r4,12(r8)
  802634:	40800415 	stw	r2,16(r8)
  802638:	40c00515 	stw	r3,20(r8)
  80263c:	003f3706 	br	80231c <__alt_data_end+0xff80231c>
  802640:	da008e17 	ldw	r8,568(sp)
  802644:	d8802804 	addi	r2,sp,160
  802648:	dc002604 	addi	r16,sp,152
  80264c:	1225883a 	add	r18,r2,r8
  802650:	0007883a 	mov	r3,zero
  802654:	0005883a 	mov	r2,zero
  802658:	91800017 	ldw	r6,0(r18)
  80265c:	91c00117 	ldw	r7,4(r18)
  802660:	1009883a 	mov	r4,r2
  802664:	94bffe04 	addi	r18,r18,-8
  802668:	180b883a 	mov	r5,r3
  80266c:	08045800 	call	804580 <__adddf3>
  802670:	943ff91e 	bne	r18,r16,802658 <__alt_data_end+0xff802658>
  802674:	da008d17 	ldw	r8,564(sp)
  802678:	d9002817 	ldw	r4,160(sp)
  80267c:	d9402917 	ldw	r5,164(sp)
  802680:	40001a26 	beq	r8,zero,8026ec <__kernel_rem_pio2+0xc7c>
  802684:	da008f17 	ldw	r8,572(sp)
  802688:	19a0003c 	xorhi	r6,r3,32768
  80268c:	180f883a 	mov	r7,r3
  802690:	41800115 	stw	r6,4(r8)
  802694:	40800015 	stw	r2,0(r8)
  802698:	100d883a 	mov	r6,r2
  80269c:	0805f900 	call	805f90 <__subdf3>
  8026a0:	04400c0e 	bge	zero,r17,8026d4 <__kernel_rem_pio2+0xc64>
  8026a4:	dc002a04 	addi	r16,sp,168
  8026a8:	04800044 	movi	r18,1
  8026ac:	81800017 	ldw	r6,0(r16)
  8026b0:	81c00117 	ldw	r7,4(r16)
  8026b4:	1009883a 	mov	r4,r2
  8026b8:	180b883a 	mov	r5,r3
  8026bc:	94800044 	addi	r18,r18,1
  8026c0:	08045800 	call	804580 <__adddf3>
  8026c4:	84000204 	addi	r16,r16,8
  8026c8:	8cbff80e 	bge	r17,r18,8026ac <__alt_data_end+0xff8026ac>
  8026cc:	da008d17 	ldw	r8,564(sp)
  8026d0:	40004226 	beq	r8,zero,8027dc <__kernel_rem_pio2+0xd6c>
  8026d4:	da008f17 	ldw	r8,572(sp)
  8026d8:	1009883a 	mov	r4,r2
  8026dc:	18a0003c 	xorhi	r2,r3,32768
  8026e0:	41000215 	stw	r4,8(r8)
  8026e4:	40800315 	stw	r2,12(r8)
  8026e8:	003f0c06 	br	80231c <__alt_data_end+0xff80231c>
  8026ec:	da008f17 	ldw	r8,572(sp)
  8026f0:	100d883a 	mov	r6,r2
  8026f4:	180f883a 	mov	r7,r3
  8026f8:	40800015 	stw	r2,0(r8)
  8026fc:	40c00115 	stw	r3,4(r8)
  802700:	0805f900 	call	805f90 <__subdf3>
  802704:	047fe716 	blt	zero,r17,8026a4 <__alt_data_end+0xff8026a4>
  802708:	da008f17 	ldw	r8,572(sp)
  80270c:	1009883a 	mov	r4,r2
  802710:	1805883a 	mov	r2,r3
  802714:	41000215 	stw	r4,8(r8)
  802718:	40800315 	stw	r2,12(r8)
  80271c:	003eff06 	br	80231c <__alt_data_end+0xff80231c>
  802720:	da008f17 	ldw	r8,572(sp)
  802724:	d9802817 	ldw	r6,160(sp)
  802728:	d9402a17 	ldw	r5,168(sp)
  80272c:	d9002b17 	ldw	r4,172(sp)
  802730:	41800015 	stw	r6,0(r8)
  802734:	d9802917 	ldw	r6,164(sp)
  802738:	41400215 	stw	r5,8(r8)
  80273c:	41000315 	stw	r4,12(r8)
  802740:	41800115 	stw	r6,4(r8)
  802744:	40800415 	stw	r2,16(r8)
  802748:	40c00515 	stw	r3,20(r8)
  80274c:	003ef306 	br	80231c <__alt_data_end+0xff80231c>
  802750:	da00a617 	ldw	r8,664(sp)
  802754:	008000c4 	movi	r2,3
  802758:	40bef01e 	bne	r8,r2,80231c <__alt_data_end+0xff80231c>
  80275c:	0005883a 	mov	r2,zero
  802760:	0007883a 	mov	r3,zero
  802764:	003fa506 	br	8025fc <__alt_data_end+0xff8025fc>
  802768:	9485883a 	add	r2,r18,r18
  80276c:	1085883a 	add	r2,r2,r2
  802770:	d8a1883a 	add	r16,sp,r2
  802774:	880b883a 	mov	r5,r17
  802778:	a809883a 	mov	r4,r21
  80277c:	84007804 	addi	r16,r16,480
  802780:	080688c0 	call	80688c <__fixdfsi>
  802784:	80800015 	stw	r2,0(r16)
  802788:	9023883a 	mov	r17,r18
  80278c:	003e7e06 	br	802188 <__alt_data_end+0xff802188>
  802790:	a80d883a 	mov	r6,r21
  802794:	400f883a 	mov	r7,r8
  802798:	0009883a 	mov	r4,zero
  80279c:	014ffc34 	movhi	r5,16368
  8027a0:	0805f900 	call	805f90 <__subdf3>
  8027a4:	102b883a 	mov	r21,r2
  8027a8:	1811883a 	mov	r8,r3
  8027ac:	04c00084 	movi	r19,2
  8027b0:	003dc006 	br	801eb4 <__alt_data_end+0xff801eb4>
  8027b4:	da00a617 	ldw	r8,664(sp)
  8027b8:	00800084 	movi	r2,2
  8027bc:	123fe416 	blt	r2,r8,802750 <__alt_data_end+0xff802750>
  8027c0:	02000c16 	blt	zero,r8,8027f4 <__kernel_rem_pio2+0xd84>
  8027c4:	403ed51e 	bne	r8,zero,80231c <__alt_data_end+0xff80231c>
  8027c8:	0005883a 	mov	r2,zero
  8027cc:	0007883a 	mov	r3,zero
  8027d0:	003ecc06 	br	802304 <__alt_data_end+0xff802304>
  8027d4:	d8009215 	stw	zero,584(sp)
  8027d8:	003cc306 	br	801ae8 <__alt_data_end+0xff801ae8>
  8027dc:	da008f17 	ldw	r8,572(sp)
  8027e0:	1009883a 	mov	r4,r2
  8027e4:	1805883a 	mov	r2,r3
  8027e8:	41000215 	stw	r4,8(r8)
  8027ec:	40800315 	stw	r2,12(r8)
  8027f0:	003eca06 	br	80231c <__alt_data_end+0xff80231c>
  8027f4:	0005883a 	mov	r2,zero
  8027f8:	0007883a 	mov	r3,zero
  8027fc:	003f9d06 	br	802674 <__alt_data_end+0xff802674>

00802800 <__kernel_sin>:
  802800:	00a00034 	movhi	r2,32768
  802804:	defff404 	addi	sp,sp,-48
  802808:	10bfffc4 	addi	r2,r2,-1
  80280c:	00cf9034 	movhi	r3,15936
  802810:	ddc00915 	stw	r23,36(sp)
  802814:	dd800815 	stw	r22,32(sp)
  802818:	dc400315 	stw	r17,12(sp)
  80281c:	dc000215 	stw	r16,8(sp)
  802820:	dfc00b15 	stw	ra,44(sp)
  802824:	df000a15 	stw	fp,40(sp)
  802828:	dd400715 	stw	r21,28(sp)
  80282c:	dd000615 	stw	r20,24(sp)
  802830:	dcc00515 	stw	r19,20(sp)
  802834:	dc800415 	stw	r18,16(sp)
  802838:	2884703a 	and	r2,r5,r2
  80283c:	18ffffc4 	addi	r3,r3,-1
  802840:	2821883a 	mov	r16,r5
  802844:	2023883a 	mov	r17,r4
  802848:	302f883a 	mov	r23,r6
  80284c:	382d883a 	mov	r22,r7
  802850:	18800216 	blt	r3,r2,80285c <__kernel_sin+0x5c>
  802854:	080688c0 	call	80688c <__fixdfsi>
  802858:	10009926 	beq	r2,zero,802ac0 <__kernel_sin+0x2c0>
  80285c:	880d883a 	mov	r6,r17
  802860:	800f883a 	mov	r7,r16
  802864:	8809883a 	mov	r4,r17
  802868:	800b883a 	mov	r5,r16
  80286c:	08058780 	call	805878 <__muldf3>
  802870:	100d883a 	mov	r6,r2
  802874:	180f883a 	mov	r7,r3
  802878:	8809883a 	mov	r4,r17
  80287c:	800b883a 	mov	r5,r16
  802880:	1027883a 	mov	r19,r2
  802884:	1825883a 	mov	r18,r3
  802888:	08058780 	call	805878 <__muldf3>
  80288c:	0196b434 	movhi	r6,23248
  802890:	01cf79b4 	movhi	r7,15846
  802894:	31b55f04 	addi	r6,r6,-10884
  802898:	39f64e84 	addi	r7,r7,-9926
  80289c:	9809883a 	mov	r4,r19
  8028a0:	900b883a 	mov	r5,r18
  8028a4:	102b883a 	mov	r21,r2
  8028a8:	1829883a 	mov	r20,r3
  8028ac:	08058780 	call	805878 <__muldf3>
  8028b0:	01a28b34 	movhi	r6,35372
  8028b4:	01cf96f4 	movhi	r7,15963
  8028b8:	31a73ac4 	addi	r6,r6,-25365
  8028bc:	39f97984 	addi	r7,r7,-6682
  8028c0:	1009883a 	mov	r4,r2
  8028c4:	180b883a 	mov	r5,r3
  8028c8:	0805f900 	call	805f90 <__subdf3>
  8028cc:	980d883a 	mov	r6,r19
  8028d0:	900f883a 	mov	r7,r18
  8028d4:	1009883a 	mov	r4,r2
  8028d8:	180b883a 	mov	r5,r3
  8028dc:	08058780 	call	805878 <__muldf3>
  8028e0:	0195ecb4 	movhi	r6,22450
  8028e4:	01cfb1f4 	movhi	r7,16071
  8028e8:	31bf9f44 	addi	r6,r6,-387
  8028ec:	39c778c4 	addi	r7,r7,7651
  8028f0:	1009883a 	mov	r4,r2
  8028f4:	180b883a 	mov	r5,r3
  8028f8:	08045800 	call	804580 <__adddf3>
  8028fc:	980d883a 	mov	r6,r19
  802900:	900f883a 	mov	r7,r18
  802904:	1009883a 	mov	r4,r2
  802908:	180b883a 	mov	r5,r3
  80290c:	08058780 	call	805878 <__muldf3>
  802910:	01867074 	movhi	r6,6593
  802914:	01cfcab4 	movhi	r7,16170
  802918:	31987544 	addi	r6,r6,25045
  80291c:	39c06804 	addi	r7,r7,416
  802920:	1009883a 	mov	r4,r2
  802924:	180b883a 	mov	r5,r3
  802928:	0805f900 	call	805f90 <__subdf3>
  80292c:	980d883a 	mov	r6,r19
  802930:	900f883a 	mov	r7,r18
  802934:	1009883a 	mov	r4,r2
  802938:	180b883a 	mov	r5,r3
  80293c:	08058780 	call	805878 <__muldf3>
  802940:	01844474 	movhi	r6,4369
  802944:	01cfe074 	movhi	r7,16257
  802948:	31be2984 	addi	r6,r6,-1882
  80294c:	39c44444 	addi	r7,r7,4369
  802950:	1009883a 	mov	r4,r2
  802954:	180b883a 	mov	r5,r3
  802958:	08045800 	call	804580 <__adddf3>
  80295c:	1011883a 	mov	r8,r2
  802960:	d8800c17 	ldw	r2,48(sp)
  802964:	1839883a 	mov	fp,r3
  802968:	10003e26 	beq	r2,zero,802a64 <__kernel_sin+0x264>
  80296c:	000d883a 	mov	r6,zero
  802970:	01cff834 	movhi	r7,16352
  802974:	b809883a 	mov	r4,r23
  802978:	b00b883a 	mov	r5,r22
  80297c:	da000015 	stw	r8,0(sp)
  802980:	08058780 	call	805878 <__muldf3>
  802984:	da000017 	ldw	r8,0(sp)
  802988:	e00f883a 	mov	r7,fp
  80298c:	a809883a 	mov	r4,r21
  802990:	400d883a 	mov	r6,r8
  802994:	a00b883a 	mov	r5,r20
  802998:	d8c00115 	stw	r3,4(sp)
  80299c:	d8800015 	stw	r2,0(sp)
  8029a0:	08058780 	call	805878 <__muldf3>
  8029a4:	da800017 	ldw	r10,0(sp)
  8029a8:	da400117 	ldw	r9,4(sp)
  8029ac:	100d883a 	mov	r6,r2
  8029b0:	5009883a 	mov	r4,r10
  8029b4:	480b883a 	mov	r5,r9
  8029b8:	180f883a 	mov	r7,r3
  8029bc:	0805f900 	call	805f90 <__subdf3>
  8029c0:	980d883a 	mov	r6,r19
  8029c4:	900f883a 	mov	r7,r18
  8029c8:	1009883a 	mov	r4,r2
  8029cc:	180b883a 	mov	r5,r3
  8029d0:	08058780 	call	805878 <__muldf3>
  8029d4:	b80d883a 	mov	r6,r23
  8029d8:	b00f883a 	mov	r7,r22
  8029dc:	1009883a 	mov	r4,r2
  8029e0:	180b883a 	mov	r5,r3
  8029e4:	0805f900 	call	805f90 <__subdf3>
  8029e8:	01955574 	movhi	r6,21845
  8029ec:	01cff174 	movhi	r7,16325
  8029f0:	31955244 	addi	r6,r6,21833
  8029f4:	39d55544 	addi	r7,r7,21845
  8029f8:	a809883a 	mov	r4,r21
  8029fc:	a00b883a 	mov	r5,r20
  802a00:	1027883a 	mov	r19,r2
  802a04:	1825883a 	mov	r18,r3
  802a08:	08058780 	call	805878 <__muldf3>
  802a0c:	100d883a 	mov	r6,r2
  802a10:	180f883a 	mov	r7,r3
  802a14:	9809883a 	mov	r4,r19
  802a18:	900b883a 	mov	r5,r18
  802a1c:	08045800 	call	804580 <__adddf3>
  802a20:	100d883a 	mov	r6,r2
  802a24:	180f883a 	mov	r7,r3
  802a28:	8809883a 	mov	r4,r17
  802a2c:	800b883a 	mov	r5,r16
  802a30:	0805f900 	call	805f90 <__subdf3>
  802a34:	dfc00b17 	ldw	ra,44(sp)
  802a38:	df000a17 	ldw	fp,40(sp)
  802a3c:	ddc00917 	ldw	r23,36(sp)
  802a40:	dd800817 	ldw	r22,32(sp)
  802a44:	dd400717 	ldw	r21,28(sp)
  802a48:	dd000617 	ldw	r20,24(sp)
  802a4c:	dcc00517 	ldw	r19,20(sp)
  802a50:	dc800417 	ldw	r18,16(sp)
  802a54:	dc400317 	ldw	r17,12(sp)
  802a58:	dc000217 	ldw	r16,8(sp)
  802a5c:	dec00c04 	addi	sp,sp,48
  802a60:	f800283a 	ret
  802a64:	400d883a 	mov	r6,r8
  802a68:	9809883a 	mov	r4,r19
  802a6c:	900b883a 	mov	r5,r18
  802a70:	180f883a 	mov	r7,r3
  802a74:	08058780 	call	805878 <__muldf3>
  802a78:	01955574 	movhi	r6,21845
  802a7c:	01cff174 	movhi	r7,16325
  802a80:	31955244 	addi	r6,r6,21833
  802a84:	39d55544 	addi	r7,r7,21845
  802a88:	1009883a 	mov	r4,r2
  802a8c:	180b883a 	mov	r5,r3
  802a90:	0805f900 	call	805f90 <__subdf3>
  802a94:	a80d883a 	mov	r6,r21
  802a98:	a00f883a 	mov	r7,r20
  802a9c:	1009883a 	mov	r4,r2
  802aa0:	180b883a 	mov	r5,r3
  802aa4:	08058780 	call	805878 <__muldf3>
  802aa8:	880d883a 	mov	r6,r17
  802aac:	800f883a 	mov	r7,r16
  802ab0:	1009883a 	mov	r4,r2
  802ab4:	180b883a 	mov	r5,r3
  802ab8:	08045800 	call	804580 <__adddf3>
  802abc:	003fdd06 	br	802a34 <__alt_data_end+0xff802a34>
  802ac0:	8805883a 	mov	r2,r17
  802ac4:	8007883a 	mov	r3,r16
  802ac8:	003fda06 	br	802a34 <__alt_data_end+0xff802a34>

00802acc <fabs>:
  802acc:	00e00034 	movhi	r3,32768
  802ad0:	18ffffc4 	addi	r3,r3,-1
  802ad4:	2005883a 	mov	r2,r4
  802ad8:	28c6703a 	and	r3,r5,r3
  802adc:	f800283a 	ret

00802ae0 <floor>:
  802ae0:	2811d53a 	srai	r8,r5,20
  802ae4:	defffa04 	addi	sp,sp,-24
  802ae8:	dcc00315 	stw	r19,12(sp)
  802aec:	4201ffcc 	andi	r8,r8,2047
  802af0:	dc800215 	stw	r18,8(sp)
  802af4:	dc400115 	stw	r17,4(sp)
  802af8:	dc000015 	stw	r16,0(sp)
  802afc:	dfc00515 	stw	ra,20(sp)
  802b00:	dd000415 	stw	r20,16(sp)
  802b04:	44bf0044 	addi	r18,r8,-1023
  802b08:	018004c4 	movi	r6,19
  802b0c:	2821883a 	mov	r16,r5
  802b10:	2005883a 	mov	r2,r4
  802b14:	280f883a 	mov	r7,r5
  802b18:	2827883a 	mov	r19,r5
  802b1c:	2023883a 	mov	r17,r4
  802b20:	34801916 	blt	r6,r18,802b88 <floor+0xa8>
  802b24:	90003c16 	blt	r18,zero,802c18 <floor+0x138>
  802b28:	05000434 	movhi	r20,16
  802b2c:	a53fffc4 	addi	r20,r20,-1
  802b30:	a4a9d83a 	sra	r20,r20,r18
  802b34:	2d0c703a 	and	r6,r5,r20
  802b38:	310cb03a 	or	r6,r6,r4
  802b3c:	30001626 	beq	r6,zero,802b98 <floor+0xb8>
  802b40:	01a20034 	movhi	r6,34816
  802b44:	01df8e34 	movhi	r7,32312
  802b48:	319d6704 	addi	r6,r6,30108
  802b4c:	39f90f04 	addi	r7,r7,-7108
  802b50:	08045800 	call	804580 <__adddf3>
  802b54:	000d883a 	mov	r6,zero
  802b58:	000f883a 	mov	r7,zero
  802b5c:	1009883a 	mov	r4,r2
  802b60:	180b883a 	mov	r5,r3
  802b64:	080579c0 	call	80579c <__gedf2>
  802b68:	0080040e 	bge	zero,r2,802b7c <floor+0x9c>
  802b6c:	80003c16 	blt	r16,zero,802c60 <floor+0x180>
  802b70:	0520303a 	nor	r16,zero,r20
  802b74:	84e0703a 	and	r16,r16,r19
  802b78:	0023883a 	mov	r17,zero
  802b7c:	8805883a 	mov	r2,r17
  802b80:	8007883a 	mov	r3,r16
  802b84:	00000506 	br	802b9c <floor+0xbc>
  802b88:	01800cc4 	movi	r6,51
  802b8c:	34800b0e 	bge	r6,r18,802bbc <floor+0xdc>
  802b90:	01810004 	movi	r6,1024
  802b94:	91802f26 	beq	r18,r6,802c54 <floor+0x174>
  802b98:	3807883a 	mov	r3,r7
  802b9c:	dfc00517 	ldw	ra,20(sp)
  802ba0:	dd000417 	ldw	r20,16(sp)
  802ba4:	dcc00317 	ldw	r19,12(sp)
  802ba8:	dc800217 	ldw	r18,8(sp)
  802bac:	dc400117 	ldw	r17,4(sp)
  802bb0:	dc000017 	ldw	r16,0(sp)
  802bb4:	dec00604 	addi	sp,sp,24
  802bb8:	f800283a 	ret
  802bbc:	423efb44 	addi	r8,r8,-1043
  802bc0:	053fffc4 	movi	r20,-1
  802bc4:	a228d83a 	srl	r20,r20,r8
  802bc8:	250c703a 	and	r6,r4,r20
  802bcc:	303ff226 	beq	r6,zero,802b98 <__alt_data_end+0xff802b98>
  802bd0:	01a20034 	movhi	r6,34816
  802bd4:	01df8e34 	movhi	r7,32312
  802bd8:	319d6704 	addi	r6,r6,30108
  802bdc:	39f90f04 	addi	r7,r7,-7108
  802be0:	08045800 	call	804580 <__adddf3>
  802be4:	000d883a 	mov	r6,zero
  802be8:	000f883a 	mov	r7,zero
  802bec:	1009883a 	mov	r4,r2
  802bf0:	180b883a 	mov	r5,r3
  802bf4:	080579c0 	call	80579c <__gedf2>
  802bf8:	00bfe00e 	bge	zero,r2,802b7c <__alt_data_end+0xff802b7c>
  802bfc:	80001c16 	blt	r16,zero,802c70 <floor+0x190>
  802c00:	0510303a 	nor	r8,zero,r20
  802c04:	9821883a 	mov	r16,r19
  802c08:	8a22703a 	and	r17,r17,r8
  802c0c:	8805883a 	mov	r2,r17
  802c10:	8007883a 	mov	r3,r16
  802c14:	003fe106 	br	802b9c <__alt_data_end+0xff802b9c>
  802c18:	01a20034 	movhi	r6,34816
  802c1c:	01df8e34 	movhi	r7,32312
  802c20:	319d6704 	addi	r6,r6,30108
  802c24:	39f90f04 	addi	r7,r7,-7108
  802c28:	08045800 	call	804580 <__adddf3>
  802c2c:	000d883a 	mov	r6,zero
  802c30:	000f883a 	mov	r7,zero
  802c34:	1009883a 	mov	r4,r2
  802c38:	180b883a 	mov	r5,r3
  802c3c:	080579c0 	call	80579c <__gedf2>
  802c40:	00bfce0e 	bge	zero,r2,802b7c <__alt_data_end+0xff802b7c>
  802c44:	80001516 	blt	r16,zero,802c9c <floor+0x1bc>
  802c48:	0023883a 	mov	r17,zero
  802c4c:	0021883a 	mov	r16,zero
  802c50:	003fca06 	br	802b7c <__alt_data_end+0xff802b7c>
  802c54:	200d883a 	mov	r6,r4
  802c58:	08045800 	call	804580 <__adddf3>
  802c5c:	003fcf06 	br	802b9c <__alt_data_end+0xff802b9c>
  802c60:	00800434 	movhi	r2,16
  802c64:	14a5d83a 	sra	r18,r2,r18
  802c68:	84a7883a 	add	r19,r16,r18
  802c6c:	003fc006 	br	802b70 <__alt_data_end+0xff802b70>
  802c70:	00800504 	movi	r2,20
  802c74:	90801326 	beq	r18,r2,802cc4 <floor+0x1e4>
  802c78:	00800d04 	movi	r2,52
  802c7c:	14a5c83a 	sub	r18,r2,r18
  802c80:	00800044 	movi	r2,1
  802c84:	1484983a 	sll	r2,r2,r18
  802c88:	1445883a 	add	r2,r2,r17
  802c8c:	14400b2e 	bgeu	r2,r17,802cbc <floor+0x1dc>
  802c90:	84c00044 	addi	r19,r16,1
  802c94:	1023883a 	mov	r17,r2
  802c98:	003fd906 	br	802c00 <__alt_data_end+0xff802c00>
  802c9c:	00a00034 	movhi	r2,32768
  802ca0:	10bfffc4 	addi	r2,r2,-1
  802ca4:	8084703a 	and	r2,r16,r2
  802ca8:	1462b03a 	or	r17,r2,r17
  802cac:	883fb326 	beq	r17,zero,802b7c <__alt_data_end+0xff802b7c>
  802cb0:	0023883a 	mov	r17,zero
  802cb4:	042ffc34 	movhi	r16,49136
  802cb8:	003fb006 	br	802b7c <__alt_data_end+0xff802b7c>
  802cbc:	1023883a 	mov	r17,r2
  802cc0:	003fcf06 	br	802c00 <__alt_data_end+0xff802c00>
  802cc4:	84c00044 	addi	r19,r16,1
  802cc8:	003fcd06 	br	802c00 <__alt_data_end+0xff802c00>

00802ccc <__fpclassifyd>:
  802ccc:	00a00034 	movhi	r2,32768
  802cd0:	10bfffc4 	addi	r2,r2,-1
  802cd4:	2884703a 	and	r2,r5,r2
  802cd8:	10000726 	beq	r2,zero,802cf8 <__fpclassifyd+0x2c>
  802cdc:	00fffc34 	movhi	r3,65520
  802ce0:	019ff834 	movhi	r6,32736
  802ce4:	28c7883a 	add	r3,r5,r3
  802ce8:	31bfffc4 	addi	r6,r6,-1
  802cec:	30c00536 	bltu	r6,r3,802d04 <__fpclassifyd+0x38>
  802cf0:	00800104 	movi	r2,4
  802cf4:	f800283a 	ret
  802cf8:	2000021e 	bne	r4,zero,802d04 <__fpclassifyd+0x38>
  802cfc:	00800084 	movi	r2,2
  802d00:	f800283a 	ret
  802d04:	00dffc34 	movhi	r3,32752
  802d08:	019ff834 	movhi	r6,32736
  802d0c:	28cb883a 	add	r5,r5,r3
  802d10:	31bfffc4 	addi	r6,r6,-1
  802d14:	317ff62e 	bgeu	r6,r5,802cf0 <__alt_data_end+0xff802cf0>
  802d18:	01400434 	movhi	r5,16
  802d1c:	297fffc4 	addi	r5,r5,-1
  802d20:	28800236 	bltu	r5,r2,802d2c <__fpclassifyd+0x60>
  802d24:	008000c4 	movi	r2,3
  802d28:	f800283a 	ret
  802d2c:	10c00226 	beq	r2,r3,802d38 <__fpclassifyd+0x6c>
  802d30:	0005883a 	mov	r2,zero
  802d34:	f800283a 	ret
  802d38:	2005003a 	cmpeq	r2,r4,zero
  802d3c:	f800283a 	ret

00802d40 <matherr>:
  802d40:	0005883a 	mov	r2,zero
  802d44:	f800283a 	ret

00802d48 <scalbn>:
  802d48:	2a1ffc2c 	andhi	r8,r5,32752
  802d4c:	4011d53a 	srai	r8,r8,20
  802d50:	defffe04 	addi	sp,sp,-8
  802d54:	dc000015 	stw	r16,0(sp)
  802d58:	dfc00115 	stw	ra,4(sp)
  802d5c:	280f883a 	mov	r7,r5
  802d60:	2015883a 	mov	r10,r4
  802d64:	3021883a 	mov	r16,r6
  802d68:	40001e1e 	bne	r8,zero,802de4 <scalbn+0x9c>
  802d6c:	00a00034 	movhi	r2,32768
  802d70:	10bfffc4 	addi	r2,r2,-1
  802d74:	2884703a 	and	r2,r5,r2
  802d78:	1104b03a 	or	r2,r2,r4
  802d7c:	10002226 	beq	r2,zero,802e08 <scalbn+0xc0>
  802d80:	01d0d434 	movhi	r7,17232
  802d84:	000d883a 	mov	r6,zero
  802d88:	08058780 	call	805878 <__muldf3>
  802d8c:	013ffff4 	movhi	r4,65535
  802d90:	210f2c04 	addi	r4,r4,15536
  802d94:	1015883a 	mov	r10,r2
  802d98:	180f883a 	mov	r7,r3
  802d9c:	81002a16 	blt	r16,r4,802e48 <scalbn+0x100>
  802da0:	191ffc2c 	andhi	r4,r3,32752
  802da4:	2009d53a 	srai	r4,r4,20
  802da8:	223ff284 	addi	r8,r4,-54
  802dac:	8211883a 	add	r8,r16,r8
  802db0:	0081ff84 	movi	r2,2046
  802db4:	12002f16 	blt	r2,r8,802e74 <scalbn+0x12c>
  802db8:	0200190e 	bge	zero,r8,802e20 <scalbn+0xd8>
  802dbc:	4010953a 	slli	r8,r8,20
  802dc0:	01600434 	movhi	r5,32784
  802dc4:	297fffc4 	addi	r5,r5,-1
  802dc8:	194e703a 	and	r7,r3,r5
  802dcc:	5005883a 	mov	r2,r10
  802dd0:	3a06b03a 	or	r3,r7,r8
  802dd4:	dfc00117 	ldw	ra,4(sp)
  802dd8:	dc000017 	ldw	r16,0(sp)
  802ddc:	dec00204 	addi	sp,sp,8
  802de0:	f800283a 	ret
  802de4:	0081ffc4 	movi	r2,2047
  802de8:	2807883a 	mov	r3,r5
  802dec:	40bfef1e 	bne	r8,r2,802dac <__alt_data_end+0xff802dac>
  802df0:	200d883a 	mov	r6,r4
  802df4:	08045800 	call	804580 <__adddf3>
  802df8:	dfc00117 	ldw	ra,4(sp)
  802dfc:	dc000017 	ldw	r16,0(sp)
  802e00:	dec00204 	addi	sp,sp,8
  802e04:	f800283a 	ret
  802e08:	2005883a 	mov	r2,r4
  802e0c:	2807883a 	mov	r3,r5
  802e10:	dfc00117 	ldw	ra,4(sp)
  802e14:	dc000017 	ldw	r16,0(sp)
  802e18:	dec00204 	addi	sp,sp,8
  802e1c:	f800283a 	ret
  802e20:	00bff2c4 	movi	r2,-53
  802e24:	4080240e 	bge	r8,r2,802eb8 <scalbn+0x170>
  802e28:	00b0d414 	movui	r2,50000
  802e2c:	14001116 	blt	r2,r16,802e74 <scalbn+0x12c>
  802e30:	0130be74 	movhi	r4,49913
  802e34:	01406974 	movhi	r5,421
  802e38:	213cd644 	addi	r4,r4,-3239
  802e3c:	295b87c4 	addi	r5,r5,28191
  802e40:	500d883a 	mov	r6,r10
  802e44:	0802ee40 	call	802ee4 <copysign>
  802e48:	01b0be74 	movhi	r6,49913
  802e4c:	01c06974 	movhi	r7,421
  802e50:	31bcd644 	addi	r6,r6,-3239
  802e54:	39db87c4 	addi	r7,r7,28191
  802e58:	1009883a 	mov	r4,r2
  802e5c:	180b883a 	mov	r5,r3
  802e60:	08058780 	call	805878 <__muldf3>
  802e64:	dfc00117 	ldw	ra,4(sp)
  802e68:	dc000017 	ldw	r16,0(sp)
  802e6c:	dec00204 	addi	sp,sp,8
  802e70:	f800283a 	ret
  802e74:	01220034 	movhi	r4,34816
  802e78:	015f8e34 	movhi	r5,32312
  802e7c:	500d883a 	mov	r6,r10
  802e80:	211d6704 	addi	r4,r4,30108
  802e84:	29790f04 	addi	r5,r5,-7108
  802e88:	0802ee40 	call	802ee4 <copysign>
  802e8c:	01a20034 	movhi	r6,34816
  802e90:	01df8e34 	movhi	r7,32312
  802e94:	319d6704 	addi	r6,r6,30108
  802e98:	39f90f04 	addi	r7,r7,-7108
  802e9c:	1009883a 	mov	r4,r2
  802ea0:	180b883a 	mov	r5,r3
  802ea4:	08058780 	call	805878 <__muldf3>
  802ea8:	dfc00117 	ldw	ra,4(sp)
  802eac:	dc000017 	ldw	r16,0(sp)
  802eb0:	dec00204 	addi	sp,sp,8
  802eb4:	f800283a 	ret
  802eb8:	42000d84 	addi	r8,r8,54
  802ebc:	4012953a 	slli	r9,r8,20
  802ec0:	01e00434 	movhi	r7,32784
  802ec4:	39ffffc4 	addi	r7,r7,-1
  802ec8:	19ca703a 	and	r5,r3,r7
  802ecc:	000d883a 	mov	r6,zero
  802ed0:	01cf2434 	movhi	r7,15504
  802ed4:	5009883a 	mov	r4,r10
  802ed8:	494ab03a 	or	r5,r9,r5
  802edc:	08058780 	call	805878 <__muldf3>
  802ee0:	003fbc06 	br	802dd4 <__alt_data_end+0xff802dd4>

00802ee4 <copysign>:
  802ee4:	2005883a 	mov	r2,r4
  802ee8:	01200034 	movhi	r4,32768
  802eec:	213fffc4 	addi	r4,r4,-1
  802ef0:	38e0002c 	andhi	r3,r7,32768
  802ef4:	290a703a 	and	r5,r5,r4
  802ef8:	28c6b03a 	or	r3,r5,r3
  802efc:	f800283a 	ret

00802f00 <__divsi3>:
  802f00:	20001b16 	blt	r4,zero,802f70 <__divsi3+0x70>
  802f04:	000f883a 	mov	r7,zero
  802f08:	28001616 	blt	r5,zero,802f64 <__divsi3+0x64>
  802f0c:	200d883a 	mov	r6,r4
  802f10:	29001a2e 	bgeu	r5,r4,802f7c <__divsi3+0x7c>
  802f14:	00800804 	movi	r2,32
  802f18:	00c00044 	movi	r3,1
  802f1c:	00000106 	br	802f24 <__divsi3+0x24>
  802f20:	10000d26 	beq	r2,zero,802f58 <__divsi3+0x58>
  802f24:	294b883a 	add	r5,r5,r5
  802f28:	10bfffc4 	addi	r2,r2,-1
  802f2c:	18c7883a 	add	r3,r3,r3
  802f30:	293ffb36 	bltu	r5,r4,802f20 <__alt_data_end+0xff802f20>
  802f34:	0005883a 	mov	r2,zero
  802f38:	18000726 	beq	r3,zero,802f58 <__divsi3+0x58>
  802f3c:	0005883a 	mov	r2,zero
  802f40:	31400236 	bltu	r6,r5,802f4c <__divsi3+0x4c>
  802f44:	314dc83a 	sub	r6,r6,r5
  802f48:	10c4b03a 	or	r2,r2,r3
  802f4c:	1806d07a 	srli	r3,r3,1
  802f50:	280ad07a 	srli	r5,r5,1
  802f54:	183ffa1e 	bne	r3,zero,802f40 <__alt_data_end+0xff802f40>
  802f58:	38000126 	beq	r7,zero,802f60 <__divsi3+0x60>
  802f5c:	0085c83a 	sub	r2,zero,r2
  802f60:	f800283a 	ret
  802f64:	014bc83a 	sub	r5,zero,r5
  802f68:	39c0005c 	xori	r7,r7,1
  802f6c:	003fe706 	br	802f0c <__alt_data_end+0xff802f0c>
  802f70:	0109c83a 	sub	r4,zero,r4
  802f74:	01c00044 	movi	r7,1
  802f78:	003fe306 	br	802f08 <__alt_data_end+0xff802f08>
  802f7c:	00c00044 	movi	r3,1
  802f80:	003fee06 	br	802f3c <__alt_data_end+0xff802f3c>

00802f84 <__modsi3>:
  802f84:	20001716 	blt	r4,zero,802fe4 <__modsi3+0x60>
  802f88:	000f883a 	mov	r7,zero
  802f8c:	2005883a 	mov	r2,r4
  802f90:	28001216 	blt	r5,zero,802fdc <__modsi3+0x58>
  802f94:	2900162e 	bgeu	r5,r4,802ff0 <__modsi3+0x6c>
  802f98:	01800804 	movi	r6,32
  802f9c:	00c00044 	movi	r3,1
  802fa0:	00000106 	br	802fa8 <__modsi3+0x24>
  802fa4:	30000a26 	beq	r6,zero,802fd0 <__modsi3+0x4c>
  802fa8:	294b883a 	add	r5,r5,r5
  802fac:	31bfffc4 	addi	r6,r6,-1
  802fb0:	18c7883a 	add	r3,r3,r3
  802fb4:	293ffb36 	bltu	r5,r4,802fa4 <__alt_data_end+0xff802fa4>
  802fb8:	18000526 	beq	r3,zero,802fd0 <__modsi3+0x4c>
  802fbc:	1806d07a 	srli	r3,r3,1
  802fc0:	11400136 	bltu	r2,r5,802fc8 <__modsi3+0x44>
  802fc4:	1145c83a 	sub	r2,r2,r5
  802fc8:	280ad07a 	srli	r5,r5,1
  802fcc:	183ffb1e 	bne	r3,zero,802fbc <__alt_data_end+0xff802fbc>
  802fd0:	38000126 	beq	r7,zero,802fd8 <__modsi3+0x54>
  802fd4:	0085c83a 	sub	r2,zero,r2
  802fd8:	f800283a 	ret
  802fdc:	014bc83a 	sub	r5,zero,r5
  802fe0:	003fec06 	br	802f94 <__alt_data_end+0xff802f94>
  802fe4:	0109c83a 	sub	r4,zero,r4
  802fe8:	01c00044 	movi	r7,1
  802fec:	003fe706 	br	802f8c <__alt_data_end+0xff802f8c>
  802ff0:	00c00044 	movi	r3,1
  802ff4:	003ff106 	br	802fbc <__alt_data_end+0xff802fbc>

00802ff8 <__udivsi3>:
  802ff8:	200d883a 	mov	r6,r4
  802ffc:	2900152e 	bgeu	r5,r4,803054 <__udivsi3+0x5c>
  803000:	28001416 	blt	r5,zero,803054 <__udivsi3+0x5c>
  803004:	00800804 	movi	r2,32
  803008:	00c00044 	movi	r3,1
  80300c:	00000206 	br	803018 <__udivsi3+0x20>
  803010:	10000e26 	beq	r2,zero,80304c <__udivsi3+0x54>
  803014:	28000516 	blt	r5,zero,80302c <__udivsi3+0x34>
  803018:	294b883a 	add	r5,r5,r5
  80301c:	10bfffc4 	addi	r2,r2,-1
  803020:	18c7883a 	add	r3,r3,r3
  803024:	293ffa36 	bltu	r5,r4,803010 <__alt_data_end+0xff803010>
  803028:	18000826 	beq	r3,zero,80304c <__udivsi3+0x54>
  80302c:	0005883a 	mov	r2,zero
  803030:	31400236 	bltu	r6,r5,80303c <__udivsi3+0x44>
  803034:	314dc83a 	sub	r6,r6,r5
  803038:	10c4b03a 	or	r2,r2,r3
  80303c:	1806d07a 	srli	r3,r3,1
  803040:	280ad07a 	srli	r5,r5,1
  803044:	183ffa1e 	bne	r3,zero,803030 <__alt_data_end+0xff803030>
  803048:	f800283a 	ret
  80304c:	0005883a 	mov	r2,zero
  803050:	f800283a 	ret
  803054:	00c00044 	movi	r3,1
  803058:	003ff406 	br	80302c <__alt_data_end+0xff80302c>

0080305c <__umodsi3>:
  80305c:	2005883a 	mov	r2,r4
  803060:	2900122e 	bgeu	r5,r4,8030ac <__umodsi3+0x50>
  803064:	28001116 	blt	r5,zero,8030ac <__umodsi3+0x50>
  803068:	01800804 	movi	r6,32
  80306c:	00c00044 	movi	r3,1
  803070:	00000206 	br	80307c <__umodsi3+0x20>
  803074:	30000c26 	beq	r6,zero,8030a8 <__umodsi3+0x4c>
  803078:	28000516 	blt	r5,zero,803090 <__umodsi3+0x34>
  80307c:	294b883a 	add	r5,r5,r5
  803080:	31bfffc4 	addi	r6,r6,-1
  803084:	18c7883a 	add	r3,r3,r3
  803088:	293ffa36 	bltu	r5,r4,803074 <__alt_data_end+0xff803074>
  80308c:	18000626 	beq	r3,zero,8030a8 <__umodsi3+0x4c>
  803090:	1806d07a 	srli	r3,r3,1
  803094:	11400136 	bltu	r2,r5,80309c <__umodsi3+0x40>
  803098:	1145c83a 	sub	r2,r2,r5
  80309c:	280ad07a 	srli	r5,r5,1
  8030a0:	183ffb1e 	bne	r3,zero,803090 <__alt_data_end+0xff803090>
  8030a4:	f800283a 	ret
  8030a8:	f800283a 	ret
  8030ac:	00c00044 	movi	r3,1
  8030b0:	003ff706 	br	803090 <__alt_data_end+0xff803090>

008030b4 <__addsf3>:
  8030b4:	defffc04 	addi	sp,sp,-16
  8030b8:	2004d7fa 	srli	r2,r4,31
  8030bc:	280cd5fa 	srli	r6,r5,23
  8030c0:	dc000015 	stw	r16,0(sp)
  8030c4:	00c02034 	movhi	r3,128
  8030c8:	2020d5fa 	srli	r16,r4,23
  8030cc:	280ed7fa 	srli	r7,r5,31
  8030d0:	18ffffc4 	addi	r3,r3,-1
  8030d4:	dc400115 	stw	r17,4(sp)
  8030d8:	1908703a 	and	r4,r3,r4
  8030dc:	194a703a 	and	r5,r3,r5
  8030e0:	dfc00315 	stw	ra,12(sp)
  8030e4:	dc800215 	stw	r18,8(sp)
  8030e8:	14403fcc 	andi	r17,r2,255
  8030ec:	84003fcc 	andi	r16,r16,255
  8030f0:	200890fa 	slli	r4,r4,3
  8030f4:	31803fcc 	andi	r6,r6,255
  8030f8:	280a90fa 	slli	r5,r5,3
  8030fc:	89c05026 	beq	r17,r7,803240 <__addsf3+0x18c>
  803100:	8185c83a 	sub	r2,r16,r6
  803104:	00807a0e 	bge	zero,r2,8032f0 <__addsf3+0x23c>
  803108:	30001e1e 	bne	r6,zero,803184 <__addsf3+0xd0>
  80310c:	28006d1e 	bne	r5,zero,8032c4 <__addsf3+0x210>
  803110:	208001cc 	andi	r2,r4,7
  803114:	10000426 	beq	r2,zero,803128 <__addsf3+0x74>
  803118:	208003cc 	andi	r2,r4,15
  80311c:	00c00104 	movi	r3,4
  803120:	10c00126 	beq	r2,r3,803128 <__addsf3+0x74>
  803124:	20c9883a 	add	r4,r4,r3
  803128:	2081002c 	andhi	r2,r4,1024
  80312c:	10003926 	beq	r2,zero,803214 <__addsf3+0x160>
  803130:	84000044 	addi	r16,r16,1
  803134:	00803fc4 	movi	r2,255
  803138:	80807826 	beq	r16,r2,80331c <__addsf3+0x268>
  80313c:	200891ba 	slli	r4,r4,6
  803140:	8805883a 	mov	r2,r17
  803144:	2008d27a 	srli	r4,r4,9
  803148:	84003fcc 	andi	r16,r16,255
  80314c:	800695fa 	slli	r3,r16,23
  803150:	10803fcc 	andi	r2,r2,255
  803154:	04002034 	movhi	r16,128
  803158:	843fffc4 	addi	r16,r16,-1
  80315c:	100497fa 	slli	r2,r2,31
  803160:	2408703a 	and	r4,r4,r16
  803164:	20e0b03a 	or	r16,r4,r3
  803168:	8084b03a 	or	r2,r16,r2
  80316c:	dfc00317 	ldw	ra,12(sp)
  803170:	dc800217 	ldw	r18,8(sp)
  803174:	dc400117 	ldw	r17,4(sp)
  803178:	dc000017 	ldw	r16,0(sp)
  80317c:	dec00404 	addi	sp,sp,16
  803180:	f800283a 	ret
  803184:	00c03fc4 	movi	r3,255
  803188:	80ffe126 	beq	r16,r3,803110 <__alt_data_end+0xff803110>
  80318c:	29410034 	orhi	r5,r5,1024
  803190:	00c006c4 	movi	r3,27
  803194:	18807516 	blt	r3,r2,80336c <__addsf3+0x2b8>
  803198:	00c00804 	movi	r3,32
  80319c:	1887c83a 	sub	r3,r3,r2
  8031a0:	28c6983a 	sll	r3,r5,r3
  8031a4:	288ad83a 	srl	r5,r5,r2
  8031a8:	1804c03a 	cmpne	r2,r3,zero
  8031ac:	288ab03a 	or	r5,r5,r2
  8031b0:	2149c83a 	sub	r4,r4,r5
  8031b4:	2081002c 	andhi	r2,r4,1024
  8031b8:	10001426 	beq	r2,zero,80320c <__addsf3+0x158>
  8031bc:	04810034 	movhi	r18,1024
  8031c0:	94bfffc4 	addi	r18,r18,-1
  8031c4:	24a4703a 	and	r18,r4,r18
  8031c8:	9009883a 	mov	r4,r18
  8031cc:	0806d480 	call	806d48 <__clzsi2>
  8031d0:	10bffec4 	addi	r2,r2,-5
  8031d4:	90a4983a 	sll	r18,r18,r2
  8031d8:	14005416 	blt	r2,r16,80332c <__addsf3+0x278>
  8031dc:	1405c83a 	sub	r2,r2,r16
  8031e0:	11000044 	addi	r4,r2,1
  8031e4:	00800804 	movi	r2,32
  8031e8:	1105c83a 	sub	r2,r2,r4
  8031ec:	9084983a 	sll	r2,r18,r2
  8031f0:	9124d83a 	srl	r18,r18,r4
  8031f4:	0021883a 	mov	r16,zero
  8031f8:	1008c03a 	cmpne	r4,r2,zero
  8031fc:	9108b03a 	or	r4,r18,r4
  803200:	003fc306 	br	803110 <__alt_data_end+0xff803110>
  803204:	1000db26 	beq	r2,zero,803574 <__addsf3+0x4c0>
  803208:	1009883a 	mov	r4,r2
  80320c:	208001cc 	andi	r2,r4,7
  803210:	103fc11e 	bne	r2,zero,803118 <__alt_data_end+0xff803118>
  803214:	2006d0fa 	srli	r3,r4,3
  803218:	01003fc4 	movi	r4,255
  80321c:	8805883a 	mov	r2,r17
  803220:	8100241e 	bne	r16,r4,8032b4 <__addsf3+0x200>
  803224:	18006e26 	beq	r3,zero,8033e0 <__addsf3+0x32c>
  803228:	19001034 	orhi	r4,r3,64
  80322c:	00c02034 	movhi	r3,128
  803230:	18ffffc4 	addi	r3,r3,-1
  803234:	043fffc4 	movi	r16,-1
  803238:	20c8703a 	and	r4,r4,r3
  80323c:	003fc206 	br	803148 <__alt_data_end+0xff803148>
  803240:	8187c83a 	sub	r3,r16,r6
  803244:	00c03e0e 	bge	zero,r3,803340 <__addsf3+0x28c>
  803248:	30002326 	beq	r6,zero,8032d8 <__addsf3+0x224>
  80324c:	01803fc4 	movi	r6,255
  803250:	81bfaf26 	beq	r16,r6,803110 <__alt_data_end+0xff803110>
  803254:	29410034 	orhi	r5,r5,1024
  803258:	018006c4 	movi	r6,27
  80325c:	30c07416 	blt	r6,r3,803430 <__addsf3+0x37c>
  803260:	01800804 	movi	r6,32
  803264:	30cdc83a 	sub	r6,r6,r3
  803268:	298c983a 	sll	r6,r5,r6
  80326c:	28cad83a 	srl	r5,r5,r3
  803270:	3006c03a 	cmpne	r3,r6,zero
  803274:	28cab03a 	or	r5,r5,r3
  803278:	2149883a 	add	r4,r4,r5
  80327c:	20c1002c 	andhi	r3,r4,1024
  803280:	183fe226 	beq	r3,zero,80320c <__alt_data_end+0xff80320c>
  803284:	84000044 	addi	r16,r16,1
  803288:	00c03fc4 	movi	r3,255
  80328c:	80c05426 	beq	r16,r3,8033e0 <__addsf3+0x32c>
  803290:	00bf0034 	movhi	r2,64512
  803294:	10bfffc4 	addi	r2,r2,-1
  803298:	20c0004c 	andi	r3,r4,1
  80329c:	2088703a 	and	r4,r4,r2
  8032a0:	2008d07a 	srli	r4,r4,1
  8032a4:	20c8b03a 	or	r4,r4,r3
  8032a8:	003f9906 	br	803110 <__alt_data_end+0xff803110>
  8032ac:	0007883a 	mov	r3,zero
  8032b0:	0005883a 	mov	r2,zero
  8032b4:	01002034 	movhi	r4,128
  8032b8:	213fffc4 	addi	r4,r4,-1
  8032bc:	1908703a 	and	r4,r3,r4
  8032c0:	003fa106 	br	803148 <__alt_data_end+0xff803148>
  8032c4:	10bfffc4 	addi	r2,r2,-1
  8032c8:	103fb926 	beq	r2,zero,8031b0 <__alt_data_end+0xff8031b0>
  8032cc:	00c03fc4 	movi	r3,255
  8032d0:	80ffaf1e 	bne	r16,r3,803190 <__alt_data_end+0xff803190>
  8032d4:	003f8e06 	br	803110 <__alt_data_end+0xff803110>
  8032d8:	283f8d26 	beq	r5,zero,803110 <__alt_data_end+0xff803110>
  8032dc:	18ffffc4 	addi	r3,r3,-1
  8032e0:	183fe526 	beq	r3,zero,803278 <__alt_data_end+0xff803278>
  8032e4:	01803fc4 	movi	r6,255
  8032e8:	81bfdb1e 	bne	r16,r6,803258 <__alt_data_end+0xff803258>
  8032ec:	003f8806 	br	803110 <__alt_data_end+0xff803110>
  8032f0:	1000201e 	bne	r2,zero,803374 <__addsf3+0x2c0>
  8032f4:	80800044 	addi	r2,r16,1
  8032f8:	10803fcc 	andi	r2,r2,255
  8032fc:	01800044 	movi	r6,1
  803300:	3080450e 	bge	r6,r2,803418 <__addsf3+0x364>
  803304:	2165c83a 	sub	r18,r4,r5
  803308:	90c1002c 	andhi	r3,r18,1024
  80330c:	18002b26 	beq	r3,zero,8033bc <__addsf3+0x308>
  803310:	2925c83a 	sub	r18,r5,r4
  803314:	3823883a 	mov	r17,r7
  803318:	003fab06 	br	8031c8 <__alt_data_end+0xff8031c8>
  80331c:	8805883a 	mov	r2,r17
  803320:	043fffc4 	movi	r16,-1
  803324:	0009883a 	mov	r4,zero
  803328:	003f8706 	br	803148 <__alt_data_end+0xff803148>
  80332c:	013f0034 	movhi	r4,64512
  803330:	213fffc4 	addi	r4,r4,-1
  803334:	80a1c83a 	sub	r16,r16,r2
  803338:	9108703a 	and	r4,r18,r4
  80333c:	003f7406 	br	803110 <__alt_data_end+0xff803110>
  803340:	1800411e 	bne	r3,zero,803448 <__addsf3+0x394>
  803344:	80c00044 	addi	r3,r16,1
  803348:	19c03fcc 	andi	r7,r3,255
  80334c:	01800044 	movi	r6,1
  803350:	31c0260e 	bge	r6,r7,8033ec <__addsf3+0x338>
  803354:	01803fc4 	movi	r6,255
  803358:	19802126 	beq	r3,r6,8033e0 <__addsf3+0x32c>
  80335c:	2149883a 	add	r4,r4,r5
  803360:	2008d07a 	srli	r4,r4,1
  803364:	1821883a 	mov	r16,r3
  803368:	003f6906 	br	803110 <__alt_data_end+0xff803110>
  80336c:	01400044 	movi	r5,1
  803370:	003f8f06 	br	8031b0 <__alt_data_end+0xff8031b0>
  803374:	8000151e 	bne	r16,zero,8033cc <__addsf3+0x318>
  803378:	20002f26 	beq	r4,zero,803438 <__addsf3+0x384>
  80337c:	0084303a 	nor	r2,zero,r2
  803380:	10000a26 	beq	r2,zero,8033ac <__addsf3+0x2f8>
  803384:	00c03fc4 	movi	r3,255
  803388:	30c02b26 	beq	r6,r3,803438 <__addsf3+0x384>
  80338c:	00c006c4 	movi	r3,27
  803390:	18806d16 	blt	r3,r2,803548 <__addsf3+0x494>
  803394:	00c00804 	movi	r3,32
  803398:	1887c83a 	sub	r3,r3,r2
  80339c:	20c6983a 	sll	r3,r4,r3
  8033a0:	2084d83a 	srl	r2,r4,r2
  8033a4:	1808c03a 	cmpne	r4,r3,zero
  8033a8:	1108b03a 	or	r4,r2,r4
  8033ac:	2909c83a 	sub	r4,r5,r4
  8033b0:	3021883a 	mov	r16,r6
  8033b4:	3823883a 	mov	r17,r7
  8033b8:	003f7e06 	br	8031b4 <__alt_data_end+0xff8031b4>
  8033bc:	903f821e 	bne	r18,zero,8031c8 <__alt_data_end+0xff8031c8>
  8033c0:	0005883a 	mov	r2,zero
  8033c4:	0021883a 	mov	r16,zero
  8033c8:	003fba06 	br	8032b4 <__alt_data_end+0xff8032b4>
  8033cc:	00c03fc4 	movi	r3,255
  8033d0:	30c01926 	beq	r6,r3,803438 <__addsf3+0x384>
  8033d4:	0085c83a 	sub	r2,zero,r2
  8033d8:	21010034 	orhi	r4,r4,1024
  8033dc:	003feb06 	br	80338c <__alt_data_end+0xff80338c>
  8033e0:	043fffc4 	movi	r16,-1
  8033e4:	0009883a 	mov	r4,zero
  8033e8:	003f5706 	br	803148 <__alt_data_end+0xff803148>
  8033ec:	80004a1e 	bne	r16,zero,803518 <__addsf3+0x464>
  8033f0:	20005926 	beq	r4,zero,803558 <__addsf3+0x4a4>
  8033f4:	283f4626 	beq	r5,zero,803110 <__alt_data_end+0xff803110>
  8033f8:	2149883a 	add	r4,r4,r5
  8033fc:	2081002c 	andhi	r2,r4,1024
  803400:	103f8226 	beq	r2,zero,80320c <__alt_data_end+0xff80320c>
  803404:	00bf0034 	movhi	r2,64512
  803408:	10bfffc4 	addi	r2,r2,-1
  80340c:	3021883a 	mov	r16,r6
  803410:	2088703a 	and	r4,r4,r2
  803414:	003f3e06 	br	803110 <__alt_data_end+0xff803110>
  803418:	8000121e 	bne	r16,zero,803464 <__addsf3+0x3b0>
  80341c:	2000261e 	bne	r4,zero,8034b8 <__addsf3+0x404>
  803420:	283fa226 	beq	r5,zero,8032ac <__alt_data_end+0xff8032ac>
  803424:	2809883a 	mov	r4,r5
  803428:	3823883a 	mov	r17,r7
  80342c:	003f3806 	br	803110 <__alt_data_end+0xff803110>
  803430:	01400044 	movi	r5,1
  803434:	003f9006 	br	803278 <__alt_data_end+0xff803278>
  803438:	2809883a 	mov	r4,r5
  80343c:	3021883a 	mov	r16,r6
  803440:	3823883a 	mov	r17,r7
  803444:	003f3206 	br	803110 <__alt_data_end+0xff803110>
  803448:	80000c1e 	bne	r16,zero,80347c <__addsf3+0x3c8>
  80344c:	20002f26 	beq	r4,zero,80350c <__addsf3+0x458>
  803450:	00c6303a 	nor	r3,zero,r3
  803454:	18002b1e 	bne	r3,zero,803504 <__addsf3+0x450>
  803458:	2149883a 	add	r4,r4,r5
  80345c:	3021883a 	mov	r16,r6
  803460:	003f8606 	br	80327c <__alt_data_end+0xff80327c>
  803464:	20001b1e 	bne	r4,zero,8034d4 <__addsf3+0x420>
  803468:	28003926 	beq	r5,zero,803550 <__addsf3+0x49c>
  80346c:	2809883a 	mov	r4,r5
  803470:	3823883a 	mov	r17,r7
  803474:	04003fc4 	movi	r16,255
  803478:	003f2506 	br	803110 <__alt_data_end+0xff803110>
  80347c:	01c03fc4 	movi	r7,255
  803480:	31c02226 	beq	r6,r7,80350c <__addsf3+0x458>
  803484:	00c7c83a 	sub	r3,zero,r3
  803488:	21010034 	orhi	r4,r4,1024
  80348c:	01c006c4 	movi	r7,27
  803490:	38c03616 	blt	r7,r3,80356c <__addsf3+0x4b8>
  803494:	01c00804 	movi	r7,32
  803498:	38cfc83a 	sub	r7,r7,r3
  80349c:	21ce983a 	sll	r7,r4,r7
  8034a0:	20c6d83a 	srl	r3,r4,r3
  8034a4:	3808c03a 	cmpne	r4,r7,zero
  8034a8:	1906b03a 	or	r3,r3,r4
  8034ac:	1949883a 	add	r4,r3,r5
  8034b0:	3021883a 	mov	r16,r6
  8034b4:	003f7106 	br	80327c <__alt_data_end+0xff80327c>
  8034b8:	283f1526 	beq	r5,zero,803110 <__alt_data_end+0xff803110>
  8034bc:	2145c83a 	sub	r2,r4,r5
  8034c0:	10c1002c 	andhi	r3,r2,1024
  8034c4:	183f4f26 	beq	r3,zero,803204 <__alt_data_end+0xff803204>
  8034c8:	2909c83a 	sub	r4,r5,r4
  8034cc:	3823883a 	mov	r17,r7
  8034d0:	003f0f06 	br	803110 <__alt_data_end+0xff803110>
  8034d4:	28001a26 	beq	r5,zero,803540 <__addsf3+0x48c>
  8034d8:	2008d0fa 	srli	r4,r4,3
  8034dc:	2080102c 	andhi	r2,r4,64
  8034e0:	10000526 	beq	r2,zero,8034f8 <__addsf3+0x444>
  8034e4:	280ad0fa 	srli	r5,r5,3
  8034e8:	2880102c 	andhi	r2,r5,64
  8034ec:	1000021e 	bne	r2,zero,8034f8 <__addsf3+0x444>
  8034f0:	2809883a 	mov	r4,r5
  8034f4:	3823883a 	mov	r17,r7
  8034f8:	200890fa 	slli	r4,r4,3
  8034fc:	04003fc4 	movi	r16,255
  803500:	003f0306 	br	803110 <__alt_data_end+0xff803110>
  803504:	01c03fc4 	movi	r7,255
  803508:	31ffe01e 	bne	r6,r7,80348c <__alt_data_end+0xff80348c>
  80350c:	2809883a 	mov	r4,r5
  803510:	3021883a 	mov	r16,r6
  803514:	003efe06 	br	803110 <__alt_data_end+0xff803110>
  803518:	20001126 	beq	r4,zero,803560 <__addsf3+0x4ac>
  80351c:	28000826 	beq	r5,zero,803540 <__addsf3+0x48c>
  803520:	2008d0fa 	srli	r4,r4,3
  803524:	2080102c 	andhi	r2,r4,64
  803528:	103ff326 	beq	r2,zero,8034f8 <__alt_data_end+0xff8034f8>
  80352c:	280ad0fa 	srli	r5,r5,3
  803530:	2880102c 	andhi	r2,r5,64
  803534:	103ff01e 	bne	r2,zero,8034f8 <__alt_data_end+0xff8034f8>
  803538:	2809883a 	mov	r4,r5
  80353c:	003fee06 	br	8034f8 <__alt_data_end+0xff8034f8>
  803540:	04003fc4 	movi	r16,255
  803544:	003ef206 	br	803110 <__alt_data_end+0xff803110>
  803548:	01000044 	movi	r4,1
  80354c:	003f9706 	br	8033ac <__alt_data_end+0xff8033ac>
  803550:	0005883a 	mov	r2,zero
  803554:	003f3406 	br	803228 <__alt_data_end+0xff803228>
  803558:	2809883a 	mov	r4,r5
  80355c:	003eec06 	br	803110 <__alt_data_end+0xff803110>
  803560:	2809883a 	mov	r4,r5
  803564:	04003fc4 	movi	r16,255
  803568:	003ee906 	br	803110 <__alt_data_end+0xff803110>
  80356c:	00c00044 	movi	r3,1
  803570:	003fce06 	br	8034ac <__alt_data_end+0xff8034ac>
  803574:	0005883a 	mov	r2,zero
  803578:	003f4e06 	br	8032b4 <__alt_data_end+0xff8032b4>

0080357c <__divsf3>:
  80357c:	defff504 	addi	sp,sp,-44
  803580:	200cd5fa 	srli	r6,r4,23
  803584:	dcc00415 	stw	r19,16(sp)
  803588:	2026d7fa 	srli	r19,r4,31
  80358c:	00c02034 	movhi	r3,128
  803590:	dd800715 	stw	r22,28(sp)
  803594:	dd000515 	stw	r20,20(sp)
  803598:	dc800315 	stw	r18,12(sp)
  80359c:	18ffffc4 	addi	r3,r3,-1
  8035a0:	dfc00a15 	stw	ra,40(sp)
  8035a4:	df000915 	stw	fp,36(sp)
  8035a8:	ddc00815 	stw	r23,32(sp)
  8035ac:	dd400615 	stw	r21,24(sp)
  8035b0:	dc400215 	stw	r17,8(sp)
  8035b4:	dc000115 	stw	r16,4(sp)
  8035b8:	35003fcc 	andi	r20,r6,255
  8035bc:	1924703a 	and	r18,r3,r4
  8035c0:	9d803fcc 	andi	r22,r19,255
  8035c4:	a0005226 	beq	r20,zero,803710 <__divsf3+0x194>
  8035c8:	00803fc4 	movi	r2,255
  8035cc:	a0802e26 	beq	r20,r2,803688 <__divsf3+0x10c>
  8035d0:	91002034 	orhi	r4,r18,128
  8035d4:	202490fa 	slli	r18,r4,3
  8035d8:	a53fe044 	addi	r20,r20,-127
  8035dc:	0021883a 	mov	r16,zero
  8035e0:	002f883a 	mov	r23,zero
  8035e4:	280cd5fa 	srli	r6,r5,23
  8035e8:	282ad7fa 	srli	r21,r5,31
  8035ec:	00c02034 	movhi	r3,128
  8035f0:	18ffffc4 	addi	r3,r3,-1
  8035f4:	31803fcc 	andi	r6,r6,255
  8035f8:	1962703a 	and	r17,r3,r5
  8035fc:	af003fcc 	andi	fp,r21,255
  803600:	30004a26 	beq	r6,zero,80372c <__divsf3+0x1b0>
  803604:	00803fc4 	movi	r2,255
  803608:	30804526 	beq	r6,r2,803720 <__divsf3+0x1a4>
  80360c:	89402034 	orhi	r5,r17,128
  803610:	282290fa 	slli	r17,r5,3
  803614:	31bfe044 	addi	r6,r6,-127
  803618:	000b883a 	mov	r5,zero
  80361c:	2c20b03a 	or	r16,r5,r16
  803620:	802090ba 	slli	r16,r16,2
  803624:	00802034 	movhi	r2,128
  803628:	108d9204 	addi	r2,r2,13896
  80362c:	80a1883a 	add	r16,r16,r2
  803630:	81000017 	ldw	r4,0(r16)
  803634:	9d46f03a 	xor	r3,r19,r21
  803638:	180f883a 	mov	r7,r3
  80363c:	18803fcc 	andi	r2,r3,255
  803640:	a18dc83a 	sub	r6,r20,r6
  803644:	2000683a 	jmp	r4
  803648:	0080382c 	andhi	r2,zero,224
  80364c:	008036b0 	cmpltui	r2,zero,218
  803650:	00803820 	cmpeqi	r2,zero,224
  803654:	0080369c 	xori	r2,zero,218
  803658:	00803820 	cmpeqi	r2,zero,224
  80365c:	008037f8 	rdprs	r2,zero,223
  803660:	00803820 	cmpeqi	r2,zero,224
  803664:	0080369c 	xori	r2,zero,218
  803668:	008036b0 	cmpltui	r2,zero,218
  80366c:	008036b0 	cmpltui	r2,zero,218
  803670:	008037f8 	rdprs	r2,zero,223
  803674:	0080369c 	xori	r2,zero,218
  803678:	0080390c 	andi	r2,zero,228
  80367c:	0080390c 	andi	r2,zero,228
  803680:	0080390c 	andi	r2,zero,228
  803684:	008038c0 	call	8038c <__alt_mem_sdram-0x77fc74>
  803688:	9000581e 	bne	r18,zero,8037ec <__divsf3+0x270>
  80368c:	04000204 	movi	r16,8
  803690:	05c00084 	movi	r23,2
  803694:	003fd306 	br	8035e4 <__alt_data_end+0xff8035e4>
  803698:	0023883a 	mov	r17,zero
  80369c:	e02d883a 	mov	r22,fp
  8036a0:	282f883a 	mov	r23,r5
  8036a4:	00800084 	movi	r2,2
  8036a8:	b8808f1e 	bne	r23,r2,8038e8 <__divsf3+0x36c>
  8036ac:	b005883a 	mov	r2,r22
  8036b0:	11c0004c 	andi	r7,r2,1
  8036b4:	013fffc4 	movi	r4,-1
  8036b8:	000d883a 	mov	r6,zero
  8036bc:	21003fcc 	andi	r4,r4,255
  8036c0:	200895fa 	slli	r4,r4,23
  8036c4:	38803fcc 	andi	r2,r7,255
  8036c8:	00c02034 	movhi	r3,128
  8036cc:	100497fa 	slli	r2,r2,31
  8036d0:	18ffffc4 	addi	r3,r3,-1
  8036d4:	30c6703a 	and	r3,r6,r3
  8036d8:	1906b03a 	or	r3,r3,r4
  8036dc:	1884b03a 	or	r2,r3,r2
  8036e0:	dfc00a17 	ldw	ra,40(sp)
  8036e4:	df000917 	ldw	fp,36(sp)
  8036e8:	ddc00817 	ldw	r23,32(sp)
  8036ec:	dd800717 	ldw	r22,28(sp)
  8036f0:	dd400617 	ldw	r21,24(sp)
  8036f4:	dd000517 	ldw	r20,20(sp)
  8036f8:	dcc00417 	ldw	r19,16(sp)
  8036fc:	dc800317 	ldw	r18,12(sp)
  803700:	dc400217 	ldw	r17,8(sp)
  803704:	dc000117 	ldw	r16,4(sp)
  803708:	dec00b04 	addi	sp,sp,44
  80370c:	f800283a 	ret
  803710:	90002b1e 	bne	r18,zero,8037c0 <__divsf3+0x244>
  803714:	04000104 	movi	r16,4
  803718:	05c00044 	movi	r23,1
  80371c:	003fb106 	br	8035e4 <__alt_data_end+0xff8035e4>
  803720:	8800251e 	bne	r17,zero,8037b8 <__divsf3+0x23c>
  803724:	01400084 	movi	r5,2
  803728:	00000206 	br	803734 <__divsf3+0x1b8>
  80372c:	88001a1e 	bne	r17,zero,803798 <__divsf3+0x21c>
  803730:	01400044 	movi	r5,1
  803734:	8160b03a 	or	r16,r16,r5
  803738:	802090ba 	slli	r16,r16,2
  80373c:	00c02034 	movhi	r3,128
  803740:	18cdd604 	addi	r3,r3,14168
  803744:	80e1883a 	add	r16,r16,r3
  803748:	80c00017 	ldw	r3,0(r16)
  80374c:	9d44f03a 	xor	r2,r19,r21
  803750:	a18dc83a 	sub	r6,r20,r6
  803754:	1800683a 	jmp	r3
  803758:	008036b0 	cmpltui	r2,zero,218
  80375c:	008036b0 	cmpltui	r2,zero,218
  803760:	008038fc 	xorhi	r2,zero,227
  803764:	00803698 	cmpnei	r2,zero,218
  803768:	008038fc 	xorhi	r2,zero,227
  80376c:	008037f8 	rdprs	r2,zero,223
  803770:	008038fc 	xorhi	r2,zero,227
  803774:	00803698 	cmpnei	r2,zero,218
  803778:	008036b0 	cmpltui	r2,zero,218
  80377c:	008036b0 	cmpltui	r2,zero,218
  803780:	008037f8 	rdprs	r2,zero,223
  803784:	00803698 	cmpnei	r2,zero,218
  803788:	0080390c 	andi	r2,zero,228
  80378c:	0080390c 	andi	r2,zero,228
  803790:	0080390c 	andi	r2,zero,228
  803794:	00803924 	muli	r2,zero,228
  803798:	8809883a 	mov	r4,r17
  80379c:	0806d480 	call	806d48 <__clzsi2>
  8037a0:	10fffec4 	addi	r3,r2,-5
  8037a4:	10801d84 	addi	r2,r2,118
  8037a8:	88e2983a 	sll	r17,r17,r3
  8037ac:	008dc83a 	sub	r6,zero,r2
  8037b0:	000b883a 	mov	r5,zero
  8037b4:	003f9906 	br	80361c <__alt_data_end+0xff80361c>
  8037b8:	014000c4 	movi	r5,3
  8037bc:	003f9706 	br	80361c <__alt_data_end+0xff80361c>
  8037c0:	9009883a 	mov	r4,r18
  8037c4:	d9400015 	stw	r5,0(sp)
  8037c8:	0806d480 	call	806d48 <__clzsi2>
  8037cc:	10fffec4 	addi	r3,r2,-5
  8037d0:	11801d84 	addi	r6,r2,118
  8037d4:	90e4983a 	sll	r18,r18,r3
  8037d8:	01a9c83a 	sub	r20,zero,r6
  8037dc:	0021883a 	mov	r16,zero
  8037e0:	002f883a 	mov	r23,zero
  8037e4:	d9400017 	ldw	r5,0(sp)
  8037e8:	003f7e06 	br	8035e4 <__alt_data_end+0xff8035e4>
  8037ec:	04000304 	movi	r16,12
  8037f0:	05c000c4 	movi	r23,3
  8037f4:	003f7b06 	br	8035e4 <__alt_data_end+0xff8035e4>
  8037f8:	01802034 	movhi	r6,128
  8037fc:	000f883a 	mov	r7,zero
  803800:	31bfffc4 	addi	r6,r6,-1
  803804:	013fffc4 	movi	r4,-1
  803808:	003fac06 	br	8036bc <__alt_data_end+0xff8036bc>
  80380c:	01400044 	movi	r5,1
  803810:	2909c83a 	sub	r4,r5,r4
  803814:	00c006c4 	movi	r3,27
  803818:	19004b0e 	bge	r3,r4,803948 <__divsf3+0x3cc>
  80381c:	114e703a 	and	r7,r2,r5
  803820:	0009883a 	mov	r4,zero
  803824:	000d883a 	mov	r6,zero
  803828:	003fa406 	br	8036bc <__alt_data_end+0xff8036bc>
  80382c:	9006917a 	slli	r3,r18,5
  803830:	8822917a 	slli	r17,r17,5
  803834:	1c40372e 	bgeu	r3,r17,803914 <__divsf3+0x398>
  803838:	31bfffc4 	addi	r6,r6,-1
  80383c:	010006c4 	movi	r4,27
  803840:	000b883a 	mov	r5,zero
  803844:	180f883a 	mov	r7,r3
  803848:	294b883a 	add	r5,r5,r5
  80384c:	18c7883a 	add	r3,r3,r3
  803850:	38000116 	blt	r7,zero,803858 <__divsf3+0x2dc>
  803854:	1c400236 	bltu	r3,r17,803860 <__divsf3+0x2e4>
  803858:	1c47c83a 	sub	r3,r3,r17
  80385c:	29400054 	ori	r5,r5,1
  803860:	213fffc4 	addi	r4,r4,-1
  803864:	203ff71e 	bne	r4,zero,803844 <__alt_data_end+0xff803844>
  803868:	1806c03a 	cmpne	r3,r3,zero
  80386c:	1962b03a 	or	r17,r3,r5
  803870:	31001fc4 	addi	r4,r6,127
  803874:	013fe50e 	bge	zero,r4,80380c <__alt_data_end+0xff80380c>
  803878:	88c001cc 	andi	r3,r17,7
  80387c:	18000426 	beq	r3,zero,803890 <__divsf3+0x314>
  803880:	88c003cc 	andi	r3,r17,15
  803884:	01400104 	movi	r5,4
  803888:	19400126 	beq	r3,r5,803890 <__divsf3+0x314>
  80388c:	8963883a 	add	r17,r17,r5
  803890:	88c2002c 	andhi	r3,r17,2048
  803894:	18000426 	beq	r3,zero,8038a8 <__divsf3+0x32c>
  803898:	00fe0034 	movhi	r3,63488
  80389c:	18ffffc4 	addi	r3,r3,-1
  8038a0:	31002004 	addi	r4,r6,128
  8038a4:	88e2703a 	and	r17,r17,r3
  8038a8:	00c03f84 	movi	r3,254
  8038ac:	193f8016 	blt	r3,r4,8036b0 <__alt_data_end+0xff8036b0>
  8038b0:	880c91ba 	slli	r6,r17,6
  8038b4:	11c0004c 	andi	r7,r2,1
  8038b8:	300cd27a 	srli	r6,r6,9
  8038bc:	003f7f06 	br	8036bc <__alt_data_end+0xff8036bc>
  8038c0:	9080102c 	andhi	r2,r18,64
  8038c4:	10000226 	beq	r2,zero,8038d0 <__divsf3+0x354>
  8038c8:	8880102c 	andhi	r2,r17,64
  8038cc:	10001826 	beq	r2,zero,803930 <__divsf3+0x3b4>
  8038d0:	00802034 	movhi	r2,128
  8038d4:	91801034 	orhi	r6,r18,64
  8038d8:	10bfffc4 	addi	r2,r2,-1
  8038dc:	980f883a 	mov	r7,r19
  8038e0:	308c703a 	and	r6,r6,r2
  8038e4:	003fc706 	br	803804 <__alt_data_end+0xff803804>
  8038e8:	008000c4 	movi	r2,3
  8038ec:	b8802d26 	beq	r23,r2,8039a4 <__divsf3+0x428>
  8038f0:	00c00044 	movi	r3,1
  8038f4:	b005883a 	mov	r2,r22
  8038f8:	b8ffdd1e 	bne	r23,r3,803870 <__alt_data_end+0xff803870>
  8038fc:	11c0004c 	andi	r7,r2,1
  803900:	0009883a 	mov	r4,zero
  803904:	000d883a 	mov	r6,zero
  803908:	003f6c06 	br	8036bc <__alt_data_end+0xff8036bc>
  80390c:	9023883a 	mov	r17,r18
  803910:	003f6406 	br	8036a4 <__alt_data_end+0xff8036a4>
  803914:	1c47c83a 	sub	r3,r3,r17
  803918:	01000684 	movi	r4,26
  80391c:	01400044 	movi	r5,1
  803920:	003fc806 	br	803844 <__alt_data_end+0xff803844>
  803924:	9080102c 	andhi	r2,r18,64
  803928:	103fe926 	beq	r2,zero,8038d0 <__alt_data_end+0xff8038d0>
  80392c:	0023883a 	mov	r17,zero
  803930:	00802034 	movhi	r2,128
  803934:	89801034 	orhi	r6,r17,64
  803938:	10bfffc4 	addi	r2,r2,-1
  80393c:	a80f883a 	mov	r7,r21
  803940:	308c703a 	and	r6,r6,r2
  803944:	003faf06 	br	803804 <__alt_data_end+0xff803804>
  803948:	01c00804 	movi	r7,32
  80394c:	390fc83a 	sub	r7,r7,r4
  803950:	89ce983a 	sll	r7,r17,r7
  803954:	890ad83a 	srl	r5,r17,r4
  803958:	380ec03a 	cmpne	r7,r7,zero
  80395c:	29cab03a 	or	r5,r5,r7
  803960:	28c001cc 	andi	r3,r5,7
  803964:	18000426 	beq	r3,zero,803978 <__divsf3+0x3fc>
  803968:	28c003cc 	andi	r3,r5,15
  80396c:	01000104 	movi	r4,4
  803970:	19000126 	beq	r3,r4,803978 <__divsf3+0x3fc>
  803974:	290b883a 	add	r5,r5,r4
  803978:	28c1002c 	andhi	r3,r5,1024
  80397c:	18000426 	beq	r3,zero,803990 <__divsf3+0x414>
  803980:	11c0004c 	andi	r7,r2,1
  803984:	01000044 	movi	r4,1
  803988:	000d883a 	mov	r6,zero
  80398c:	003f4b06 	br	8036bc <__alt_data_end+0xff8036bc>
  803990:	280a91ba 	slli	r5,r5,6
  803994:	11c0004c 	andi	r7,r2,1
  803998:	0009883a 	mov	r4,zero
  80399c:	280cd27a 	srli	r6,r5,9
  8039a0:	003f4606 	br	8036bc <__alt_data_end+0xff8036bc>
  8039a4:	00802034 	movhi	r2,128
  8039a8:	89801034 	orhi	r6,r17,64
  8039ac:	10bfffc4 	addi	r2,r2,-1
  8039b0:	b00f883a 	mov	r7,r22
  8039b4:	308c703a 	and	r6,r6,r2
  8039b8:	003f9206 	br	803804 <__alt_data_end+0xff803804>

008039bc <__gesf2>:
  8039bc:	2004d5fa 	srli	r2,r4,23
  8039c0:	2806d5fa 	srli	r3,r5,23
  8039c4:	01802034 	movhi	r6,128
  8039c8:	31bfffc4 	addi	r6,r6,-1
  8039cc:	10803fcc 	andi	r2,r2,255
  8039d0:	01c03fc4 	movi	r7,255
  8039d4:	3110703a 	and	r8,r6,r4
  8039d8:	18c03fcc 	andi	r3,r3,255
  8039dc:	314c703a 	and	r6,r6,r5
  8039e0:	2008d7fa 	srli	r4,r4,31
  8039e4:	280ad7fa 	srli	r5,r5,31
  8039e8:	11c01926 	beq	r2,r7,803a50 <__gesf2+0x94>
  8039ec:	01c03fc4 	movi	r7,255
  8039f0:	19c00f26 	beq	r3,r7,803a30 <__gesf2+0x74>
  8039f4:	1000061e 	bne	r2,zero,803a10 <__gesf2+0x54>
  8039f8:	400f003a 	cmpeq	r7,r8,zero
  8039fc:	1800071e 	bne	r3,zero,803a1c <__gesf2+0x60>
  803a00:	3000061e 	bne	r6,zero,803a1c <__gesf2+0x60>
  803a04:	0005883a 	mov	r2,zero
  803a08:	40000e1e 	bne	r8,zero,803a44 <__gesf2+0x88>
  803a0c:	f800283a 	ret
  803a10:	18000a1e 	bne	r3,zero,803a3c <__gesf2+0x80>
  803a14:	30000b26 	beq	r6,zero,803a44 <__gesf2+0x88>
  803a18:	000f883a 	mov	r7,zero
  803a1c:	29403fcc 	andi	r5,r5,255
  803a20:	38000726 	beq	r7,zero,803a40 <__gesf2+0x84>
  803a24:	28000826 	beq	r5,zero,803a48 <__gesf2+0x8c>
  803a28:	00800044 	movi	r2,1
  803a2c:	f800283a 	ret
  803a30:	303ff026 	beq	r6,zero,8039f4 <__alt_data_end+0xff8039f4>
  803a34:	00bfff84 	movi	r2,-2
  803a38:	f800283a 	ret
  803a3c:	29403fcc 	andi	r5,r5,255
  803a40:	21400526 	beq	r4,r5,803a58 <__gesf2+0x9c>
  803a44:	203ff826 	beq	r4,zero,803a28 <__alt_data_end+0xff803a28>
  803a48:	00bfffc4 	movi	r2,-1
  803a4c:	f800283a 	ret
  803a50:	403fe626 	beq	r8,zero,8039ec <__alt_data_end+0xff8039ec>
  803a54:	003ff706 	br	803a34 <__alt_data_end+0xff803a34>
  803a58:	18bffa16 	blt	r3,r2,803a44 <__alt_data_end+0xff803a44>
  803a5c:	10c00216 	blt	r2,r3,803a68 <__gesf2+0xac>
  803a60:	323ff836 	bltu	r6,r8,803a44 <__alt_data_end+0xff803a44>
  803a64:	4180022e 	bgeu	r8,r6,803a70 <__gesf2+0xb4>
  803a68:	203fef1e 	bne	r4,zero,803a28 <__alt_data_end+0xff803a28>
  803a6c:	003ff606 	br	803a48 <__alt_data_end+0xff803a48>
  803a70:	0005883a 	mov	r2,zero
  803a74:	f800283a 	ret

00803a78 <__lesf2>:
  803a78:	2004d5fa 	srli	r2,r4,23
  803a7c:	280cd5fa 	srli	r6,r5,23
  803a80:	00c02034 	movhi	r3,128
  803a84:	18ffffc4 	addi	r3,r3,-1
  803a88:	10803fcc 	andi	r2,r2,255
  803a8c:	01c03fc4 	movi	r7,255
  803a90:	1910703a 	and	r8,r3,r4
  803a94:	31803fcc 	andi	r6,r6,255
  803a98:	1946703a 	and	r3,r3,r5
  803a9c:	2008d7fa 	srli	r4,r4,31
  803aa0:	280ad7fa 	srli	r5,r5,31
  803aa4:	11c01b26 	beq	r2,r7,803b14 <__lesf2+0x9c>
  803aa8:	01c03fc4 	movi	r7,255
  803aac:	31c01126 	beq	r6,r7,803af4 <__lesf2+0x7c>
  803ab0:	1000071e 	bne	r2,zero,803ad0 <__lesf2+0x58>
  803ab4:	400f003a 	cmpeq	r7,r8,zero
  803ab8:	21003fcc 	andi	r4,r4,255
  803abc:	3000081e 	bne	r6,zero,803ae0 <__lesf2+0x68>
  803ac0:	1800071e 	bne	r3,zero,803ae0 <__lesf2+0x68>
  803ac4:	0005883a 	mov	r2,zero
  803ac8:	40000f1e 	bne	r8,zero,803b08 <__lesf2+0x90>
  803acc:	f800283a 	ret
  803ad0:	21003fcc 	andi	r4,r4,255
  803ad4:	30000a1e 	bne	r6,zero,803b00 <__lesf2+0x88>
  803ad8:	18000b26 	beq	r3,zero,803b08 <__lesf2+0x90>
  803adc:	000f883a 	mov	r7,zero
  803ae0:	29403fcc 	andi	r5,r5,255
  803ae4:	38000726 	beq	r7,zero,803b04 <__lesf2+0x8c>
  803ae8:	28000826 	beq	r5,zero,803b0c <__lesf2+0x94>
  803aec:	00800044 	movi	r2,1
  803af0:	f800283a 	ret
  803af4:	183fee26 	beq	r3,zero,803ab0 <__alt_data_end+0xff803ab0>
  803af8:	00800084 	movi	r2,2
  803afc:	f800283a 	ret
  803b00:	29403fcc 	andi	r5,r5,255
  803b04:	21400626 	beq	r4,r5,803b20 <__lesf2+0xa8>
  803b08:	203ff826 	beq	r4,zero,803aec <__alt_data_end+0xff803aec>
  803b0c:	00bfffc4 	movi	r2,-1
  803b10:	f800283a 	ret
  803b14:	403fe426 	beq	r8,zero,803aa8 <__alt_data_end+0xff803aa8>
  803b18:	00800084 	movi	r2,2
  803b1c:	f800283a 	ret
  803b20:	30bff916 	blt	r6,r2,803b08 <__alt_data_end+0xff803b08>
  803b24:	11800216 	blt	r2,r6,803b30 <__lesf2+0xb8>
  803b28:	1a3ff736 	bltu	r3,r8,803b08 <__alt_data_end+0xff803b08>
  803b2c:	40c0022e 	bgeu	r8,r3,803b38 <__lesf2+0xc0>
  803b30:	203fee1e 	bne	r4,zero,803aec <__alt_data_end+0xff803aec>
  803b34:	003ff506 	br	803b0c <__alt_data_end+0xff803b0c>
  803b38:	0005883a 	mov	r2,zero
  803b3c:	f800283a 	ret

00803b40 <__mulsf3>:
  803b40:	defff504 	addi	sp,sp,-44
  803b44:	dc000115 	stw	r16,4(sp)
  803b48:	2020d5fa 	srli	r16,r4,23
  803b4c:	dd400615 	stw	r21,24(sp)
  803b50:	202ad7fa 	srli	r21,r4,31
  803b54:	dc800315 	stw	r18,12(sp)
  803b58:	04802034 	movhi	r18,128
  803b5c:	df000915 	stw	fp,36(sp)
  803b60:	dd000515 	stw	r20,20(sp)
  803b64:	94bfffc4 	addi	r18,r18,-1
  803b68:	dfc00a15 	stw	ra,40(sp)
  803b6c:	ddc00815 	stw	r23,32(sp)
  803b70:	dd800715 	stw	r22,28(sp)
  803b74:	dcc00415 	stw	r19,16(sp)
  803b78:	dc400215 	stw	r17,8(sp)
  803b7c:	84003fcc 	andi	r16,r16,255
  803b80:	9124703a 	and	r18,r18,r4
  803b84:	a829883a 	mov	r20,r21
  803b88:	af003fcc 	andi	fp,r21,255
  803b8c:	80005426 	beq	r16,zero,803ce0 <__mulsf3+0x1a0>
  803b90:	00803fc4 	movi	r2,255
  803b94:	80802f26 	beq	r16,r2,803c54 <__mulsf3+0x114>
  803b98:	91002034 	orhi	r4,r18,128
  803b9c:	202490fa 	slli	r18,r4,3
  803ba0:	843fe044 	addi	r16,r16,-127
  803ba4:	0023883a 	mov	r17,zero
  803ba8:	002f883a 	mov	r23,zero
  803bac:	2804d5fa 	srli	r2,r5,23
  803bb0:	282cd7fa 	srli	r22,r5,31
  803bb4:	01002034 	movhi	r4,128
  803bb8:	213fffc4 	addi	r4,r4,-1
  803bbc:	10803fcc 	andi	r2,r2,255
  803bc0:	2166703a 	and	r19,r4,r5
  803bc4:	b1803fcc 	andi	r6,r22,255
  803bc8:	10004c26 	beq	r2,zero,803cfc <__mulsf3+0x1bc>
  803bcc:	00c03fc4 	movi	r3,255
  803bd0:	10c04726 	beq	r2,r3,803cf0 <__mulsf3+0x1b0>
  803bd4:	99002034 	orhi	r4,r19,128
  803bd8:	202690fa 	slli	r19,r4,3
  803bdc:	10bfe044 	addi	r2,r2,-127
  803be0:	0007883a 	mov	r3,zero
  803be4:	80a1883a 	add	r16,r16,r2
  803be8:	010003c4 	movi	r4,15
  803bec:	1c44b03a 	or	r2,r3,r17
  803bf0:	b56af03a 	xor	r21,r22,r21
  803bf4:	81c00044 	addi	r7,r16,1
  803bf8:	20806b36 	bltu	r4,r2,803da8 <__mulsf3+0x268>
  803bfc:	100490ba 	slli	r2,r2,2
  803c00:	01002034 	movhi	r4,128
  803c04:	210f0504 	addi	r4,r4,15380
  803c08:	1105883a 	add	r2,r2,r4
  803c0c:	10800017 	ldw	r2,0(r2)
  803c10:	1000683a 	jmp	r2
  803c14:	00803da8 	cmpgeui	r2,zero,246
  803c18:	00803c68 	cmpgeui	r2,zero,241
  803c1c:	00803c68 	cmpgeui	r2,zero,241
  803c20:	00803c64 	muli	r2,zero,241
  803c24:	00803d8c 	andi	r2,zero,246
  803c28:	00803d8c 	andi	r2,zero,246
  803c2c:	00803d78 	rdprs	r2,zero,245
  803c30:	00803c64 	muli	r2,zero,241
  803c34:	00803d8c 	andi	r2,zero,246
  803c38:	00803d78 	rdprs	r2,zero,245
  803c3c:	00803d8c 	andi	r2,zero,246
  803c40:	00803c64 	muli	r2,zero,241
  803c44:	00803d98 	cmpnei	r2,zero,246
  803c48:	00803d98 	cmpnei	r2,zero,246
  803c4c:	00803d98 	cmpnei	r2,zero,246
  803c50:	00803e74 	movhi	r2,249
  803c54:	90003b1e 	bne	r18,zero,803d44 <__mulsf3+0x204>
  803c58:	04400204 	movi	r17,8
  803c5c:	05c00084 	movi	r23,2
  803c60:	003fd206 	br	803bac <__alt_data_end+0xff803bac>
  803c64:	302b883a 	mov	r21,r6
  803c68:	00800084 	movi	r2,2
  803c6c:	18802626 	beq	r3,r2,803d08 <__mulsf3+0x1c8>
  803c70:	008000c4 	movi	r2,3
  803c74:	1880ab26 	beq	r3,r2,803f24 <__mulsf3+0x3e4>
  803c78:	00800044 	movi	r2,1
  803c7c:	1880a21e 	bne	r3,r2,803f08 <__mulsf3+0x3c8>
  803c80:	a829883a 	mov	r20,r21
  803c84:	0007883a 	mov	r3,zero
  803c88:	0009883a 	mov	r4,zero
  803c8c:	18803fcc 	andi	r2,r3,255
  803c90:	100695fa 	slli	r3,r2,23
  803c94:	a0803fcc 	andi	r2,r20,255
  803c98:	100a97fa 	slli	r5,r2,31
  803c9c:	00802034 	movhi	r2,128
  803ca0:	10bfffc4 	addi	r2,r2,-1
  803ca4:	2084703a 	and	r2,r4,r2
  803ca8:	10c4b03a 	or	r2,r2,r3
  803cac:	1144b03a 	or	r2,r2,r5
  803cb0:	dfc00a17 	ldw	ra,40(sp)
  803cb4:	df000917 	ldw	fp,36(sp)
  803cb8:	ddc00817 	ldw	r23,32(sp)
  803cbc:	dd800717 	ldw	r22,28(sp)
  803cc0:	dd400617 	ldw	r21,24(sp)
  803cc4:	dd000517 	ldw	r20,20(sp)
  803cc8:	dcc00417 	ldw	r19,16(sp)
  803ccc:	dc800317 	ldw	r18,12(sp)
  803cd0:	dc400217 	ldw	r17,8(sp)
  803cd4:	dc000117 	ldw	r16,4(sp)
  803cd8:	dec00b04 	addi	sp,sp,44
  803cdc:	f800283a 	ret
  803ce0:	90000d1e 	bne	r18,zero,803d18 <__mulsf3+0x1d8>
  803ce4:	04400104 	movi	r17,4
  803ce8:	05c00044 	movi	r23,1
  803cec:	003faf06 	br	803bac <__alt_data_end+0xff803bac>
  803cf0:	9806c03a 	cmpne	r3,r19,zero
  803cf4:	18c00084 	addi	r3,r3,2
  803cf8:	003fba06 	br	803be4 <__alt_data_end+0xff803be4>
  803cfc:	9800141e 	bne	r19,zero,803d50 <__mulsf3+0x210>
  803d00:	00c00044 	movi	r3,1
  803d04:	003fb706 	br	803be4 <__alt_data_end+0xff803be4>
  803d08:	a829883a 	mov	r20,r21
  803d0c:	00ffffc4 	movi	r3,-1
  803d10:	0009883a 	mov	r4,zero
  803d14:	003fdd06 	br	803c8c <__alt_data_end+0xff803c8c>
  803d18:	9009883a 	mov	r4,r18
  803d1c:	d9400015 	stw	r5,0(sp)
  803d20:	0806d480 	call	806d48 <__clzsi2>
  803d24:	10fffec4 	addi	r3,r2,-5
  803d28:	10801d84 	addi	r2,r2,118
  803d2c:	90e4983a 	sll	r18,r18,r3
  803d30:	00a1c83a 	sub	r16,zero,r2
  803d34:	0023883a 	mov	r17,zero
  803d38:	002f883a 	mov	r23,zero
  803d3c:	d9400017 	ldw	r5,0(sp)
  803d40:	003f9a06 	br	803bac <__alt_data_end+0xff803bac>
  803d44:	04400304 	movi	r17,12
  803d48:	05c000c4 	movi	r23,3
  803d4c:	003f9706 	br	803bac <__alt_data_end+0xff803bac>
  803d50:	9809883a 	mov	r4,r19
  803d54:	d9800015 	stw	r6,0(sp)
  803d58:	0806d480 	call	806d48 <__clzsi2>
  803d5c:	10fffec4 	addi	r3,r2,-5
  803d60:	10801d84 	addi	r2,r2,118
  803d64:	98e6983a 	sll	r19,r19,r3
  803d68:	0085c83a 	sub	r2,zero,r2
  803d6c:	0007883a 	mov	r3,zero
  803d70:	d9800017 	ldw	r6,0(sp)
  803d74:	003f9b06 	br	803be4 <__alt_data_end+0xff803be4>
  803d78:	01002034 	movhi	r4,128
  803d7c:	0029883a 	mov	r20,zero
  803d80:	213fffc4 	addi	r4,r4,-1
  803d84:	00ffffc4 	movi	r3,-1
  803d88:	003fc006 	br	803c8c <__alt_data_end+0xff803c8c>
  803d8c:	9027883a 	mov	r19,r18
  803d90:	b807883a 	mov	r3,r23
  803d94:	003fb406 	br	803c68 <__alt_data_end+0xff803c68>
  803d98:	9027883a 	mov	r19,r18
  803d9c:	e02b883a 	mov	r21,fp
  803da0:	b807883a 	mov	r3,r23
  803da4:	003fb006 	br	803c68 <__alt_data_end+0xff803c68>
  803da8:	9004d43a 	srli	r2,r18,16
  803dac:	9810d43a 	srli	r8,r19,16
  803db0:	94bfffcc 	andi	r18,r18,65535
  803db4:	993fffcc 	andi	r4,r19,65535
  803db8:	910d383a 	mul	r6,r18,r4
  803dbc:	20a7383a 	mul	r19,r4,r2
  803dc0:	9225383a 	mul	r18,r18,r8
  803dc4:	3006d43a 	srli	r3,r6,16
  803dc8:	1211383a 	mul	r8,r2,r8
  803dcc:	94e5883a 	add	r18,r18,r19
  803dd0:	1c87883a 	add	r3,r3,r18
  803dd4:	1cc0022e 	bgeu	r3,r19,803de0 <__mulsf3+0x2a0>
  803dd8:	00800074 	movhi	r2,1
  803ddc:	4091883a 	add	r8,r8,r2
  803de0:	1804943a 	slli	r2,r3,16
  803de4:	31bfffcc 	andi	r6,r6,65535
  803de8:	1806d43a 	srli	r3,r3,16
  803dec:	1185883a 	add	r2,r2,r6
  803df0:	102691ba 	slli	r19,r2,6
  803df4:	1a07883a 	add	r3,r3,r8
  803df8:	1004d6ba 	srli	r2,r2,26
  803dfc:	180891ba 	slli	r4,r3,6
  803e00:	9826c03a 	cmpne	r19,r19,zero
  803e04:	9884b03a 	or	r2,r19,r2
  803e08:	1126b03a 	or	r19,r2,r4
  803e0c:	9882002c 	andhi	r2,r19,2048
  803e10:	10000426 	beq	r2,zero,803e24 <__mulsf3+0x2e4>
  803e14:	9804d07a 	srli	r2,r19,1
  803e18:	9900004c 	andi	r4,r19,1
  803e1c:	3821883a 	mov	r16,r7
  803e20:	1126b03a 	or	r19,r2,r4
  803e24:	80c01fc4 	addi	r3,r16,127
  803e28:	00c0210e 	bge	zero,r3,803eb0 <__mulsf3+0x370>
  803e2c:	988001cc 	andi	r2,r19,7
  803e30:	10000426 	beq	r2,zero,803e44 <__mulsf3+0x304>
  803e34:	988003cc 	andi	r2,r19,15
  803e38:	01000104 	movi	r4,4
  803e3c:	11000126 	beq	r2,r4,803e44 <__mulsf3+0x304>
  803e40:	9927883a 	add	r19,r19,r4
  803e44:	9882002c 	andhi	r2,r19,2048
  803e48:	10000426 	beq	r2,zero,803e5c <__mulsf3+0x31c>
  803e4c:	00be0034 	movhi	r2,63488
  803e50:	10bfffc4 	addi	r2,r2,-1
  803e54:	80c02004 	addi	r3,r16,128
  803e58:	98a6703a 	and	r19,r19,r2
  803e5c:	00803f84 	movi	r2,254
  803e60:	10ffa916 	blt	r2,r3,803d08 <__alt_data_end+0xff803d08>
  803e64:	980891ba 	slli	r4,r19,6
  803e68:	a829883a 	mov	r20,r21
  803e6c:	2008d27a 	srli	r4,r4,9
  803e70:	003f8606 	br	803c8c <__alt_data_end+0xff803c8c>
  803e74:	9080102c 	andhi	r2,r18,64
  803e78:	10000826 	beq	r2,zero,803e9c <__mulsf3+0x35c>
  803e7c:	9880102c 	andhi	r2,r19,64
  803e80:	1000061e 	bne	r2,zero,803e9c <__mulsf3+0x35c>
  803e84:	00802034 	movhi	r2,128
  803e88:	99001034 	orhi	r4,r19,64
  803e8c:	10bfffc4 	addi	r2,r2,-1
  803e90:	b029883a 	mov	r20,r22
  803e94:	2088703a 	and	r4,r4,r2
  803e98:	003fba06 	br	803d84 <__alt_data_end+0xff803d84>
  803e9c:	00802034 	movhi	r2,128
  803ea0:	91001034 	orhi	r4,r18,64
  803ea4:	10bfffc4 	addi	r2,r2,-1
  803ea8:	2088703a 	and	r4,r4,r2
  803eac:	003fb506 	br	803d84 <__alt_data_end+0xff803d84>
  803eb0:	00800044 	movi	r2,1
  803eb4:	10c7c83a 	sub	r3,r2,r3
  803eb8:	008006c4 	movi	r2,27
  803ebc:	10ff7016 	blt	r2,r3,803c80 <__alt_data_end+0xff803c80>
  803ec0:	00800804 	movi	r2,32
  803ec4:	10c5c83a 	sub	r2,r2,r3
  803ec8:	9884983a 	sll	r2,r19,r2
  803ecc:	98c6d83a 	srl	r3,r19,r3
  803ed0:	1004c03a 	cmpne	r2,r2,zero
  803ed4:	1884b03a 	or	r2,r3,r2
  803ed8:	10c001cc 	andi	r3,r2,7
  803edc:	18000426 	beq	r3,zero,803ef0 <__mulsf3+0x3b0>
  803ee0:	10c003cc 	andi	r3,r2,15
  803ee4:	01000104 	movi	r4,4
  803ee8:	19000126 	beq	r3,r4,803ef0 <__mulsf3+0x3b0>
  803eec:	1105883a 	add	r2,r2,r4
  803ef0:	10c1002c 	andhi	r3,r2,1024
  803ef4:	18000626 	beq	r3,zero,803f10 <__mulsf3+0x3d0>
  803ef8:	a829883a 	mov	r20,r21
  803efc:	00c00044 	movi	r3,1
  803f00:	0009883a 	mov	r4,zero
  803f04:	003f6106 	br	803c8c <__alt_data_end+0xff803c8c>
  803f08:	3821883a 	mov	r16,r7
  803f0c:	003fc506 	br	803e24 <__alt_data_end+0xff803e24>
  803f10:	100491ba 	slli	r2,r2,6
  803f14:	a829883a 	mov	r20,r21
  803f18:	0007883a 	mov	r3,zero
  803f1c:	1008d27a 	srli	r4,r2,9
  803f20:	003f5a06 	br	803c8c <__alt_data_end+0xff803c8c>
  803f24:	00802034 	movhi	r2,128
  803f28:	99001034 	orhi	r4,r19,64
  803f2c:	10bfffc4 	addi	r2,r2,-1
  803f30:	a829883a 	mov	r20,r21
  803f34:	2088703a 	and	r4,r4,r2
  803f38:	003f9206 	br	803d84 <__alt_data_end+0xff803d84>

00803f3c <__subsf3>:
  803f3c:	defffc04 	addi	sp,sp,-16
  803f40:	280cd5fa 	srli	r6,r5,23
  803f44:	dc000015 	stw	r16,0(sp)
  803f48:	01c02034 	movhi	r7,128
  803f4c:	2020d5fa 	srli	r16,r4,23
  803f50:	39ffffc4 	addi	r7,r7,-1
  803f54:	3906703a 	and	r3,r7,r4
  803f58:	dc400115 	stw	r17,4(sp)
  803f5c:	394e703a 	and	r7,r7,r5
  803f60:	2022d7fa 	srli	r17,r4,31
  803f64:	dfc00315 	stw	ra,12(sp)
  803f68:	dc800215 	stw	r18,8(sp)
  803f6c:	31803fcc 	andi	r6,r6,255
  803f70:	01003fc4 	movi	r4,255
  803f74:	84003fcc 	andi	r16,r16,255
  803f78:	180690fa 	slli	r3,r3,3
  803f7c:	2804d7fa 	srli	r2,r5,31
  803f80:	380e90fa 	slli	r7,r7,3
  803f84:	31006d26 	beq	r6,r4,80413c <__subsf3+0x200>
  803f88:	1080005c 	xori	r2,r2,1
  803f8c:	8189c83a 	sub	r4,r16,r6
  803f90:	14404f26 	beq	r2,r17,8040d0 <__subsf3+0x194>
  803f94:	0100770e 	bge	zero,r4,804174 <__subsf3+0x238>
  803f98:	30001e1e 	bne	r6,zero,804014 <__subsf3+0xd8>
  803f9c:	38006a1e 	bne	r7,zero,804148 <__subsf3+0x20c>
  803fa0:	188001cc 	andi	r2,r3,7
  803fa4:	10000426 	beq	r2,zero,803fb8 <__subsf3+0x7c>
  803fa8:	188003cc 	andi	r2,r3,15
  803fac:	01000104 	movi	r4,4
  803fb0:	11000126 	beq	r2,r4,803fb8 <__subsf3+0x7c>
  803fb4:	1907883a 	add	r3,r3,r4
  803fb8:	1881002c 	andhi	r2,r3,1024
  803fbc:	10003926 	beq	r2,zero,8040a4 <__subsf3+0x168>
  803fc0:	84000044 	addi	r16,r16,1
  803fc4:	00803fc4 	movi	r2,255
  803fc8:	80807526 	beq	r16,r2,8041a0 <__subsf3+0x264>
  803fcc:	180691ba 	slli	r3,r3,6
  803fd0:	8880004c 	andi	r2,r17,1
  803fd4:	180ad27a 	srli	r5,r3,9
  803fd8:	84003fcc 	andi	r16,r16,255
  803fdc:	800695fa 	slli	r3,r16,23
  803fe0:	10803fcc 	andi	r2,r2,255
  803fe4:	01002034 	movhi	r4,128
  803fe8:	213fffc4 	addi	r4,r4,-1
  803fec:	100497fa 	slli	r2,r2,31
  803ff0:	2920703a 	and	r16,r5,r4
  803ff4:	80e0b03a 	or	r16,r16,r3
  803ff8:	8084b03a 	or	r2,r16,r2
  803ffc:	dfc00317 	ldw	ra,12(sp)
  804000:	dc800217 	ldw	r18,8(sp)
  804004:	dc400117 	ldw	r17,4(sp)
  804008:	dc000017 	ldw	r16,0(sp)
  80400c:	dec00404 	addi	sp,sp,16
  804010:	f800283a 	ret
  804014:	00803fc4 	movi	r2,255
  804018:	80bfe126 	beq	r16,r2,803fa0 <__alt_data_end+0xff803fa0>
  80401c:	39c10034 	orhi	r7,r7,1024
  804020:	008006c4 	movi	r2,27
  804024:	11007416 	blt	r2,r4,8041f8 <__subsf3+0x2bc>
  804028:	00800804 	movi	r2,32
  80402c:	1105c83a 	sub	r2,r2,r4
  804030:	3884983a 	sll	r2,r7,r2
  804034:	390ed83a 	srl	r7,r7,r4
  804038:	1008c03a 	cmpne	r4,r2,zero
  80403c:	390eb03a 	or	r7,r7,r4
  804040:	19c7c83a 	sub	r3,r3,r7
  804044:	1881002c 	andhi	r2,r3,1024
  804048:	10001426 	beq	r2,zero,80409c <__subsf3+0x160>
  80404c:	04810034 	movhi	r18,1024
  804050:	94bfffc4 	addi	r18,r18,-1
  804054:	1ca4703a 	and	r18,r3,r18
  804058:	9009883a 	mov	r4,r18
  80405c:	0806d480 	call	806d48 <__clzsi2>
  804060:	10bffec4 	addi	r2,r2,-5
  804064:	90a4983a 	sll	r18,r18,r2
  804068:	14005116 	blt	r2,r16,8041b0 <__subsf3+0x274>
  80406c:	1405c83a 	sub	r2,r2,r16
  804070:	10c00044 	addi	r3,r2,1
  804074:	00800804 	movi	r2,32
  804078:	10c5c83a 	sub	r2,r2,r3
  80407c:	9084983a 	sll	r2,r18,r2
  804080:	90e4d83a 	srl	r18,r18,r3
  804084:	0021883a 	mov	r16,zero
  804088:	1006c03a 	cmpne	r3,r2,zero
  80408c:	90c6b03a 	or	r3,r18,r3
  804090:	003fc306 	br	803fa0 <__alt_data_end+0xff803fa0>
  804094:	2000e026 	beq	r4,zero,804418 <__subsf3+0x4dc>
  804098:	2007883a 	mov	r3,r4
  80409c:	188001cc 	andi	r2,r3,7
  8040a0:	103fc11e 	bne	r2,zero,803fa8 <__alt_data_end+0xff803fa8>
  8040a4:	180ad0fa 	srli	r5,r3,3
  8040a8:	00c03fc4 	movi	r3,255
  8040ac:	8880004c 	andi	r2,r17,1
  8040b0:	80c0031e 	bne	r16,r3,8040c0 <__subsf3+0x184>
  8040b4:	28006d26 	beq	r5,zero,80426c <__subsf3+0x330>
  8040b8:	29401034 	orhi	r5,r5,64
  8040bc:	043fffc4 	movi	r16,-1
  8040c0:	00c02034 	movhi	r3,128
  8040c4:	18ffffc4 	addi	r3,r3,-1
  8040c8:	28ca703a 	and	r5,r5,r3
  8040cc:	003fc206 	br	803fd8 <__alt_data_end+0xff803fd8>
  8040d0:	01003c0e 	bge	zero,r4,8041c4 <__subsf3+0x288>
  8040d4:	30002126 	beq	r6,zero,80415c <__subsf3+0x220>
  8040d8:	01403fc4 	movi	r5,255
  8040dc:	817fb026 	beq	r16,r5,803fa0 <__alt_data_end+0xff803fa0>
  8040e0:	39c10034 	orhi	r7,r7,1024
  8040e4:	014006c4 	movi	r5,27
  8040e8:	29007416 	blt	r5,r4,8042bc <__subsf3+0x380>
  8040ec:	01400804 	movi	r5,32
  8040f0:	290bc83a 	sub	r5,r5,r4
  8040f4:	394a983a 	sll	r5,r7,r5
  8040f8:	390ed83a 	srl	r7,r7,r4
  8040fc:	2808c03a 	cmpne	r4,r5,zero
  804100:	390eb03a 	or	r7,r7,r4
  804104:	19c7883a 	add	r3,r3,r7
  804108:	1901002c 	andhi	r4,r3,1024
  80410c:	20003826 	beq	r4,zero,8041f0 <__subsf3+0x2b4>
  804110:	84000044 	addi	r16,r16,1
  804114:	01003fc4 	movi	r4,255
  804118:	81005426 	beq	r16,r4,80426c <__subsf3+0x330>
  80411c:	1023883a 	mov	r17,r2
  804120:	00bf0034 	movhi	r2,64512
  804124:	10bfffc4 	addi	r2,r2,-1
  804128:	1900004c 	andi	r4,r3,1
  80412c:	1886703a 	and	r3,r3,r2
  804130:	1806d07a 	srli	r3,r3,1
  804134:	1906b03a 	or	r3,r3,r4
  804138:	003f9906 	br	803fa0 <__alt_data_end+0xff803fa0>
  80413c:	383f9226 	beq	r7,zero,803f88 <__alt_data_end+0xff803f88>
  804140:	10803fcc 	andi	r2,r2,255
  804144:	003f9106 	br	803f8c <__alt_data_end+0xff803f8c>
  804148:	213fffc4 	addi	r4,r4,-1
  80414c:	203fbc26 	beq	r4,zero,804040 <__alt_data_end+0xff804040>
  804150:	00803fc4 	movi	r2,255
  804154:	80bfb21e 	bne	r16,r2,804020 <__alt_data_end+0xff804020>
  804158:	003f9106 	br	803fa0 <__alt_data_end+0xff803fa0>
  80415c:	383f9026 	beq	r7,zero,803fa0 <__alt_data_end+0xff803fa0>
  804160:	213fffc4 	addi	r4,r4,-1
  804164:	203fe726 	beq	r4,zero,804104 <__alt_data_end+0xff804104>
  804168:	01403fc4 	movi	r5,255
  80416c:	817fdd1e 	bne	r16,r5,8040e4 <__alt_data_end+0xff8040e4>
  804170:	003f8b06 	br	803fa0 <__alt_data_end+0xff803fa0>
  804174:	2000221e 	bne	r4,zero,804200 <__subsf3+0x2c4>
  804178:	81000044 	addi	r4,r16,1
  80417c:	21003fcc 	andi	r4,r4,255
  804180:	01400044 	movi	r5,1
  804184:	2900470e 	bge	r5,r4,8042a4 <__subsf3+0x368>
  804188:	19e5c83a 	sub	r18,r3,r7
  80418c:	9141002c 	andhi	r5,r18,1024
  804190:	28002d26 	beq	r5,zero,804248 <__subsf3+0x30c>
  804194:	38e5c83a 	sub	r18,r7,r3
  804198:	1023883a 	mov	r17,r2
  80419c:	003fae06 	br	804058 <__alt_data_end+0xff804058>
  8041a0:	8880004c 	andi	r2,r17,1
  8041a4:	043fffc4 	movi	r16,-1
  8041a8:	000b883a 	mov	r5,zero
  8041ac:	003f8a06 	br	803fd8 <__alt_data_end+0xff803fd8>
  8041b0:	00ff0034 	movhi	r3,64512
  8041b4:	18ffffc4 	addi	r3,r3,-1
  8041b8:	80a1c83a 	sub	r16,r16,r2
  8041bc:	90c6703a 	and	r3,r18,r3
  8041c0:	003f7706 	br	803fa0 <__alt_data_end+0xff803fa0>
  8041c4:	2000431e 	bne	r4,zero,8042d4 <__subsf3+0x398>
  8041c8:	81000044 	addi	r4,r16,1
  8041cc:	21803fcc 	andi	r6,r4,255
  8041d0:	01400044 	movi	r5,1
  8041d4:	2980280e 	bge	r5,r6,804278 <__subsf3+0x33c>
  8041d8:	01403fc4 	movi	r5,255
  8041dc:	21402326 	beq	r4,r5,80426c <__subsf3+0x330>
  8041e0:	19c7883a 	add	r3,r3,r7
  8041e4:	1806d07a 	srli	r3,r3,1
  8041e8:	2021883a 	mov	r16,r4
  8041ec:	003f6c06 	br	803fa0 <__alt_data_end+0xff803fa0>
  8041f0:	1023883a 	mov	r17,r2
  8041f4:	003fa906 	br	80409c <__alt_data_end+0xff80409c>
  8041f8:	01c00044 	movi	r7,1
  8041fc:	003f9006 	br	804040 <__alt_data_end+0xff804040>
  804200:	8000151e 	bne	r16,zero,804258 <__subsf3+0x31c>
  804204:	18002f26 	beq	r3,zero,8042c4 <__subsf3+0x388>
  804208:	0108303a 	nor	r4,zero,r4
  80420c:	20000a26 	beq	r4,zero,804238 <__subsf3+0x2fc>
  804210:	01403fc4 	movi	r5,255
  804214:	31402b26 	beq	r6,r5,8042c4 <__subsf3+0x388>
  804218:	014006c4 	movi	r5,27
  80421c:	29006e16 	blt	r5,r4,8043d8 <__subsf3+0x49c>
  804220:	01400804 	movi	r5,32
  804224:	290bc83a 	sub	r5,r5,r4
  804228:	194a983a 	sll	r5,r3,r5
  80422c:	1908d83a 	srl	r4,r3,r4
  804230:	2806c03a 	cmpne	r3,r5,zero
  804234:	20c6b03a 	or	r3,r4,r3
  804238:	38c7c83a 	sub	r3,r7,r3
  80423c:	3021883a 	mov	r16,r6
  804240:	1023883a 	mov	r17,r2
  804244:	003f7f06 	br	804044 <__alt_data_end+0xff804044>
  804248:	903f831e 	bne	r18,zero,804058 <__alt_data_end+0xff804058>
  80424c:	0005883a 	mov	r2,zero
  804250:	0021883a 	mov	r16,zero
  804254:	003f9a06 	br	8040c0 <__alt_data_end+0xff8040c0>
  804258:	01403fc4 	movi	r5,255
  80425c:	31401926 	beq	r6,r5,8042c4 <__subsf3+0x388>
  804260:	0109c83a 	sub	r4,zero,r4
  804264:	18c10034 	orhi	r3,r3,1024
  804268:	003feb06 	br	804218 <__alt_data_end+0xff804218>
  80426c:	043fffc4 	movi	r16,-1
  804270:	000b883a 	mov	r5,zero
  804274:	003f5806 	br	803fd8 <__alt_data_end+0xff803fd8>
  804278:	8000481e 	bne	r16,zero,80439c <__subsf3+0x460>
  80427c:	18006226 	beq	r3,zero,804408 <__subsf3+0x4cc>
  804280:	383f4726 	beq	r7,zero,803fa0 <__alt_data_end+0xff803fa0>
  804284:	19c7883a 	add	r3,r3,r7
  804288:	1881002c 	andhi	r2,r3,1024
  80428c:	103f8326 	beq	r2,zero,80409c <__alt_data_end+0xff80409c>
  804290:	00bf0034 	movhi	r2,64512
  804294:	10bfffc4 	addi	r2,r2,-1
  804298:	2821883a 	mov	r16,r5
  80429c:	1886703a 	and	r3,r3,r2
  8042a0:	003f3f06 	br	803fa0 <__alt_data_end+0xff803fa0>
  8042a4:	80001c1e 	bne	r16,zero,804318 <__subsf3+0x3dc>
  8042a8:	1800261e 	bne	r3,zero,804344 <__subsf3+0x408>
  8042ac:	38004c26 	beq	r7,zero,8043e0 <__subsf3+0x4a4>
  8042b0:	3807883a 	mov	r3,r7
  8042b4:	1023883a 	mov	r17,r2
  8042b8:	003f3906 	br	803fa0 <__alt_data_end+0xff803fa0>
  8042bc:	01c00044 	movi	r7,1
  8042c0:	003f9006 	br	804104 <__alt_data_end+0xff804104>
  8042c4:	3807883a 	mov	r3,r7
  8042c8:	3021883a 	mov	r16,r6
  8042cc:	1023883a 	mov	r17,r2
  8042d0:	003f3306 	br	803fa0 <__alt_data_end+0xff803fa0>
  8042d4:	8000161e 	bne	r16,zero,804330 <__subsf3+0x3f4>
  8042d8:	18002d26 	beq	r3,zero,804390 <__subsf3+0x454>
  8042dc:	0108303a 	nor	r4,zero,r4
  8042e0:	20000a26 	beq	r4,zero,80430c <__subsf3+0x3d0>
  8042e4:	01403fc4 	movi	r5,255
  8042e8:	31402926 	beq	r6,r5,804390 <__subsf3+0x454>
  8042ec:	014006c4 	movi	r5,27
  8042f0:	29004716 	blt	r5,r4,804410 <__subsf3+0x4d4>
  8042f4:	01400804 	movi	r5,32
  8042f8:	290bc83a 	sub	r5,r5,r4
  8042fc:	194a983a 	sll	r5,r3,r5
  804300:	1908d83a 	srl	r4,r3,r4
  804304:	2806c03a 	cmpne	r3,r5,zero
  804308:	20c6b03a 	or	r3,r4,r3
  80430c:	19c7883a 	add	r3,r3,r7
  804310:	3021883a 	mov	r16,r6
  804314:	003f7c06 	br	804108 <__alt_data_end+0xff804108>
  804318:	1800111e 	bne	r3,zero,804360 <__subsf3+0x424>
  80431c:	38003326 	beq	r7,zero,8043ec <__subsf3+0x4b0>
  804320:	3807883a 	mov	r3,r7
  804324:	1023883a 	mov	r17,r2
  804328:	04003fc4 	movi	r16,255
  80432c:	003f1c06 	br	803fa0 <__alt_data_end+0xff803fa0>
  804330:	01403fc4 	movi	r5,255
  804334:	31401626 	beq	r6,r5,804390 <__subsf3+0x454>
  804338:	0109c83a 	sub	r4,zero,r4
  80433c:	18c10034 	orhi	r3,r3,1024
  804340:	003fea06 	br	8042ec <__alt_data_end+0xff8042ec>
  804344:	383f1626 	beq	r7,zero,803fa0 <__alt_data_end+0xff803fa0>
  804348:	19c9c83a 	sub	r4,r3,r7
  80434c:	2141002c 	andhi	r5,r4,1024
  804350:	283f5026 	beq	r5,zero,804094 <__alt_data_end+0xff804094>
  804354:	38c7c83a 	sub	r3,r7,r3
  804358:	1023883a 	mov	r17,r2
  80435c:	003f1006 	br	803fa0 <__alt_data_end+0xff803fa0>
  804360:	38001b26 	beq	r7,zero,8043d0 <__subsf3+0x494>
  804364:	1806d0fa 	srli	r3,r3,3
  804368:	1900102c 	andhi	r4,r3,64
  80436c:	20000526 	beq	r4,zero,804384 <__subsf3+0x448>
  804370:	380ed0fa 	srli	r7,r7,3
  804374:	3900102c 	andhi	r4,r7,64
  804378:	2000021e 	bne	r4,zero,804384 <__subsf3+0x448>
  80437c:	3807883a 	mov	r3,r7
  804380:	1023883a 	mov	r17,r2
  804384:	180690fa 	slli	r3,r3,3
  804388:	04003fc4 	movi	r16,255
  80438c:	003f0406 	br	803fa0 <__alt_data_end+0xff803fa0>
  804390:	3807883a 	mov	r3,r7
  804394:	3021883a 	mov	r16,r6
  804398:	003f0106 	br	803fa0 <__alt_data_end+0xff803fa0>
  80439c:	18001726 	beq	r3,zero,8043fc <__subsf3+0x4c0>
  8043a0:	38000b26 	beq	r7,zero,8043d0 <__subsf3+0x494>
  8043a4:	1806d0fa 	srli	r3,r3,3
  8043a8:	1900102c 	andhi	r4,r3,64
  8043ac:	20000426 	beq	r4,zero,8043c0 <__subsf3+0x484>
  8043b0:	380ed0fa 	srli	r7,r7,3
  8043b4:	3900102c 	andhi	r4,r7,64
  8043b8:	2000011e 	bne	r4,zero,8043c0 <__subsf3+0x484>
  8043bc:	3807883a 	mov	r3,r7
  8043c0:	180690fa 	slli	r3,r3,3
  8043c4:	1023883a 	mov	r17,r2
  8043c8:	04003fc4 	movi	r16,255
  8043cc:	003ef406 	br	803fa0 <__alt_data_end+0xff803fa0>
  8043d0:	04003fc4 	movi	r16,255
  8043d4:	003ef206 	br	803fa0 <__alt_data_end+0xff803fa0>
  8043d8:	00c00044 	movi	r3,1
  8043dc:	003f9606 	br	804238 <__alt_data_end+0xff804238>
  8043e0:	000b883a 	mov	r5,zero
  8043e4:	0005883a 	mov	r2,zero
  8043e8:	003f3506 	br	8040c0 <__alt_data_end+0xff8040c0>
  8043ec:	01402034 	movhi	r5,128
  8043f0:	297fffc4 	addi	r5,r5,-1
  8043f4:	0005883a 	mov	r2,zero
  8043f8:	003f2f06 	br	8040b8 <__alt_data_end+0xff8040b8>
  8043fc:	3807883a 	mov	r3,r7
  804400:	04003fc4 	movi	r16,255
  804404:	003ee606 	br	803fa0 <__alt_data_end+0xff803fa0>
  804408:	3807883a 	mov	r3,r7
  80440c:	003ee406 	br	803fa0 <__alt_data_end+0xff803fa0>
  804410:	00c00044 	movi	r3,1
  804414:	003fbd06 	br	80430c <__alt_data_end+0xff80430c>
  804418:	0005883a 	mov	r2,zero
  80441c:	003f2806 	br	8040c0 <__alt_data_end+0xff8040c0>

00804420 <__fixsfsi>:
  804420:	200ad5fa 	srli	r5,r4,23
  804424:	00c02034 	movhi	r3,128
  804428:	18ffffc4 	addi	r3,r3,-1
  80442c:	29403fcc 	andi	r5,r5,255
  804430:	00801f84 	movi	r2,126
  804434:	1906703a 	and	r3,r3,r4
  804438:	2008d7fa 	srli	r4,r4,31
  80443c:	11400e0e 	bge	r2,r5,804478 <__fixsfsi+0x58>
  804440:	00802744 	movi	r2,157
  804444:	11400816 	blt	r2,r5,804468 <__fixsfsi+0x48>
  804448:	00802544 	movi	r2,149
  80444c:	18c02034 	orhi	r3,r3,128
  804450:	11400b0e 	bge	r2,r5,804480 <__fixsfsi+0x60>
  804454:	28bfda84 	addi	r2,r5,-150
  804458:	1884983a 	sll	r2,r3,r2
  80445c:	20000726 	beq	r4,zero,80447c <__fixsfsi+0x5c>
  804460:	0085c83a 	sub	r2,zero,r2
  804464:	f800283a 	ret
  804468:	00a00034 	movhi	r2,32768
  80446c:	10bfffc4 	addi	r2,r2,-1
  804470:	2085883a 	add	r2,r4,r2
  804474:	f800283a 	ret
  804478:	0005883a 	mov	r2,zero
  80447c:	f800283a 	ret
  804480:	00802584 	movi	r2,150
  804484:	1145c83a 	sub	r2,r2,r5
  804488:	1884d83a 	srl	r2,r3,r2
  80448c:	003ff306 	br	80445c <__alt_data_end+0xff80445c>

00804490 <__floatunsisf>:
  804490:	defffe04 	addi	sp,sp,-8
  804494:	dfc00115 	stw	ra,4(sp)
  804498:	dc000015 	stw	r16,0(sp)
  80449c:	20002c26 	beq	r4,zero,804550 <__floatunsisf+0xc0>
  8044a0:	2021883a 	mov	r16,r4
  8044a4:	0806d480 	call	806d48 <__clzsi2>
  8044a8:	00c02784 	movi	r3,158
  8044ac:	1887c83a 	sub	r3,r3,r2
  8044b0:	01002584 	movi	r4,150
  8044b4:	20c00f16 	blt	r4,r3,8044f4 <__floatunsisf+0x64>
  8044b8:	20c9c83a 	sub	r4,r4,r3
  8044bc:	8108983a 	sll	r4,r16,r4
  8044c0:	00802034 	movhi	r2,128
  8044c4:	10bfffc4 	addi	r2,r2,-1
  8044c8:	2088703a 	and	r4,r4,r2
  8044cc:	18803fcc 	andi	r2,r3,255
  8044d0:	100695fa 	slli	r3,r2,23
  8044d4:	00802034 	movhi	r2,128
  8044d8:	10bfffc4 	addi	r2,r2,-1
  8044dc:	2084703a 	and	r2,r4,r2
  8044e0:	10c4b03a 	or	r2,r2,r3
  8044e4:	dfc00117 	ldw	ra,4(sp)
  8044e8:	dc000017 	ldw	r16,0(sp)
  8044ec:	dec00204 	addi	sp,sp,8
  8044f0:	f800283a 	ret
  8044f4:	01002644 	movi	r4,153
  8044f8:	20c01816 	blt	r4,r3,80455c <__floatunsisf+0xcc>
  8044fc:	20c9c83a 	sub	r4,r4,r3
  804500:	8108983a 	sll	r4,r16,r4
  804504:	017f0034 	movhi	r5,64512
  804508:	297fffc4 	addi	r5,r5,-1
  80450c:	218001cc 	andi	r6,r4,7
  804510:	214a703a 	and	r5,r4,r5
  804514:	30000426 	beq	r6,zero,804528 <__floatunsisf+0x98>
  804518:	210003cc 	andi	r4,r4,15
  80451c:	01800104 	movi	r6,4
  804520:	21800126 	beq	r4,r6,804528 <__floatunsisf+0x98>
  804524:	298b883a 	add	r5,r5,r6
  804528:	2901002c 	andhi	r4,r5,1024
  80452c:	20000526 	beq	r4,zero,804544 <__floatunsisf+0xb4>
  804530:	00c027c4 	movi	r3,159
  804534:	1887c83a 	sub	r3,r3,r2
  804538:	00bf0034 	movhi	r2,64512
  80453c:	10bfffc4 	addi	r2,r2,-1
  804540:	288a703a 	and	r5,r5,r2
  804544:	280891ba 	slli	r4,r5,6
  804548:	2008d27a 	srli	r4,r4,9
  80454c:	003fdf06 	br	8044cc <__alt_data_end+0xff8044cc>
  804550:	0007883a 	mov	r3,zero
  804554:	0009883a 	mov	r4,zero
  804558:	003fdc06 	br	8044cc <__alt_data_end+0xff8044cc>
  80455c:	01402e44 	movi	r5,185
  804560:	28cbc83a 	sub	r5,r5,r3
  804564:	01000144 	movi	r4,5
  804568:	2089c83a 	sub	r4,r4,r2
  80456c:	814a983a 	sll	r5,r16,r5
  804570:	8108d83a 	srl	r4,r16,r4
  804574:	2820c03a 	cmpne	r16,r5,zero
  804578:	2408b03a 	or	r4,r4,r16
  80457c:	003fe106 	br	804504 <__alt_data_end+0xff804504>

00804580 <__adddf3>:
  804580:	02c00434 	movhi	r11,16
  804584:	5affffc4 	addi	r11,r11,-1
  804588:	2806d7fa 	srli	r3,r5,31
  80458c:	2ad4703a 	and	r10,r5,r11
  804590:	3ad2703a 	and	r9,r7,r11
  804594:	3804d53a 	srli	r2,r7,20
  804598:	3018d77a 	srli	r12,r6,29
  80459c:	280ad53a 	srli	r5,r5,20
  8045a0:	501490fa 	slli	r10,r10,3
  8045a4:	2010d77a 	srli	r8,r4,29
  8045a8:	481290fa 	slli	r9,r9,3
  8045ac:	380ed7fa 	srli	r7,r7,31
  8045b0:	defffb04 	addi	sp,sp,-20
  8045b4:	dc800215 	stw	r18,8(sp)
  8045b8:	dc400115 	stw	r17,4(sp)
  8045bc:	dc000015 	stw	r16,0(sp)
  8045c0:	dfc00415 	stw	ra,16(sp)
  8045c4:	dcc00315 	stw	r19,12(sp)
  8045c8:	1c803fcc 	andi	r18,r3,255
  8045cc:	2c01ffcc 	andi	r16,r5,2047
  8045d0:	5210b03a 	or	r8,r10,r8
  8045d4:	202290fa 	slli	r17,r4,3
  8045d8:	1081ffcc 	andi	r2,r2,2047
  8045dc:	4b12b03a 	or	r9,r9,r12
  8045e0:	300c90fa 	slli	r6,r6,3
  8045e4:	91c07526 	beq	r18,r7,8047bc <__adddf3+0x23c>
  8045e8:	8087c83a 	sub	r3,r16,r2
  8045ec:	00c0ab0e 	bge	zero,r3,80489c <__adddf3+0x31c>
  8045f0:	10002a1e 	bne	r2,zero,80469c <__adddf3+0x11c>
  8045f4:	4984b03a 	or	r2,r9,r6
  8045f8:	1000961e 	bne	r2,zero,804854 <__adddf3+0x2d4>
  8045fc:	888001cc 	andi	r2,r17,7
  804600:	10000726 	beq	r2,zero,804620 <__adddf3+0xa0>
  804604:	888003cc 	andi	r2,r17,15
  804608:	00c00104 	movi	r3,4
  80460c:	10c00426 	beq	r2,r3,804620 <__adddf3+0xa0>
  804610:	88c7883a 	add	r3,r17,r3
  804614:	1c63803a 	cmpltu	r17,r3,r17
  804618:	4451883a 	add	r8,r8,r17
  80461c:	1823883a 	mov	r17,r3
  804620:	4080202c 	andhi	r2,r8,128
  804624:	10005926 	beq	r2,zero,80478c <__adddf3+0x20c>
  804628:	84000044 	addi	r16,r16,1
  80462c:	0081ffc4 	movi	r2,2047
  804630:	8080ba26 	beq	r16,r2,80491c <__adddf3+0x39c>
  804634:	00bfe034 	movhi	r2,65408
  804638:	10bfffc4 	addi	r2,r2,-1
  80463c:	4090703a 	and	r8,r8,r2
  804640:	4004977a 	slli	r2,r8,29
  804644:	4010927a 	slli	r8,r8,9
  804648:	8822d0fa 	srli	r17,r17,3
  80464c:	8401ffcc 	andi	r16,r16,2047
  804650:	4010d33a 	srli	r8,r8,12
  804654:	9007883a 	mov	r3,r18
  804658:	1444b03a 	or	r2,r2,r17
  80465c:	8401ffcc 	andi	r16,r16,2047
  804660:	8020953a 	slli	r16,r16,20
  804664:	18c03fcc 	andi	r3,r3,255
  804668:	01000434 	movhi	r4,16
  80466c:	213fffc4 	addi	r4,r4,-1
  804670:	180697fa 	slli	r3,r3,31
  804674:	4110703a 	and	r8,r8,r4
  804678:	4410b03a 	or	r8,r8,r16
  80467c:	40c6b03a 	or	r3,r8,r3
  804680:	dfc00417 	ldw	ra,16(sp)
  804684:	dcc00317 	ldw	r19,12(sp)
  804688:	dc800217 	ldw	r18,8(sp)
  80468c:	dc400117 	ldw	r17,4(sp)
  804690:	dc000017 	ldw	r16,0(sp)
  804694:	dec00504 	addi	sp,sp,20
  804698:	f800283a 	ret
  80469c:	0081ffc4 	movi	r2,2047
  8046a0:	80bfd626 	beq	r16,r2,8045fc <__alt_data_end+0xff8045fc>
  8046a4:	4a402034 	orhi	r9,r9,128
  8046a8:	00800e04 	movi	r2,56
  8046ac:	10c09f16 	blt	r2,r3,80492c <__adddf3+0x3ac>
  8046b0:	008007c4 	movi	r2,31
  8046b4:	10c0c216 	blt	r2,r3,8049c0 <__adddf3+0x440>
  8046b8:	00800804 	movi	r2,32
  8046bc:	10c5c83a 	sub	r2,r2,r3
  8046c0:	488a983a 	sll	r5,r9,r2
  8046c4:	30c8d83a 	srl	r4,r6,r3
  8046c8:	3084983a 	sll	r2,r6,r2
  8046cc:	48c6d83a 	srl	r3,r9,r3
  8046d0:	290cb03a 	or	r6,r5,r4
  8046d4:	1004c03a 	cmpne	r2,r2,zero
  8046d8:	308cb03a 	or	r6,r6,r2
  8046dc:	898dc83a 	sub	r6,r17,r6
  8046e0:	89a3803a 	cmpltu	r17,r17,r6
  8046e4:	40d1c83a 	sub	r8,r8,r3
  8046e8:	4451c83a 	sub	r8,r8,r17
  8046ec:	3023883a 	mov	r17,r6
  8046f0:	4080202c 	andhi	r2,r8,128
  8046f4:	10002326 	beq	r2,zero,804784 <__adddf3+0x204>
  8046f8:	04c02034 	movhi	r19,128
  8046fc:	9cffffc4 	addi	r19,r19,-1
  804700:	44e6703a 	and	r19,r8,r19
  804704:	98007626 	beq	r19,zero,8048e0 <__adddf3+0x360>
  804708:	9809883a 	mov	r4,r19
  80470c:	0806d480 	call	806d48 <__clzsi2>
  804710:	10fffe04 	addi	r3,r2,-8
  804714:	010007c4 	movi	r4,31
  804718:	20c07716 	blt	r4,r3,8048f8 <__adddf3+0x378>
  80471c:	00800804 	movi	r2,32
  804720:	10c5c83a 	sub	r2,r2,r3
  804724:	8884d83a 	srl	r2,r17,r2
  804728:	98d0983a 	sll	r8,r19,r3
  80472c:	88e2983a 	sll	r17,r17,r3
  804730:	1204b03a 	or	r2,r2,r8
  804734:	1c007416 	blt	r3,r16,804908 <__adddf3+0x388>
  804738:	1c21c83a 	sub	r16,r3,r16
  80473c:	82000044 	addi	r8,r16,1
  804740:	00c007c4 	movi	r3,31
  804744:	1a009116 	blt	r3,r8,80498c <__adddf3+0x40c>
  804748:	00c00804 	movi	r3,32
  80474c:	1a07c83a 	sub	r3,r3,r8
  804750:	8a08d83a 	srl	r4,r17,r8
  804754:	88e2983a 	sll	r17,r17,r3
  804758:	10c6983a 	sll	r3,r2,r3
  80475c:	1210d83a 	srl	r8,r2,r8
  804760:	8804c03a 	cmpne	r2,r17,zero
  804764:	1906b03a 	or	r3,r3,r4
  804768:	18a2b03a 	or	r17,r3,r2
  80476c:	0021883a 	mov	r16,zero
  804770:	003fa206 	br	8045fc <__alt_data_end+0xff8045fc>
  804774:	1890b03a 	or	r8,r3,r2
  804778:	40017d26 	beq	r8,zero,804d70 <__adddf3+0x7f0>
  80477c:	1011883a 	mov	r8,r2
  804780:	1823883a 	mov	r17,r3
  804784:	888001cc 	andi	r2,r17,7
  804788:	103f9e1e 	bne	r2,zero,804604 <__alt_data_end+0xff804604>
  80478c:	4004977a 	slli	r2,r8,29
  804790:	8822d0fa 	srli	r17,r17,3
  804794:	4010d0fa 	srli	r8,r8,3
  804798:	9007883a 	mov	r3,r18
  80479c:	1444b03a 	or	r2,r2,r17
  8047a0:	0101ffc4 	movi	r4,2047
  8047a4:	81002426 	beq	r16,r4,804838 <__adddf3+0x2b8>
  8047a8:	8120703a 	and	r16,r16,r4
  8047ac:	01000434 	movhi	r4,16
  8047b0:	213fffc4 	addi	r4,r4,-1
  8047b4:	4110703a 	and	r8,r8,r4
  8047b8:	003fa806 	br	80465c <__alt_data_end+0xff80465c>
  8047bc:	8089c83a 	sub	r4,r16,r2
  8047c0:	01005e0e 	bge	zero,r4,80493c <__adddf3+0x3bc>
  8047c4:	10002b26 	beq	r2,zero,804874 <__adddf3+0x2f4>
  8047c8:	0081ffc4 	movi	r2,2047
  8047cc:	80bf8b26 	beq	r16,r2,8045fc <__alt_data_end+0xff8045fc>
  8047d0:	4a402034 	orhi	r9,r9,128
  8047d4:	00800e04 	movi	r2,56
  8047d8:	1100a40e 	bge	r2,r4,804a6c <__adddf3+0x4ec>
  8047dc:	498cb03a 	or	r6,r9,r6
  8047e0:	300ac03a 	cmpne	r5,r6,zero
  8047e4:	0013883a 	mov	r9,zero
  8047e8:	2c4b883a 	add	r5,r5,r17
  8047ec:	2c63803a 	cmpltu	r17,r5,r17
  8047f0:	4a11883a 	add	r8,r9,r8
  8047f4:	8a11883a 	add	r8,r17,r8
  8047f8:	2823883a 	mov	r17,r5
  8047fc:	4080202c 	andhi	r2,r8,128
  804800:	103fe026 	beq	r2,zero,804784 <__alt_data_end+0xff804784>
  804804:	84000044 	addi	r16,r16,1
  804808:	0081ffc4 	movi	r2,2047
  80480c:	8080d226 	beq	r16,r2,804b58 <__adddf3+0x5d8>
  804810:	00bfe034 	movhi	r2,65408
  804814:	10bfffc4 	addi	r2,r2,-1
  804818:	4090703a 	and	r8,r8,r2
  80481c:	880ad07a 	srli	r5,r17,1
  804820:	400897fa 	slli	r4,r8,31
  804824:	88c0004c 	andi	r3,r17,1
  804828:	28e2b03a 	or	r17,r5,r3
  80482c:	4010d07a 	srli	r8,r8,1
  804830:	2462b03a 	or	r17,r4,r17
  804834:	003f7106 	br	8045fc <__alt_data_end+0xff8045fc>
  804838:	4088b03a 	or	r4,r8,r2
  80483c:	20014526 	beq	r4,zero,804d54 <__adddf3+0x7d4>
  804840:	01000434 	movhi	r4,16
  804844:	42000234 	orhi	r8,r8,8
  804848:	213fffc4 	addi	r4,r4,-1
  80484c:	4110703a 	and	r8,r8,r4
  804850:	003f8206 	br	80465c <__alt_data_end+0xff80465c>
  804854:	18ffffc4 	addi	r3,r3,-1
  804858:	1800491e 	bne	r3,zero,804980 <__adddf3+0x400>
  80485c:	898bc83a 	sub	r5,r17,r6
  804860:	8963803a 	cmpltu	r17,r17,r5
  804864:	4251c83a 	sub	r8,r8,r9
  804868:	4451c83a 	sub	r8,r8,r17
  80486c:	2823883a 	mov	r17,r5
  804870:	003f9f06 	br	8046f0 <__alt_data_end+0xff8046f0>
  804874:	4984b03a 	or	r2,r9,r6
  804878:	103f6026 	beq	r2,zero,8045fc <__alt_data_end+0xff8045fc>
  80487c:	213fffc4 	addi	r4,r4,-1
  804880:	2000931e 	bne	r4,zero,804ad0 <__adddf3+0x550>
  804884:	898d883a 	add	r6,r17,r6
  804888:	3463803a 	cmpltu	r17,r6,r17
  80488c:	4251883a 	add	r8,r8,r9
  804890:	8a11883a 	add	r8,r17,r8
  804894:	3023883a 	mov	r17,r6
  804898:	003fd806 	br	8047fc <__alt_data_end+0xff8047fc>
  80489c:	1800541e 	bne	r3,zero,8049f0 <__adddf3+0x470>
  8048a0:	80800044 	addi	r2,r16,1
  8048a4:	1081ffcc 	andi	r2,r2,2047
  8048a8:	00c00044 	movi	r3,1
  8048ac:	1880a00e 	bge	r3,r2,804b30 <__adddf3+0x5b0>
  8048b0:	8989c83a 	sub	r4,r17,r6
  8048b4:	8905803a 	cmpltu	r2,r17,r4
  8048b8:	4267c83a 	sub	r19,r8,r9
  8048bc:	98a7c83a 	sub	r19,r19,r2
  8048c0:	9880202c 	andhi	r2,r19,128
  8048c4:	10006326 	beq	r2,zero,804a54 <__adddf3+0x4d4>
  8048c8:	3463c83a 	sub	r17,r6,r17
  8048cc:	4a07c83a 	sub	r3,r9,r8
  8048d0:	344d803a 	cmpltu	r6,r6,r17
  8048d4:	19a7c83a 	sub	r19,r3,r6
  8048d8:	3825883a 	mov	r18,r7
  8048dc:	983f8a1e 	bne	r19,zero,804708 <__alt_data_end+0xff804708>
  8048e0:	8809883a 	mov	r4,r17
  8048e4:	0806d480 	call	806d48 <__clzsi2>
  8048e8:	10800804 	addi	r2,r2,32
  8048ec:	10fffe04 	addi	r3,r2,-8
  8048f0:	010007c4 	movi	r4,31
  8048f4:	20ff890e 	bge	r4,r3,80471c <__alt_data_end+0xff80471c>
  8048f8:	10bff604 	addi	r2,r2,-40
  8048fc:	8884983a 	sll	r2,r17,r2
  804900:	0023883a 	mov	r17,zero
  804904:	1c3f8c0e 	bge	r3,r16,804738 <__alt_data_end+0xff804738>
  804908:	023fe034 	movhi	r8,65408
  80490c:	423fffc4 	addi	r8,r8,-1
  804910:	80e1c83a 	sub	r16,r16,r3
  804914:	1210703a 	and	r8,r2,r8
  804918:	003f3806 	br	8045fc <__alt_data_end+0xff8045fc>
  80491c:	9007883a 	mov	r3,r18
  804920:	0011883a 	mov	r8,zero
  804924:	0005883a 	mov	r2,zero
  804928:	003f4c06 	br	80465c <__alt_data_end+0xff80465c>
  80492c:	498cb03a 	or	r6,r9,r6
  804930:	300cc03a 	cmpne	r6,r6,zero
  804934:	0007883a 	mov	r3,zero
  804938:	003f6806 	br	8046dc <__alt_data_end+0xff8046dc>
  80493c:	20009c1e 	bne	r4,zero,804bb0 <__adddf3+0x630>
  804940:	80800044 	addi	r2,r16,1
  804944:	1141ffcc 	andi	r5,r2,2047
  804948:	01000044 	movi	r4,1
  80494c:	2140670e 	bge	r4,r5,804aec <__adddf3+0x56c>
  804950:	0101ffc4 	movi	r4,2047
  804954:	11007f26 	beq	r2,r4,804b54 <__adddf3+0x5d4>
  804958:	898d883a 	add	r6,r17,r6
  80495c:	4247883a 	add	r3,r8,r9
  804960:	3451803a 	cmpltu	r8,r6,r17
  804964:	40d1883a 	add	r8,r8,r3
  804968:	402297fa 	slli	r17,r8,31
  80496c:	300cd07a 	srli	r6,r6,1
  804970:	4010d07a 	srli	r8,r8,1
  804974:	1021883a 	mov	r16,r2
  804978:	89a2b03a 	or	r17,r17,r6
  80497c:	003f1f06 	br	8045fc <__alt_data_end+0xff8045fc>
  804980:	0081ffc4 	movi	r2,2047
  804984:	80bf481e 	bne	r16,r2,8046a8 <__alt_data_end+0xff8046a8>
  804988:	003f1c06 	br	8045fc <__alt_data_end+0xff8045fc>
  80498c:	843ff844 	addi	r16,r16,-31
  804990:	01000804 	movi	r4,32
  804994:	1406d83a 	srl	r3,r2,r16
  804998:	41005026 	beq	r8,r4,804adc <__adddf3+0x55c>
  80499c:	01001004 	movi	r4,64
  8049a0:	2211c83a 	sub	r8,r4,r8
  8049a4:	1204983a 	sll	r2,r2,r8
  8049a8:	88a2b03a 	or	r17,r17,r2
  8049ac:	8822c03a 	cmpne	r17,r17,zero
  8049b0:	1c62b03a 	or	r17,r3,r17
  8049b4:	0011883a 	mov	r8,zero
  8049b8:	0021883a 	mov	r16,zero
  8049bc:	003f7106 	br	804784 <__alt_data_end+0xff804784>
  8049c0:	193ff804 	addi	r4,r3,-32
  8049c4:	00800804 	movi	r2,32
  8049c8:	4908d83a 	srl	r4,r9,r4
  8049cc:	18804526 	beq	r3,r2,804ae4 <__adddf3+0x564>
  8049d0:	00801004 	movi	r2,64
  8049d4:	10c5c83a 	sub	r2,r2,r3
  8049d8:	4886983a 	sll	r3,r9,r2
  8049dc:	198cb03a 	or	r6,r3,r6
  8049e0:	300cc03a 	cmpne	r6,r6,zero
  8049e4:	218cb03a 	or	r6,r4,r6
  8049e8:	0007883a 	mov	r3,zero
  8049ec:	003f3b06 	br	8046dc <__alt_data_end+0xff8046dc>
  8049f0:	80002a26 	beq	r16,zero,804a9c <__adddf3+0x51c>
  8049f4:	0101ffc4 	movi	r4,2047
  8049f8:	11006826 	beq	r2,r4,804b9c <__adddf3+0x61c>
  8049fc:	00c7c83a 	sub	r3,zero,r3
  804a00:	42002034 	orhi	r8,r8,128
  804a04:	01000e04 	movi	r4,56
  804a08:	20c07c16 	blt	r4,r3,804bfc <__adddf3+0x67c>
  804a0c:	010007c4 	movi	r4,31
  804a10:	20c0da16 	blt	r4,r3,804d7c <__adddf3+0x7fc>
  804a14:	01000804 	movi	r4,32
  804a18:	20c9c83a 	sub	r4,r4,r3
  804a1c:	4114983a 	sll	r10,r8,r4
  804a20:	88cad83a 	srl	r5,r17,r3
  804a24:	8908983a 	sll	r4,r17,r4
  804a28:	40c6d83a 	srl	r3,r8,r3
  804a2c:	5162b03a 	or	r17,r10,r5
  804a30:	2008c03a 	cmpne	r4,r4,zero
  804a34:	8922b03a 	or	r17,r17,r4
  804a38:	3463c83a 	sub	r17,r6,r17
  804a3c:	48c7c83a 	sub	r3,r9,r3
  804a40:	344d803a 	cmpltu	r6,r6,r17
  804a44:	1991c83a 	sub	r8,r3,r6
  804a48:	1021883a 	mov	r16,r2
  804a4c:	3825883a 	mov	r18,r7
  804a50:	003f2706 	br	8046f0 <__alt_data_end+0xff8046f0>
  804a54:	24d0b03a 	or	r8,r4,r19
  804a58:	40001b1e 	bne	r8,zero,804ac8 <__adddf3+0x548>
  804a5c:	0005883a 	mov	r2,zero
  804a60:	0007883a 	mov	r3,zero
  804a64:	0021883a 	mov	r16,zero
  804a68:	003f4d06 	br	8047a0 <__alt_data_end+0xff8047a0>
  804a6c:	008007c4 	movi	r2,31
  804a70:	11003c16 	blt	r2,r4,804b64 <__adddf3+0x5e4>
  804a74:	00800804 	movi	r2,32
  804a78:	1105c83a 	sub	r2,r2,r4
  804a7c:	488e983a 	sll	r7,r9,r2
  804a80:	310ad83a 	srl	r5,r6,r4
  804a84:	3084983a 	sll	r2,r6,r2
  804a88:	4912d83a 	srl	r9,r9,r4
  804a8c:	394ab03a 	or	r5,r7,r5
  804a90:	1004c03a 	cmpne	r2,r2,zero
  804a94:	288ab03a 	or	r5,r5,r2
  804a98:	003f5306 	br	8047e8 <__alt_data_end+0xff8047e8>
  804a9c:	4448b03a 	or	r4,r8,r17
  804aa0:	20003e26 	beq	r4,zero,804b9c <__adddf3+0x61c>
  804aa4:	00c6303a 	nor	r3,zero,r3
  804aa8:	18003a1e 	bne	r3,zero,804b94 <__adddf3+0x614>
  804aac:	3463c83a 	sub	r17,r6,r17
  804ab0:	4a07c83a 	sub	r3,r9,r8
  804ab4:	344d803a 	cmpltu	r6,r6,r17
  804ab8:	1991c83a 	sub	r8,r3,r6
  804abc:	1021883a 	mov	r16,r2
  804ac0:	3825883a 	mov	r18,r7
  804ac4:	003f0a06 	br	8046f0 <__alt_data_end+0xff8046f0>
  804ac8:	2023883a 	mov	r17,r4
  804acc:	003f0d06 	br	804704 <__alt_data_end+0xff804704>
  804ad0:	0081ffc4 	movi	r2,2047
  804ad4:	80bf3f1e 	bne	r16,r2,8047d4 <__alt_data_end+0xff8047d4>
  804ad8:	003ec806 	br	8045fc <__alt_data_end+0xff8045fc>
  804adc:	0005883a 	mov	r2,zero
  804ae0:	003fb106 	br	8049a8 <__alt_data_end+0xff8049a8>
  804ae4:	0007883a 	mov	r3,zero
  804ae8:	003fbc06 	br	8049dc <__alt_data_end+0xff8049dc>
  804aec:	4444b03a 	or	r2,r8,r17
  804af0:	8000871e 	bne	r16,zero,804d10 <__adddf3+0x790>
  804af4:	1000ba26 	beq	r2,zero,804de0 <__adddf3+0x860>
  804af8:	4984b03a 	or	r2,r9,r6
  804afc:	103ebf26 	beq	r2,zero,8045fc <__alt_data_end+0xff8045fc>
  804b00:	8985883a 	add	r2,r17,r6
  804b04:	4247883a 	add	r3,r8,r9
  804b08:	1451803a 	cmpltu	r8,r2,r17
  804b0c:	40d1883a 	add	r8,r8,r3
  804b10:	40c0202c 	andhi	r3,r8,128
  804b14:	1023883a 	mov	r17,r2
  804b18:	183f1a26 	beq	r3,zero,804784 <__alt_data_end+0xff804784>
  804b1c:	00bfe034 	movhi	r2,65408
  804b20:	10bfffc4 	addi	r2,r2,-1
  804b24:	2021883a 	mov	r16,r4
  804b28:	4090703a 	and	r8,r8,r2
  804b2c:	003eb306 	br	8045fc <__alt_data_end+0xff8045fc>
  804b30:	4444b03a 	or	r2,r8,r17
  804b34:	8000291e 	bne	r16,zero,804bdc <__adddf3+0x65c>
  804b38:	10004b1e 	bne	r2,zero,804c68 <__adddf3+0x6e8>
  804b3c:	4990b03a 	or	r8,r9,r6
  804b40:	40008b26 	beq	r8,zero,804d70 <__adddf3+0x7f0>
  804b44:	4811883a 	mov	r8,r9
  804b48:	3023883a 	mov	r17,r6
  804b4c:	3825883a 	mov	r18,r7
  804b50:	003eaa06 	br	8045fc <__alt_data_end+0xff8045fc>
  804b54:	1021883a 	mov	r16,r2
  804b58:	0011883a 	mov	r8,zero
  804b5c:	0005883a 	mov	r2,zero
  804b60:	003f0f06 	br	8047a0 <__alt_data_end+0xff8047a0>
  804b64:	217ff804 	addi	r5,r4,-32
  804b68:	00800804 	movi	r2,32
  804b6c:	494ad83a 	srl	r5,r9,r5
  804b70:	20807d26 	beq	r4,r2,804d68 <__adddf3+0x7e8>
  804b74:	00801004 	movi	r2,64
  804b78:	1109c83a 	sub	r4,r2,r4
  804b7c:	4912983a 	sll	r9,r9,r4
  804b80:	498cb03a 	or	r6,r9,r6
  804b84:	300cc03a 	cmpne	r6,r6,zero
  804b88:	298ab03a 	or	r5,r5,r6
  804b8c:	0013883a 	mov	r9,zero
  804b90:	003f1506 	br	8047e8 <__alt_data_end+0xff8047e8>
  804b94:	0101ffc4 	movi	r4,2047
  804b98:	113f9a1e 	bne	r2,r4,804a04 <__alt_data_end+0xff804a04>
  804b9c:	4811883a 	mov	r8,r9
  804ba0:	3023883a 	mov	r17,r6
  804ba4:	1021883a 	mov	r16,r2
  804ba8:	3825883a 	mov	r18,r7
  804bac:	003e9306 	br	8045fc <__alt_data_end+0xff8045fc>
  804bb0:	8000161e 	bne	r16,zero,804c0c <__adddf3+0x68c>
  804bb4:	444ab03a 	or	r5,r8,r17
  804bb8:	28005126 	beq	r5,zero,804d00 <__adddf3+0x780>
  804bbc:	0108303a 	nor	r4,zero,r4
  804bc0:	20004d1e 	bne	r4,zero,804cf8 <__adddf3+0x778>
  804bc4:	89a3883a 	add	r17,r17,r6
  804bc8:	4253883a 	add	r9,r8,r9
  804bcc:	898d803a 	cmpltu	r6,r17,r6
  804bd0:	3251883a 	add	r8,r6,r9
  804bd4:	1021883a 	mov	r16,r2
  804bd8:	003f0806 	br	8047fc <__alt_data_end+0xff8047fc>
  804bdc:	1000301e 	bne	r2,zero,804ca0 <__adddf3+0x720>
  804be0:	4984b03a 	or	r2,r9,r6
  804be4:	10007126 	beq	r2,zero,804dac <__adddf3+0x82c>
  804be8:	4811883a 	mov	r8,r9
  804bec:	3023883a 	mov	r17,r6
  804bf0:	3825883a 	mov	r18,r7
  804bf4:	0401ffc4 	movi	r16,2047
  804bf8:	003e8006 	br	8045fc <__alt_data_end+0xff8045fc>
  804bfc:	4462b03a 	or	r17,r8,r17
  804c00:	8822c03a 	cmpne	r17,r17,zero
  804c04:	0007883a 	mov	r3,zero
  804c08:	003f8b06 	br	804a38 <__alt_data_end+0xff804a38>
  804c0c:	0141ffc4 	movi	r5,2047
  804c10:	11403b26 	beq	r2,r5,804d00 <__adddf3+0x780>
  804c14:	0109c83a 	sub	r4,zero,r4
  804c18:	42002034 	orhi	r8,r8,128
  804c1c:	01400e04 	movi	r5,56
  804c20:	29006716 	blt	r5,r4,804dc0 <__adddf3+0x840>
  804c24:	014007c4 	movi	r5,31
  804c28:	29007016 	blt	r5,r4,804dec <__adddf3+0x86c>
  804c2c:	01400804 	movi	r5,32
  804c30:	290bc83a 	sub	r5,r5,r4
  804c34:	4154983a 	sll	r10,r8,r5
  804c38:	890ed83a 	srl	r7,r17,r4
  804c3c:	894a983a 	sll	r5,r17,r5
  804c40:	4108d83a 	srl	r4,r8,r4
  804c44:	51e2b03a 	or	r17,r10,r7
  804c48:	280ac03a 	cmpne	r5,r5,zero
  804c4c:	8962b03a 	or	r17,r17,r5
  804c50:	89a3883a 	add	r17,r17,r6
  804c54:	2253883a 	add	r9,r4,r9
  804c58:	898d803a 	cmpltu	r6,r17,r6
  804c5c:	3251883a 	add	r8,r6,r9
  804c60:	1021883a 	mov	r16,r2
  804c64:	003ee506 	br	8047fc <__alt_data_end+0xff8047fc>
  804c68:	4984b03a 	or	r2,r9,r6
  804c6c:	103e6326 	beq	r2,zero,8045fc <__alt_data_end+0xff8045fc>
  804c70:	8987c83a 	sub	r3,r17,r6
  804c74:	88c9803a 	cmpltu	r4,r17,r3
  804c78:	4245c83a 	sub	r2,r8,r9
  804c7c:	1105c83a 	sub	r2,r2,r4
  804c80:	1100202c 	andhi	r4,r2,128
  804c84:	203ebb26 	beq	r4,zero,804774 <__alt_data_end+0xff804774>
  804c88:	3463c83a 	sub	r17,r6,r17
  804c8c:	4a07c83a 	sub	r3,r9,r8
  804c90:	344d803a 	cmpltu	r6,r6,r17
  804c94:	1991c83a 	sub	r8,r3,r6
  804c98:	3825883a 	mov	r18,r7
  804c9c:	003e5706 	br	8045fc <__alt_data_end+0xff8045fc>
  804ca0:	4984b03a 	or	r2,r9,r6
  804ca4:	10002e26 	beq	r2,zero,804d60 <__adddf3+0x7e0>
  804ca8:	4004d0fa 	srli	r2,r8,3
  804cac:	8822d0fa 	srli	r17,r17,3
  804cb0:	4010977a 	slli	r8,r8,29
  804cb4:	10c0022c 	andhi	r3,r2,8
  804cb8:	4462b03a 	or	r17,r8,r17
  804cbc:	18000826 	beq	r3,zero,804ce0 <__adddf3+0x760>
  804cc0:	4808d0fa 	srli	r4,r9,3
  804cc4:	20c0022c 	andhi	r3,r4,8
  804cc8:	1800051e 	bne	r3,zero,804ce0 <__adddf3+0x760>
  804ccc:	300cd0fa 	srli	r6,r6,3
  804cd0:	4806977a 	slli	r3,r9,29
  804cd4:	2005883a 	mov	r2,r4
  804cd8:	3825883a 	mov	r18,r7
  804cdc:	19a2b03a 	or	r17,r3,r6
  804ce0:	8810d77a 	srli	r8,r17,29
  804ce4:	100490fa 	slli	r2,r2,3
  804ce8:	882290fa 	slli	r17,r17,3
  804cec:	0401ffc4 	movi	r16,2047
  804cf0:	4090b03a 	or	r8,r8,r2
  804cf4:	003e4106 	br	8045fc <__alt_data_end+0xff8045fc>
  804cf8:	0141ffc4 	movi	r5,2047
  804cfc:	117fc71e 	bne	r2,r5,804c1c <__alt_data_end+0xff804c1c>
  804d00:	4811883a 	mov	r8,r9
  804d04:	3023883a 	mov	r17,r6
  804d08:	1021883a 	mov	r16,r2
  804d0c:	003e3b06 	br	8045fc <__alt_data_end+0xff8045fc>
  804d10:	10002f26 	beq	r2,zero,804dd0 <__adddf3+0x850>
  804d14:	4984b03a 	or	r2,r9,r6
  804d18:	10001126 	beq	r2,zero,804d60 <__adddf3+0x7e0>
  804d1c:	4004d0fa 	srli	r2,r8,3
  804d20:	8822d0fa 	srli	r17,r17,3
  804d24:	4010977a 	slli	r8,r8,29
  804d28:	10c0022c 	andhi	r3,r2,8
  804d2c:	4462b03a 	or	r17,r8,r17
  804d30:	183feb26 	beq	r3,zero,804ce0 <__alt_data_end+0xff804ce0>
  804d34:	4808d0fa 	srli	r4,r9,3
  804d38:	20c0022c 	andhi	r3,r4,8
  804d3c:	183fe81e 	bne	r3,zero,804ce0 <__alt_data_end+0xff804ce0>
  804d40:	300cd0fa 	srli	r6,r6,3
  804d44:	4806977a 	slli	r3,r9,29
  804d48:	2005883a 	mov	r2,r4
  804d4c:	19a2b03a 	or	r17,r3,r6
  804d50:	003fe306 	br	804ce0 <__alt_data_end+0xff804ce0>
  804d54:	0011883a 	mov	r8,zero
  804d58:	0005883a 	mov	r2,zero
  804d5c:	003e3f06 	br	80465c <__alt_data_end+0xff80465c>
  804d60:	0401ffc4 	movi	r16,2047
  804d64:	003e2506 	br	8045fc <__alt_data_end+0xff8045fc>
  804d68:	0013883a 	mov	r9,zero
  804d6c:	003f8406 	br	804b80 <__alt_data_end+0xff804b80>
  804d70:	0005883a 	mov	r2,zero
  804d74:	0007883a 	mov	r3,zero
  804d78:	003e8906 	br	8047a0 <__alt_data_end+0xff8047a0>
  804d7c:	197ff804 	addi	r5,r3,-32
  804d80:	01000804 	movi	r4,32
  804d84:	414ad83a 	srl	r5,r8,r5
  804d88:	19002426 	beq	r3,r4,804e1c <__adddf3+0x89c>
  804d8c:	01001004 	movi	r4,64
  804d90:	20c7c83a 	sub	r3,r4,r3
  804d94:	40c6983a 	sll	r3,r8,r3
  804d98:	1c46b03a 	or	r3,r3,r17
  804d9c:	1806c03a 	cmpne	r3,r3,zero
  804da0:	28e2b03a 	or	r17,r5,r3
  804da4:	0007883a 	mov	r3,zero
  804da8:	003f2306 	br	804a38 <__alt_data_end+0xff804a38>
  804dac:	0007883a 	mov	r3,zero
  804db0:	5811883a 	mov	r8,r11
  804db4:	00bfffc4 	movi	r2,-1
  804db8:	0401ffc4 	movi	r16,2047
  804dbc:	003e7806 	br	8047a0 <__alt_data_end+0xff8047a0>
  804dc0:	4462b03a 	or	r17,r8,r17
  804dc4:	8822c03a 	cmpne	r17,r17,zero
  804dc8:	0009883a 	mov	r4,zero
  804dcc:	003fa006 	br	804c50 <__alt_data_end+0xff804c50>
  804dd0:	4811883a 	mov	r8,r9
  804dd4:	3023883a 	mov	r17,r6
  804dd8:	0401ffc4 	movi	r16,2047
  804ddc:	003e0706 	br	8045fc <__alt_data_end+0xff8045fc>
  804de0:	4811883a 	mov	r8,r9
  804de4:	3023883a 	mov	r17,r6
  804de8:	003e0406 	br	8045fc <__alt_data_end+0xff8045fc>
  804dec:	21fff804 	addi	r7,r4,-32
  804df0:	01400804 	movi	r5,32
  804df4:	41ced83a 	srl	r7,r8,r7
  804df8:	21400a26 	beq	r4,r5,804e24 <__adddf3+0x8a4>
  804dfc:	01401004 	movi	r5,64
  804e00:	2909c83a 	sub	r4,r5,r4
  804e04:	4108983a 	sll	r4,r8,r4
  804e08:	2448b03a 	or	r4,r4,r17
  804e0c:	2008c03a 	cmpne	r4,r4,zero
  804e10:	3922b03a 	or	r17,r7,r4
  804e14:	0009883a 	mov	r4,zero
  804e18:	003f8d06 	br	804c50 <__alt_data_end+0xff804c50>
  804e1c:	0007883a 	mov	r3,zero
  804e20:	003fdd06 	br	804d98 <__alt_data_end+0xff804d98>
  804e24:	0009883a 	mov	r4,zero
  804e28:	003ff706 	br	804e08 <__alt_data_end+0xff804e08>

00804e2c <__divdf3>:
  804e2c:	defff204 	addi	sp,sp,-56
  804e30:	dd400915 	stw	r21,36(sp)
  804e34:	282ad53a 	srli	r21,r5,20
  804e38:	dd000815 	stw	r20,32(sp)
  804e3c:	2828d7fa 	srli	r20,r5,31
  804e40:	dc000415 	stw	r16,16(sp)
  804e44:	04000434 	movhi	r16,16
  804e48:	df000c15 	stw	fp,48(sp)
  804e4c:	843fffc4 	addi	r16,r16,-1
  804e50:	dfc00d15 	stw	ra,52(sp)
  804e54:	ddc00b15 	stw	r23,44(sp)
  804e58:	dd800a15 	stw	r22,40(sp)
  804e5c:	dcc00715 	stw	r19,28(sp)
  804e60:	dc800615 	stw	r18,24(sp)
  804e64:	dc400515 	stw	r17,20(sp)
  804e68:	ad41ffcc 	andi	r21,r21,2047
  804e6c:	2c20703a 	and	r16,r5,r16
  804e70:	a7003fcc 	andi	fp,r20,255
  804e74:	a8006126 	beq	r21,zero,804ffc <__divdf3+0x1d0>
  804e78:	0081ffc4 	movi	r2,2047
  804e7c:	2025883a 	mov	r18,r4
  804e80:	a8803726 	beq	r21,r2,804f60 <__divdf3+0x134>
  804e84:	80800434 	orhi	r2,r16,16
  804e88:	100490fa 	slli	r2,r2,3
  804e8c:	2020d77a 	srli	r16,r4,29
  804e90:	202490fa 	slli	r18,r4,3
  804e94:	ad7f0044 	addi	r21,r21,-1023
  804e98:	80a0b03a 	or	r16,r16,r2
  804e9c:	0027883a 	mov	r19,zero
  804ea0:	0013883a 	mov	r9,zero
  804ea4:	3804d53a 	srli	r2,r7,20
  804ea8:	382cd7fa 	srli	r22,r7,31
  804eac:	04400434 	movhi	r17,16
  804eb0:	8c7fffc4 	addi	r17,r17,-1
  804eb4:	1081ffcc 	andi	r2,r2,2047
  804eb8:	3011883a 	mov	r8,r6
  804ebc:	3c62703a 	and	r17,r7,r17
  804ec0:	b5c03fcc 	andi	r23,r22,255
  804ec4:	10006c26 	beq	r2,zero,805078 <__divdf3+0x24c>
  804ec8:	00c1ffc4 	movi	r3,2047
  804ecc:	10c06426 	beq	r2,r3,805060 <__divdf3+0x234>
  804ed0:	88c00434 	orhi	r3,r17,16
  804ed4:	180690fa 	slli	r3,r3,3
  804ed8:	3022d77a 	srli	r17,r6,29
  804edc:	301090fa 	slli	r8,r6,3
  804ee0:	10bf0044 	addi	r2,r2,-1023
  804ee4:	88e2b03a 	or	r17,r17,r3
  804ee8:	000f883a 	mov	r7,zero
  804eec:	a58cf03a 	xor	r6,r20,r22
  804ef0:	3cc8b03a 	or	r4,r7,r19
  804ef4:	a8abc83a 	sub	r21,r21,r2
  804ef8:	008003c4 	movi	r2,15
  804efc:	3007883a 	mov	r3,r6
  804f00:	34c03fcc 	andi	r19,r6,255
  804f04:	11009036 	bltu	r2,r4,805148 <__divdf3+0x31c>
  804f08:	200890ba 	slli	r4,r4,2
  804f0c:	00802034 	movhi	r2,128
  804f10:	1093c804 	addi	r2,r2,20256
  804f14:	2089883a 	add	r4,r4,r2
  804f18:	20800017 	ldw	r2,0(r4)
  804f1c:	1000683a 	jmp	r2
  804f20:	00805148 	cmpgei	r2,zero,325
  804f24:	00804f98 	cmpnei	r2,zero,318
  804f28:	00805138 	rdprs	r2,zero,324
  804f2c:	00804f8c 	andi	r2,zero,318
  804f30:	00805138 	rdprs	r2,zero,324
  804f34:	0080510c 	andi	r2,zero,324
  804f38:	00805138 	rdprs	r2,zero,324
  804f3c:	00804f8c 	andi	r2,zero,318
  804f40:	00804f98 	cmpnei	r2,zero,318
  804f44:	00804f98 	cmpnei	r2,zero,318
  804f48:	0080510c 	andi	r2,zero,324
  804f4c:	00804f8c 	andi	r2,zero,318
  804f50:	00804f7c 	xorhi	r2,zero,317
  804f54:	00804f7c 	xorhi	r2,zero,317
  804f58:	00804f7c 	xorhi	r2,zero,317
  804f5c:	0080542c 	andhi	r2,zero,336
  804f60:	2404b03a 	or	r2,r4,r16
  804f64:	1000661e 	bne	r2,zero,805100 <__divdf3+0x2d4>
  804f68:	04c00204 	movi	r19,8
  804f6c:	0021883a 	mov	r16,zero
  804f70:	0025883a 	mov	r18,zero
  804f74:	02400084 	movi	r9,2
  804f78:	003fca06 	br	804ea4 <__alt_data_end+0xff804ea4>
  804f7c:	8023883a 	mov	r17,r16
  804f80:	9011883a 	mov	r8,r18
  804f84:	e02f883a 	mov	r23,fp
  804f88:	480f883a 	mov	r7,r9
  804f8c:	00800084 	movi	r2,2
  804f90:	3881311e 	bne	r7,r2,805458 <__divdf3+0x62c>
  804f94:	b827883a 	mov	r19,r23
  804f98:	98c0004c 	andi	r3,r19,1
  804f9c:	0081ffc4 	movi	r2,2047
  804fa0:	000b883a 	mov	r5,zero
  804fa4:	0025883a 	mov	r18,zero
  804fa8:	1004953a 	slli	r2,r2,20
  804fac:	18c03fcc 	andi	r3,r3,255
  804fb0:	04400434 	movhi	r17,16
  804fb4:	8c7fffc4 	addi	r17,r17,-1
  804fb8:	180697fa 	slli	r3,r3,31
  804fbc:	2c4a703a 	and	r5,r5,r17
  804fc0:	288ab03a 	or	r5,r5,r2
  804fc4:	28c6b03a 	or	r3,r5,r3
  804fc8:	9005883a 	mov	r2,r18
  804fcc:	dfc00d17 	ldw	ra,52(sp)
  804fd0:	df000c17 	ldw	fp,48(sp)
  804fd4:	ddc00b17 	ldw	r23,44(sp)
  804fd8:	dd800a17 	ldw	r22,40(sp)
  804fdc:	dd400917 	ldw	r21,36(sp)
  804fe0:	dd000817 	ldw	r20,32(sp)
  804fe4:	dcc00717 	ldw	r19,28(sp)
  804fe8:	dc800617 	ldw	r18,24(sp)
  804fec:	dc400517 	ldw	r17,20(sp)
  804ff0:	dc000417 	ldw	r16,16(sp)
  804ff4:	dec00e04 	addi	sp,sp,56
  804ff8:	f800283a 	ret
  804ffc:	2404b03a 	or	r2,r4,r16
  805000:	2027883a 	mov	r19,r4
  805004:	10003926 	beq	r2,zero,8050ec <__divdf3+0x2c0>
  805008:	80012e26 	beq	r16,zero,8054c4 <__divdf3+0x698>
  80500c:	8009883a 	mov	r4,r16
  805010:	d9800315 	stw	r6,12(sp)
  805014:	d9c00215 	stw	r7,8(sp)
  805018:	0806d480 	call	806d48 <__clzsi2>
  80501c:	d9800317 	ldw	r6,12(sp)
  805020:	d9c00217 	ldw	r7,8(sp)
  805024:	113ffd44 	addi	r4,r2,-11
  805028:	00c00704 	movi	r3,28
  80502c:	19012116 	blt	r3,r4,8054b4 <__divdf3+0x688>
  805030:	00c00744 	movi	r3,29
  805034:	147ffe04 	addi	r17,r2,-8
  805038:	1907c83a 	sub	r3,r3,r4
  80503c:	8460983a 	sll	r16,r16,r17
  805040:	98c6d83a 	srl	r3,r19,r3
  805044:	9c64983a 	sll	r18,r19,r17
  805048:	1c20b03a 	or	r16,r3,r16
  80504c:	1080fcc4 	addi	r2,r2,1011
  805050:	00abc83a 	sub	r21,zero,r2
  805054:	0027883a 	mov	r19,zero
  805058:	0013883a 	mov	r9,zero
  80505c:	003f9106 	br	804ea4 <__alt_data_end+0xff804ea4>
  805060:	3446b03a 	or	r3,r6,r17
  805064:	18001f1e 	bne	r3,zero,8050e4 <__divdf3+0x2b8>
  805068:	0023883a 	mov	r17,zero
  80506c:	0011883a 	mov	r8,zero
  805070:	01c00084 	movi	r7,2
  805074:	003f9d06 	br	804eec <__alt_data_end+0xff804eec>
  805078:	3446b03a 	or	r3,r6,r17
  80507c:	18001526 	beq	r3,zero,8050d4 <__divdf3+0x2a8>
  805080:	88011b26 	beq	r17,zero,8054f0 <__divdf3+0x6c4>
  805084:	8809883a 	mov	r4,r17
  805088:	d9800315 	stw	r6,12(sp)
  80508c:	da400115 	stw	r9,4(sp)
  805090:	0806d480 	call	806d48 <__clzsi2>
  805094:	d9800317 	ldw	r6,12(sp)
  805098:	da400117 	ldw	r9,4(sp)
  80509c:	113ffd44 	addi	r4,r2,-11
  8050a0:	00c00704 	movi	r3,28
  8050a4:	19010e16 	blt	r3,r4,8054e0 <__divdf3+0x6b4>
  8050a8:	00c00744 	movi	r3,29
  8050ac:	123ffe04 	addi	r8,r2,-8
  8050b0:	1907c83a 	sub	r3,r3,r4
  8050b4:	8a22983a 	sll	r17,r17,r8
  8050b8:	30c6d83a 	srl	r3,r6,r3
  8050bc:	3210983a 	sll	r8,r6,r8
  8050c0:	1c62b03a 	or	r17,r3,r17
  8050c4:	1080fcc4 	addi	r2,r2,1011
  8050c8:	0085c83a 	sub	r2,zero,r2
  8050cc:	000f883a 	mov	r7,zero
  8050d0:	003f8606 	br	804eec <__alt_data_end+0xff804eec>
  8050d4:	0023883a 	mov	r17,zero
  8050d8:	0011883a 	mov	r8,zero
  8050dc:	01c00044 	movi	r7,1
  8050e0:	003f8206 	br	804eec <__alt_data_end+0xff804eec>
  8050e4:	01c000c4 	movi	r7,3
  8050e8:	003f8006 	br	804eec <__alt_data_end+0xff804eec>
  8050ec:	04c00104 	movi	r19,4
  8050f0:	0021883a 	mov	r16,zero
  8050f4:	0025883a 	mov	r18,zero
  8050f8:	02400044 	movi	r9,1
  8050fc:	003f6906 	br	804ea4 <__alt_data_end+0xff804ea4>
  805100:	04c00304 	movi	r19,12
  805104:	024000c4 	movi	r9,3
  805108:	003f6606 	br	804ea4 <__alt_data_end+0xff804ea4>
  80510c:	01400434 	movhi	r5,16
  805110:	0007883a 	mov	r3,zero
  805114:	297fffc4 	addi	r5,r5,-1
  805118:	04bfffc4 	movi	r18,-1
  80511c:	0081ffc4 	movi	r2,2047
  805120:	003fa106 	br	804fa8 <__alt_data_end+0xff804fa8>
  805124:	00c00044 	movi	r3,1
  805128:	1887c83a 	sub	r3,r3,r2
  80512c:	01000e04 	movi	r4,56
  805130:	20c1210e 	bge	r4,r3,8055b8 <__divdf3+0x78c>
  805134:	98c0004c 	andi	r3,r19,1
  805138:	0005883a 	mov	r2,zero
  80513c:	000b883a 	mov	r5,zero
  805140:	0025883a 	mov	r18,zero
  805144:	003f9806 	br	804fa8 <__alt_data_end+0xff804fa8>
  805148:	8c00fd36 	bltu	r17,r16,805540 <__divdf3+0x714>
  80514c:	8440fb26 	beq	r16,r17,80553c <__divdf3+0x710>
  805150:	8007883a 	mov	r3,r16
  805154:	ad7fffc4 	addi	r21,r21,-1
  805158:	0021883a 	mov	r16,zero
  80515c:	4004d63a 	srli	r2,r8,24
  805160:	8822923a 	slli	r17,r17,8
  805164:	1809883a 	mov	r4,r3
  805168:	402c923a 	slli	r22,r8,8
  80516c:	88b8b03a 	or	fp,r17,r2
  805170:	e028d43a 	srli	r20,fp,16
  805174:	d8c00015 	stw	r3,0(sp)
  805178:	e5ffffcc 	andi	r23,fp,65535
  80517c:	a00b883a 	mov	r5,r20
  805180:	0802ff80 	call	802ff8 <__udivsi3>
  805184:	d8c00017 	ldw	r3,0(sp)
  805188:	a00b883a 	mov	r5,r20
  80518c:	d8800315 	stw	r2,12(sp)
  805190:	1809883a 	mov	r4,r3
  805194:	080305c0 	call	80305c <__umodsi3>
  805198:	d9800317 	ldw	r6,12(sp)
  80519c:	1006943a 	slli	r3,r2,16
  8051a0:	9004d43a 	srli	r2,r18,16
  8051a4:	b9a3383a 	mul	r17,r23,r6
  8051a8:	10c4b03a 	or	r2,r2,r3
  8051ac:	1440062e 	bgeu	r2,r17,8051c8 <__divdf3+0x39c>
  8051b0:	1705883a 	add	r2,r2,fp
  8051b4:	30ffffc4 	addi	r3,r6,-1
  8051b8:	1700ee36 	bltu	r2,fp,805574 <__divdf3+0x748>
  8051bc:	1440ed2e 	bgeu	r2,r17,805574 <__divdf3+0x748>
  8051c0:	31bfff84 	addi	r6,r6,-2
  8051c4:	1705883a 	add	r2,r2,fp
  8051c8:	1463c83a 	sub	r17,r2,r17
  8051cc:	a00b883a 	mov	r5,r20
  8051d0:	8809883a 	mov	r4,r17
  8051d4:	d9800315 	stw	r6,12(sp)
  8051d8:	0802ff80 	call	802ff8 <__udivsi3>
  8051dc:	a00b883a 	mov	r5,r20
  8051e0:	8809883a 	mov	r4,r17
  8051e4:	d8800215 	stw	r2,8(sp)
  8051e8:	080305c0 	call	80305c <__umodsi3>
  8051ec:	d9c00217 	ldw	r7,8(sp)
  8051f0:	1004943a 	slli	r2,r2,16
  8051f4:	94bfffcc 	andi	r18,r18,65535
  8051f8:	b9d1383a 	mul	r8,r23,r7
  8051fc:	90a4b03a 	or	r18,r18,r2
  805200:	d9800317 	ldw	r6,12(sp)
  805204:	9200062e 	bgeu	r18,r8,805220 <__divdf3+0x3f4>
  805208:	9725883a 	add	r18,r18,fp
  80520c:	38bfffc4 	addi	r2,r7,-1
  805210:	9700d636 	bltu	r18,fp,80556c <__divdf3+0x740>
  805214:	9200d52e 	bgeu	r18,r8,80556c <__divdf3+0x740>
  805218:	39ffff84 	addi	r7,r7,-2
  80521c:	9725883a 	add	r18,r18,fp
  805220:	3004943a 	slli	r2,r6,16
  805224:	b012d43a 	srli	r9,r22,16
  805228:	b1bfffcc 	andi	r6,r22,65535
  80522c:	11e2b03a 	or	r17,r2,r7
  805230:	8806d43a 	srli	r3,r17,16
  805234:	893fffcc 	andi	r4,r17,65535
  805238:	218b383a 	mul	r5,r4,r6
  80523c:	30c5383a 	mul	r2,r6,r3
  805240:	2249383a 	mul	r4,r4,r9
  805244:	280ed43a 	srli	r7,r5,16
  805248:	9225c83a 	sub	r18,r18,r8
  80524c:	2089883a 	add	r4,r4,r2
  805250:	3909883a 	add	r4,r7,r4
  805254:	1a47383a 	mul	r3,r3,r9
  805258:	2080022e 	bgeu	r4,r2,805264 <__divdf3+0x438>
  80525c:	00800074 	movhi	r2,1
  805260:	1887883a 	add	r3,r3,r2
  805264:	2004d43a 	srli	r2,r4,16
  805268:	2008943a 	slli	r4,r4,16
  80526c:	297fffcc 	andi	r5,r5,65535
  805270:	10c7883a 	add	r3,r2,r3
  805274:	2149883a 	add	r4,r4,r5
  805278:	90c0a536 	bltu	r18,r3,805510 <__divdf3+0x6e4>
  80527c:	90c0bf26 	beq	r18,r3,80557c <__divdf3+0x750>
  805280:	90c7c83a 	sub	r3,r18,r3
  805284:	810fc83a 	sub	r7,r16,r4
  805288:	81e5803a 	cmpltu	r18,r16,r7
  80528c:	1ca5c83a 	sub	r18,r3,r18
  805290:	e480c126 	beq	fp,r18,805598 <__divdf3+0x76c>
  805294:	a00b883a 	mov	r5,r20
  805298:	9009883a 	mov	r4,r18
  80529c:	d9800315 	stw	r6,12(sp)
  8052a0:	d9c00215 	stw	r7,8(sp)
  8052a4:	da400115 	stw	r9,4(sp)
  8052a8:	0802ff80 	call	802ff8 <__udivsi3>
  8052ac:	a00b883a 	mov	r5,r20
  8052b0:	9009883a 	mov	r4,r18
  8052b4:	d8800015 	stw	r2,0(sp)
  8052b8:	080305c0 	call	80305c <__umodsi3>
  8052bc:	d9c00217 	ldw	r7,8(sp)
  8052c0:	da000017 	ldw	r8,0(sp)
  8052c4:	1006943a 	slli	r3,r2,16
  8052c8:	3804d43a 	srli	r2,r7,16
  8052cc:	ba21383a 	mul	r16,r23,r8
  8052d0:	d9800317 	ldw	r6,12(sp)
  8052d4:	10c4b03a 	or	r2,r2,r3
  8052d8:	da400117 	ldw	r9,4(sp)
  8052dc:	1400062e 	bgeu	r2,r16,8052f8 <__divdf3+0x4cc>
  8052e0:	1705883a 	add	r2,r2,fp
  8052e4:	40ffffc4 	addi	r3,r8,-1
  8052e8:	1700ad36 	bltu	r2,fp,8055a0 <__divdf3+0x774>
  8052ec:	1400ac2e 	bgeu	r2,r16,8055a0 <__divdf3+0x774>
  8052f0:	423fff84 	addi	r8,r8,-2
  8052f4:	1705883a 	add	r2,r2,fp
  8052f8:	1421c83a 	sub	r16,r2,r16
  8052fc:	a00b883a 	mov	r5,r20
  805300:	8009883a 	mov	r4,r16
  805304:	d9800315 	stw	r6,12(sp)
  805308:	d9c00215 	stw	r7,8(sp)
  80530c:	da000015 	stw	r8,0(sp)
  805310:	da400115 	stw	r9,4(sp)
  805314:	0802ff80 	call	802ff8 <__udivsi3>
  805318:	8009883a 	mov	r4,r16
  80531c:	a00b883a 	mov	r5,r20
  805320:	1025883a 	mov	r18,r2
  805324:	080305c0 	call	80305c <__umodsi3>
  805328:	d9c00217 	ldw	r7,8(sp)
  80532c:	1004943a 	slli	r2,r2,16
  805330:	bcaf383a 	mul	r23,r23,r18
  805334:	393fffcc 	andi	r4,r7,65535
  805338:	2088b03a 	or	r4,r4,r2
  80533c:	d9800317 	ldw	r6,12(sp)
  805340:	da000017 	ldw	r8,0(sp)
  805344:	da400117 	ldw	r9,4(sp)
  805348:	25c0062e 	bgeu	r4,r23,805364 <__divdf3+0x538>
  80534c:	2709883a 	add	r4,r4,fp
  805350:	90bfffc4 	addi	r2,r18,-1
  805354:	27009436 	bltu	r4,fp,8055a8 <__divdf3+0x77c>
  805358:	25c0932e 	bgeu	r4,r23,8055a8 <__divdf3+0x77c>
  80535c:	94bfff84 	addi	r18,r18,-2
  805360:	2709883a 	add	r4,r4,fp
  805364:	4004943a 	slli	r2,r8,16
  805368:	25efc83a 	sub	r23,r4,r23
  80536c:	1490b03a 	or	r8,r2,r18
  805370:	4008d43a 	srli	r4,r8,16
  805374:	40ffffcc 	andi	r3,r8,65535
  805378:	30c5383a 	mul	r2,r6,r3
  80537c:	1a47383a 	mul	r3,r3,r9
  805380:	310d383a 	mul	r6,r6,r4
  805384:	100ad43a 	srli	r5,r2,16
  805388:	4913383a 	mul	r9,r9,r4
  80538c:	1987883a 	add	r3,r3,r6
  805390:	28c7883a 	add	r3,r5,r3
  805394:	1980022e 	bgeu	r3,r6,8053a0 <__divdf3+0x574>
  805398:	01000074 	movhi	r4,1
  80539c:	4913883a 	add	r9,r9,r4
  8053a0:	1808d43a 	srli	r4,r3,16
  8053a4:	1806943a 	slli	r3,r3,16
  8053a8:	10bfffcc 	andi	r2,r2,65535
  8053ac:	2253883a 	add	r9,r4,r9
  8053b0:	1887883a 	add	r3,r3,r2
  8053b4:	ba403836 	bltu	r23,r9,805498 <__divdf3+0x66c>
  8053b8:	ba403626 	beq	r23,r9,805494 <__divdf3+0x668>
  8053bc:	42000054 	ori	r8,r8,1
  8053c0:	a880ffc4 	addi	r2,r21,1023
  8053c4:	00bf570e 	bge	zero,r2,805124 <__alt_data_end+0xff805124>
  8053c8:	40c001cc 	andi	r3,r8,7
  8053cc:	18000726 	beq	r3,zero,8053ec <__divdf3+0x5c0>
  8053d0:	40c003cc 	andi	r3,r8,15
  8053d4:	01000104 	movi	r4,4
  8053d8:	19000426 	beq	r3,r4,8053ec <__divdf3+0x5c0>
  8053dc:	4107883a 	add	r3,r8,r4
  8053e0:	1a11803a 	cmpltu	r8,r3,r8
  8053e4:	8a23883a 	add	r17,r17,r8
  8053e8:	1811883a 	mov	r8,r3
  8053ec:	88c0402c 	andhi	r3,r17,256
  8053f0:	18000426 	beq	r3,zero,805404 <__divdf3+0x5d8>
  8053f4:	00ffc034 	movhi	r3,65280
  8053f8:	18ffffc4 	addi	r3,r3,-1
  8053fc:	a8810004 	addi	r2,r21,1024
  805400:	88e2703a 	and	r17,r17,r3
  805404:	00c1ff84 	movi	r3,2046
  805408:	18bee316 	blt	r3,r2,804f98 <__alt_data_end+0xff804f98>
  80540c:	8824977a 	slli	r18,r17,29
  805410:	4010d0fa 	srli	r8,r8,3
  805414:	8822927a 	slli	r17,r17,9
  805418:	1081ffcc 	andi	r2,r2,2047
  80541c:	9224b03a 	or	r18,r18,r8
  805420:	880ad33a 	srli	r5,r17,12
  805424:	98c0004c 	andi	r3,r19,1
  805428:	003edf06 	br	804fa8 <__alt_data_end+0xff804fa8>
  80542c:	8080022c 	andhi	r2,r16,8
  805430:	10001226 	beq	r2,zero,80547c <__divdf3+0x650>
  805434:	8880022c 	andhi	r2,r17,8
  805438:	1000101e 	bne	r2,zero,80547c <__divdf3+0x650>
  80543c:	00800434 	movhi	r2,16
  805440:	89400234 	orhi	r5,r17,8
  805444:	10bfffc4 	addi	r2,r2,-1
  805448:	b007883a 	mov	r3,r22
  80544c:	288a703a 	and	r5,r5,r2
  805450:	4025883a 	mov	r18,r8
  805454:	003f3106 	br	80511c <__alt_data_end+0xff80511c>
  805458:	008000c4 	movi	r2,3
  80545c:	3880a626 	beq	r7,r2,8056f8 <__divdf3+0x8cc>
  805460:	00800044 	movi	r2,1
  805464:	3880521e 	bne	r7,r2,8055b0 <__divdf3+0x784>
  805468:	b807883a 	mov	r3,r23
  80546c:	0005883a 	mov	r2,zero
  805470:	000b883a 	mov	r5,zero
  805474:	0025883a 	mov	r18,zero
  805478:	003ecb06 	br	804fa8 <__alt_data_end+0xff804fa8>
  80547c:	00800434 	movhi	r2,16
  805480:	81400234 	orhi	r5,r16,8
  805484:	10bfffc4 	addi	r2,r2,-1
  805488:	a007883a 	mov	r3,r20
  80548c:	288a703a 	and	r5,r5,r2
  805490:	003f2206 	br	80511c <__alt_data_end+0xff80511c>
  805494:	183fca26 	beq	r3,zero,8053c0 <__alt_data_end+0xff8053c0>
  805498:	e5ef883a 	add	r23,fp,r23
  80549c:	40bfffc4 	addi	r2,r8,-1
  8054a0:	bf00392e 	bgeu	r23,fp,805588 <__divdf3+0x75c>
  8054a4:	1011883a 	mov	r8,r2
  8054a8:	ba7fc41e 	bne	r23,r9,8053bc <__alt_data_end+0xff8053bc>
  8054ac:	b0ffc31e 	bne	r22,r3,8053bc <__alt_data_end+0xff8053bc>
  8054b0:	003fc306 	br	8053c0 <__alt_data_end+0xff8053c0>
  8054b4:	143ff604 	addi	r16,r2,-40
  8054b8:	9c20983a 	sll	r16,r19,r16
  8054bc:	0025883a 	mov	r18,zero
  8054c0:	003ee206 	br	80504c <__alt_data_end+0xff80504c>
  8054c4:	d9800315 	stw	r6,12(sp)
  8054c8:	d9c00215 	stw	r7,8(sp)
  8054cc:	0806d480 	call	806d48 <__clzsi2>
  8054d0:	10800804 	addi	r2,r2,32
  8054d4:	d9c00217 	ldw	r7,8(sp)
  8054d8:	d9800317 	ldw	r6,12(sp)
  8054dc:	003ed106 	br	805024 <__alt_data_end+0xff805024>
  8054e0:	147ff604 	addi	r17,r2,-40
  8054e4:	3462983a 	sll	r17,r6,r17
  8054e8:	0011883a 	mov	r8,zero
  8054ec:	003ef506 	br	8050c4 <__alt_data_end+0xff8050c4>
  8054f0:	3009883a 	mov	r4,r6
  8054f4:	d9800315 	stw	r6,12(sp)
  8054f8:	da400115 	stw	r9,4(sp)
  8054fc:	0806d480 	call	806d48 <__clzsi2>
  805500:	10800804 	addi	r2,r2,32
  805504:	da400117 	ldw	r9,4(sp)
  805508:	d9800317 	ldw	r6,12(sp)
  80550c:	003ee306 	br	80509c <__alt_data_end+0xff80509c>
  805510:	85a1883a 	add	r16,r16,r22
  805514:	8585803a 	cmpltu	r2,r16,r22
  805518:	1705883a 	add	r2,r2,fp
  80551c:	14a5883a 	add	r18,r2,r18
  805520:	88bfffc4 	addi	r2,r17,-1
  805524:	e4800c2e 	bgeu	fp,r18,805558 <__divdf3+0x72c>
  805528:	90c03e36 	bltu	r18,r3,805624 <__divdf3+0x7f8>
  80552c:	1c806926 	beq	r3,r18,8056d4 <__divdf3+0x8a8>
  805530:	90c7c83a 	sub	r3,r18,r3
  805534:	1023883a 	mov	r17,r2
  805538:	003f5206 	br	805284 <__alt_data_end+0xff805284>
  80553c:	923f0436 	bltu	r18,r8,805150 <__alt_data_end+0xff805150>
  805540:	800897fa 	slli	r4,r16,31
  805544:	9004d07a 	srli	r2,r18,1
  805548:	8006d07a 	srli	r3,r16,1
  80554c:	902097fa 	slli	r16,r18,31
  805550:	20a4b03a 	or	r18,r4,r2
  805554:	003f0106 	br	80515c <__alt_data_end+0xff80515c>
  805558:	e4bff51e 	bne	fp,r18,805530 <__alt_data_end+0xff805530>
  80555c:	85bff22e 	bgeu	r16,r22,805528 <__alt_data_end+0xff805528>
  805560:	e0c7c83a 	sub	r3,fp,r3
  805564:	1023883a 	mov	r17,r2
  805568:	003f4606 	br	805284 <__alt_data_end+0xff805284>
  80556c:	100f883a 	mov	r7,r2
  805570:	003f2b06 	br	805220 <__alt_data_end+0xff805220>
  805574:	180d883a 	mov	r6,r3
  805578:	003f1306 	br	8051c8 <__alt_data_end+0xff8051c8>
  80557c:	813fe436 	bltu	r16,r4,805510 <__alt_data_end+0xff805510>
  805580:	0007883a 	mov	r3,zero
  805584:	003f3f06 	br	805284 <__alt_data_end+0xff805284>
  805588:	ba402c36 	bltu	r23,r9,80563c <__divdf3+0x810>
  80558c:	4dc05426 	beq	r9,r23,8056e0 <__divdf3+0x8b4>
  805590:	1011883a 	mov	r8,r2
  805594:	003f8906 	br	8053bc <__alt_data_end+0xff8053bc>
  805598:	023fffc4 	movi	r8,-1
  80559c:	003f8806 	br	8053c0 <__alt_data_end+0xff8053c0>
  8055a0:	1811883a 	mov	r8,r3
  8055a4:	003f5406 	br	8052f8 <__alt_data_end+0xff8052f8>
  8055a8:	1025883a 	mov	r18,r2
  8055ac:	003f6d06 	br	805364 <__alt_data_end+0xff805364>
  8055b0:	b827883a 	mov	r19,r23
  8055b4:	003f8206 	br	8053c0 <__alt_data_end+0xff8053c0>
  8055b8:	010007c4 	movi	r4,31
  8055bc:	20c02616 	blt	r4,r3,805658 <__divdf3+0x82c>
  8055c0:	00800804 	movi	r2,32
  8055c4:	10c5c83a 	sub	r2,r2,r3
  8055c8:	888a983a 	sll	r5,r17,r2
  8055cc:	40c8d83a 	srl	r4,r8,r3
  8055d0:	4084983a 	sll	r2,r8,r2
  8055d4:	88e2d83a 	srl	r17,r17,r3
  8055d8:	2906b03a 	or	r3,r5,r4
  8055dc:	1004c03a 	cmpne	r2,r2,zero
  8055e0:	1886b03a 	or	r3,r3,r2
  8055e4:	188001cc 	andi	r2,r3,7
  8055e8:	10000726 	beq	r2,zero,805608 <__divdf3+0x7dc>
  8055ec:	188003cc 	andi	r2,r3,15
  8055f0:	01000104 	movi	r4,4
  8055f4:	11000426 	beq	r2,r4,805608 <__divdf3+0x7dc>
  8055f8:	1805883a 	mov	r2,r3
  8055fc:	10c00104 	addi	r3,r2,4
  805600:	1885803a 	cmpltu	r2,r3,r2
  805604:	88a3883a 	add	r17,r17,r2
  805608:	8880202c 	andhi	r2,r17,128
  80560c:	10002726 	beq	r2,zero,8056ac <__divdf3+0x880>
  805610:	98c0004c 	andi	r3,r19,1
  805614:	00800044 	movi	r2,1
  805618:	000b883a 	mov	r5,zero
  80561c:	0025883a 	mov	r18,zero
  805620:	003e6106 	br	804fa8 <__alt_data_end+0xff804fa8>
  805624:	85a1883a 	add	r16,r16,r22
  805628:	8585803a 	cmpltu	r2,r16,r22
  80562c:	1705883a 	add	r2,r2,fp
  805630:	14a5883a 	add	r18,r2,r18
  805634:	8c7fff84 	addi	r17,r17,-2
  805638:	003f1106 	br	805280 <__alt_data_end+0xff805280>
  80563c:	b589883a 	add	r4,r22,r22
  805640:	25ad803a 	cmpltu	r22,r4,r22
  805644:	b739883a 	add	fp,r22,fp
  805648:	40bfff84 	addi	r2,r8,-2
  80564c:	bf2f883a 	add	r23,r23,fp
  805650:	202d883a 	mov	r22,r4
  805654:	003f9306 	br	8054a4 <__alt_data_end+0xff8054a4>
  805658:	013ff844 	movi	r4,-31
  80565c:	2085c83a 	sub	r2,r4,r2
  805660:	8888d83a 	srl	r4,r17,r2
  805664:	00800804 	movi	r2,32
  805668:	18802126 	beq	r3,r2,8056f0 <__divdf3+0x8c4>
  80566c:	00801004 	movi	r2,64
  805670:	10c5c83a 	sub	r2,r2,r3
  805674:	8884983a 	sll	r2,r17,r2
  805678:	1204b03a 	or	r2,r2,r8
  80567c:	1004c03a 	cmpne	r2,r2,zero
  805680:	2084b03a 	or	r2,r4,r2
  805684:	144001cc 	andi	r17,r2,7
  805688:	88000d1e 	bne	r17,zero,8056c0 <__divdf3+0x894>
  80568c:	000b883a 	mov	r5,zero
  805690:	1024d0fa 	srli	r18,r2,3
  805694:	98c0004c 	andi	r3,r19,1
  805698:	0005883a 	mov	r2,zero
  80569c:	9464b03a 	or	r18,r18,r17
  8056a0:	003e4106 	br	804fa8 <__alt_data_end+0xff804fa8>
  8056a4:	1007883a 	mov	r3,r2
  8056a8:	0023883a 	mov	r17,zero
  8056ac:	880a927a 	slli	r5,r17,9
  8056b0:	1805883a 	mov	r2,r3
  8056b4:	8822977a 	slli	r17,r17,29
  8056b8:	280ad33a 	srli	r5,r5,12
  8056bc:	003ff406 	br	805690 <__alt_data_end+0xff805690>
  8056c0:	10c003cc 	andi	r3,r2,15
  8056c4:	01000104 	movi	r4,4
  8056c8:	193ff626 	beq	r3,r4,8056a4 <__alt_data_end+0xff8056a4>
  8056cc:	0023883a 	mov	r17,zero
  8056d0:	003fca06 	br	8055fc <__alt_data_end+0xff8055fc>
  8056d4:	813fd336 	bltu	r16,r4,805624 <__alt_data_end+0xff805624>
  8056d8:	1023883a 	mov	r17,r2
  8056dc:	003fa806 	br	805580 <__alt_data_end+0xff805580>
  8056e0:	b0ffd636 	bltu	r22,r3,80563c <__alt_data_end+0xff80563c>
  8056e4:	1011883a 	mov	r8,r2
  8056e8:	b0ff341e 	bne	r22,r3,8053bc <__alt_data_end+0xff8053bc>
  8056ec:	003f3406 	br	8053c0 <__alt_data_end+0xff8053c0>
  8056f0:	0005883a 	mov	r2,zero
  8056f4:	003fe006 	br	805678 <__alt_data_end+0xff805678>
  8056f8:	00800434 	movhi	r2,16
  8056fc:	89400234 	orhi	r5,r17,8
  805700:	10bfffc4 	addi	r2,r2,-1
  805704:	b807883a 	mov	r3,r23
  805708:	288a703a 	and	r5,r5,r2
  80570c:	4025883a 	mov	r18,r8
  805710:	003e8206 	br	80511c <__alt_data_end+0xff80511c>

00805714 <__eqdf2>:
  805714:	2804d53a 	srli	r2,r5,20
  805718:	3806d53a 	srli	r3,r7,20
  80571c:	02000434 	movhi	r8,16
  805720:	423fffc4 	addi	r8,r8,-1
  805724:	1081ffcc 	andi	r2,r2,2047
  805728:	0281ffc4 	movi	r10,2047
  80572c:	2a12703a 	and	r9,r5,r8
  805730:	18c1ffcc 	andi	r3,r3,2047
  805734:	3a10703a 	and	r8,r7,r8
  805738:	280ad7fa 	srli	r5,r5,31
  80573c:	380ed7fa 	srli	r7,r7,31
  805740:	12801026 	beq	r2,r10,805784 <__eqdf2+0x70>
  805744:	0281ffc4 	movi	r10,2047
  805748:	1a800a26 	beq	r3,r10,805774 <__eqdf2+0x60>
  80574c:	10c00226 	beq	r2,r3,805758 <__eqdf2+0x44>
  805750:	00800044 	movi	r2,1
  805754:	f800283a 	ret
  805758:	4a3ffd1e 	bne	r9,r8,805750 <__alt_data_end+0xff805750>
  80575c:	21bffc1e 	bne	r4,r6,805750 <__alt_data_end+0xff805750>
  805760:	29c00c26 	beq	r5,r7,805794 <__eqdf2+0x80>
  805764:	103ffa1e 	bne	r2,zero,805750 <__alt_data_end+0xff805750>
  805768:	2244b03a 	or	r2,r4,r9
  80576c:	1004c03a 	cmpne	r2,r2,zero
  805770:	f800283a 	ret
  805774:	3214b03a 	or	r10,r6,r8
  805778:	503ff426 	beq	r10,zero,80574c <__alt_data_end+0xff80574c>
  80577c:	00800044 	movi	r2,1
  805780:	f800283a 	ret
  805784:	2254b03a 	or	r10,r4,r9
  805788:	503fee26 	beq	r10,zero,805744 <__alt_data_end+0xff805744>
  80578c:	00800044 	movi	r2,1
  805790:	f800283a 	ret
  805794:	0005883a 	mov	r2,zero
  805798:	f800283a 	ret

0080579c <__gedf2>:
  80579c:	2804d53a 	srli	r2,r5,20
  8057a0:	3806d53a 	srli	r3,r7,20
  8057a4:	02000434 	movhi	r8,16
  8057a8:	423fffc4 	addi	r8,r8,-1
  8057ac:	1081ffcc 	andi	r2,r2,2047
  8057b0:	0241ffc4 	movi	r9,2047
  8057b4:	2a14703a 	and	r10,r5,r8
  8057b8:	18c1ffcc 	andi	r3,r3,2047
  8057bc:	3a10703a 	and	r8,r7,r8
  8057c0:	280ad7fa 	srli	r5,r5,31
  8057c4:	380ed7fa 	srli	r7,r7,31
  8057c8:	12401d26 	beq	r2,r9,805840 <__gedf2+0xa4>
  8057cc:	0241ffc4 	movi	r9,2047
  8057d0:	1a401226 	beq	r3,r9,80581c <__gedf2+0x80>
  8057d4:	1000081e 	bne	r2,zero,8057f8 <__gedf2+0x5c>
  8057d8:	2296b03a 	or	r11,r4,r10
  8057dc:	5813003a 	cmpeq	r9,r11,zero
  8057e0:	1800091e 	bne	r3,zero,805808 <__gedf2+0x6c>
  8057e4:	3218b03a 	or	r12,r6,r8
  8057e8:	6000071e 	bne	r12,zero,805808 <__gedf2+0x6c>
  8057ec:	0005883a 	mov	r2,zero
  8057f0:	5800101e 	bne	r11,zero,805834 <__gedf2+0x98>
  8057f4:	f800283a 	ret
  8057f8:	18000c1e 	bne	r3,zero,80582c <__gedf2+0x90>
  8057fc:	3212b03a 	or	r9,r6,r8
  805800:	48000c26 	beq	r9,zero,805834 <__gedf2+0x98>
  805804:	0013883a 	mov	r9,zero
  805808:	39c03fcc 	andi	r7,r7,255
  80580c:	48000826 	beq	r9,zero,805830 <__gedf2+0x94>
  805810:	38000926 	beq	r7,zero,805838 <__gedf2+0x9c>
  805814:	00800044 	movi	r2,1
  805818:	f800283a 	ret
  80581c:	3212b03a 	or	r9,r6,r8
  805820:	483fec26 	beq	r9,zero,8057d4 <__alt_data_end+0xff8057d4>
  805824:	00bfff84 	movi	r2,-2
  805828:	f800283a 	ret
  80582c:	39c03fcc 	andi	r7,r7,255
  805830:	29c00626 	beq	r5,r7,80584c <__gedf2+0xb0>
  805834:	283ff726 	beq	r5,zero,805814 <__alt_data_end+0xff805814>
  805838:	00bfffc4 	movi	r2,-1
  80583c:	f800283a 	ret
  805840:	2292b03a 	or	r9,r4,r10
  805844:	483fe126 	beq	r9,zero,8057cc <__alt_data_end+0xff8057cc>
  805848:	003ff606 	br	805824 <__alt_data_end+0xff805824>
  80584c:	18bff916 	blt	r3,r2,805834 <__alt_data_end+0xff805834>
  805850:	10c00316 	blt	r2,r3,805860 <__gedf2+0xc4>
  805854:	42bff736 	bltu	r8,r10,805834 <__alt_data_end+0xff805834>
  805858:	52000326 	beq	r10,r8,805868 <__gedf2+0xcc>
  80585c:	5200042e 	bgeu	r10,r8,805870 <__gedf2+0xd4>
  805860:	283fec1e 	bne	r5,zero,805814 <__alt_data_end+0xff805814>
  805864:	003ff406 	br	805838 <__alt_data_end+0xff805838>
  805868:	313ff236 	bltu	r6,r4,805834 <__alt_data_end+0xff805834>
  80586c:	21bffc36 	bltu	r4,r6,805860 <__alt_data_end+0xff805860>
  805870:	0005883a 	mov	r2,zero
  805874:	f800283a 	ret

00805878 <__muldf3>:
  805878:	defff304 	addi	sp,sp,-52
  80587c:	2804d53a 	srli	r2,r5,20
  805880:	dd800915 	stw	r22,36(sp)
  805884:	282cd7fa 	srli	r22,r5,31
  805888:	dc000315 	stw	r16,12(sp)
  80588c:	04000434 	movhi	r16,16
  805890:	dd400815 	stw	r21,32(sp)
  805894:	dc800515 	stw	r18,20(sp)
  805898:	843fffc4 	addi	r16,r16,-1
  80589c:	dfc00c15 	stw	ra,48(sp)
  8058a0:	df000b15 	stw	fp,44(sp)
  8058a4:	ddc00a15 	stw	r23,40(sp)
  8058a8:	dd000715 	stw	r20,28(sp)
  8058ac:	dcc00615 	stw	r19,24(sp)
  8058b0:	dc400415 	stw	r17,16(sp)
  8058b4:	1481ffcc 	andi	r18,r2,2047
  8058b8:	2c20703a 	and	r16,r5,r16
  8058bc:	b02b883a 	mov	r21,r22
  8058c0:	b2403fcc 	andi	r9,r22,255
  8058c4:	90006026 	beq	r18,zero,805a48 <__muldf3+0x1d0>
  8058c8:	0081ffc4 	movi	r2,2047
  8058cc:	2029883a 	mov	r20,r4
  8058d0:	90803626 	beq	r18,r2,8059ac <__muldf3+0x134>
  8058d4:	80800434 	orhi	r2,r16,16
  8058d8:	100490fa 	slli	r2,r2,3
  8058dc:	2020d77a 	srli	r16,r4,29
  8058e0:	202890fa 	slli	r20,r4,3
  8058e4:	94bf0044 	addi	r18,r18,-1023
  8058e8:	80a0b03a 	or	r16,r16,r2
  8058ec:	0027883a 	mov	r19,zero
  8058f0:	0039883a 	mov	fp,zero
  8058f4:	3804d53a 	srli	r2,r7,20
  8058f8:	382ed7fa 	srli	r23,r7,31
  8058fc:	04400434 	movhi	r17,16
  805900:	8c7fffc4 	addi	r17,r17,-1
  805904:	1081ffcc 	andi	r2,r2,2047
  805908:	3011883a 	mov	r8,r6
  80590c:	3c62703a 	and	r17,r7,r17
  805910:	ba803fcc 	andi	r10,r23,255
  805914:	10006d26 	beq	r2,zero,805acc <__muldf3+0x254>
  805918:	00c1ffc4 	movi	r3,2047
  80591c:	10c06526 	beq	r2,r3,805ab4 <__muldf3+0x23c>
  805920:	88c00434 	orhi	r3,r17,16
  805924:	180690fa 	slli	r3,r3,3
  805928:	3022d77a 	srli	r17,r6,29
  80592c:	301090fa 	slli	r8,r6,3
  805930:	10bf0044 	addi	r2,r2,-1023
  805934:	88e2b03a 	or	r17,r17,r3
  805938:	000b883a 	mov	r5,zero
  80593c:	9085883a 	add	r2,r18,r2
  805940:	2cc8b03a 	or	r4,r5,r19
  805944:	00c003c4 	movi	r3,15
  805948:	bdacf03a 	xor	r22,r23,r22
  80594c:	12c00044 	addi	r11,r2,1
  805950:	19009936 	bltu	r3,r4,805bb8 <__muldf3+0x340>
  805954:	200890ba 	slli	r4,r4,2
  805958:	00c02034 	movhi	r3,128
  80595c:	18d65b04 	addi	r3,r3,22892
  805960:	20c9883a 	add	r4,r4,r3
  805964:	20c00017 	ldw	r3,0(r4)
  805968:	1800683a 	jmp	r3
  80596c:	00805bb8 	rdprs	r2,zero,366
  805970:	008059cc 	andi	r2,zero,359
  805974:	008059cc 	andi	r2,zero,359
  805978:	008059c8 	cmpgei	r2,zero,359
  80597c:	00805b94 	movui	r2,366
  805980:	00805b94 	movui	r2,366
  805984:	00805b7c 	xorhi	r2,zero,365
  805988:	008059c8 	cmpgei	r2,zero,359
  80598c:	00805b94 	movui	r2,366
  805990:	00805b7c 	xorhi	r2,zero,365
  805994:	00805b94 	movui	r2,366
  805998:	008059c8 	cmpgei	r2,zero,359
  80599c:	00805ba4 	muli	r2,zero,366
  8059a0:	00805ba4 	muli	r2,zero,366
  8059a4:	00805ba4 	muli	r2,zero,366
  8059a8:	00805dc0 	call	805dc <__alt_mem_sdram-0x77fa24>
  8059ac:	2404b03a 	or	r2,r4,r16
  8059b0:	10006f1e 	bne	r2,zero,805b70 <__muldf3+0x2f8>
  8059b4:	04c00204 	movi	r19,8
  8059b8:	0021883a 	mov	r16,zero
  8059bc:	0029883a 	mov	r20,zero
  8059c0:	07000084 	movi	fp,2
  8059c4:	003fcb06 	br	8058f4 <__alt_data_end+0xff8058f4>
  8059c8:	502d883a 	mov	r22,r10
  8059cc:	00800084 	movi	r2,2
  8059d0:	28805726 	beq	r5,r2,805b30 <__muldf3+0x2b8>
  8059d4:	008000c4 	movi	r2,3
  8059d8:	28816626 	beq	r5,r2,805f74 <__muldf3+0x6fc>
  8059dc:	00800044 	movi	r2,1
  8059e0:	2881411e 	bne	r5,r2,805ee8 <__muldf3+0x670>
  8059e4:	b02b883a 	mov	r21,r22
  8059e8:	0005883a 	mov	r2,zero
  8059ec:	000b883a 	mov	r5,zero
  8059f0:	0029883a 	mov	r20,zero
  8059f4:	1004953a 	slli	r2,r2,20
  8059f8:	a8c03fcc 	andi	r3,r21,255
  8059fc:	04400434 	movhi	r17,16
  805a00:	8c7fffc4 	addi	r17,r17,-1
  805a04:	180697fa 	slli	r3,r3,31
  805a08:	2c4a703a 	and	r5,r5,r17
  805a0c:	288ab03a 	or	r5,r5,r2
  805a10:	28c6b03a 	or	r3,r5,r3
  805a14:	a005883a 	mov	r2,r20
  805a18:	dfc00c17 	ldw	ra,48(sp)
  805a1c:	df000b17 	ldw	fp,44(sp)
  805a20:	ddc00a17 	ldw	r23,40(sp)
  805a24:	dd800917 	ldw	r22,36(sp)
  805a28:	dd400817 	ldw	r21,32(sp)
  805a2c:	dd000717 	ldw	r20,28(sp)
  805a30:	dcc00617 	ldw	r19,24(sp)
  805a34:	dc800517 	ldw	r18,20(sp)
  805a38:	dc400417 	ldw	r17,16(sp)
  805a3c:	dc000317 	ldw	r16,12(sp)
  805a40:	dec00d04 	addi	sp,sp,52
  805a44:	f800283a 	ret
  805a48:	2404b03a 	or	r2,r4,r16
  805a4c:	2027883a 	mov	r19,r4
  805a50:	10004226 	beq	r2,zero,805b5c <__muldf3+0x2e4>
  805a54:	8000fc26 	beq	r16,zero,805e48 <__muldf3+0x5d0>
  805a58:	8009883a 	mov	r4,r16
  805a5c:	d9800215 	stw	r6,8(sp)
  805a60:	d9c00015 	stw	r7,0(sp)
  805a64:	da400115 	stw	r9,4(sp)
  805a68:	0806d480 	call	806d48 <__clzsi2>
  805a6c:	d9800217 	ldw	r6,8(sp)
  805a70:	d9c00017 	ldw	r7,0(sp)
  805a74:	da400117 	ldw	r9,4(sp)
  805a78:	113ffd44 	addi	r4,r2,-11
  805a7c:	00c00704 	movi	r3,28
  805a80:	1900ed16 	blt	r3,r4,805e38 <__muldf3+0x5c0>
  805a84:	00c00744 	movi	r3,29
  805a88:	147ffe04 	addi	r17,r2,-8
  805a8c:	1907c83a 	sub	r3,r3,r4
  805a90:	8460983a 	sll	r16,r16,r17
  805a94:	98c6d83a 	srl	r3,r19,r3
  805a98:	9c68983a 	sll	r20,r19,r17
  805a9c:	1c20b03a 	or	r16,r3,r16
  805aa0:	1080fcc4 	addi	r2,r2,1011
  805aa4:	00a5c83a 	sub	r18,zero,r2
  805aa8:	0027883a 	mov	r19,zero
  805aac:	0039883a 	mov	fp,zero
  805ab0:	003f9006 	br	8058f4 <__alt_data_end+0xff8058f4>
  805ab4:	3446b03a 	or	r3,r6,r17
  805ab8:	1800261e 	bne	r3,zero,805b54 <__muldf3+0x2dc>
  805abc:	0023883a 	mov	r17,zero
  805ac0:	0011883a 	mov	r8,zero
  805ac4:	01400084 	movi	r5,2
  805ac8:	003f9c06 	br	80593c <__alt_data_end+0xff80593c>
  805acc:	3446b03a 	or	r3,r6,r17
  805ad0:	18001c26 	beq	r3,zero,805b44 <__muldf3+0x2cc>
  805ad4:	8800ce26 	beq	r17,zero,805e10 <__muldf3+0x598>
  805ad8:	8809883a 	mov	r4,r17
  805adc:	d9800215 	stw	r6,8(sp)
  805ae0:	da400115 	stw	r9,4(sp)
  805ae4:	da800015 	stw	r10,0(sp)
  805ae8:	0806d480 	call	806d48 <__clzsi2>
  805aec:	d9800217 	ldw	r6,8(sp)
  805af0:	da400117 	ldw	r9,4(sp)
  805af4:	da800017 	ldw	r10,0(sp)
  805af8:	113ffd44 	addi	r4,r2,-11
  805afc:	00c00704 	movi	r3,28
  805b00:	1900bf16 	blt	r3,r4,805e00 <__muldf3+0x588>
  805b04:	00c00744 	movi	r3,29
  805b08:	123ffe04 	addi	r8,r2,-8
  805b0c:	1907c83a 	sub	r3,r3,r4
  805b10:	8a22983a 	sll	r17,r17,r8
  805b14:	30c6d83a 	srl	r3,r6,r3
  805b18:	3210983a 	sll	r8,r6,r8
  805b1c:	1c62b03a 	or	r17,r3,r17
  805b20:	1080fcc4 	addi	r2,r2,1011
  805b24:	0085c83a 	sub	r2,zero,r2
  805b28:	000b883a 	mov	r5,zero
  805b2c:	003f8306 	br	80593c <__alt_data_end+0xff80593c>
  805b30:	b02b883a 	mov	r21,r22
  805b34:	0081ffc4 	movi	r2,2047
  805b38:	000b883a 	mov	r5,zero
  805b3c:	0029883a 	mov	r20,zero
  805b40:	003fac06 	br	8059f4 <__alt_data_end+0xff8059f4>
  805b44:	0023883a 	mov	r17,zero
  805b48:	0011883a 	mov	r8,zero
  805b4c:	01400044 	movi	r5,1
  805b50:	003f7a06 	br	80593c <__alt_data_end+0xff80593c>
  805b54:	014000c4 	movi	r5,3
  805b58:	003f7806 	br	80593c <__alt_data_end+0xff80593c>
  805b5c:	04c00104 	movi	r19,4
  805b60:	0021883a 	mov	r16,zero
  805b64:	0029883a 	mov	r20,zero
  805b68:	07000044 	movi	fp,1
  805b6c:	003f6106 	br	8058f4 <__alt_data_end+0xff8058f4>
  805b70:	04c00304 	movi	r19,12
  805b74:	070000c4 	movi	fp,3
  805b78:	003f5e06 	br	8058f4 <__alt_data_end+0xff8058f4>
  805b7c:	01400434 	movhi	r5,16
  805b80:	002b883a 	mov	r21,zero
  805b84:	297fffc4 	addi	r5,r5,-1
  805b88:	053fffc4 	movi	r20,-1
  805b8c:	0081ffc4 	movi	r2,2047
  805b90:	003f9806 	br	8059f4 <__alt_data_end+0xff8059f4>
  805b94:	8023883a 	mov	r17,r16
  805b98:	a011883a 	mov	r8,r20
  805b9c:	e00b883a 	mov	r5,fp
  805ba0:	003f8a06 	br	8059cc <__alt_data_end+0xff8059cc>
  805ba4:	8023883a 	mov	r17,r16
  805ba8:	a011883a 	mov	r8,r20
  805bac:	482d883a 	mov	r22,r9
  805bb0:	e00b883a 	mov	r5,fp
  805bb4:	003f8506 	br	8059cc <__alt_data_end+0xff8059cc>
  805bb8:	a00ad43a 	srli	r5,r20,16
  805bbc:	401ad43a 	srli	r13,r8,16
  805bc0:	a53fffcc 	andi	r20,r20,65535
  805bc4:	423fffcc 	andi	r8,r8,65535
  805bc8:	4519383a 	mul	r12,r8,r20
  805bcc:	4147383a 	mul	r3,r8,r5
  805bd0:	6d09383a 	mul	r4,r13,r20
  805bd4:	600cd43a 	srli	r6,r12,16
  805bd8:	2b5d383a 	mul	r14,r5,r13
  805bdc:	20c9883a 	add	r4,r4,r3
  805be0:	310d883a 	add	r6,r6,r4
  805be4:	30c0022e 	bgeu	r6,r3,805bf0 <__muldf3+0x378>
  805be8:	00c00074 	movhi	r3,1
  805bec:	70dd883a 	add	r14,r14,r3
  805bf0:	8826d43a 	srli	r19,r17,16
  805bf4:	8bffffcc 	andi	r15,r17,65535
  805bf8:	7d23383a 	mul	r17,r15,r20
  805bfc:	7949383a 	mul	r4,r15,r5
  805c00:	9d29383a 	mul	r20,r19,r20
  805c04:	8814d43a 	srli	r10,r17,16
  805c08:	3012943a 	slli	r9,r6,16
  805c0c:	a129883a 	add	r20,r20,r4
  805c10:	633fffcc 	andi	r12,r12,65535
  805c14:	5515883a 	add	r10,r10,r20
  805c18:	3006d43a 	srli	r3,r6,16
  805c1c:	4b13883a 	add	r9,r9,r12
  805c20:	2ccb383a 	mul	r5,r5,r19
  805c24:	5100022e 	bgeu	r10,r4,805c30 <__muldf3+0x3b8>
  805c28:	01000074 	movhi	r4,1
  805c2c:	290b883a 	add	r5,r5,r4
  805c30:	802ad43a 	srli	r21,r16,16
  805c34:	843fffcc 	andi	r16,r16,65535
  805c38:	440d383a 	mul	r6,r8,r16
  805c3c:	4565383a 	mul	r18,r8,r21
  805c40:	8349383a 	mul	r4,r16,r13
  805c44:	500e943a 	slli	r7,r10,16
  805c48:	3010d43a 	srli	r8,r6,16
  805c4c:	5028d43a 	srli	r20,r10,16
  805c50:	2489883a 	add	r4,r4,r18
  805c54:	8abfffcc 	andi	r10,r17,65535
  805c58:	3a95883a 	add	r10,r7,r10
  805c5c:	4119883a 	add	r12,r8,r4
  805c60:	a169883a 	add	r20,r20,r5
  805c64:	1a87883a 	add	r3,r3,r10
  805c68:	6d5b383a 	mul	r13,r13,r21
  805c6c:	6480022e 	bgeu	r12,r18,805c78 <__muldf3+0x400>
  805c70:	01000074 	movhi	r4,1
  805c74:	691b883a 	add	r13,r13,r4
  805c78:	7c25383a 	mul	r18,r15,r16
  805c7c:	7d4b383a 	mul	r5,r15,r21
  805c80:	84cf383a 	mul	r7,r16,r19
  805c84:	901ed43a 	srli	r15,r18,16
  805c88:	6008d43a 	srli	r4,r12,16
  805c8c:	6010943a 	slli	r8,r12,16
  805c90:	394f883a 	add	r7,r7,r5
  805c94:	333fffcc 	andi	r12,r6,65535
  805c98:	79df883a 	add	r15,r15,r7
  805c9c:	235b883a 	add	r13,r4,r13
  805ca0:	9d63383a 	mul	r17,r19,r21
  805ca4:	4309883a 	add	r4,r8,r12
  805ca8:	7940022e 	bgeu	r15,r5,805cb4 <__muldf3+0x43c>
  805cac:	01400074 	movhi	r5,1
  805cb0:	8963883a 	add	r17,r17,r5
  805cb4:	780a943a 	slli	r5,r15,16
  805cb8:	91bfffcc 	andi	r6,r18,65535
  805cbc:	70c7883a 	add	r3,r14,r3
  805cc0:	298d883a 	add	r6,r5,r6
  805cc4:	1a8f803a 	cmpltu	r7,r3,r10
  805cc8:	350b883a 	add	r5,r6,r20
  805ccc:	20c7883a 	add	r3,r4,r3
  805cd0:	3955883a 	add	r10,r7,r5
  805cd4:	1909803a 	cmpltu	r4,r3,r4
  805cd8:	6a91883a 	add	r8,r13,r10
  805cdc:	780cd43a 	srli	r6,r15,16
  805ce0:	2219883a 	add	r12,r4,r8
  805ce4:	2d0b803a 	cmpltu	r5,r5,r20
  805ce8:	51cf803a 	cmpltu	r7,r10,r7
  805cec:	29ceb03a 	or	r7,r5,r7
  805cf0:	4351803a 	cmpltu	r8,r8,r13
  805cf4:	610b803a 	cmpltu	r5,r12,r4
  805cf8:	4148b03a 	or	r4,r8,r5
  805cfc:	398f883a 	add	r7,r7,r6
  805d00:	3909883a 	add	r4,r7,r4
  805d04:	1810927a 	slli	r8,r3,9
  805d08:	2449883a 	add	r4,r4,r17
  805d0c:	2008927a 	slli	r4,r4,9
  805d10:	6022d5fa 	srli	r17,r12,23
  805d14:	1806d5fa 	srli	r3,r3,23
  805d18:	4252b03a 	or	r9,r8,r9
  805d1c:	600a927a 	slli	r5,r12,9
  805d20:	4810c03a 	cmpne	r8,r9,zero
  805d24:	2462b03a 	or	r17,r4,r17
  805d28:	40c6b03a 	or	r3,r8,r3
  805d2c:	8900402c 	andhi	r4,r17,256
  805d30:	1950b03a 	or	r8,r3,r5
  805d34:	20000726 	beq	r4,zero,805d54 <__muldf3+0x4dc>
  805d38:	4006d07a 	srli	r3,r8,1
  805d3c:	880497fa 	slli	r2,r17,31
  805d40:	4200004c 	andi	r8,r8,1
  805d44:	8822d07a 	srli	r17,r17,1
  805d48:	1a10b03a 	or	r8,r3,r8
  805d4c:	1210b03a 	or	r8,r2,r8
  805d50:	5805883a 	mov	r2,r11
  805d54:	1140ffc4 	addi	r5,r2,1023
  805d58:	0140440e 	bge	zero,r5,805e6c <__muldf3+0x5f4>
  805d5c:	40c001cc 	andi	r3,r8,7
  805d60:	18000726 	beq	r3,zero,805d80 <__muldf3+0x508>
  805d64:	40c003cc 	andi	r3,r8,15
  805d68:	01000104 	movi	r4,4
  805d6c:	19000426 	beq	r3,r4,805d80 <__muldf3+0x508>
  805d70:	4107883a 	add	r3,r8,r4
  805d74:	1a11803a 	cmpltu	r8,r3,r8
  805d78:	8a23883a 	add	r17,r17,r8
  805d7c:	1811883a 	mov	r8,r3
  805d80:	88c0402c 	andhi	r3,r17,256
  805d84:	18000426 	beq	r3,zero,805d98 <__muldf3+0x520>
  805d88:	11410004 	addi	r5,r2,1024
  805d8c:	00bfc034 	movhi	r2,65280
  805d90:	10bfffc4 	addi	r2,r2,-1
  805d94:	88a2703a 	and	r17,r17,r2
  805d98:	0081ff84 	movi	r2,2046
  805d9c:	117f6416 	blt	r2,r5,805b30 <__alt_data_end+0xff805b30>
  805da0:	8828977a 	slli	r20,r17,29
  805da4:	4010d0fa 	srli	r8,r8,3
  805da8:	8822927a 	slli	r17,r17,9
  805dac:	2881ffcc 	andi	r2,r5,2047
  805db0:	a228b03a 	or	r20,r20,r8
  805db4:	880ad33a 	srli	r5,r17,12
  805db8:	b02b883a 	mov	r21,r22
  805dbc:	003f0d06 	br	8059f4 <__alt_data_end+0xff8059f4>
  805dc0:	8080022c 	andhi	r2,r16,8
  805dc4:	10000926 	beq	r2,zero,805dec <__muldf3+0x574>
  805dc8:	8880022c 	andhi	r2,r17,8
  805dcc:	1000071e 	bne	r2,zero,805dec <__muldf3+0x574>
  805dd0:	00800434 	movhi	r2,16
  805dd4:	89400234 	orhi	r5,r17,8
  805dd8:	10bfffc4 	addi	r2,r2,-1
  805ddc:	b82b883a 	mov	r21,r23
  805de0:	288a703a 	and	r5,r5,r2
  805de4:	4029883a 	mov	r20,r8
  805de8:	003f6806 	br	805b8c <__alt_data_end+0xff805b8c>
  805dec:	00800434 	movhi	r2,16
  805df0:	81400234 	orhi	r5,r16,8
  805df4:	10bfffc4 	addi	r2,r2,-1
  805df8:	288a703a 	and	r5,r5,r2
  805dfc:	003f6306 	br	805b8c <__alt_data_end+0xff805b8c>
  805e00:	147ff604 	addi	r17,r2,-40
  805e04:	3462983a 	sll	r17,r6,r17
  805e08:	0011883a 	mov	r8,zero
  805e0c:	003f4406 	br	805b20 <__alt_data_end+0xff805b20>
  805e10:	3009883a 	mov	r4,r6
  805e14:	d9800215 	stw	r6,8(sp)
  805e18:	da400115 	stw	r9,4(sp)
  805e1c:	da800015 	stw	r10,0(sp)
  805e20:	0806d480 	call	806d48 <__clzsi2>
  805e24:	10800804 	addi	r2,r2,32
  805e28:	da800017 	ldw	r10,0(sp)
  805e2c:	da400117 	ldw	r9,4(sp)
  805e30:	d9800217 	ldw	r6,8(sp)
  805e34:	003f3006 	br	805af8 <__alt_data_end+0xff805af8>
  805e38:	143ff604 	addi	r16,r2,-40
  805e3c:	9c20983a 	sll	r16,r19,r16
  805e40:	0029883a 	mov	r20,zero
  805e44:	003f1606 	br	805aa0 <__alt_data_end+0xff805aa0>
  805e48:	d9800215 	stw	r6,8(sp)
  805e4c:	d9c00015 	stw	r7,0(sp)
  805e50:	da400115 	stw	r9,4(sp)
  805e54:	0806d480 	call	806d48 <__clzsi2>
  805e58:	10800804 	addi	r2,r2,32
  805e5c:	da400117 	ldw	r9,4(sp)
  805e60:	d9c00017 	ldw	r7,0(sp)
  805e64:	d9800217 	ldw	r6,8(sp)
  805e68:	003f0306 	br	805a78 <__alt_data_end+0xff805a78>
  805e6c:	00c00044 	movi	r3,1
  805e70:	1947c83a 	sub	r3,r3,r5
  805e74:	00800e04 	movi	r2,56
  805e78:	10feda16 	blt	r2,r3,8059e4 <__alt_data_end+0xff8059e4>
  805e7c:	008007c4 	movi	r2,31
  805e80:	10c01b16 	blt	r2,r3,805ef0 <__muldf3+0x678>
  805e84:	00800804 	movi	r2,32
  805e88:	10c5c83a 	sub	r2,r2,r3
  805e8c:	888a983a 	sll	r5,r17,r2
  805e90:	40c8d83a 	srl	r4,r8,r3
  805e94:	4084983a 	sll	r2,r8,r2
  805e98:	88e2d83a 	srl	r17,r17,r3
  805e9c:	2906b03a 	or	r3,r5,r4
  805ea0:	1004c03a 	cmpne	r2,r2,zero
  805ea4:	1886b03a 	or	r3,r3,r2
  805ea8:	188001cc 	andi	r2,r3,7
  805eac:	10000726 	beq	r2,zero,805ecc <__muldf3+0x654>
  805eb0:	188003cc 	andi	r2,r3,15
  805eb4:	01000104 	movi	r4,4
  805eb8:	11000426 	beq	r2,r4,805ecc <__muldf3+0x654>
  805ebc:	1805883a 	mov	r2,r3
  805ec0:	10c00104 	addi	r3,r2,4
  805ec4:	1885803a 	cmpltu	r2,r3,r2
  805ec8:	88a3883a 	add	r17,r17,r2
  805ecc:	8880202c 	andhi	r2,r17,128
  805ed0:	10001c26 	beq	r2,zero,805f44 <__muldf3+0x6cc>
  805ed4:	b02b883a 	mov	r21,r22
  805ed8:	00800044 	movi	r2,1
  805edc:	000b883a 	mov	r5,zero
  805ee0:	0029883a 	mov	r20,zero
  805ee4:	003ec306 	br	8059f4 <__alt_data_end+0xff8059f4>
  805ee8:	5805883a 	mov	r2,r11
  805eec:	003f9906 	br	805d54 <__alt_data_end+0xff805d54>
  805ef0:	00bff844 	movi	r2,-31
  805ef4:	1145c83a 	sub	r2,r2,r5
  805ef8:	8888d83a 	srl	r4,r17,r2
  805efc:	00800804 	movi	r2,32
  805f00:	18801a26 	beq	r3,r2,805f6c <__muldf3+0x6f4>
  805f04:	00801004 	movi	r2,64
  805f08:	10c5c83a 	sub	r2,r2,r3
  805f0c:	8884983a 	sll	r2,r17,r2
  805f10:	1204b03a 	or	r2,r2,r8
  805f14:	1004c03a 	cmpne	r2,r2,zero
  805f18:	2084b03a 	or	r2,r4,r2
  805f1c:	144001cc 	andi	r17,r2,7
  805f20:	88000d1e 	bne	r17,zero,805f58 <__muldf3+0x6e0>
  805f24:	000b883a 	mov	r5,zero
  805f28:	1028d0fa 	srli	r20,r2,3
  805f2c:	b02b883a 	mov	r21,r22
  805f30:	0005883a 	mov	r2,zero
  805f34:	a468b03a 	or	r20,r20,r17
  805f38:	003eae06 	br	8059f4 <__alt_data_end+0xff8059f4>
  805f3c:	1007883a 	mov	r3,r2
  805f40:	0023883a 	mov	r17,zero
  805f44:	880a927a 	slli	r5,r17,9
  805f48:	1805883a 	mov	r2,r3
  805f4c:	8822977a 	slli	r17,r17,29
  805f50:	280ad33a 	srli	r5,r5,12
  805f54:	003ff406 	br	805f28 <__alt_data_end+0xff805f28>
  805f58:	10c003cc 	andi	r3,r2,15
  805f5c:	01000104 	movi	r4,4
  805f60:	193ff626 	beq	r3,r4,805f3c <__alt_data_end+0xff805f3c>
  805f64:	0023883a 	mov	r17,zero
  805f68:	003fd506 	br	805ec0 <__alt_data_end+0xff805ec0>
  805f6c:	0005883a 	mov	r2,zero
  805f70:	003fe706 	br	805f10 <__alt_data_end+0xff805f10>
  805f74:	00800434 	movhi	r2,16
  805f78:	89400234 	orhi	r5,r17,8
  805f7c:	10bfffc4 	addi	r2,r2,-1
  805f80:	b02b883a 	mov	r21,r22
  805f84:	288a703a 	and	r5,r5,r2
  805f88:	4029883a 	mov	r20,r8
  805f8c:	003eff06 	br	805b8c <__alt_data_end+0xff805b8c>

00805f90 <__subdf3>:
  805f90:	02000434 	movhi	r8,16
  805f94:	423fffc4 	addi	r8,r8,-1
  805f98:	defffb04 	addi	sp,sp,-20
  805f9c:	2a14703a 	and	r10,r5,r8
  805fa0:	3812d53a 	srli	r9,r7,20
  805fa4:	3a10703a 	and	r8,r7,r8
  805fa8:	2006d77a 	srli	r3,r4,29
  805fac:	3004d77a 	srli	r2,r6,29
  805fb0:	dc000015 	stw	r16,0(sp)
  805fb4:	501490fa 	slli	r10,r10,3
  805fb8:	2820d53a 	srli	r16,r5,20
  805fbc:	401090fa 	slli	r8,r8,3
  805fc0:	dc800215 	stw	r18,8(sp)
  805fc4:	dc400115 	stw	r17,4(sp)
  805fc8:	dfc00415 	stw	ra,16(sp)
  805fcc:	202290fa 	slli	r17,r4,3
  805fd0:	dcc00315 	stw	r19,12(sp)
  805fd4:	4a41ffcc 	andi	r9,r9,2047
  805fd8:	0101ffc4 	movi	r4,2047
  805fdc:	2824d7fa 	srli	r18,r5,31
  805fe0:	8401ffcc 	andi	r16,r16,2047
  805fe4:	50c6b03a 	or	r3,r10,r3
  805fe8:	380ed7fa 	srli	r7,r7,31
  805fec:	408ab03a 	or	r5,r8,r2
  805ff0:	300c90fa 	slli	r6,r6,3
  805ff4:	49009626 	beq	r9,r4,806250 <__subdf3+0x2c0>
  805ff8:	39c0005c 	xori	r7,r7,1
  805ffc:	8245c83a 	sub	r2,r16,r9
  806000:	3c807426 	beq	r7,r18,8061d4 <__subdf3+0x244>
  806004:	0080af0e 	bge	zero,r2,8062c4 <__subdf3+0x334>
  806008:	48002a1e 	bne	r9,zero,8060b4 <__subdf3+0x124>
  80600c:	2988b03a 	or	r4,r5,r6
  806010:	20009a1e 	bne	r4,zero,80627c <__subdf3+0x2ec>
  806014:	888001cc 	andi	r2,r17,7
  806018:	10000726 	beq	r2,zero,806038 <__subdf3+0xa8>
  80601c:	888003cc 	andi	r2,r17,15
  806020:	01000104 	movi	r4,4
  806024:	11000426 	beq	r2,r4,806038 <__subdf3+0xa8>
  806028:	890b883a 	add	r5,r17,r4
  80602c:	2c63803a 	cmpltu	r17,r5,r17
  806030:	1c47883a 	add	r3,r3,r17
  806034:	2823883a 	mov	r17,r5
  806038:	1880202c 	andhi	r2,r3,128
  80603c:	10005926 	beq	r2,zero,8061a4 <__subdf3+0x214>
  806040:	84000044 	addi	r16,r16,1
  806044:	0081ffc4 	movi	r2,2047
  806048:	8080be26 	beq	r16,r2,806344 <__subdf3+0x3b4>
  80604c:	017fe034 	movhi	r5,65408
  806050:	297fffc4 	addi	r5,r5,-1
  806054:	1946703a 	and	r3,r3,r5
  806058:	1804977a 	slli	r2,r3,29
  80605c:	1806927a 	slli	r3,r3,9
  806060:	8822d0fa 	srli	r17,r17,3
  806064:	8401ffcc 	andi	r16,r16,2047
  806068:	180ad33a 	srli	r5,r3,12
  80606c:	9100004c 	andi	r4,r18,1
  806070:	1444b03a 	or	r2,r2,r17
  806074:	80c1ffcc 	andi	r3,r16,2047
  806078:	1820953a 	slli	r16,r3,20
  80607c:	20c03fcc 	andi	r3,r4,255
  806080:	180897fa 	slli	r4,r3,31
  806084:	00c00434 	movhi	r3,16
  806088:	18ffffc4 	addi	r3,r3,-1
  80608c:	28c6703a 	and	r3,r5,r3
  806090:	1c06b03a 	or	r3,r3,r16
  806094:	1906b03a 	or	r3,r3,r4
  806098:	dfc00417 	ldw	ra,16(sp)
  80609c:	dcc00317 	ldw	r19,12(sp)
  8060a0:	dc800217 	ldw	r18,8(sp)
  8060a4:	dc400117 	ldw	r17,4(sp)
  8060a8:	dc000017 	ldw	r16,0(sp)
  8060ac:	dec00504 	addi	sp,sp,20
  8060b0:	f800283a 	ret
  8060b4:	0101ffc4 	movi	r4,2047
  8060b8:	813fd626 	beq	r16,r4,806014 <__alt_data_end+0xff806014>
  8060bc:	29402034 	orhi	r5,r5,128
  8060c0:	01000e04 	movi	r4,56
  8060c4:	2080a316 	blt	r4,r2,806354 <__subdf3+0x3c4>
  8060c8:	010007c4 	movi	r4,31
  8060cc:	2080c616 	blt	r4,r2,8063e8 <__subdf3+0x458>
  8060d0:	01000804 	movi	r4,32
  8060d4:	2089c83a 	sub	r4,r4,r2
  8060d8:	2910983a 	sll	r8,r5,r4
  8060dc:	308ed83a 	srl	r7,r6,r2
  8060e0:	3108983a 	sll	r4,r6,r4
  8060e4:	2884d83a 	srl	r2,r5,r2
  8060e8:	41ccb03a 	or	r6,r8,r7
  8060ec:	2008c03a 	cmpne	r4,r4,zero
  8060f0:	310cb03a 	or	r6,r6,r4
  8060f4:	898dc83a 	sub	r6,r17,r6
  8060f8:	89a3803a 	cmpltu	r17,r17,r6
  8060fc:	1887c83a 	sub	r3,r3,r2
  806100:	1c47c83a 	sub	r3,r3,r17
  806104:	3023883a 	mov	r17,r6
  806108:	1880202c 	andhi	r2,r3,128
  80610c:	10002326 	beq	r2,zero,80619c <__subdf3+0x20c>
  806110:	04c02034 	movhi	r19,128
  806114:	9cffffc4 	addi	r19,r19,-1
  806118:	1ce6703a 	and	r19,r3,r19
  80611c:	98007a26 	beq	r19,zero,806308 <__subdf3+0x378>
  806120:	9809883a 	mov	r4,r19
  806124:	0806d480 	call	806d48 <__clzsi2>
  806128:	113ffe04 	addi	r4,r2,-8
  80612c:	00c007c4 	movi	r3,31
  806130:	19007b16 	blt	r3,r4,806320 <__subdf3+0x390>
  806134:	00800804 	movi	r2,32
  806138:	1105c83a 	sub	r2,r2,r4
  80613c:	8884d83a 	srl	r2,r17,r2
  806140:	9906983a 	sll	r3,r19,r4
  806144:	8922983a 	sll	r17,r17,r4
  806148:	10c4b03a 	or	r2,r2,r3
  80614c:	24007816 	blt	r4,r16,806330 <__subdf3+0x3a0>
  806150:	2421c83a 	sub	r16,r4,r16
  806154:	80c00044 	addi	r3,r16,1
  806158:	010007c4 	movi	r4,31
  80615c:	20c09516 	blt	r4,r3,8063b4 <__subdf3+0x424>
  806160:	01400804 	movi	r5,32
  806164:	28cbc83a 	sub	r5,r5,r3
  806168:	88c8d83a 	srl	r4,r17,r3
  80616c:	8962983a 	sll	r17,r17,r5
  806170:	114a983a 	sll	r5,r2,r5
  806174:	10c6d83a 	srl	r3,r2,r3
  806178:	8804c03a 	cmpne	r2,r17,zero
  80617c:	290ab03a 	or	r5,r5,r4
  806180:	28a2b03a 	or	r17,r5,r2
  806184:	0021883a 	mov	r16,zero
  806188:	003fa206 	br	806014 <__alt_data_end+0xff806014>
  80618c:	2090b03a 	or	r8,r4,r2
  806190:	40018e26 	beq	r8,zero,8067cc <__subdf3+0x83c>
  806194:	1007883a 	mov	r3,r2
  806198:	2023883a 	mov	r17,r4
  80619c:	888001cc 	andi	r2,r17,7
  8061a0:	103f9e1e 	bne	r2,zero,80601c <__alt_data_end+0xff80601c>
  8061a4:	1804977a 	slli	r2,r3,29
  8061a8:	8822d0fa 	srli	r17,r17,3
  8061ac:	1810d0fa 	srli	r8,r3,3
  8061b0:	9100004c 	andi	r4,r18,1
  8061b4:	1444b03a 	or	r2,r2,r17
  8061b8:	00c1ffc4 	movi	r3,2047
  8061bc:	80c02826 	beq	r16,r3,806260 <__subdf3+0x2d0>
  8061c0:	01400434 	movhi	r5,16
  8061c4:	297fffc4 	addi	r5,r5,-1
  8061c8:	80e0703a 	and	r16,r16,r3
  8061cc:	414a703a 	and	r5,r8,r5
  8061d0:	003fa806 	br	806074 <__alt_data_end+0xff806074>
  8061d4:	0080630e 	bge	zero,r2,806364 <__subdf3+0x3d4>
  8061d8:	48003026 	beq	r9,zero,80629c <__subdf3+0x30c>
  8061dc:	0101ffc4 	movi	r4,2047
  8061e0:	813f8c26 	beq	r16,r4,806014 <__alt_data_end+0xff806014>
  8061e4:	29402034 	orhi	r5,r5,128
  8061e8:	01000e04 	movi	r4,56
  8061ec:	2080a90e 	bge	r4,r2,806494 <__subdf3+0x504>
  8061f0:	298cb03a 	or	r6,r5,r6
  8061f4:	3012c03a 	cmpne	r9,r6,zero
  8061f8:	0005883a 	mov	r2,zero
  8061fc:	4c53883a 	add	r9,r9,r17
  806200:	4c63803a 	cmpltu	r17,r9,r17
  806204:	10c7883a 	add	r3,r2,r3
  806208:	88c7883a 	add	r3,r17,r3
  80620c:	4823883a 	mov	r17,r9
  806210:	1880202c 	andhi	r2,r3,128
  806214:	1000d026 	beq	r2,zero,806558 <__subdf3+0x5c8>
  806218:	84000044 	addi	r16,r16,1
  80621c:	0081ffc4 	movi	r2,2047
  806220:	8080fe26 	beq	r16,r2,80661c <__subdf3+0x68c>
  806224:	00bfe034 	movhi	r2,65408
  806228:	10bfffc4 	addi	r2,r2,-1
  80622c:	1886703a 	and	r3,r3,r2
  806230:	880ad07a 	srli	r5,r17,1
  806234:	180497fa 	slli	r2,r3,31
  806238:	8900004c 	andi	r4,r17,1
  80623c:	2922b03a 	or	r17,r5,r4
  806240:	1806d07a 	srli	r3,r3,1
  806244:	1462b03a 	or	r17,r2,r17
  806248:	3825883a 	mov	r18,r7
  80624c:	003f7106 	br	806014 <__alt_data_end+0xff806014>
  806250:	2984b03a 	or	r2,r5,r6
  806254:	103f6826 	beq	r2,zero,805ff8 <__alt_data_end+0xff805ff8>
  806258:	39c03fcc 	andi	r7,r7,255
  80625c:	003f6706 	br	805ffc <__alt_data_end+0xff805ffc>
  806260:	4086b03a 	or	r3,r8,r2
  806264:	18015226 	beq	r3,zero,8067b0 <__subdf3+0x820>
  806268:	00c00434 	movhi	r3,16
  80626c:	41400234 	orhi	r5,r8,8
  806270:	18ffffc4 	addi	r3,r3,-1
  806274:	28ca703a 	and	r5,r5,r3
  806278:	003f7e06 	br	806074 <__alt_data_end+0xff806074>
  80627c:	10bfffc4 	addi	r2,r2,-1
  806280:	1000491e 	bne	r2,zero,8063a8 <__subdf3+0x418>
  806284:	898fc83a 	sub	r7,r17,r6
  806288:	89e3803a 	cmpltu	r17,r17,r7
  80628c:	1947c83a 	sub	r3,r3,r5
  806290:	1c47c83a 	sub	r3,r3,r17
  806294:	3823883a 	mov	r17,r7
  806298:	003f9b06 	br	806108 <__alt_data_end+0xff806108>
  80629c:	2988b03a 	or	r4,r5,r6
  8062a0:	203f5c26 	beq	r4,zero,806014 <__alt_data_end+0xff806014>
  8062a4:	10bfffc4 	addi	r2,r2,-1
  8062a8:	1000931e 	bne	r2,zero,8064f8 <__subdf3+0x568>
  8062ac:	898d883a 	add	r6,r17,r6
  8062b0:	3463803a 	cmpltu	r17,r6,r17
  8062b4:	1947883a 	add	r3,r3,r5
  8062b8:	88c7883a 	add	r3,r17,r3
  8062bc:	3023883a 	mov	r17,r6
  8062c0:	003fd306 	br	806210 <__alt_data_end+0xff806210>
  8062c4:	1000541e 	bne	r2,zero,806418 <__subdf3+0x488>
  8062c8:	80800044 	addi	r2,r16,1
  8062cc:	1081ffcc 	andi	r2,r2,2047
  8062d0:	01000044 	movi	r4,1
  8062d4:	2080a20e 	bge	r4,r2,806560 <__subdf3+0x5d0>
  8062d8:	8989c83a 	sub	r4,r17,r6
  8062dc:	8905803a 	cmpltu	r2,r17,r4
  8062e0:	1967c83a 	sub	r19,r3,r5
  8062e4:	98a7c83a 	sub	r19,r19,r2
  8062e8:	9880202c 	andhi	r2,r19,128
  8062ec:	10006326 	beq	r2,zero,80647c <__subdf3+0x4ec>
  8062f0:	3463c83a 	sub	r17,r6,r17
  8062f4:	28c7c83a 	sub	r3,r5,r3
  8062f8:	344d803a 	cmpltu	r6,r6,r17
  8062fc:	19a7c83a 	sub	r19,r3,r6
  806300:	3825883a 	mov	r18,r7
  806304:	983f861e 	bne	r19,zero,806120 <__alt_data_end+0xff806120>
  806308:	8809883a 	mov	r4,r17
  80630c:	0806d480 	call	806d48 <__clzsi2>
  806310:	10800804 	addi	r2,r2,32
  806314:	113ffe04 	addi	r4,r2,-8
  806318:	00c007c4 	movi	r3,31
  80631c:	193f850e 	bge	r3,r4,806134 <__alt_data_end+0xff806134>
  806320:	10bff604 	addi	r2,r2,-40
  806324:	8884983a 	sll	r2,r17,r2
  806328:	0023883a 	mov	r17,zero
  80632c:	243f880e 	bge	r4,r16,806150 <__alt_data_end+0xff806150>
  806330:	00ffe034 	movhi	r3,65408
  806334:	18ffffc4 	addi	r3,r3,-1
  806338:	8121c83a 	sub	r16,r16,r4
  80633c:	10c6703a 	and	r3,r2,r3
  806340:	003f3406 	br	806014 <__alt_data_end+0xff806014>
  806344:	9100004c 	andi	r4,r18,1
  806348:	000b883a 	mov	r5,zero
  80634c:	0005883a 	mov	r2,zero
  806350:	003f4806 	br	806074 <__alt_data_end+0xff806074>
  806354:	298cb03a 	or	r6,r5,r6
  806358:	300cc03a 	cmpne	r6,r6,zero
  80635c:	0005883a 	mov	r2,zero
  806360:	003f6406 	br	8060f4 <__alt_data_end+0xff8060f4>
  806364:	10009a1e 	bne	r2,zero,8065d0 <__subdf3+0x640>
  806368:	82400044 	addi	r9,r16,1
  80636c:	4881ffcc 	andi	r2,r9,2047
  806370:	02800044 	movi	r10,1
  806374:	5080670e 	bge	r10,r2,806514 <__subdf3+0x584>
  806378:	0081ffc4 	movi	r2,2047
  80637c:	4880af26 	beq	r9,r2,80663c <__subdf3+0x6ac>
  806380:	898d883a 	add	r6,r17,r6
  806384:	1945883a 	add	r2,r3,r5
  806388:	3447803a 	cmpltu	r3,r6,r17
  80638c:	1887883a 	add	r3,r3,r2
  806390:	182297fa 	slli	r17,r3,31
  806394:	300cd07a 	srli	r6,r6,1
  806398:	1806d07a 	srli	r3,r3,1
  80639c:	4821883a 	mov	r16,r9
  8063a0:	89a2b03a 	or	r17,r17,r6
  8063a4:	003f1b06 	br	806014 <__alt_data_end+0xff806014>
  8063a8:	0101ffc4 	movi	r4,2047
  8063ac:	813f441e 	bne	r16,r4,8060c0 <__alt_data_end+0xff8060c0>
  8063b0:	003f1806 	br	806014 <__alt_data_end+0xff806014>
  8063b4:	843ff844 	addi	r16,r16,-31
  8063b8:	01400804 	movi	r5,32
  8063bc:	1408d83a 	srl	r4,r2,r16
  8063c0:	19405026 	beq	r3,r5,806504 <__subdf3+0x574>
  8063c4:	01401004 	movi	r5,64
  8063c8:	28c7c83a 	sub	r3,r5,r3
  8063cc:	10c4983a 	sll	r2,r2,r3
  8063d0:	88a2b03a 	or	r17,r17,r2
  8063d4:	8822c03a 	cmpne	r17,r17,zero
  8063d8:	2462b03a 	or	r17,r4,r17
  8063dc:	0007883a 	mov	r3,zero
  8063e0:	0021883a 	mov	r16,zero
  8063e4:	003f6d06 	br	80619c <__alt_data_end+0xff80619c>
  8063e8:	11fff804 	addi	r7,r2,-32
  8063ec:	01000804 	movi	r4,32
  8063f0:	29ced83a 	srl	r7,r5,r7
  8063f4:	11004526 	beq	r2,r4,80650c <__subdf3+0x57c>
  8063f8:	01001004 	movi	r4,64
  8063fc:	2089c83a 	sub	r4,r4,r2
  806400:	2904983a 	sll	r2,r5,r4
  806404:	118cb03a 	or	r6,r2,r6
  806408:	300cc03a 	cmpne	r6,r6,zero
  80640c:	398cb03a 	or	r6,r7,r6
  806410:	0005883a 	mov	r2,zero
  806414:	003f3706 	br	8060f4 <__alt_data_end+0xff8060f4>
  806418:	80002a26 	beq	r16,zero,8064c4 <__subdf3+0x534>
  80641c:	0101ffc4 	movi	r4,2047
  806420:	49006626 	beq	r9,r4,8065bc <__subdf3+0x62c>
  806424:	0085c83a 	sub	r2,zero,r2
  806428:	18c02034 	orhi	r3,r3,128
  80642c:	01000e04 	movi	r4,56
  806430:	20807e16 	blt	r4,r2,80662c <__subdf3+0x69c>
  806434:	010007c4 	movi	r4,31
  806438:	2080e716 	blt	r4,r2,8067d8 <__subdf3+0x848>
  80643c:	01000804 	movi	r4,32
  806440:	2089c83a 	sub	r4,r4,r2
  806444:	1914983a 	sll	r10,r3,r4
  806448:	8890d83a 	srl	r8,r17,r2
  80644c:	8908983a 	sll	r4,r17,r4
  806450:	1884d83a 	srl	r2,r3,r2
  806454:	5222b03a 	or	r17,r10,r8
  806458:	2006c03a 	cmpne	r3,r4,zero
  80645c:	88e2b03a 	or	r17,r17,r3
  806460:	3463c83a 	sub	r17,r6,r17
  806464:	2885c83a 	sub	r2,r5,r2
  806468:	344d803a 	cmpltu	r6,r6,r17
  80646c:	1187c83a 	sub	r3,r2,r6
  806470:	4821883a 	mov	r16,r9
  806474:	3825883a 	mov	r18,r7
  806478:	003f2306 	br	806108 <__alt_data_end+0xff806108>
  80647c:	24d0b03a 	or	r8,r4,r19
  806480:	40001b1e 	bne	r8,zero,8064f0 <__subdf3+0x560>
  806484:	0005883a 	mov	r2,zero
  806488:	0009883a 	mov	r4,zero
  80648c:	0021883a 	mov	r16,zero
  806490:	003f4906 	br	8061b8 <__alt_data_end+0xff8061b8>
  806494:	010007c4 	movi	r4,31
  806498:	20803a16 	blt	r4,r2,806584 <__subdf3+0x5f4>
  80649c:	01000804 	movi	r4,32
  8064a0:	2089c83a 	sub	r4,r4,r2
  8064a4:	2912983a 	sll	r9,r5,r4
  8064a8:	3090d83a 	srl	r8,r6,r2
  8064ac:	3108983a 	sll	r4,r6,r4
  8064b0:	2884d83a 	srl	r2,r5,r2
  8064b4:	4a12b03a 	or	r9,r9,r8
  8064b8:	2008c03a 	cmpne	r4,r4,zero
  8064bc:	4912b03a 	or	r9,r9,r4
  8064c0:	003f4e06 	br	8061fc <__alt_data_end+0xff8061fc>
  8064c4:	1c48b03a 	or	r4,r3,r17
  8064c8:	20003c26 	beq	r4,zero,8065bc <__subdf3+0x62c>
  8064cc:	0084303a 	nor	r2,zero,r2
  8064d0:	1000381e 	bne	r2,zero,8065b4 <__subdf3+0x624>
  8064d4:	3463c83a 	sub	r17,r6,r17
  8064d8:	28c5c83a 	sub	r2,r5,r3
  8064dc:	344d803a 	cmpltu	r6,r6,r17
  8064e0:	1187c83a 	sub	r3,r2,r6
  8064e4:	4821883a 	mov	r16,r9
  8064e8:	3825883a 	mov	r18,r7
  8064ec:	003f0606 	br	806108 <__alt_data_end+0xff806108>
  8064f0:	2023883a 	mov	r17,r4
  8064f4:	003f0906 	br	80611c <__alt_data_end+0xff80611c>
  8064f8:	0101ffc4 	movi	r4,2047
  8064fc:	813f3a1e 	bne	r16,r4,8061e8 <__alt_data_end+0xff8061e8>
  806500:	003ec406 	br	806014 <__alt_data_end+0xff806014>
  806504:	0005883a 	mov	r2,zero
  806508:	003fb106 	br	8063d0 <__alt_data_end+0xff8063d0>
  80650c:	0005883a 	mov	r2,zero
  806510:	003fbc06 	br	806404 <__alt_data_end+0xff806404>
  806514:	1c44b03a 	or	r2,r3,r17
  806518:	80008e1e 	bne	r16,zero,806754 <__subdf3+0x7c4>
  80651c:	1000c826 	beq	r2,zero,806840 <__subdf3+0x8b0>
  806520:	2984b03a 	or	r2,r5,r6
  806524:	103ebb26 	beq	r2,zero,806014 <__alt_data_end+0xff806014>
  806528:	8989883a 	add	r4,r17,r6
  80652c:	1945883a 	add	r2,r3,r5
  806530:	2447803a 	cmpltu	r3,r4,r17
  806534:	1887883a 	add	r3,r3,r2
  806538:	1880202c 	andhi	r2,r3,128
  80653c:	2023883a 	mov	r17,r4
  806540:	103f1626 	beq	r2,zero,80619c <__alt_data_end+0xff80619c>
  806544:	00bfe034 	movhi	r2,65408
  806548:	10bfffc4 	addi	r2,r2,-1
  80654c:	5021883a 	mov	r16,r10
  806550:	1886703a 	and	r3,r3,r2
  806554:	003eaf06 	br	806014 <__alt_data_end+0xff806014>
  806558:	3825883a 	mov	r18,r7
  80655c:	003f0f06 	br	80619c <__alt_data_end+0xff80619c>
  806560:	1c44b03a 	or	r2,r3,r17
  806564:	8000251e 	bne	r16,zero,8065fc <__subdf3+0x66c>
  806568:	1000661e 	bne	r2,zero,806704 <__subdf3+0x774>
  80656c:	2990b03a 	or	r8,r5,r6
  806570:	40009626 	beq	r8,zero,8067cc <__subdf3+0x83c>
  806574:	2807883a 	mov	r3,r5
  806578:	3023883a 	mov	r17,r6
  80657c:	3825883a 	mov	r18,r7
  806580:	003ea406 	br	806014 <__alt_data_end+0xff806014>
  806584:	127ff804 	addi	r9,r2,-32
  806588:	01000804 	movi	r4,32
  80658c:	2a52d83a 	srl	r9,r5,r9
  806590:	11008c26 	beq	r2,r4,8067c4 <__subdf3+0x834>
  806594:	01001004 	movi	r4,64
  806598:	2085c83a 	sub	r2,r4,r2
  80659c:	2884983a 	sll	r2,r5,r2
  8065a0:	118cb03a 	or	r6,r2,r6
  8065a4:	300cc03a 	cmpne	r6,r6,zero
  8065a8:	4992b03a 	or	r9,r9,r6
  8065ac:	0005883a 	mov	r2,zero
  8065b0:	003f1206 	br	8061fc <__alt_data_end+0xff8061fc>
  8065b4:	0101ffc4 	movi	r4,2047
  8065b8:	493f9c1e 	bne	r9,r4,80642c <__alt_data_end+0xff80642c>
  8065bc:	2807883a 	mov	r3,r5
  8065c0:	3023883a 	mov	r17,r6
  8065c4:	4821883a 	mov	r16,r9
  8065c8:	3825883a 	mov	r18,r7
  8065cc:	003e9106 	br	806014 <__alt_data_end+0xff806014>
  8065d0:	80001f1e 	bne	r16,zero,806650 <__subdf3+0x6c0>
  8065d4:	1c48b03a 	or	r4,r3,r17
  8065d8:	20005a26 	beq	r4,zero,806744 <__subdf3+0x7b4>
  8065dc:	0084303a 	nor	r2,zero,r2
  8065e0:	1000561e 	bne	r2,zero,80673c <__subdf3+0x7ac>
  8065e4:	89a3883a 	add	r17,r17,r6
  8065e8:	1945883a 	add	r2,r3,r5
  8065ec:	898d803a 	cmpltu	r6,r17,r6
  8065f0:	3087883a 	add	r3,r6,r2
  8065f4:	4821883a 	mov	r16,r9
  8065f8:	003f0506 	br	806210 <__alt_data_end+0xff806210>
  8065fc:	10002b1e 	bne	r2,zero,8066ac <__subdf3+0x71c>
  806600:	2984b03a 	or	r2,r5,r6
  806604:	10008026 	beq	r2,zero,806808 <__subdf3+0x878>
  806608:	2807883a 	mov	r3,r5
  80660c:	3023883a 	mov	r17,r6
  806610:	3825883a 	mov	r18,r7
  806614:	0401ffc4 	movi	r16,2047
  806618:	003e7e06 	br	806014 <__alt_data_end+0xff806014>
  80661c:	3809883a 	mov	r4,r7
  806620:	0011883a 	mov	r8,zero
  806624:	0005883a 	mov	r2,zero
  806628:	003ee306 	br	8061b8 <__alt_data_end+0xff8061b8>
  80662c:	1c62b03a 	or	r17,r3,r17
  806630:	8822c03a 	cmpne	r17,r17,zero
  806634:	0005883a 	mov	r2,zero
  806638:	003f8906 	br	806460 <__alt_data_end+0xff806460>
  80663c:	3809883a 	mov	r4,r7
  806640:	4821883a 	mov	r16,r9
  806644:	0011883a 	mov	r8,zero
  806648:	0005883a 	mov	r2,zero
  80664c:	003eda06 	br	8061b8 <__alt_data_end+0xff8061b8>
  806650:	0101ffc4 	movi	r4,2047
  806654:	49003b26 	beq	r9,r4,806744 <__subdf3+0x7b4>
  806658:	0085c83a 	sub	r2,zero,r2
  80665c:	18c02034 	orhi	r3,r3,128
  806660:	01000e04 	movi	r4,56
  806664:	20806e16 	blt	r4,r2,806820 <__subdf3+0x890>
  806668:	010007c4 	movi	r4,31
  80666c:	20807716 	blt	r4,r2,80684c <__subdf3+0x8bc>
  806670:	01000804 	movi	r4,32
  806674:	2089c83a 	sub	r4,r4,r2
  806678:	1914983a 	sll	r10,r3,r4
  80667c:	8890d83a 	srl	r8,r17,r2
  806680:	8908983a 	sll	r4,r17,r4
  806684:	1884d83a 	srl	r2,r3,r2
  806688:	5222b03a 	or	r17,r10,r8
  80668c:	2006c03a 	cmpne	r3,r4,zero
  806690:	88e2b03a 	or	r17,r17,r3
  806694:	89a3883a 	add	r17,r17,r6
  806698:	1145883a 	add	r2,r2,r5
  80669c:	898d803a 	cmpltu	r6,r17,r6
  8066a0:	3087883a 	add	r3,r6,r2
  8066a4:	4821883a 	mov	r16,r9
  8066a8:	003ed906 	br	806210 <__alt_data_end+0xff806210>
  8066ac:	2984b03a 	or	r2,r5,r6
  8066b0:	10004226 	beq	r2,zero,8067bc <__subdf3+0x82c>
  8066b4:	1808d0fa 	srli	r4,r3,3
  8066b8:	8822d0fa 	srli	r17,r17,3
  8066bc:	1806977a 	slli	r3,r3,29
  8066c0:	2080022c 	andhi	r2,r4,8
  8066c4:	1c62b03a 	or	r17,r3,r17
  8066c8:	10000826 	beq	r2,zero,8066ec <__subdf3+0x75c>
  8066cc:	2812d0fa 	srli	r9,r5,3
  8066d0:	4880022c 	andhi	r2,r9,8
  8066d4:	1000051e 	bne	r2,zero,8066ec <__subdf3+0x75c>
  8066d8:	300cd0fa 	srli	r6,r6,3
  8066dc:	2804977a 	slli	r2,r5,29
  8066e0:	4809883a 	mov	r4,r9
  8066e4:	3825883a 	mov	r18,r7
  8066e8:	11a2b03a 	or	r17,r2,r6
  8066ec:	8806d77a 	srli	r3,r17,29
  8066f0:	200890fa 	slli	r4,r4,3
  8066f4:	882290fa 	slli	r17,r17,3
  8066f8:	0401ffc4 	movi	r16,2047
  8066fc:	1906b03a 	or	r3,r3,r4
  806700:	003e4406 	br	806014 <__alt_data_end+0xff806014>
  806704:	2984b03a 	or	r2,r5,r6
  806708:	103e4226 	beq	r2,zero,806014 <__alt_data_end+0xff806014>
  80670c:	8989c83a 	sub	r4,r17,r6
  806710:	8911803a 	cmpltu	r8,r17,r4
  806714:	1945c83a 	sub	r2,r3,r5
  806718:	1205c83a 	sub	r2,r2,r8
  80671c:	1200202c 	andhi	r8,r2,128
  806720:	403e9a26 	beq	r8,zero,80618c <__alt_data_end+0xff80618c>
  806724:	3463c83a 	sub	r17,r6,r17
  806728:	28c5c83a 	sub	r2,r5,r3
  80672c:	344d803a 	cmpltu	r6,r6,r17
  806730:	1187c83a 	sub	r3,r2,r6
  806734:	3825883a 	mov	r18,r7
  806738:	003e3606 	br	806014 <__alt_data_end+0xff806014>
  80673c:	0101ffc4 	movi	r4,2047
  806740:	493fc71e 	bne	r9,r4,806660 <__alt_data_end+0xff806660>
  806744:	2807883a 	mov	r3,r5
  806748:	3023883a 	mov	r17,r6
  80674c:	4821883a 	mov	r16,r9
  806750:	003e3006 	br	806014 <__alt_data_end+0xff806014>
  806754:	10003626 	beq	r2,zero,806830 <__subdf3+0x8a0>
  806758:	2984b03a 	or	r2,r5,r6
  80675c:	10001726 	beq	r2,zero,8067bc <__subdf3+0x82c>
  806760:	1808d0fa 	srli	r4,r3,3
  806764:	8822d0fa 	srli	r17,r17,3
  806768:	1806977a 	slli	r3,r3,29
  80676c:	2080022c 	andhi	r2,r4,8
  806770:	1c62b03a 	or	r17,r3,r17
  806774:	10000726 	beq	r2,zero,806794 <__subdf3+0x804>
  806778:	2812d0fa 	srli	r9,r5,3
  80677c:	4880022c 	andhi	r2,r9,8
  806780:	1000041e 	bne	r2,zero,806794 <__subdf3+0x804>
  806784:	300cd0fa 	srli	r6,r6,3
  806788:	2804977a 	slli	r2,r5,29
  80678c:	4809883a 	mov	r4,r9
  806790:	11a2b03a 	or	r17,r2,r6
  806794:	8806d77a 	srli	r3,r17,29
  806798:	200890fa 	slli	r4,r4,3
  80679c:	882290fa 	slli	r17,r17,3
  8067a0:	3825883a 	mov	r18,r7
  8067a4:	1906b03a 	or	r3,r3,r4
  8067a8:	0401ffc4 	movi	r16,2047
  8067ac:	003e1906 	br	806014 <__alt_data_end+0xff806014>
  8067b0:	000b883a 	mov	r5,zero
  8067b4:	0005883a 	mov	r2,zero
  8067b8:	003e2e06 	br	806074 <__alt_data_end+0xff806074>
  8067bc:	0401ffc4 	movi	r16,2047
  8067c0:	003e1406 	br	806014 <__alt_data_end+0xff806014>
  8067c4:	0005883a 	mov	r2,zero
  8067c8:	003f7506 	br	8065a0 <__alt_data_end+0xff8065a0>
  8067cc:	0005883a 	mov	r2,zero
  8067d0:	0009883a 	mov	r4,zero
  8067d4:	003e7806 	br	8061b8 <__alt_data_end+0xff8061b8>
  8067d8:	123ff804 	addi	r8,r2,-32
  8067dc:	01000804 	movi	r4,32
  8067e0:	1a10d83a 	srl	r8,r3,r8
  8067e4:	11002526 	beq	r2,r4,80687c <__subdf3+0x8ec>
  8067e8:	01001004 	movi	r4,64
  8067ec:	2085c83a 	sub	r2,r4,r2
  8067f0:	1884983a 	sll	r2,r3,r2
  8067f4:	1444b03a 	or	r2,r2,r17
  8067f8:	1004c03a 	cmpne	r2,r2,zero
  8067fc:	40a2b03a 	or	r17,r8,r2
  806800:	0005883a 	mov	r2,zero
  806804:	003f1606 	br	806460 <__alt_data_end+0xff806460>
  806808:	02000434 	movhi	r8,16
  80680c:	0009883a 	mov	r4,zero
  806810:	423fffc4 	addi	r8,r8,-1
  806814:	00bfffc4 	movi	r2,-1
  806818:	0401ffc4 	movi	r16,2047
  80681c:	003e6606 	br	8061b8 <__alt_data_end+0xff8061b8>
  806820:	1c62b03a 	or	r17,r3,r17
  806824:	8822c03a 	cmpne	r17,r17,zero
  806828:	0005883a 	mov	r2,zero
  80682c:	003f9906 	br	806694 <__alt_data_end+0xff806694>
  806830:	2807883a 	mov	r3,r5
  806834:	3023883a 	mov	r17,r6
  806838:	0401ffc4 	movi	r16,2047
  80683c:	003df506 	br	806014 <__alt_data_end+0xff806014>
  806840:	2807883a 	mov	r3,r5
  806844:	3023883a 	mov	r17,r6
  806848:	003df206 	br	806014 <__alt_data_end+0xff806014>
  80684c:	123ff804 	addi	r8,r2,-32
  806850:	01000804 	movi	r4,32
  806854:	1a10d83a 	srl	r8,r3,r8
  806858:	11000a26 	beq	r2,r4,806884 <__subdf3+0x8f4>
  80685c:	01001004 	movi	r4,64
  806860:	2085c83a 	sub	r2,r4,r2
  806864:	1884983a 	sll	r2,r3,r2
  806868:	1444b03a 	or	r2,r2,r17
  80686c:	1004c03a 	cmpne	r2,r2,zero
  806870:	40a2b03a 	or	r17,r8,r2
  806874:	0005883a 	mov	r2,zero
  806878:	003f8606 	br	806694 <__alt_data_end+0xff806694>
  80687c:	0005883a 	mov	r2,zero
  806880:	003fdc06 	br	8067f4 <__alt_data_end+0xff8067f4>
  806884:	0005883a 	mov	r2,zero
  806888:	003ff706 	br	806868 <__alt_data_end+0xff806868>

0080688c <__fixdfsi>:
  80688c:	280cd53a 	srli	r6,r5,20
  806890:	00c00434 	movhi	r3,16
  806894:	18ffffc4 	addi	r3,r3,-1
  806898:	3181ffcc 	andi	r6,r6,2047
  80689c:	01c0ff84 	movi	r7,1022
  8068a0:	28c6703a 	and	r3,r5,r3
  8068a4:	280ad7fa 	srli	r5,r5,31
  8068a8:	3980120e 	bge	r7,r6,8068f4 <__fixdfsi+0x68>
  8068ac:	00810744 	movi	r2,1053
  8068b0:	11800c16 	blt	r2,r6,8068e4 <__fixdfsi+0x58>
  8068b4:	00810cc4 	movi	r2,1075
  8068b8:	1185c83a 	sub	r2,r2,r6
  8068bc:	01c007c4 	movi	r7,31
  8068c0:	18c00434 	orhi	r3,r3,16
  8068c4:	38800d16 	blt	r7,r2,8068fc <__fixdfsi+0x70>
  8068c8:	31befb44 	addi	r6,r6,-1043
  8068cc:	2084d83a 	srl	r2,r4,r2
  8068d0:	1986983a 	sll	r3,r3,r6
  8068d4:	1884b03a 	or	r2,r3,r2
  8068d8:	28000726 	beq	r5,zero,8068f8 <__fixdfsi+0x6c>
  8068dc:	0085c83a 	sub	r2,zero,r2
  8068e0:	f800283a 	ret
  8068e4:	00a00034 	movhi	r2,32768
  8068e8:	10bfffc4 	addi	r2,r2,-1
  8068ec:	2885883a 	add	r2,r5,r2
  8068f0:	f800283a 	ret
  8068f4:	0005883a 	mov	r2,zero
  8068f8:	f800283a 	ret
  8068fc:	008104c4 	movi	r2,1043
  806900:	1185c83a 	sub	r2,r2,r6
  806904:	1884d83a 	srl	r2,r3,r2
  806908:	003ff306 	br	8068d8 <__alt_data_end+0xff8068d8>

0080690c <__floatsidf>:
  80690c:	defffd04 	addi	sp,sp,-12
  806910:	dfc00215 	stw	ra,8(sp)
  806914:	dc400115 	stw	r17,4(sp)
  806918:	dc000015 	stw	r16,0(sp)
  80691c:	20002b26 	beq	r4,zero,8069cc <__floatsidf+0xc0>
  806920:	2023883a 	mov	r17,r4
  806924:	2020d7fa 	srli	r16,r4,31
  806928:	20002d16 	blt	r4,zero,8069e0 <__floatsidf+0xd4>
  80692c:	8809883a 	mov	r4,r17
  806930:	0806d480 	call	806d48 <__clzsi2>
  806934:	01410784 	movi	r5,1054
  806938:	288bc83a 	sub	r5,r5,r2
  80693c:	01010cc4 	movi	r4,1075
  806940:	2149c83a 	sub	r4,r4,r5
  806944:	00c007c4 	movi	r3,31
  806948:	1900160e 	bge	r3,r4,8069a4 <__floatsidf+0x98>
  80694c:	00c104c4 	movi	r3,1043
  806950:	1947c83a 	sub	r3,r3,r5
  806954:	88c6983a 	sll	r3,r17,r3
  806958:	00800434 	movhi	r2,16
  80695c:	10bfffc4 	addi	r2,r2,-1
  806960:	1886703a 	and	r3,r3,r2
  806964:	2941ffcc 	andi	r5,r5,2047
  806968:	800d883a 	mov	r6,r16
  80696c:	0005883a 	mov	r2,zero
  806970:	280a953a 	slli	r5,r5,20
  806974:	31803fcc 	andi	r6,r6,255
  806978:	01000434 	movhi	r4,16
  80697c:	300c97fa 	slli	r6,r6,31
  806980:	213fffc4 	addi	r4,r4,-1
  806984:	1906703a 	and	r3,r3,r4
  806988:	1946b03a 	or	r3,r3,r5
  80698c:	1986b03a 	or	r3,r3,r6
  806990:	dfc00217 	ldw	ra,8(sp)
  806994:	dc400117 	ldw	r17,4(sp)
  806998:	dc000017 	ldw	r16,0(sp)
  80699c:	dec00304 	addi	sp,sp,12
  8069a0:	f800283a 	ret
  8069a4:	00c002c4 	movi	r3,11
  8069a8:	1887c83a 	sub	r3,r3,r2
  8069ac:	88c6d83a 	srl	r3,r17,r3
  8069b0:	8904983a 	sll	r2,r17,r4
  8069b4:	01000434 	movhi	r4,16
  8069b8:	213fffc4 	addi	r4,r4,-1
  8069bc:	2941ffcc 	andi	r5,r5,2047
  8069c0:	1906703a 	and	r3,r3,r4
  8069c4:	800d883a 	mov	r6,r16
  8069c8:	003fe906 	br	806970 <__alt_data_end+0xff806970>
  8069cc:	000d883a 	mov	r6,zero
  8069d0:	000b883a 	mov	r5,zero
  8069d4:	0007883a 	mov	r3,zero
  8069d8:	0005883a 	mov	r2,zero
  8069dc:	003fe406 	br	806970 <__alt_data_end+0xff806970>
  8069e0:	0123c83a 	sub	r17,zero,r4
  8069e4:	003fd106 	br	80692c <__alt_data_end+0xff80692c>

008069e8 <__floatunsidf>:
  8069e8:	defffe04 	addi	sp,sp,-8
  8069ec:	dc000015 	stw	r16,0(sp)
  8069f0:	dfc00115 	stw	ra,4(sp)
  8069f4:	2021883a 	mov	r16,r4
  8069f8:	20002226 	beq	r4,zero,806a84 <__floatunsidf+0x9c>
  8069fc:	0806d480 	call	806d48 <__clzsi2>
  806a00:	01010784 	movi	r4,1054
  806a04:	2089c83a 	sub	r4,r4,r2
  806a08:	01810cc4 	movi	r6,1075
  806a0c:	310dc83a 	sub	r6,r6,r4
  806a10:	00c007c4 	movi	r3,31
  806a14:	1980120e 	bge	r3,r6,806a60 <__floatunsidf+0x78>
  806a18:	00c104c4 	movi	r3,1043
  806a1c:	1907c83a 	sub	r3,r3,r4
  806a20:	80ca983a 	sll	r5,r16,r3
  806a24:	00800434 	movhi	r2,16
  806a28:	10bfffc4 	addi	r2,r2,-1
  806a2c:	2101ffcc 	andi	r4,r4,2047
  806a30:	0021883a 	mov	r16,zero
  806a34:	288a703a 	and	r5,r5,r2
  806a38:	2008953a 	slli	r4,r4,20
  806a3c:	00c00434 	movhi	r3,16
  806a40:	18ffffc4 	addi	r3,r3,-1
  806a44:	28c6703a 	and	r3,r5,r3
  806a48:	8005883a 	mov	r2,r16
  806a4c:	1906b03a 	or	r3,r3,r4
  806a50:	dfc00117 	ldw	ra,4(sp)
  806a54:	dc000017 	ldw	r16,0(sp)
  806a58:	dec00204 	addi	sp,sp,8
  806a5c:	f800283a 	ret
  806a60:	00c002c4 	movi	r3,11
  806a64:	188bc83a 	sub	r5,r3,r2
  806a68:	814ad83a 	srl	r5,r16,r5
  806a6c:	00c00434 	movhi	r3,16
  806a70:	18ffffc4 	addi	r3,r3,-1
  806a74:	81a0983a 	sll	r16,r16,r6
  806a78:	2101ffcc 	andi	r4,r4,2047
  806a7c:	28ca703a 	and	r5,r5,r3
  806a80:	003fed06 	br	806a38 <__alt_data_end+0xff806a38>
  806a84:	0009883a 	mov	r4,zero
  806a88:	000b883a 	mov	r5,zero
  806a8c:	003fea06 	br	806a38 <__alt_data_end+0xff806a38>

00806a90 <__extendsfdf2>:
  806a90:	200ad5fa 	srli	r5,r4,23
  806a94:	defffd04 	addi	sp,sp,-12
  806a98:	dc400115 	stw	r17,4(sp)
  806a9c:	29403fcc 	andi	r5,r5,255
  806aa0:	29800044 	addi	r6,r5,1
  806aa4:	04402034 	movhi	r17,128
  806aa8:	dc000015 	stw	r16,0(sp)
  806aac:	8c7fffc4 	addi	r17,r17,-1
  806ab0:	dfc00215 	stw	ra,8(sp)
  806ab4:	31803fcc 	andi	r6,r6,255
  806ab8:	00800044 	movi	r2,1
  806abc:	8922703a 	and	r17,r17,r4
  806ac0:	2020d7fa 	srli	r16,r4,31
  806ac4:	1180110e 	bge	r2,r6,806b0c <__extendsfdf2+0x7c>
  806ac8:	880cd0fa 	srli	r6,r17,3
  806acc:	8822977a 	slli	r17,r17,29
  806ad0:	2940e004 	addi	r5,r5,896
  806ad4:	2941ffcc 	andi	r5,r5,2047
  806ad8:	2804953a 	slli	r2,r5,20
  806adc:	01400434 	movhi	r5,16
  806ae0:	800697fa 	slli	r3,r16,31
  806ae4:	297fffc4 	addi	r5,r5,-1
  806ae8:	314a703a 	and	r5,r6,r5
  806aec:	288ab03a 	or	r5,r5,r2
  806af0:	28c6b03a 	or	r3,r5,r3
  806af4:	8805883a 	mov	r2,r17
  806af8:	dfc00217 	ldw	ra,8(sp)
  806afc:	dc400117 	ldw	r17,4(sp)
  806b00:	dc000017 	ldw	r16,0(sp)
  806b04:	dec00304 	addi	sp,sp,12
  806b08:	f800283a 	ret
  806b0c:	2800111e 	bne	r5,zero,806b54 <__extendsfdf2+0xc4>
  806b10:	88001c26 	beq	r17,zero,806b84 <__extendsfdf2+0xf4>
  806b14:	8809883a 	mov	r4,r17
  806b18:	0806d480 	call	806d48 <__clzsi2>
  806b1c:	00c00284 	movi	r3,10
  806b20:	18801b16 	blt	r3,r2,806b90 <__extendsfdf2+0x100>
  806b24:	018002c4 	movi	r6,11
  806b28:	308dc83a 	sub	r6,r6,r2
  806b2c:	11000544 	addi	r4,r2,21
  806b30:	8986d83a 	srl	r3,r17,r6
  806b34:	8922983a 	sll	r17,r17,r4
  806b38:	0180e244 	movi	r6,905
  806b3c:	01400434 	movhi	r5,16
  806b40:	3085c83a 	sub	r2,r6,r2
  806b44:	297fffc4 	addi	r5,r5,-1
  806b48:	194c703a 	and	r6,r3,r5
  806b4c:	1141ffcc 	andi	r5,r2,2047
  806b50:	003fe006 	br	806ad4 <__alt_data_end+0xff806ad4>
  806b54:	88000826 	beq	r17,zero,806b78 <__extendsfdf2+0xe8>
  806b58:	880cd0fa 	srli	r6,r17,3
  806b5c:	00800434 	movhi	r2,16
  806b60:	10bfffc4 	addi	r2,r2,-1
  806b64:	31800234 	orhi	r6,r6,8
  806b68:	8822977a 	slli	r17,r17,29
  806b6c:	308c703a 	and	r6,r6,r2
  806b70:	0141ffc4 	movi	r5,2047
  806b74:	003fd706 	br	806ad4 <__alt_data_end+0xff806ad4>
  806b78:	0141ffc4 	movi	r5,2047
  806b7c:	000d883a 	mov	r6,zero
  806b80:	003fd406 	br	806ad4 <__alt_data_end+0xff806ad4>
  806b84:	000b883a 	mov	r5,zero
  806b88:	000d883a 	mov	r6,zero
  806b8c:	003fd106 	br	806ad4 <__alt_data_end+0xff806ad4>
  806b90:	11bffd44 	addi	r6,r2,-11
  806b94:	8986983a 	sll	r3,r17,r6
  806b98:	0023883a 	mov	r17,zero
  806b9c:	003fe606 	br	806b38 <__alt_data_end+0xff806b38>

00806ba0 <__truncdfsf2>:
  806ba0:	2810d53a 	srli	r8,r5,20
  806ba4:	01c00434 	movhi	r7,16
  806ba8:	39ffffc4 	addi	r7,r7,-1
  806bac:	29ce703a 	and	r7,r5,r7
  806bb0:	4201ffcc 	andi	r8,r8,2047
  806bb4:	380e90fa 	slli	r7,r7,3
  806bb8:	200cd77a 	srli	r6,r4,29
  806bbc:	42400044 	addi	r9,r8,1
  806bc0:	4a41ffcc 	andi	r9,r9,2047
  806bc4:	00c00044 	movi	r3,1
  806bc8:	280ad7fa 	srli	r5,r5,31
  806bcc:	31ceb03a 	or	r7,r6,r7
  806bd0:	200490fa 	slli	r2,r4,3
  806bd4:	1a40230e 	bge	r3,r9,806c64 <__truncdfsf2+0xc4>
  806bd8:	40ff2004 	addi	r3,r8,-896
  806bdc:	01803f84 	movi	r6,254
  806be0:	30c01516 	blt	r6,r3,806c38 <__truncdfsf2+0x98>
  806be4:	00c0380e 	bge	zero,r3,806cc8 <__truncdfsf2+0x128>
  806be8:	200c91ba 	slli	r6,r4,6
  806bec:	380e90fa 	slli	r7,r7,3
  806bf0:	1004d77a 	srli	r2,r2,29
  806bf4:	300cc03a 	cmpne	r6,r6,zero
  806bf8:	31ccb03a 	or	r6,r6,r7
  806bfc:	308cb03a 	or	r6,r6,r2
  806c00:	308001cc 	andi	r2,r6,7
  806c04:	10000426 	beq	r2,zero,806c18 <__truncdfsf2+0x78>
  806c08:	308003cc 	andi	r2,r6,15
  806c0c:	01000104 	movi	r4,4
  806c10:	11000126 	beq	r2,r4,806c18 <__truncdfsf2+0x78>
  806c14:	31800104 	addi	r6,r6,4
  806c18:	3081002c 	andhi	r2,r6,1024
  806c1c:	10001626 	beq	r2,zero,806c78 <__truncdfsf2+0xd8>
  806c20:	18c00044 	addi	r3,r3,1
  806c24:	00803fc4 	movi	r2,255
  806c28:	18800326 	beq	r3,r2,806c38 <__truncdfsf2+0x98>
  806c2c:	300c91ba 	slli	r6,r6,6
  806c30:	300cd27a 	srli	r6,r6,9
  806c34:	00000206 	br	806c40 <__truncdfsf2+0xa0>
  806c38:	00ffffc4 	movi	r3,-1
  806c3c:	000d883a 	mov	r6,zero
  806c40:	18c03fcc 	andi	r3,r3,255
  806c44:	180895fa 	slli	r4,r3,23
  806c48:	00c02034 	movhi	r3,128
  806c4c:	280a97fa 	slli	r5,r5,31
  806c50:	18ffffc4 	addi	r3,r3,-1
  806c54:	30c6703a 	and	r3,r6,r3
  806c58:	1906b03a 	or	r3,r3,r4
  806c5c:	1944b03a 	or	r2,r3,r5
  806c60:	f800283a 	ret
  806c64:	40000b1e 	bne	r8,zero,806c94 <__truncdfsf2+0xf4>
  806c68:	388cb03a 	or	r6,r7,r2
  806c6c:	0007883a 	mov	r3,zero
  806c70:	30000426 	beq	r6,zero,806c84 <__truncdfsf2+0xe4>
  806c74:	01800144 	movi	r6,5
  806c78:	00803fc4 	movi	r2,255
  806c7c:	300cd0fa 	srli	r6,r6,3
  806c80:	18800a26 	beq	r3,r2,806cac <__truncdfsf2+0x10c>
  806c84:	00802034 	movhi	r2,128
  806c88:	10bfffc4 	addi	r2,r2,-1
  806c8c:	308c703a 	and	r6,r6,r2
  806c90:	003feb06 	br	806c40 <__alt_data_end+0xff806c40>
  806c94:	3888b03a 	or	r4,r7,r2
  806c98:	203fe726 	beq	r4,zero,806c38 <__alt_data_end+0xff806c38>
  806c9c:	380c90fa 	slli	r6,r7,3
  806ca0:	00c03fc4 	movi	r3,255
  806ca4:	31808034 	orhi	r6,r6,512
  806ca8:	003fd506 	br	806c00 <__alt_data_end+0xff806c00>
  806cac:	303fe226 	beq	r6,zero,806c38 <__alt_data_end+0xff806c38>
  806cb0:	00802034 	movhi	r2,128
  806cb4:	31801034 	orhi	r6,r6,64
  806cb8:	10bfffc4 	addi	r2,r2,-1
  806cbc:	00ffffc4 	movi	r3,-1
  806cc0:	308c703a 	and	r6,r6,r2
  806cc4:	003fde06 	br	806c40 <__alt_data_end+0xff806c40>
  806cc8:	013ffa44 	movi	r4,-23
  806ccc:	19000e16 	blt	r3,r4,806d08 <__truncdfsf2+0x168>
  806cd0:	01000784 	movi	r4,30
  806cd4:	20c9c83a 	sub	r4,r4,r3
  806cd8:	018007c4 	movi	r6,31
  806cdc:	39c02034 	orhi	r7,r7,128
  806ce0:	31000b16 	blt	r6,r4,806d10 <__truncdfsf2+0x170>
  806ce4:	423f2084 	addi	r8,r8,-894
  806ce8:	120c983a 	sll	r6,r2,r8
  806cec:	3a0e983a 	sll	r7,r7,r8
  806cf0:	1104d83a 	srl	r2,r2,r4
  806cf4:	300cc03a 	cmpne	r6,r6,zero
  806cf8:	31ceb03a 	or	r7,r6,r7
  806cfc:	388cb03a 	or	r6,r7,r2
  806d00:	0007883a 	mov	r3,zero
  806d04:	003fbe06 	br	806c00 <__alt_data_end+0xff806c00>
  806d08:	0007883a 	mov	r3,zero
  806d0c:	003fd906 	br	806c74 <__alt_data_end+0xff806c74>
  806d10:	01bfff84 	movi	r6,-2
  806d14:	30cdc83a 	sub	r6,r6,r3
  806d18:	00c00804 	movi	r3,32
  806d1c:	398cd83a 	srl	r6,r7,r6
  806d20:	20c00726 	beq	r4,r3,806d40 <__truncdfsf2+0x1a0>
  806d24:	423f2884 	addi	r8,r8,-862
  806d28:	3a0e983a 	sll	r7,r7,r8
  806d2c:	3884b03a 	or	r2,r7,r2
  806d30:	1004c03a 	cmpne	r2,r2,zero
  806d34:	118cb03a 	or	r6,r2,r6
  806d38:	0007883a 	mov	r3,zero
  806d3c:	003fb006 	br	806c00 <__alt_data_end+0xff806c00>
  806d40:	000f883a 	mov	r7,zero
  806d44:	003ff906 	br	806d2c <__alt_data_end+0xff806d2c>

00806d48 <__clzsi2>:
  806d48:	00bfffd4 	movui	r2,65535
  806d4c:	11000536 	bltu	r2,r4,806d64 <__clzsi2+0x1c>
  806d50:	00803fc4 	movi	r2,255
  806d54:	11000f36 	bltu	r2,r4,806d94 <__clzsi2+0x4c>
  806d58:	00800804 	movi	r2,32
  806d5c:	0007883a 	mov	r3,zero
  806d60:	00000506 	br	806d78 <__clzsi2+0x30>
  806d64:	00804034 	movhi	r2,256
  806d68:	10bfffc4 	addi	r2,r2,-1
  806d6c:	11000c2e 	bgeu	r2,r4,806da0 <__clzsi2+0x58>
  806d70:	00800204 	movi	r2,8
  806d74:	00c00604 	movi	r3,24
  806d78:	20c8d83a 	srl	r4,r4,r3
  806d7c:	00c02074 	movhi	r3,129
  806d80:	18ff4904 	addi	r3,r3,-732
  806d84:	1909883a 	add	r4,r3,r4
  806d88:	20c00003 	ldbu	r3,0(r4)
  806d8c:	10c5c83a 	sub	r2,r2,r3
  806d90:	f800283a 	ret
  806d94:	00800604 	movi	r2,24
  806d98:	00c00204 	movi	r3,8
  806d9c:	003ff606 	br	806d78 <__alt_data_end+0xff806d78>
  806da0:	00800404 	movi	r2,16
  806da4:	1007883a 	mov	r3,r2
  806da8:	003ff306 	br	806d78 <__alt_data_end+0xff806d78>

00806dac <fcvt>:
  806dac:	defffd04 	addi	sp,sp,-12
  806db0:	d8800317 	ldw	r2,12(sp)
  806db4:	d8000115 	stw	zero,4(sp)
  806db8:	dfc00215 	stw	ra,8(sp)
  806dbc:	d8800015 	stw	r2,0(sp)
  806dc0:	08072d00 	call	8072d0 <fcvtbuf>
  806dc4:	dfc00217 	ldw	ra,8(sp)
  806dc8:	dec00304 	addi	sp,sp,12
  806dcc:	f800283a 	ret

00806dd0 <fcvtf>:
  806dd0:	defffa04 	addi	sp,sp,-24
  806dd4:	dfc00515 	stw	ra,20(sp)
  806dd8:	dc800415 	stw	r18,16(sp)
  806ddc:	dc400315 	stw	r17,12(sp)
  806de0:	3025883a 	mov	r18,r6
  806de4:	3823883a 	mov	r17,r7
  806de8:	dc000215 	stw	r16,8(sp)
  806dec:	2821883a 	mov	r16,r5
  806df0:	0806a900 	call	806a90 <__extendsfdf2>
  806df4:	900f883a 	mov	r7,r18
  806df8:	d8000115 	stw	zero,4(sp)
  806dfc:	dc400015 	stw	r17,0(sp)
  806e00:	800d883a 	mov	r6,r16
  806e04:	1009883a 	mov	r4,r2
  806e08:	180b883a 	mov	r5,r3
  806e0c:	08072d00 	call	8072d0 <fcvtbuf>
  806e10:	dfc00517 	ldw	ra,20(sp)
  806e14:	dc800417 	ldw	r18,16(sp)
  806e18:	dc400317 	ldw	r17,12(sp)
  806e1c:	dc000217 	ldw	r16,8(sp)
  806e20:	dec00604 	addi	sp,sp,24
  806e24:	f800283a 	ret

00806e28 <ecvt>:
  806e28:	defffd04 	addi	sp,sp,-12
  806e2c:	d8800317 	ldw	r2,12(sp)
  806e30:	d8000115 	stw	zero,4(sp)
  806e34:	dfc00215 	stw	ra,8(sp)
  806e38:	d8800015 	stw	r2,0(sp)
  806e3c:	08074740 	call	807474 <ecvtbuf>
  806e40:	dfc00217 	ldw	ra,8(sp)
  806e44:	dec00304 	addi	sp,sp,12
  806e48:	f800283a 	ret

00806e4c <ecvtf>:
  806e4c:	defffa04 	addi	sp,sp,-24
  806e50:	dfc00515 	stw	ra,20(sp)
  806e54:	dc800415 	stw	r18,16(sp)
  806e58:	dc400315 	stw	r17,12(sp)
  806e5c:	3025883a 	mov	r18,r6
  806e60:	3823883a 	mov	r17,r7
  806e64:	dc000215 	stw	r16,8(sp)
  806e68:	2821883a 	mov	r16,r5
  806e6c:	0806a900 	call	806a90 <__extendsfdf2>
  806e70:	900f883a 	mov	r7,r18
  806e74:	d8000115 	stw	zero,4(sp)
  806e78:	dc400015 	stw	r17,0(sp)
  806e7c:	800d883a 	mov	r6,r16
  806e80:	1009883a 	mov	r4,r2
  806e84:	180b883a 	mov	r5,r3
  806e88:	08074740 	call	807474 <ecvtbuf>
  806e8c:	dfc00517 	ldw	ra,20(sp)
  806e90:	dc800417 	ldw	r18,16(sp)
  806e94:	dc400317 	ldw	r17,12(sp)
  806e98:	dc000217 	ldw	r16,8(sp)
  806e9c:	dec00604 	addi	sp,sp,24
  806ea0:	f800283a 	ret

00806ea4 <gcvt>:
  806ea4:	defff804 	addi	sp,sp,-32
  806ea8:	dc400415 	stw	r17,16(sp)
  806eac:	dc000315 	stw	r16,12(sp)
  806eb0:	3023883a 	mov	r17,r6
  806eb4:	3821883a 	mov	r16,r7
  806eb8:	000d883a 	mov	r6,zero
  806ebc:	000f883a 	mov	r7,zero
  806ec0:	dcc00615 	stw	r19,24(sp)
  806ec4:	dc800515 	stw	r18,20(sp)
  806ec8:	dfc00715 	stw	ra,28(sp)
  806ecc:	2027883a 	mov	r19,r4
  806ed0:	2825883a 	mov	r18,r5
  806ed4:	080d0a80 	call	80d0a8 <__ledf2>
  806ed8:	10001516 	blt	r2,zero,806f30 <gcvt+0x8c>
  806edc:	8005883a 	mov	r2,r16
  806ee0:	00c02074 	movhi	r3,129
  806ee4:	18c67304 	addi	r3,r3,6604
  806ee8:	d8000215 	stw	zero,8(sp)
  806eec:	19000017 	ldw	r4,0(r3)
  806ef0:	00c019c4 	movi	r3,103
  806ef4:	d8c00115 	stw	r3,4(sp)
  806ef8:	d8800015 	stw	r2,0(sp)
  806efc:	880f883a 	mov	r7,r17
  806f00:	980b883a 	mov	r5,r19
  806f04:	900d883a 	mov	r6,r18
  806f08:	08075b40 	call	8075b4 <_gcvt>
  806f0c:	10000126 	beq	r2,zero,806f14 <gcvt+0x70>
  806f10:	8005883a 	mov	r2,r16
  806f14:	dfc00717 	ldw	ra,28(sp)
  806f18:	dcc00617 	ldw	r19,24(sp)
  806f1c:	dc800517 	ldw	r18,20(sp)
  806f20:	dc400417 	ldw	r17,16(sp)
  806f24:	dc000317 	ldw	r16,12(sp)
  806f28:	dec00804 	addi	sp,sp,32
  806f2c:	f800283a 	ret
  806f30:	00800b44 	movi	r2,45
  806f34:	80800005 	stb	r2,0(r16)
  806f38:	8c7fffc4 	addi	r17,r17,-1
  806f3c:	80800044 	addi	r2,r16,1
  806f40:	003fe706 	br	806ee0 <__alt_data_end+0xff806ee0>

00806f44 <gcvtf>:
  806f44:	defffd04 	addi	sp,sp,-12
  806f48:	dc400115 	stw	r17,4(sp)
  806f4c:	dc000015 	stw	r16,0(sp)
  806f50:	3023883a 	mov	r17,r6
  806f54:	2821883a 	mov	r16,r5
  806f58:	dfc00215 	stw	ra,8(sp)
  806f5c:	0806a900 	call	806a90 <__extendsfdf2>
  806f60:	880f883a 	mov	r7,r17
  806f64:	800d883a 	mov	r6,r16
  806f68:	1009883a 	mov	r4,r2
  806f6c:	180b883a 	mov	r5,r3
  806f70:	dfc00217 	ldw	ra,8(sp)
  806f74:	dc400117 	ldw	r17,4(sp)
  806f78:	dc000017 	ldw	r16,0(sp)
  806f7c:	dec00304 	addi	sp,sp,12
  806f80:	0806ea41 	jmpi	806ea4 <gcvt>

00806f84 <__errno>:
  806f84:	00802074 	movhi	r2,129
  806f88:	10867304 	addi	r2,r2,6604
  806f8c:	10800017 	ldw	r2,0(r2)
  806f90:	f800283a 	ret

00806f94 <_puts_r>:
  806f94:	defff604 	addi	sp,sp,-40
  806f98:	dc000715 	stw	r16,28(sp)
  806f9c:	2021883a 	mov	r16,r4
  806fa0:	2809883a 	mov	r4,r5
  806fa4:	dc400815 	stw	r17,32(sp)
  806fa8:	dfc00915 	stw	ra,36(sp)
  806fac:	2823883a 	mov	r17,r5
  806fb0:	08070680 	call	807068 <strlen>
  806fb4:	10c00044 	addi	r3,r2,1
  806fb8:	d8800115 	stw	r2,4(sp)
  806fbc:	00802074 	movhi	r2,129
  806fc0:	10bf8a04 	addi	r2,r2,-472
  806fc4:	d8800215 	stw	r2,8(sp)
  806fc8:	00800044 	movi	r2,1
  806fcc:	d8800315 	stw	r2,12(sp)
  806fd0:	00800084 	movi	r2,2
  806fd4:	dc400015 	stw	r17,0(sp)
  806fd8:	d8c00615 	stw	r3,24(sp)
  806fdc:	dec00415 	stw	sp,16(sp)
  806fe0:	d8800515 	stw	r2,20(sp)
  806fe4:	80000226 	beq	r16,zero,806ff0 <_puts_r+0x5c>
  806fe8:	80800e17 	ldw	r2,56(r16)
  806fec:	10001426 	beq	r2,zero,807040 <_puts_r+0xac>
  806ff0:	81400217 	ldw	r5,8(r16)
  806ff4:	2880030b 	ldhu	r2,12(r5)
  806ff8:	10c8000c 	andi	r3,r2,8192
  806ffc:	1800061e 	bne	r3,zero,807018 <_puts_r+0x84>
  807000:	29001917 	ldw	r4,100(r5)
  807004:	00f7ffc4 	movi	r3,-8193
  807008:	10880014 	ori	r2,r2,8192
  80700c:	20c6703a 	and	r3,r4,r3
  807010:	2880030d 	sth	r2,12(r5)
  807014:	28c01915 	stw	r3,100(r5)
  807018:	d9800404 	addi	r6,sp,16
  80701c:	8009883a 	mov	r4,r16
  807020:	0807fc80 	call	807fc8 <__sfvwrite_r>
  807024:	1000091e 	bne	r2,zero,80704c <_puts_r+0xb8>
  807028:	00800284 	movi	r2,10
  80702c:	dfc00917 	ldw	ra,36(sp)
  807030:	dc400817 	ldw	r17,32(sp)
  807034:	dc000717 	ldw	r16,28(sp)
  807038:	dec00a04 	addi	sp,sp,40
  80703c:	f800283a 	ret
  807040:	8009883a 	mov	r4,r16
  807044:	0807f780 	call	807f78 <__sinit>
  807048:	003fe906 	br	806ff0 <__alt_data_end+0xff806ff0>
  80704c:	00bfffc4 	movi	r2,-1
  807050:	003ff606 	br	80702c <__alt_data_end+0xff80702c>

00807054 <puts>:
  807054:	00802074 	movhi	r2,129
  807058:	10867304 	addi	r2,r2,6604
  80705c:	200b883a 	mov	r5,r4
  807060:	11000017 	ldw	r4,0(r2)
  807064:	0806f941 	jmpi	806f94 <_puts_r>

00807068 <strlen>:
  807068:	208000cc 	andi	r2,r4,3
  80706c:	10002026 	beq	r2,zero,8070f0 <strlen+0x88>
  807070:	20800007 	ldb	r2,0(r4)
  807074:	10002026 	beq	r2,zero,8070f8 <strlen+0x90>
  807078:	2005883a 	mov	r2,r4
  80707c:	00000206 	br	807088 <strlen+0x20>
  807080:	10c00007 	ldb	r3,0(r2)
  807084:	18001826 	beq	r3,zero,8070e8 <strlen+0x80>
  807088:	10800044 	addi	r2,r2,1
  80708c:	10c000cc 	andi	r3,r2,3
  807090:	183ffb1e 	bne	r3,zero,807080 <__alt_data_end+0xff807080>
  807094:	10c00017 	ldw	r3,0(r2)
  807098:	01ffbff4 	movhi	r7,65279
  80709c:	39ffbfc4 	addi	r7,r7,-257
  8070a0:	00ca303a 	nor	r5,zero,r3
  8070a4:	01a02074 	movhi	r6,32897
  8070a8:	19c7883a 	add	r3,r3,r7
  8070ac:	31a02004 	addi	r6,r6,-32640
  8070b0:	1946703a 	and	r3,r3,r5
  8070b4:	1986703a 	and	r3,r3,r6
  8070b8:	1800091e 	bne	r3,zero,8070e0 <strlen+0x78>
  8070bc:	10800104 	addi	r2,r2,4
  8070c0:	10c00017 	ldw	r3,0(r2)
  8070c4:	19cb883a 	add	r5,r3,r7
  8070c8:	00c6303a 	nor	r3,zero,r3
  8070cc:	28c6703a 	and	r3,r5,r3
  8070d0:	1986703a 	and	r3,r3,r6
  8070d4:	183ff926 	beq	r3,zero,8070bc <__alt_data_end+0xff8070bc>
  8070d8:	00000106 	br	8070e0 <strlen+0x78>
  8070dc:	10800044 	addi	r2,r2,1
  8070e0:	10c00007 	ldb	r3,0(r2)
  8070e4:	183ffd1e 	bne	r3,zero,8070dc <__alt_data_end+0xff8070dc>
  8070e8:	1105c83a 	sub	r2,r2,r4
  8070ec:	f800283a 	ret
  8070f0:	2005883a 	mov	r2,r4
  8070f4:	003fe706 	br	807094 <__alt_data_end+0xff807094>
  8070f8:	0005883a 	mov	r2,zero
  8070fc:	f800283a 	ret

00807100 <print_e>:
  807100:	defff504 	addi	sp,sp,-44
  807104:	dc400815 	stw	r17,32(sp)
  807108:	dc400b17 	ldw	r17,44(sp)
  80710c:	dc000715 	stw	r16,28(sp)
  807110:	2821883a 	mov	r16,r5
  807114:	d9400504 	addi	r5,sp,20
  807118:	d9400315 	stw	r5,12(sp)
  80711c:	300b883a 	mov	r5,r6
  807120:	d9800604 	addi	r6,sp,24
  807124:	3805883a 	mov	r2,r7
  807128:	88c00044 	addi	r3,r17,1
  80712c:	d9800215 	stw	r6,8(sp)
  807130:	d9800404 	addi	r6,sp,16
  807134:	d9800115 	stw	r6,4(sp)
  807138:	d8c00015 	stw	r3,0(sp)
  80713c:	01c00084 	movi	r7,2
  807140:	100d883a 	mov	r6,r2
  807144:	dc800915 	stw	r18,36(sp)
  807148:	dfc00a15 	stw	ra,40(sp)
  80714c:	dc800c17 	ldw	r18,48(sp)
  807150:	080af140 	call	80af14 <_dtoa_r>
  807154:	d9000417 	ldw	r4,16(sp)
  807158:	00c9c3c4 	movi	r3,9999
  80715c:	20c05826 	beq	r4,r3,8072c0 <print_e+0x1c0>
  807160:	10c00003 	ldbu	r3,0(r2)
  807164:	900f883a 	mov	r7,r18
  807168:	80c00005 	stb	r3,0(r16)
  80716c:	d8c00d17 	ldw	r3,52(sp)
  807170:	18004526 	beq	r3,zero,807288 <print_e+0x188>
  807174:	00c00b84 	movi	r3,46
  807178:	80c00045 	stb	r3,1(r16)
  80717c:	11400043 	ldbu	r5,1(r2)
  807180:	80c00084 	addi	r3,r16,2
  807184:	29803fcc 	andi	r6,r5,255
  807188:	3180201c 	xori	r6,r6,128
  80718c:	31bfe004 	addi	r6,r6,-128
  807190:	30000f26 	beq	r6,zero,8071d0 <print_e+0xd0>
  807194:	04400e0e 	bge	zero,r17,8071d0 <print_e+0xd0>
  807198:	10800044 	addi	r2,r2,1
  80719c:	180d883a 	mov	r6,r3
  8071a0:	00000206 	br	8071ac <print_e+0xac>
  8071a4:	180d883a 	mov	r6,r3
  8071a8:	88000926 	beq	r17,zero,8071d0 <print_e+0xd0>
  8071ac:	31400005 	stb	r5,0(r6)
  8071b0:	10800044 	addi	r2,r2,1
  8071b4:	11400003 	ldbu	r5,0(r2)
  8071b8:	18c00044 	addi	r3,r3,1
  8071bc:	8c7fffc4 	addi	r17,r17,-1
  8071c0:	29803fcc 	andi	r6,r5,255
  8071c4:	3180201c 	xori	r6,r6,128
  8071c8:	31bfe004 	addi	r6,r6,-128
  8071cc:	303ff51e 	bne	r6,zero,8071a4 <__alt_data_end+0xff8071a4>
  8071d0:	94803fcc 	andi	r18,r18,255
  8071d4:	9480201c 	xori	r18,r18,128
  8071d8:	94bfe004 	addi	r18,r18,-128
  8071dc:	008019c4 	movi	r2,103
  8071e0:	90802c26 	beq	r18,r2,807294 <print_e+0x194>
  8071e4:	008011c4 	movi	r2,71
  8071e8:	90803326 	beq	r18,r2,8072b8 <print_e+0x1b8>
  8071ec:	0440060e 	bge	zero,r17,807208 <print_e+0x108>
  8071f0:	1805883a 	mov	r2,r3
  8071f4:	01400c04 	movi	r5,48
  8071f8:	1c47883a 	add	r3,r3,r17
  8071fc:	11400005 	stb	r5,0(r2)
  807200:	10800044 	addi	r2,r2,1
  807204:	18bffd1e 	bne	r3,r2,8071fc <__alt_data_end+0xff8071fc>
  807208:	19c00005 	stb	r7,0(r3)
  80720c:	243fffc4 	addi	r16,r4,-1
  807210:	1c400084 	addi	r17,r3,2
  807214:	80002416 	blt	r16,zero,8072a8 <print_e+0x1a8>
  807218:	00800ac4 	movi	r2,43
  80721c:	18800045 	stb	r2,1(r3)
  807220:	008018c4 	movi	r2,99
  807224:	1400080e 	bge	r2,r16,807248 <print_e+0x148>
  807228:	8009883a 	mov	r4,r16
  80722c:	01401904 	movi	r5,100
  807230:	0802f000 	call	802f00 <__divsi3>
  807234:	10ffe724 	muli	r3,r2,-100
  807238:	10800c04 	addi	r2,r2,48
  80723c:	88800005 	stb	r2,0(r17)
  807240:	80e1883a 	add	r16,r16,r3
  807244:	8c400044 	addi	r17,r17,1
  807248:	8009883a 	mov	r4,r16
  80724c:	01400284 	movi	r5,10
  807250:	0802f000 	call	802f00 <__divsi3>
  807254:	10fffda4 	muli	r3,r2,-10
  807258:	10800c04 	addi	r2,r2,48
  80725c:	88800005 	stb	r2,0(r17)
  807260:	1c21883a 	add	r16,r3,r16
  807264:	84000c04 	addi	r16,r16,48
  807268:	8c000045 	stb	r16,1(r17)
  80726c:	88000085 	stb	zero,2(r17)
  807270:	dfc00a17 	ldw	ra,40(sp)
  807274:	dc800917 	ldw	r18,36(sp)
  807278:	dc400817 	ldw	r17,32(sp)
  80727c:	dc000717 	ldw	r16,28(sp)
  807280:	dec00b04 	addi	sp,sp,44
  807284:	f800283a 	ret
  807288:	883fba1e 	bne	r17,zero,807174 <__alt_data_end+0xff807174>
  80728c:	80c00044 	addi	r3,r16,1
  807290:	003fcf06 	br	8071d0 <__alt_data_end+0xff8071d0>
  807294:	01c01944 	movi	r7,101
  807298:	19c00005 	stb	r7,0(r3)
  80729c:	243fffc4 	addi	r16,r4,-1
  8072a0:	1c400084 	addi	r17,r3,2
  8072a4:	803fdc0e 	bge	r16,zero,807218 <__alt_data_end+0xff807218>
  8072a8:	00800b44 	movi	r2,45
  8072ac:	18800045 	stb	r2,1(r3)
  8072b0:	0421c83a 	sub	r16,zero,r16
  8072b4:	003fda06 	br	807220 <__alt_data_end+0xff807220>
  8072b8:	01c01144 	movi	r7,69
  8072bc:	003fd206 	br	807208 <__alt_data_end+0xff807208>
  8072c0:	100b883a 	mov	r5,r2
  8072c4:	8009883a 	mov	r4,r16
  8072c8:	080a9b80 	call	80a9b8 <strcpy>
  8072cc:	003fe806 	br	807270 <__alt_data_end+0xff807270>

008072d0 <fcvtbuf>:
  8072d0:	defff304 	addi	sp,sp,-52
  8072d4:	dc000515 	stw	r16,20(sp)
  8072d8:	dc000e17 	ldw	r16,56(sp)
  8072dc:	00802074 	movhi	r2,129
  8072e0:	dd400a15 	stw	r21,40(sp)
  8072e4:	dd000915 	stw	r20,36(sp)
  8072e8:	dcc00815 	stw	r19,32(sp)
  8072ec:	dc800715 	stw	r18,28(sp)
  8072f0:	dc400615 	stw	r17,24(sp)
  8072f4:	10867304 	addi	r2,r2,6604
  8072f8:	dfc00c15 	stw	ra,48(sp)
  8072fc:	dd800b15 	stw	r22,44(sp)
  807300:	2027883a 	mov	r19,r4
  807304:	2825883a 	mov	r18,r5
  807308:	3023883a 	mov	r17,r6
  80730c:	3829883a 	mov	r20,r7
  807310:	15400017 	ldw	r21,0(r2)
  807314:	80004426 	beq	r16,zero,807428 <fcvtbuf+0x158>
  807318:	000d883a 	mov	r6,zero
  80731c:	01cffc34 	movhi	r7,16368
  807320:	9809883a 	mov	r4,r19
  807324:	900b883a 	mov	r5,r18
  807328:	080d0a80 	call	80d0a8 <__ledf2>
  80732c:	10002c16 	blt	r2,zero,8073e0 <fcvtbuf+0x110>
  807330:	d8800404 	addi	r2,sp,16
  807334:	d8800315 	stw	r2,12(sp)
  807338:	d8800d17 	ldw	r2,52(sp)
  80733c:	dd000115 	stw	r20,4(sp)
  807340:	dc400015 	stw	r17,0(sp)
  807344:	d8800215 	stw	r2,8(sp)
  807348:	01c000c4 	movi	r7,3
  80734c:	980b883a 	mov	r5,r19
  807350:	900d883a 	mov	r6,r18
  807354:	a809883a 	mov	r4,r21
  807358:	080af140 	call	80af14 <_dtoa_r>
  80735c:	a1400017 	ldw	r5,0(r20)
  807360:	d8c00417 	ldw	r3,16(sp)
  807364:	014bc83a 	sub	r5,zero,r5
  807368:	10c0342e 	bgeu	r2,r3,80743c <fcvtbuf+0x16c>
  80736c:	8007883a 	mov	r3,r16
  807370:	11800003 	ldbu	r6,0(r2)
  807374:	19000044 	addi	r4,r3,1
  807378:	10800044 	addi	r2,r2,1
  80737c:	19800005 	stb	r6,0(r3)
  807380:	d9800417 	ldw	r6,16(sp)
  807384:	29400044 	addi	r5,r5,1
  807388:	2007883a 	mov	r3,r4
  80738c:	11bff836 	bltu	r2,r6,807370 <__alt_data_end+0xff807370>
  807390:	2c40070e 	bge	r5,r17,8073b0 <fcvtbuf+0xe0>
  807394:	894bc83a 	sub	r5,r17,r5
  807398:	2007883a 	mov	r3,r4
  80739c:	00800c04 	movi	r2,48
  8073a0:	2149883a 	add	r4,r4,r5
  8073a4:	18800005 	stb	r2,0(r3)
  8073a8:	18c00044 	addi	r3,r3,1
  8073ac:	20fffd1e 	bne	r4,r3,8073a4 <__alt_data_end+0xff8073a4>
  8073b0:	20000005 	stb	zero,0(r4)
  8073b4:	8005883a 	mov	r2,r16
  8073b8:	dfc00c17 	ldw	ra,48(sp)
  8073bc:	dd800b17 	ldw	r22,44(sp)
  8073c0:	dd400a17 	ldw	r21,40(sp)
  8073c4:	dd000917 	ldw	r20,36(sp)
  8073c8:	dcc00817 	ldw	r19,32(sp)
  8073cc:	dc800717 	ldw	r18,28(sp)
  8073d0:	dc400617 	ldw	r17,24(sp)
  8073d4:	dc000517 	ldw	r16,20(sp)
  8073d8:	dec00d04 	addi	sp,sp,52
  8073dc:	f800283a 	ret
  8073e0:	000d883a 	mov	r6,zero
  8073e4:	01effc34 	movhi	r7,49136
  8073e8:	9809883a 	mov	r4,r19
  8073ec:	900b883a 	mov	r5,r18
  8073f0:	080579c0 	call	80579c <__gedf2>
  8073f4:	00bfce0e 	bge	zero,r2,807330 <__alt_data_end+0xff807330>
  8073f8:	d8800404 	addi	r2,sp,16
  8073fc:	d8800315 	stw	r2,12(sp)
  807400:	d8800d17 	ldw	r2,52(sp)
  807404:	dd000115 	stw	r20,4(sp)
  807408:	dc400015 	stw	r17,0(sp)
  80740c:	d8800215 	stw	r2,8(sp)
  807410:	01c00084 	movi	r7,2
  807414:	980b883a 	mov	r5,r19
  807418:	900d883a 	mov	r6,r18
  80741c:	a809883a 	mov	r4,r21
  807420:	080af140 	call	80af14 <_dtoa_r>
  807424:	003fcd06 	br	80735c <__alt_data_end+0xff80735c>
  807428:	a8801417 	ldw	r2,80(r21)
  80742c:	30c008c4 	addi	r3,r6,35
  807430:	1880040e 	bge	r3,r2,807444 <fcvtbuf+0x174>
  807434:	ac001517 	ldw	r16,84(r21)
  807438:	003fb706 	br	807318 <__alt_data_end+0xff807318>
  80743c:	8009883a 	mov	r4,r16
  807440:	003fd306 	br	807390 <__alt_data_end+0xff807390>
  807444:	a9401517 	ldw	r5,84(r21)
  807448:	35800904 	addi	r22,r6,36
  80744c:	b00d883a 	mov	r6,r22
  807450:	a809883a 	mov	r4,r21
  807454:	080a2c40 	call	80a2c4 <_realloc_r>
  807458:	1021883a 	mov	r16,r2
  80745c:	10000326 	beq	r2,zero,80746c <fcvtbuf+0x19c>
  807460:	ad801415 	stw	r22,80(r21)
  807464:	a8801515 	stw	r2,84(r21)
  807468:	003fab06 	br	807318 <__alt_data_end+0xff807318>
  80746c:	0005883a 	mov	r2,zero
  807470:	003fd106 	br	8073b8 <__alt_data_end+0xff8073b8>

00807474 <ecvtbuf>:
  807474:	defff304 	addi	sp,sp,-52
  807478:	dc000615 	stw	r16,24(sp)
  80747c:	dc000e17 	ldw	r16,56(sp)
  807480:	00802074 	movhi	r2,129
  807484:	dd000a15 	stw	r20,40(sp)
  807488:	dcc00915 	stw	r19,36(sp)
  80748c:	dc800815 	stw	r18,32(sp)
  807490:	dc400715 	stw	r17,28(sp)
  807494:	10867304 	addi	r2,r2,6604
  807498:	dfc00c15 	stw	ra,48(sp)
  80749c:	dd400b15 	stw	r21,44(sp)
  8074a0:	2029883a 	mov	r20,r4
  8074a4:	2827883a 	mov	r19,r5
  8074a8:	3023883a 	mov	r17,r6
  8074ac:	14800017 	ldw	r18,0(r2)
  8074b0:	80002b26 	beq	r16,zero,807560 <ecvtbuf+0xec>
  8074b4:	d8800404 	addi	r2,sp,16
  8074b8:	d8800315 	stw	r2,12(sp)
  8074bc:	d8800d17 	ldw	r2,52(sp)
  8074c0:	d9c00115 	stw	r7,4(sp)
  8074c4:	dc400015 	stw	r17,0(sp)
  8074c8:	d8800215 	stw	r2,8(sp)
  8074cc:	01c00084 	movi	r7,2
  8074d0:	a00b883a 	mov	r5,r20
  8074d4:	980d883a 	mov	r6,r19
  8074d8:	9009883a 	mov	r4,r18
  8074dc:	080af140 	call	80af14 <_dtoa_r>
  8074e0:	d8c00417 	ldw	r3,16(sp)
  8074e4:	10c0222e 	bgeu	r2,r3,807570 <ecvtbuf+0xfc>
  8074e8:	01800044 	movi	r6,1
  8074ec:	8007883a 	mov	r3,r16
  8074f0:	340dc83a 	sub	r6,r6,r16
  8074f4:	11400003 	ldbu	r5,0(r2)
  8074f8:	19000044 	addi	r4,r3,1
  8074fc:	10800044 	addi	r2,r2,1
  807500:	19400005 	stb	r5,0(r3)
  807504:	d9400417 	ldw	r5,16(sp)
  807508:	30cf883a 	add	r7,r6,r3
  80750c:	2007883a 	mov	r3,r4
  807510:	117ff836 	bltu	r2,r5,8074f4 <__alt_data_end+0xff8074f4>
  807514:	3c40070e 	bge	r7,r17,807534 <ecvtbuf+0xc0>
  807518:	89cfc83a 	sub	r7,r17,r7
  80751c:	2007883a 	mov	r3,r4
  807520:	01400c04 	movi	r5,48
  807524:	21c9883a 	add	r4,r4,r7
  807528:	19400005 	stb	r5,0(r3)
  80752c:	18c00044 	addi	r3,r3,1
  807530:	20fffd1e 	bne	r4,r3,807528 <__alt_data_end+0xff807528>
  807534:	20000005 	stb	zero,0(r4)
  807538:	8005883a 	mov	r2,r16
  80753c:	dfc00c17 	ldw	ra,48(sp)
  807540:	dd400b17 	ldw	r21,44(sp)
  807544:	dd000a17 	ldw	r20,40(sp)
  807548:	dcc00917 	ldw	r19,36(sp)
  80754c:	dc800817 	ldw	r18,32(sp)
  807550:	dc400717 	ldw	r17,28(sp)
  807554:	dc000617 	ldw	r16,24(sp)
  807558:	dec00d04 	addi	sp,sp,52
  80755c:	f800283a 	ret
  807560:	90801417 	ldw	r2,80(r18)
  807564:	3080050e 	bge	r6,r2,80757c <ecvtbuf+0x108>
  807568:	94001517 	ldw	r16,84(r18)
  80756c:	003fd106 	br	8074b4 <__alt_data_end+0xff8074b4>
  807570:	8009883a 	mov	r4,r16
  807574:	000f883a 	mov	r7,zero
  807578:	003fe606 	br	807514 <__alt_data_end+0xff807514>
  80757c:	91401517 	ldw	r5,84(r18)
  807580:	35400044 	addi	r21,r6,1
  807584:	a80d883a 	mov	r6,r21
  807588:	9009883a 	mov	r4,r18
  80758c:	d9c00515 	stw	r7,20(sp)
  807590:	080a2c40 	call	80a2c4 <_realloc_r>
  807594:	1021883a 	mov	r16,r2
  807598:	d9c00517 	ldw	r7,20(sp)
  80759c:	10000326 	beq	r2,zero,8075ac <ecvtbuf+0x138>
  8075a0:	95401415 	stw	r21,80(r18)
  8075a4:	90801515 	stw	r2,84(r18)
  8075a8:	003fc206 	br	8074b4 <__alt_data_end+0xff8074b4>
  8075ac:	0005883a 	mov	r2,zero
  8075b0:	003fe206 	br	80753c <__alt_data_end+0xff80753c>

008075b4 <_gcvt>:
  8075b4:	defff204 	addi	sp,sp,-56
  8075b8:	dc800915 	stw	r18,36(sp)
  8075bc:	3025883a 	mov	r18,r6
  8075c0:	dd400c15 	stw	r21,48(sp)
  8075c4:	dcc00a15 	stw	r19,40(sp)
  8075c8:	dc400815 	stw	r17,32(sp)
  8075cc:	2827883a 	mov	r19,r5
  8075d0:	202b883a 	mov	r21,r4
  8075d4:	3823883a 	mov	r17,r7
  8075d8:	2809883a 	mov	r4,r5
  8075dc:	000d883a 	mov	r6,zero
  8075e0:	000f883a 	mov	r7,zero
  8075e4:	900b883a 	mov	r5,r18
  8075e8:	dd000b15 	stw	r20,44(sp)
  8075ec:	dc000715 	stw	r16,28(sp)
  8075f0:	dfc00d15 	stw	ra,52(sp)
  8075f4:	dc000e17 	ldw	r16,56(sp)
  8075f8:	dd000f17 	ldw	r20,60(sp)
  8075fc:	080d0a80 	call	80d0a8 <__ledf2>
  807600:	10009d16 	blt	r2,zero,807878 <_gcvt+0x2c4>
  807604:	000d883a 	mov	r6,zero
  807608:	000f883a 	mov	r7,zero
  80760c:	9809883a 	mov	r4,r19
  807610:	900b883a 	mov	r5,r18
  807614:	08057140 	call	805714 <__eqdf2>
  807618:	10009326 	beq	r2,zero,807868 <_gcvt+0x2b4>
  80761c:	01bac734 	movhi	r6,60188
  807620:	01cfc6b4 	movhi	r7,16154
  807624:	3190cb44 	addi	r6,r6,17197
  807628:	39cdb884 	addi	r7,r7,14050
  80762c:	9809883a 	mov	r4,r19
  807630:	900b883a 	mov	r5,r18
  807634:	080d0a80 	call	80d0a8 <__ledf2>
  807638:	0080740e 	bge	zero,r2,80780c <_gcvt+0x258>
  80763c:	8809883a 	mov	r4,r17
  807640:	080a14c0 	call	80a14c <_mprec_log10>
  807644:	100d883a 	mov	r6,r2
  807648:	180f883a 	mov	r7,r3
  80764c:	9809883a 	mov	r4,r19
  807650:	900b883a 	mov	r5,r18
  807654:	080579c0 	call	80579c <__gedf2>
  807658:	10006c0e 	bge	r2,zero,80780c <_gcvt+0x258>
  80765c:	000d883a 	mov	r6,zero
  807660:	01cffc34 	movhi	r7,16368
  807664:	9809883a 	mov	r4,r19
  807668:	900b883a 	mov	r5,r18
  80766c:	080d0a80 	call	80d0a8 <__ledf2>
  807670:	10008316 	blt	r2,zero,807880 <_gcvt+0x2cc>
  807674:	d8800404 	addi	r2,sp,16
  807678:	d8800315 	stw	r2,12(sp)
  80767c:	d8800504 	addi	r2,sp,20
  807680:	d8800215 	stw	r2,8(sp)
  807684:	d8800604 	addi	r2,sp,24
  807688:	d8800115 	stw	r2,4(sp)
  80768c:	dc400015 	stw	r17,0(sp)
  807690:	01c00084 	movi	r7,2
  807694:	980b883a 	mov	r5,r19
  807698:	900d883a 	mov	r6,r18
  80769c:	a809883a 	mov	r4,r21
  8076a0:	080af140 	call	80af14 <_dtoa_r>
  8076a4:	d9400617 	ldw	r5,24(sp)
  8076a8:	00c9c3c4 	movi	r3,9999
  8076ac:	28c08b26 	beq	r5,r3,8078dc <_gcvt+0x328>
  8076b0:	11c00003 	ldbu	r7,0(r2)
  8076b4:	38c03fcc 	andi	r3,r7,255
  8076b8:	18c0201c 	xori	r3,r3,128
  8076bc:	18ffe004 	addi	r3,r3,-128
  8076c0:	18008a26 	beq	r3,zero,8078ec <_gcvt+0x338>
  8076c4:	01408d0e 	bge	zero,r5,8078fc <_gcvt+0x348>
  8076c8:	8011883a 	mov	r8,r16
  8076cc:	280d883a 	mov	r6,r5
  8076d0:	00000206 	br	8076dc <_gcvt+0x128>
  8076d4:	2011883a 	mov	r8,r4
  8076d8:	30001926 	beq	r6,zero,807740 <_gcvt+0x18c>
  8076dc:	31bfffc4 	addi	r6,r6,-1
  8076e0:	41c00005 	stb	r7,0(r8)
  8076e4:	d9800615 	stw	r6,24(sp)
  8076e8:	10800044 	addi	r2,r2,1
  8076ec:	11c00003 	ldbu	r7,0(r2)
  8076f0:	41000044 	addi	r4,r8,1
  8076f4:	3147c83a 	sub	r3,r6,r5
  8076f8:	3a003fcc 	andi	r8,r7,255
  8076fc:	4200201c 	xori	r8,r8,128
  807700:	423fe004 	addi	r8,r8,-128
  807704:	1c47883a 	add	r3,r3,r17
  807708:	403ff21e 	bne	r8,zero,8076d4 <__alt_data_end+0xff8076d4>
  80770c:	01800c0e 	bge	zero,r6,807740 <_gcvt+0x18c>
  807710:	200f883a 	mov	r7,r4
  807714:	00c00a0e 	bge	zero,r3,807740 <_gcvt+0x18c>
  807718:	01400c04 	movi	r5,48
  80771c:	00000206 	br	807728 <_gcvt+0x174>
  807720:	200f883a 	mov	r7,r4
  807724:	18006326 	beq	r3,zero,8078b4 <_gcvt+0x300>
  807728:	39400005 	stb	r5,0(r7)
  80772c:	31bfffc4 	addi	r6,r6,-1
  807730:	21000044 	addi	r4,r4,1
  807734:	18ffffc4 	addi	r3,r3,-1
  807738:	303ff91e 	bne	r6,zero,807720 <__alt_data_end+0xff807720>
  80773c:	d8000615 	stw	zero,24(sp)
  807740:	d9401017 	ldw	r5,64(sp)
  807744:	2800021e 	bne	r5,zero,807750 <_gcvt+0x19c>
  807748:	11400007 	ldb	r5,0(r2)
  80774c:	28002d26 	beq	r5,zero,807804 <_gcvt+0x250>
  807750:	81005e26 	beq	r16,r4,8078cc <_gcvt+0x318>
  807754:	d9800617 	ldw	r6,24(sp)
  807758:	01400b84 	movi	r5,46
  80775c:	21400005 	stb	r5,0(r4)
  807760:	21c00044 	addi	r7,r4,1
  807764:	3000680e 	bge	r6,zero,807908 <_gcvt+0x354>
  807768:	00c0690e 	bge	zero,r3,807910 <_gcvt+0x35c>
  80776c:	01400c04 	movi	r5,48
  807770:	00000206 	br	80777c <_gcvt+0x1c8>
  807774:	200f883a 	mov	r7,r4
  807778:	18005026 	beq	r3,zero,8078bc <_gcvt+0x308>
  80777c:	39400005 	stb	r5,0(r7)
  807780:	31800044 	addi	r6,r6,1
  807784:	39000044 	addi	r4,r7,1
  807788:	18ffffc4 	addi	r3,r3,-1
  80778c:	303ff91e 	bne	r6,zero,807774 <__alt_data_end+0xff807774>
  807790:	d8000615 	stw	zero,24(sp)
  807794:	11800003 	ldbu	r6,0(r2)
  807798:	31403fcc 	andi	r5,r6,255
  80779c:	2940201c 	xori	r5,r5,128
  8077a0:	297fe004 	addi	r5,r5,-128
  8077a4:	28000e26 	beq	r5,zero,8077e0 <_gcvt+0x22c>
  8077a8:	200b883a 	mov	r5,r4
  8077ac:	00c00316 	blt	zero,r3,8077bc <_gcvt+0x208>
  8077b0:	00001406 	br	807804 <_gcvt+0x250>
  8077b4:	200b883a 	mov	r5,r4
  8077b8:	18001226 	beq	r3,zero,807804 <_gcvt+0x250>
  8077bc:	29800005 	stb	r6,0(r5)
  8077c0:	10800044 	addi	r2,r2,1
  8077c4:	11800003 	ldbu	r6,0(r2)
  8077c8:	21000044 	addi	r4,r4,1
  8077cc:	18ffffc4 	addi	r3,r3,-1
  8077d0:	31403fcc 	andi	r5,r6,255
  8077d4:	2940201c 	xori	r5,r5,128
  8077d8:	297fe004 	addi	r5,r5,-128
  8077dc:	283ff51e 	bne	r5,zero,8077b4 <__alt_data_end+0xff8077b4>
  8077e0:	d8801017 	ldw	r2,64(sp)
  8077e4:	10000726 	beq	r2,zero,807804 <_gcvt+0x250>
  8077e8:	00c0060e 	bge	zero,r3,807804 <_gcvt+0x250>
  8077ec:	2005883a 	mov	r2,r4
  8077f0:	01400c04 	movi	r5,48
  8077f4:	20c9883a 	add	r4,r4,r3
  8077f8:	11400005 	stb	r5,0(r2)
  8077fc:	10800044 	addi	r2,r2,1
  807800:	20bffd1e 	bne	r4,r2,8077f8 <__alt_data_end+0xff8077f8>
  807804:	20000005 	stb	zero,0(r4)
  807808:	00000d06 	br	807840 <_gcvt+0x28c>
  80780c:	a5003fcc 	andi	r20,r20,255
  807810:	d8801017 	ldw	r2,64(sp)
  807814:	a500201c 	xori	r20,r20,128
  807818:	a53fe004 	addi	r20,r20,-128
  80781c:	8c7fffc4 	addi	r17,r17,-1
  807820:	d8800215 	stw	r2,8(sp)
  807824:	dd000115 	stw	r20,4(sp)
  807828:	dc400015 	stw	r17,0(sp)
  80782c:	980d883a 	mov	r6,r19
  807830:	900f883a 	mov	r7,r18
  807834:	800b883a 	mov	r5,r16
  807838:	a809883a 	mov	r4,r21
  80783c:	08071000 	call	807100 <print_e>
  807840:	8005883a 	mov	r2,r16
  807844:	dfc00d17 	ldw	ra,52(sp)
  807848:	dd400c17 	ldw	r21,48(sp)
  80784c:	dd000b17 	ldw	r20,44(sp)
  807850:	dcc00a17 	ldw	r19,40(sp)
  807854:	dc800917 	ldw	r18,36(sp)
  807858:	dc400817 	ldw	r17,32(sp)
  80785c:	dc000717 	ldw	r16,28(sp)
  807860:	dec00e04 	addi	sp,sp,56
  807864:	f800283a 	ret
  807868:	00800c04 	movi	r2,48
  80786c:	80800005 	stb	r2,0(r16)
  807870:	80000045 	stb	zero,1(r16)
  807874:	003ff206 	br	807840 <__alt_data_end+0xff807840>
  807878:	94a0003c 	xorhi	r18,r18,32768
  80787c:	003f6106 	br	807604 <__alt_data_end+0xff807604>
  807880:	d8800504 	addi	r2,sp,20
  807884:	d9400404 	addi	r5,sp,16
  807888:	d8800215 	stw	r2,8(sp)
  80788c:	d8800604 	addi	r2,sp,24
  807890:	d9400315 	stw	r5,12(sp)
  807894:	d8800115 	stw	r2,4(sp)
  807898:	dc400015 	stw	r17,0(sp)
  80789c:	01c000c4 	movi	r7,3
  8078a0:	980b883a 	mov	r5,r19
  8078a4:	900d883a 	mov	r6,r18
  8078a8:	a809883a 	mov	r4,r21
  8078ac:	080af140 	call	80af14 <_dtoa_r>
  8078b0:	003f7c06 	br	8076a4 <__alt_data_end+0xff8076a4>
  8078b4:	d9800615 	stw	r6,24(sp)
  8078b8:	003fa106 	br	807740 <__alt_data_end+0xff807740>
  8078bc:	d9800615 	stw	r6,24(sp)
  8078c0:	10800007 	ldb	r2,0(r2)
  8078c4:	103fc626 	beq	r2,zero,8077e0 <__alt_data_end+0xff8077e0>
  8078c8:	003fce06 	br	807804 <__alt_data_end+0xff807804>
  8078cc:	01400c04 	movi	r5,48
  8078d0:	81000044 	addi	r4,r16,1
  8078d4:	81400005 	stb	r5,0(r16)
  8078d8:	003f9e06 	br	807754 <__alt_data_end+0xff807754>
  8078dc:	100b883a 	mov	r5,r2
  8078e0:	8009883a 	mov	r4,r16
  8078e4:	080a9b80 	call	80a9b8 <strcpy>
  8078e8:	003fd506 	br	807840 <__alt_data_end+0xff807840>
  8078ec:	280d883a 	mov	r6,r5
  8078f0:	8009883a 	mov	r4,r16
  8078f4:	8807883a 	mov	r3,r17
  8078f8:	003f8406 	br	80770c <__alt_data_end+0xff80770c>
  8078fc:	8009883a 	mov	r4,r16
  807900:	8807883a 	mov	r3,r17
  807904:	003f8e06 	br	807740 <__alt_data_end+0xff807740>
  807908:	3809883a 	mov	r4,r7
  80790c:	003fa106 	br	807794 <__alt_data_end+0xff807794>
  807910:	3809883a 	mov	r4,r7
  807914:	003fea06 	br	8078c0 <__alt_data_end+0xff8078c0>

00807918 <_dcvt>:
  807918:	defff504 	addi	sp,sp,-44
  80791c:	da000d17 	ldw	r8,52(sp)
  807920:	dc800915 	stw	r18,36(sp)
  807924:	dc000715 	stw	r16,28(sp)
  807928:	40bfeec4 	addi	r2,r8,-69
  80792c:	dfc00a15 	stw	ra,40(sp)
  807930:	dc400815 	stw	r17,32(sp)
  807934:	10803fcc 	andi	r2,r2,255
  807938:	00c00884 	movi	r3,34
  80793c:	2825883a 	mov	r18,r5
  807940:	dc000b17 	ldw	r16,44(sp)
  807944:	18802c36 	bltu	r3,r2,8079f8 <_dcvt+0xe0>
  807948:	100490ba 	slli	r2,r2,2
  80794c:	00c02034 	movhi	r3,128
  807950:	18de5904 	addi	r3,r3,31076
  807954:	10c5883a 	add	r2,r2,r3
  807958:	10800017 	ldw	r2,0(r2)
  80795c:	3813883a 	mov	r9,r7
  807960:	1000683a 	jmp	r2
  807964:	00807bbc 	xorhi	r2,zero,494
  807968:	00807a4c 	andi	r2,zero,489
  80796c:	00807a14 	movui	r2,488
  807970:	008079f8 	rdprs	r2,zero,487
  807974:	008079f8 	rdprs	r2,zero,487
  807978:	008079f8 	rdprs	r2,zero,487
  80797c:	008079f8 	rdprs	r2,zero,487
  807980:	008079f8 	rdprs	r2,zero,487
  807984:	008079f8 	rdprs	r2,zero,487
  807988:	008079f8 	rdprs	r2,zero,487
  80798c:	008079f8 	rdprs	r2,zero,487
  807990:	008079f8 	rdprs	r2,zero,487
  807994:	008079f8 	rdprs	r2,zero,487
  807998:	008079f8 	rdprs	r2,zero,487
  80799c:	008079f8 	rdprs	r2,zero,487
  8079a0:	008079f8 	rdprs	r2,zero,487
  8079a4:	008079f8 	rdprs	r2,zero,487
  8079a8:	008079f8 	rdprs	r2,zero,487
  8079ac:	008079f8 	rdprs	r2,zero,487
  8079b0:	008079f8 	rdprs	r2,zero,487
  8079b4:	008079f8 	rdprs	r2,zero,487
  8079b8:	008079f8 	rdprs	r2,zero,487
  8079bc:	008079f8 	rdprs	r2,zero,487
  8079c0:	008079f8 	rdprs	r2,zero,487
  8079c4:	008079f8 	rdprs	r2,zero,487
  8079c8:	008079f8 	rdprs	r2,zero,487
  8079cc:	008079f8 	rdprs	r2,zero,487
  8079d0:	008079f8 	rdprs	r2,zero,487
  8079d4:	008079f8 	rdprs	r2,zero,487
  8079d8:	008079f8 	rdprs	r2,zero,487
  8079dc:	008079f8 	rdprs	r2,zero,487
  8079e0:	008079f8 	rdprs	r2,zero,487
  8079e4:	00807bbc 	xorhi	r2,zero,494
  8079e8:	00807a4c 	andi	r2,zero,489
  8079ec:	00807a14 	movui	r2,488
  8079f0:	1007883a 	mov	r3,r2
  8079f4:	18000005 	stb	zero,0(r3)
  8079f8:	9005883a 	mov	r2,r18
  8079fc:	dfc00a17 	ldw	ra,40(sp)
  807a00:	dc800917 	ldw	r18,36(sp)
  807a04:	dc400817 	ldw	r17,32(sp)
  807a08:	dc000717 	ldw	r16,28(sp)
  807a0c:	dec00b04 	addi	sp,sp,44
  807a10:	f800283a 	ret
  807a14:	8000011e 	bne	r16,zero,807a1c <_dcvt+0x104>
  807a18:	04000044 	movi	r16,1
  807a1c:	d8800e17 	ldw	r2,56(sp)
  807a20:	42003fcc 	andi	r8,r8,255
  807a24:	4200201c 	xori	r8,r8,128
  807a28:	423fe004 	addi	r8,r8,-128
  807a2c:	300b883a 	mov	r5,r6
  807a30:	d8800215 	stw	r2,8(sp)
  807a34:	da000115 	stw	r8,4(sp)
  807a38:	dc800015 	stw	r18,0(sp)
  807a3c:	800f883a 	mov	r7,r16
  807a40:	480d883a 	mov	r6,r9
  807a44:	08075b40 	call	8075b4 <_gcvt>
  807a48:	003feb06 	br	8079f8 <__alt_data_end+0xff8079f8>
  807a4c:	8000641e 	bne	r16,zero,807be0 <_dcvt+0x2c8>
  807a50:	dc400e17 	ldw	r17,56(sp)
  807a54:	d8800404 	addi	r2,sp,16
  807a58:	d8800315 	stw	r2,12(sp)
  807a5c:	d8800504 	addi	r2,sp,20
  807a60:	d8800215 	stw	r2,8(sp)
  807a64:	d8800604 	addi	r2,sp,24
  807a68:	300b883a 	mov	r5,r6
  807a6c:	d8800115 	stw	r2,4(sp)
  807a70:	480d883a 	mov	r6,r9
  807a74:	dc000015 	stw	r16,0(sp)
  807a78:	01c000c4 	movi	r7,3
  807a7c:	080af140 	call	80af14 <_dtoa_r>
  807a80:	d9800617 	ldw	r6,24(sp)
  807a84:	00c9c3c4 	movi	r3,9999
  807a88:	30c05b26 	beq	r6,r3,807bf8 <_dcvt+0x2e0>
  807a8c:	11c00003 	ldbu	r7,0(r2)
  807a90:	38c03fcc 	andi	r3,r7,255
  807a94:	18c0201c 	xori	r3,r3,128
  807a98:	18ffe004 	addi	r3,r3,-128
  807a9c:	18005a26 	beq	r3,zero,807c08 <_dcvt+0x2f0>
  807aa0:	01805c0e 	bge	zero,r6,807c14 <_dcvt+0x2fc>
  807aa4:	9011883a 	mov	r8,r18
  807aa8:	1009883a 	mov	r4,r2
  807aac:	00000206 	br	807ab8 <_dcvt+0x1a0>
  807ab0:	1811883a 	mov	r8,r3
  807ab4:	30001226 	beq	r6,zero,807b00 <_dcvt+0x1e8>
  807ab8:	31bfffc4 	addi	r6,r6,-1
  807abc:	41c00005 	stb	r7,0(r8)
  807ac0:	21000044 	addi	r4,r4,1
  807ac4:	d9800615 	stw	r6,24(sp)
  807ac8:	21c00003 	ldbu	r7,0(r4)
  807acc:	40c00044 	addi	r3,r8,1
  807ad0:	3a003fcc 	andi	r8,r7,255
  807ad4:	4200201c 	xori	r8,r8,128
  807ad8:	423fe004 	addi	r8,r8,-128
  807adc:	403ff41e 	bne	r8,zero,807ab0 <__alt_data_end+0xff807ab0>
  807ae0:	0180070e 	bge	zero,r6,807b00 <_dcvt+0x1e8>
  807ae4:	180f883a 	mov	r7,r3
  807ae8:	02000c04 	movi	r8,48
  807aec:	1987883a 	add	r3,r3,r6
  807af0:	3a000005 	stb	r8,0(r7)
  807af4:	39c00044 	addi	r7,r7,1
  807af8:	19fffd1e 	bne	r3,r7,807af0 <__alt_data_end+0xff807af0>
  807afc:	d8000615 	stw	zero,24(sp)
  807b00:	8800021e 	bne	r17,zero,807b0c <_dcvt+0x1f4>
  807b04:	21400007 	ldb	r5,0(r4)
  807b08:	283fba26 	beq	r5,zero,8079f4 <__alt_data_end+0xff8079f4>
  807b0c:	11003626 	beq	r2,r4,807be8 <_dcvt+0x2d0>
  807b10:	d9400617 	ldw	r5,24(sp)
  807b14:	00800b84 	movi	r2,46
  807b18:	18800005 	stb	r2,0(r3)
  807b1c:	18800044 	addi	r2,r3,1
  807b20:	28003f0e 	bge	r5,zero,807c20 <_dcvt+0x308>
  807b24:	043fb20e 	bge	zero,r16,8079f0 <__alt_data_end+0xff8079f0>
  807b28:	01800c04 	movi	r6,48
  807b2c:	00000206 	br	807b38 <_dcvt+0x220>
  807b30:	1805883a 	mov	r2,r3
  807b34:	803faf26 	beq	r16,zero,8079f4 <__alt_data_end+0xff8079f4>
  807b38:	11800005 	stb	r6,0(r2)
  807b3c:	29400044 	addi	r5,r5,1
  807b40:	10c00044 	addi	r3,r2,1
  807b44:	843fffc4 	addi	r16,r16,-1
  807b48:	283ff91e 	bne	r5,zero,807b30 <__alt_data_end+0xff807b30>
  807b4c:	d8000615 	stw	zero,24(sp)
  807b50:	20800003 	ldbu	r2,0(r4)
  807b54:	11403fcc 	andi	r5,r2,255
  807b58:	2940201c 	xori	r5,r5,128
  807b5c:	297fe004 	addi	r5,r5,-128
  807b60:	28000e26 	beq	r5,zero,807b9c <_dcvt+0x284>
  807b64:	043fa30e 	bge	zero,r16,8079f4 <__alt_data_end+0xff8079f4>
  807b68:	180b883a 	mov	r5,r3
  807b6c:	00000206 	br	807b78 <_dcvt+0x260>
  807b70:	180b883a 	mov	r5,r3
  807b74:	803f9f26 	beq	r16,zero,8079f4 <__alt_data_end+0xff8079f4>
  807b78:	28800005 	stb	r2,0(r5)
  807b7c:	21000044 	addi	r4,r4,1
  807b80:	20800003 	ldbu	r2,0(r4)
  807b84:	18c00044 	addi	r3,r3,1
  807b88:	843fffc4 	addi	r16,r16,-1
  807b8c:	11403fcc 	andi	r5,r2,255
  807b90:	2940201c 	xori	r5,r5,128
  807b94:	297fe004 	addi	r5,r5,-128
  807b98:	283ff51e 	bne	r5,zero,807b70 <__alt_data_end+0xff807b70>
  807b9c:	043f950e 	bge	zero,r16,8079f4 <__alt_data_end+0xff8079f4>
  807ba0:	1805883a 	mov	r2,r3
  807ba4:	01000c04 	movi	r4,48
  807ba8:	1c07883a 	add	r3,r3,r16
  807bac:	11000005 	stb	r4,0(r2)
  807bb0:	10800044 	addi	r2,r2,1
  807bb4:	18bffd1e 	bne	r3,r2,807bac <__alt_data_end+0xff807bac>
  807bb8:	003f8e06 	br	8079f4 <__alt_data_end+0xff8079f4>
  807bbc:	d8800e17 	ldw	r2,56(sp)
  807bc0:	42003fcc 	andi	r8,r8,255
  807bc4:	4200201c 	xori	r8,r8,128
  807bc8:	423fe004 	addi	r8,r8,-128
  807bcc:	d8800215 	stw	r2,8(sp)
  807bd0:	da000115 	stw	r8,4(sp)
  807bd4:	dc000015 	stw	r16,0(sp)
  807bd8:	08071000 	call	807100 <print_e>
  807bdc:	003f8606 	br	8079f8 <__alt_data_end+0xff8079f8>
  807be0:	04400044 	movi	r17,1
  807be4:	003f9b06 	br	807a54 <__alt_data_end+0xff807a54>
  807be8:	00800c04 	movi	r2,48
  807bec:	18800005 	stb	r2,0(r3)
  807bf0:	18c00044 	addi	r3,r3,1
  807bf4:	003fc606 	br	807b10 <__alt_data_end+0xff807b10>
  807bf8:	100b883a 	mov	r5,r2
  807bfc:	9009883a 	mov	r4,r18
  807c00:	080a9b80 	call	80a9b8 <strcpy>
  807c04:	003f7c06 	br	8079f8 <__alt_data_end+0xff8079f8>
  807c08:	1009883a 	mov	r4,r2
  807c0c:	9007883a 	mov	r3,r18
  807c10:	003fb306 	br	807ae0 <__alt_data_end+0xff807ae0>
  807c14:	1009883a 	mov	r4,r2
  807c18:	9007883a 	mov	r3,r18
  807c1c:	003fb806 	br	807b00 <__alt_data_end+0xff807b00>
  807c20:	1007883a 	mov	r3,r2
  807c24:	003fca06 	br	807b50 <__alt_data_end+0xff807b50>

00807c28 <__fp_unlock>:
  807c28:	0005883a 	mov	r2,zero
  807c2c:	f800283a 	ret

00807c30 <_cleanup_r>:
  807c30:	01402074 	movhi	r5,129
  807c34:	29716704 	addi	r5,r5,-14948
  807c38:	08085481 	jmpi	808548 <_fwalk_reent>

00807c3c <__sinit.part.1>:
  807c3c:	defff704 	addi	sp,sp,-36
  807c40:	00c02034 	movhi	r3,128
  807c44:	dfc00815 	stw	ra,32(sp)
  807c48:	ddc00715 	stw	r23,28(sp)
  807c4c:	dd800615 	stw	r22,24(sp)
  807c50:	dd400515 	stw	r21,20(sp)
  807c54:	dd000415 	stw	r20,16(sp)
  807c58:	dcc00315 	stw	r19,12(sp)
  807c5c:	dc800215 	stw	r18,8(sp)
  807c60:	dc400115 	stw	r17,4(sp)
  807c64:	dc000015 	stw	r16,0(sp)
  807c68:	18df0c04 	addi	r3,r3,31792
  807c6c:	24000117 	ldw	r16,4(r4)
  807c70:	20c00f15 	stw	r3,60(r4)
  807c74:	2080bb04 	addi	r2,r4,748
  807c78:	00c000c4 	movi	r3,3
  807c7c:	20c0b915 	stw	r3,740(r4)
  807c80:	2080ba15 	stw	r2,744(r4)
  807c84:	2000b815 	stw	zero,736(r4)
  807c88:	05c00204 	movi	r23,8
  807c8c:	00800104 	movi	r2,4
  807c90:	2025883a 	mov	r18,r4
  807c94:	b80d883a 	mov	r6,r23
  807c98:	81001704 	addi	r4,r16,92
  807c9c:	000b883a 	mov	r5,zero
  807ca0:	80000015 	stw	zero,0(r16)
  807ca4:	80000115 	stw	zero,4(r16)
  807ca8:	80000215 	stw	zero,8(r16)
  807cac:	8080030d 	sth	r2,12(r16)
  807cb0:	80001915 	stw	zero,100(r16)
  807cb4:	8000038d 	sth	zero,14(r16)
  807cb8:	80000415 	stw	zero,16(r16)
  807cbc:	80000515 	stw	zero,20(r16)
  807cc0:	80000615 	stw	zero,24(r16)
  807cc4:	08091a00 	call	8091a0 <memset>
  807cc8:	05802074 	movhi	r22,129
  807ccc:	94400217 	ldw	r17,8(r18)
  807cd0:	05402074 	movhi	r21,129
  807cd4:	05002074 	movhi	r20,129
  807cd8:	04c02074 	movhi	r19,129
  807cdc:	b5aa1f04 	addi	r22,r22,-22404
  807ce0:	ad6a3604 	addi	r21,r21,-22312
  807ce4:	a52a5504 	addi	r20,r20,-22188
  807ce8:	9cea6c04 	addi	r19,r19,-22096
  807cec:	85800815 	stw	r22,32(r16)
  807cf0:	85400915 	stw	r21,36(r16)
  807cf4:	85000a15 	stw	r20,40(r16)
  807cf8:	84c00b15 	stw	r19,44(r16)
  807cfc:	84000715 	stw	r16,28(r16)
  807d00:	00800284 	movi	r2,10
  807d04:	8880030d 	sth	r2,12(r17)
  807d08:	00800044 	movi	r2,1
  807d0c:	b80d883a 	mov	r6,r23
  807d10:	89001704 	addi	r4,r17,92
  807d14:	000b883a 	mov	r5,zero
  807d18:	88000015 	stw	zero,0(r17)
  807d1c:	88000115 	stw	zero,4(r17)
  807d20:	88000215 	stw	zero,8(r17)
  807d24:	88001915 	stw	zero,100(r17)
  807d28:	8880038d 	sth	r2,14(r17)
  807d2c:	88000415 	stw	zero,16(r17)
  807d30:	88000515 	stw	zero,20(r17)
  807d34:	88000615 	stw	zero,24(r17)
  807d38:	08091a00 	call	8091a0 <memset>
  807d3c:	94000317 	ldw	r16,12(r18)
  807d40:	00800484 	movi	r2,18
  807d44:	8c400715 	stw	r17,28(r17)
  807d48:	8d800815 	stw	r22,32(r17)
  807d4c:	8d400915 	stw	r21,36(r17)
  807d50:	8d000a15 	stw	r20,40(r17)
  807d54:	8cc00b15 	stw	r19,44(r17)
  807d58:	8080030d 	sth	r2,12(r16)
  807d5c:	00800084 	movi	r2,2
  807d60:	80000015 	stw	zero,0(r16)
  807d64:	80000115 	stw	zero,4(r16)
  807d68:	80000215 	stw	zero,8(r16)
  807d6c:	80001915 	stw	zero,100(r16)
  807d70:	8080038d 	sth	r2,14(r16)
  807d74:	80000415 	stw	zero,16(r16)
  807d78:	80000515 	stw	zero,20(r16)
  807d7c:	80000615 	stw	zero,24(r16)
  807d80:	b80d883a 	mov	r6,r23
  807d84:	000b883a 	mov	r5,zero
  807d88:	81001704 	addi	r4,r16,92
  807d8c:	08091a00 	call	8091a0 <memset>
  807d90:	00800044 	movi	r2,1
  807d94:	84000715 	stw	r16,28(r16)
  807d98:	85800815 	stw	r22,32(r16)
  807d9c:	85400915 	stw	r21,36(r16)
  807da0:	85000a15 	stw	r20,40(r16)
  807da4:	84c00b15 	stw	r19,44(r16)
  807da8:	90800e15 	stw	r2,56(r18)
  807dac:	dfc00817 	ldw	ra,32(sp)
  807db0:	ddc00717 	ldw	r23,28(sp)
  807db4:	dd800617 	ldw	r22,24(sp)
  807db8:	dd400517 	ldw	r21,20(sp)
  807dbc:	dd000417 	ldw	r20,16(sp)
  807dc0:	dcc00317 	ldw	r19,12(sp)
  807dc4:	dc800217 	ldw	r18,8(sp)
  807dc8:	dc400117 	ldw	r17,4(sp)
  807dcc:	dc000017 	ldw	r16,0(sp)
  807dd0:	dec00904 	addi	sp,sp,36
  807dd4:	f800283a 	ret

00807dd8 <__fp_lock>:
  807dd8:	0005883a 	mov	r2,zero
  807ddc:	f800283a 	ret

00807de0 <__sfmoreglue>:
  807de0:	defffc04 	addi	sp,sp,-16
  807de4:	dc400115 	stw	r17,4(sp)
  807de8:	2c7fffc4 	addi	r17,r5,-1
  807dec:	8c401a24 	muli	r17,r17,104
  807df0:	dc800215 	stw	r18,8(sp)
  807df4:	2825883a 	mov	r18,r5
  807df8:	89401d04 	addi	r5,r17,116
  807dfc:	dc000015 	stw	r16,0(sp)
  807e00:	dfc00315 	stw	ra,12(sp)
  807e04:	080860c0 	call	80860c <_malloc_r>
  807e08:	1021883a 	mov	r16,r2
  807e0c:	10000726 	beq	r2,zero,807e2c <__sfmoreglue+0x4c>
  807e10:	11000304 	addi	r4,r2,12
  807e14:	10000015 	stw	zero,0(r2)
  807e18:	14800115 	stw	r18,4(r2)
  807e1c:	11000215 	stw	r4,8(r2)
  807e20:	89801a04 	addi	r6,r17,104
  807e24:	000b883a 	mov	r5,zero
  807e28:	08091a00 	call	8091a0 <memset>
  807e2c:	8005883a 	mov	r2,r16
  807e30:	dfc00317 	ldw	ra,12(sp)
  807e34:	dc800217 	ldw	r18,8(sp)
  807e38:	dc400117 	ldw	r17,4(sp)
  807e3c:	dc000017 	ldw	r16,0(sp)
  807e40:	dec00404 	addi	sp,sp,16
  807e44:	f800283a 	ret

00807e48 <__sfp>:
  807e48:	defffb04 	addi	sp,sp,-20
  807e4c:	dc000015 	stw	r16,0(sp)
  807e50:	04002074 	movhi	r16,129
  807e54:	84067204 	addi	r16,r16,6600
  807e58:	dcc00315 	stw	r19,12(sp)
  807e5c:	2027883a 	mov	r19,r4
  807e60:	81000017 	ldw	r4,0(r16)
  807e64:	dfc00415 	stw	ra,16(sp)
  807e68:	dc800215 	stw	r18,8(sp)
  807e6c:	20800e17 	ldw	r2,56(r4)
  807e70:	dc400115 	stw	r17,4(sp)
  807e74:	1000021e 	bne	r2,zero,807e80 <__sfp+0x38>
  807e78:	0807c3c0 	call	807c3c <__sinit.part.1>
  807e7c:	81000017 	ldw	r4,0(r16)
  807e80:	2480b804 	addi	r18,r4,736
  807e84:	047fffc4 	movi	r17,-1
  807e88:	91000117 	ldw	r4,4(r18)
  807e8c:	94000217 	ldw	r16,8(r18)
  807e90:	213fffc4 	addi	r4,r4,-1
  807e94:	20000a16 	blt	r4,zero,807ec0 <__sfp+0x78>
  807e98:	8080030f 	ldh	r2,12(r16)
  807e9c:	10000c26 	beq	r2,zero,807ed0 <__sfp+0x88>
  807ea0:	80c01d04 	addi	r3,r16,116
  807ea4:	00000206 	br	807eb0 <__sfp+0x68>
  807ea8:	18bfe60f 	ldh	r2,-104(r3)
  807eac:	10000826 	beq	r2,zero,807ed0 <__sfp+0x88>
  807eb0:	213fffc4 	addi	r4,r4,-1
  807eb4:	1c3ffd04 	addi	r16,r3,-12
  807eb8:	18c01a04 	addi	r3,r3,104
  807ebc:	247ffa1e 	bne	r4,r17,807ea8 <__alt_data_end+0xff807ea8>
  807ec0:	90800017 	ldw	r2,0(r18)
  807ec4:	10001d26 	beq	r2,zero,807f3c <__sfp+0xf4>
  807ec8:	1025883a 	mov	r18,r2
  807ecc:	003fee06 	br	807e88 <__alt_data_end+0xff807e88>
  807ed0:	00bfffc4 	movi	r2,-1
  807ed4:	8080038d 	sth	r2,14(r16)
  807ed8:	00800044 	movi	r2,1
  807edc:	8080030d 	sth	r2,12(r16)
  807ee0:	80001915 	stw	zero,100(r16)
  807ee4:	80000015 	stw	zero,0(r16)
  807ee8:	80000215 	stw	zero,8(r16)
  807eec:	80000115 	stw	zero,4(r16)
  807ef0:	80000415 	stw	zero,16(r16)
  807ef4:	80000515 	stw	zero,20(r16)
  807ef8:	80000615 	stw	zero,24(r16)
  807efc:	01800204 	movi	r6,8
  807f00:	000b883a 	mov	r5,zero
  807f04:	81001704 	addi	r4,r16,92
  807f08:	08091a00 	call	8091a0 <memset>
  807f0c:	8005883a 	mov	r2,r16
  807f10:	80000c15 	stw	zero,48(r16)
  807f14:	80000d15 	stw	zero,52(r16)
  807f18:	80001115 	stw	zero,68(r16)
  807f1c:	80001215 	stw	zero,72(r16)
  807f20:	dfc00417 	ldw	ra,16(sp)
  807f24:	dcc00317 	ldw	r19,12(sp)
  807f28:	dc800217 	ldw	r18,8(sp)
  807f2c:	dc400117 	ldw	r17,4(sp)
  807f30:	dc000017 	ldw	r16,0(sp)
  807f34:	dec00504 	addi	sp,sp,20
  807f38:	f800283a 	ret
  807f3c:	01400104 	movi	r5,4
  807f40:	9809883a 	mov	r4,r19
  807f44:	0807de00 	call	807de0 <__sfmoreglue>
  807f48:	90800015 	stw	r2,0(r18)
  807f4c:	103fde1e 	bne	r2,zero,807ec8 <__alt_data_end+0xff807ec8>
  807f50:	00800304 	movi	r2,12
  807f54:	98800015 	stw	r2,0(r19)
  807f58:	0005883a 	mov	r2,zero
  807f5c:	003ff006 	br	807f20 <__alt_data_end+0xff807f20>

00807f60 <_cleanup>:
  807f60:	00802074 	movhi	r2,129
  807f64:	10867204 	addi	r2,r2,6600
  807f68:	11000017 	ldw	r4,0(r2)
  807f6c:	01402074 	movhi	r5,129
  807f70:	29716704 	addi	r5,r5,-14948
  807f74:	08085481 	jmpi	808548 <_fwalk_reent>

00807f78 <__sinit>:
  807f78:	20800e17 	ldw	r2,56(r4)
  807f7c:	10000126 	beq	r2,zero,807f84 <__sinit+0xc>
  807f80:	f800283a 	ret
  807f84:	0807c3c1 	jmpi	807c3c <__sinit.part.1>

00807f88 <__sfp_lock_acquire>:
  807f88:	f800283a 	ret

00807f8c <__sfp_lock_release>:
  807f8c:	f800283a 	ret

00807f90 <__sinit_lock_acquire>:
  807f90:	f800283a 	ret

00807f94 <__sinit_lock_release>:
  807f94:	f800283a 	ret

00807f98 <__fp_lock_all>:
  807f98:	00802074 	movhi	r2,129
  807f9c:	10867304 	addi	r2,r2,6604
  807fa0:	11000017 	ldw	r4,0(r2)
  807fa4:	01402034 	movhi	r5,128
  807fa8:	295f7604 	addi	r5,r5,32216
  807fac:	08084841 	jmpi	808484 <_fwalk>

00807fb0 <__fp_unlock_all>:
  807fb0:	00802074 	movhi	r2,129
  807fb4:	10867304 	addi	r2,r2,6604
  807fb8:	11000017 	ldw	r4,0(r2)
  807fbc:	01402034 	movhi	r5,128
  807fc0:	295f0a04 	addi	r5,r5,31784
  807fc4:	08084841 	jmpi	808484 <_fwalk>

00807fc8 <__sfvwrite_r>:
  807fc8:	30800217 	ldw	r2,8(r6)
  807fcc:	10006726 	beq	r2,zero,80816c <__sfvwrite_r+0x1a4>
  807fd0:	28c0030b 	ldhu	r3,12(r5)
  807fd4:	defff404 	addi	sp,sp,-48
  807fd8:	dd400715 	stw	r21,28(sp)
  807fdc:	dd000615 	stw	r20,24(sp)
  807fe0:	dc000215 	stw	r16,8(sp)
  807fe4:	dfc00b15 	stw	ra,44(sp)
  807fe8:	df000a15 	stw	fp,40(sp)
  807fec:	ddc00915 	stw	r23,36(sp)
  807ff0:	dd800815 	stw	r22,32(sp)
  807ff4:	dcc00515 	stw	r19,20(sp)
  807ff8:	dc800415 	stw	r18,16(sp)
  807ffc:	dc400315 	stw	r17,12(sp)
  808000:	1880020c 	andi	r2,r3,8
  808004:	2821883a 	mov	r16,r5
  808008:	202b883a 	mov	r21,r4
  80800c:	3029883a 	mov	r20,r6
  808010:	10002726 	beq	r2,zero,8080b0 <__sfvwrite_r+0xe8>
  808014:	28800417 	ldw	r2,16(r5)
  808018:	10002526 	beq	r2,zero,8080b0 <__sfvwrite_r+0xe8>
  80801c:	1880008c 	andi	r2,r3,2
  808020:	a4400017 	ldw	r17,0(r20)
  808024:	10002a26 	beq	r2,zero,8080d0 <__sfvwrite_r+0x108>
  808028:	05a00034 	movhi	r22,32768
  80802c:	0027883a 	mov	r19,zero
  808030:	0025883a 	mov	r18,zero
  808034:	b5bf0004 	addi	r22,r22,-1024
  808038:	980d883a 	mov	r6,r19
  80803c:	a809883a 	mov	r4,r21
  808040:	90004626 	beq	r18,zero,80815c <__sfvwrite_r+0x194>
  808044:	900f883a 	mov	r7,r18
  808048:	b480022e 	bgeu	r22,r18,808054 <__sfvwrite_r+0x8c>
  80804c:	01e00034 	movhi	r7,32768
  808050:	39ff0004 	addi	r7,r7,-1024
  808054:	80800917 	ldw	r2,36(r16)
  808058:	81400717 	ldw	r5,28(r16)
  80805c:	103ee83a 	callr	r2
  808060:	0080570e 	bge	zero,r2,8081c0 <__sfvwrite_r+0x1f8>
  808064:	a0c00217 	ldw	r3,8(r20)
  808068:	98a7883a 	add	r19,r19,r2
  80806c:	90a5c83a 	sub	r18,r18,r2
  808070:	1885c83a 	sub	r2,r3,r2
  808074:	a0800215 	stw	r2,8(r20)
  808078:	103fef1e 	bne	r2,zero,808038 <__alt_data_end+0xff808038>
  80807c:	0005883a 	mov	r2,zero
  808080:	dfc00b17 	ldw	ra,44(sp)
  808084:	df000a17 	ldw	fp,40(sp)
  808088:	ddc00917 	ldw	r23,36(sp)
  80808c:	dd800817 	ldw	r22,32(sp)
  808090:	dd400717 	ldw	r21,28(sp)
  808094:	dd000617 	ldw	r20,24(sp)
  808098:	dcc00517 	ldw	r19,20(sp)
  80809c:	dc800417 	ldw	r18,16(sp)
  8080a0:	dc400317 	ldw	r17,12(sp)
  8080a4:	dc000217 	ldw	r16,8(sp)
  8080a8:	dec00c04 	addi	sp,sp,48
  8080ac:	f800283a 	ret
  8080b0:	800b883a 	mov	r5,r16
  8080b4:	a809883a 	mov	r4,r21
  8080b8:	080aaa80 	call	80aaa8 <__swsetup_r>
  8080bc:	1000eb1e 	bne	r2,zero,80846c <__sfvwrite_r+0x4a4>
  8080c0:	80c0030b 	ldhu	r3,12(r16)
  8080c4:	a4400017 	ldw	r17,0(r20)
  8080c8:	1880008c 	andi	r2,r3,2
  8080cc:	103fd61e 	bne	r2,zero,808028 <__alt_data_end+0xff808028>
  8080d0:	1880004c 	andi	r2,r3,1
  8080d4:	10003f1e 	bne	r2,zero,8081d4 <__sfvwrite_r+0x20c>
  8080d8:	0039883a 	mov	fp,zero
  8080dc:	0025883a 	mov	r18,zero
  8080e0:	90001a26 	beq	r18,zero,80814c <__sfvwrite_r+0x184>
  8080e4:	1880800c 	andi	r2,r3,512
  8080e8:	84c00217 	ldw	r19,8(r16)
  8080ec:	10002126 	beq	r2,zero,808174 <__sfvwrite_r+0x1ac>
  8080f0:	982f883a 	mov	r23,r19
  8080f4:	94c09336 	bltu	r18,r19,808344 <__sfvwrite_r+0x37c>
  8080f8:	1881200c 	andi	r2,r3,1152
  8080fc:	10009e1e 	bne	r2,zero,808378 <__sfvwrite_r+0x3b0>
  808100:	81000017 	ldw	r4,0(r16)
  808104:	b80d883a 	mov	r6,r23
  808108:	e00b883a 	mov	r5,fp
  80810c:	08090440 	call	809044 <memmove>
  808110:	80c00217 	ldw	r3,8(r16)
  808114:	81000017 	ldw	r4,0(r16)
  808118:	9005883a 	mov	r2,r18
  80811c:	1ce7c83a 	sub	r19,r3,r19
  808120:	25cf883a 	add	r7,r4,r23
  808124:	84c00215 	stw	r19,8(r16)
  808128:	81c00015 	stw	r7,0(r16)
  80812c:	a0c00217 	ldw	r3,8(r20)
  808130:	e0b9883a 	add	fp,fp,r2
  808134:	90a5c83a 	sub	r18,r18,r2
  808138:	18a7c83a 	sub	r19,r3,r2
  80813c:	a4c00215 	stw	r19,8(r20)
  808140:	983fce26 	beq	r19,zero,80807c <__alt_data_end+0xff80807c>
  808144:	80c0030b 	ldhu	r3,12(r16)
  808148:	903fe61e 	bne	r18,zero,8080e4 <__alt_data_end+0xff8080e4>
  80814c:	8f000017 	ldw	fp,0(r17)
  808150:	8c800117 	ldw	r18,4(r17)
  808154:	8c400204 	addi	r17,r17,8
  808158:	003fe106 	br	8080e0 <__alt_data_end+0xff8080e0>
  80815c:	8cc00017 	ldw	r19,0(r17)
  808160:	8c800117 	ldw	r18,4(r17)
  808164:	8c400204 	addi	r17,r17,8
  808168:	003fb306 	br	808038 <__alt_data_end+0xff808038>
  80816c:	0005883a 	mov	r2,zero
  808170:	f800283a 	ret
  808174:	81000017 	ldw	r4,0(r16)
  808178:	80800417 	ldw	r2,16(r16)
  80817c:	11005736 	bltu	r2,r4,8082dc <__sfvwrite_r+0x314>
  808180:	85c00517 	ldw	r23,20(r16)
  808184:	95c05536 	bltu	r18,r23,8082dc <__sfvwrite_r+0x314>
  808188:	00a00034 	movhi	r2,32768
  80818c:	10bfffc4 	addi	r2,r2,-1
  808190:	9009883a 	mov	r4,r18
  808194:	1480012e 	bgeu	r2,r18,80819c <__sfvwrite_r+0x1d4>
  808198:	1009883a 	mov	r4,r2
  80819c:	b80b883a 	mov	r5,r23
  8081a0:	0802f000 	call	802f00 <__divsi3>
  8081a4:	15cf383a 	mul	r7,r2,r23
  8081a8:	81400717 	ldw	r5,28(r16)
  8081ac:	80800917 	ldw	r2,36(r16)
  8081b0:	e00d883a 	mov	r6,fp
  8081b4:	a809883a 	mov	r4,r21
  8081b8:	103ee83a 	callr	r2
  8081bc:	00bfdb16 	blt	zero,r2,80812c <__alt_data_end+0xff80812c>
  8081c0:	8080030b 	ldhu	r2,12(r16)
  8081c4:	10801014 	ori	r2,r2,64
  8081c8:	8080030d 	sth	r2,12(r16)
  8081cc:	00bfffc4 	movi	r2,-1
  8081d0:	003fab06 	br	808080 <__alt_data_end+0xff808080>
  8081d4:	0027883a 	mov	r19,zero
  8081d8:	0011883a 	mov	r8,zero
  8081dc:	0039883a 	mov	fp,zero
  8081e0:	0025883a 	mov	r18,zero
  8081e4:	90001f26 	beq	r18,zero,808264 <__sfvwrite_r+0x29c>
  8081e8:	40005a26 	beq	r8,zero,808354 <__sfvwrite_r+0x38c>
  8081ec:	982d883a 	mov	r22,r19
  8081f0:	94c0012e 	bgeu	r18,r19,8081f8 <__sfvwrite_r+0x230>
  8081f4:	902d883a 	mov	r22,r18
  8081f8:	81000017 	ldw	r4,0(r16)
  8081fc:	80800417 	ldw	r2,16(r16)
  808200:	b02f883a 	mov	r23,r22
  808204:	81c00517 	ldw	r7,20(r16)
  808208:	1100032e 	bgeu	r2,r4,808218 <__sfvwrite_r+0x250>
  80820c:	80c00217 	ldw	r3,8(r16)
  808210:	38c7883a 	add	r3,r7,r3
  808214:	1d801816 	blt	r3,r22,808278 <__sfvwrite_r+0x2b0>
  808218:	b1c03e16 	blt	r22,r7,808314 <__sfvwrite_r+0x34c>
  80821c:	80800917 	ldw	r2,36(r16)
  808220:	81400717 	ldw	r5,28(r16)
  808224:	e00d883a 	mov	r6,fp
  808228:	da000115 	stw	r8,4(sp)
  80822c:	a809883a 	mov	r4,r21
  808230:	103ee83a 	callr	r2
  808234:	102f883a 	mov	r23,r2
  808238:	da000117 	ldw	r8,4(sp)
  80823c:	00bfe00e 	bge	zero,r2,8081c0 <__alt_data_end+0xff8081c0>
  808240:	9de7c83a 	sub	r19,r19,r23
  808244:	98001f26 	beq	r19,zero,8082c4 <__sfvwrite_r+0x2fc>
  808248:	a0800217 	ldw	r2,8(r20)
  80824c:	e5f9883a 	add	fp,fp,r23
  808250:	95e5c83a 	sub	r18,r18,r23
  808254:	15efc83a 	sub	r23,r2,r23
  808258:	a5c00215 	stw	r23,8(r20)
  80825c:	b83f8726 	beq	r23,zero,80807c <__alt_data_end+0xff80807c>
  808260:	903fe11e 	bne	r18,zero,8081e8 <__alt_data_end+0xff8081e8>
  808264:	8f000017 	ldw	fp,0(r17)
  808268:	8c800117 	ldw	r18,4(r17)
  80826c:	0011883a 	mov	r8,zero
  808270:	8c400204 	addi	r17,r17,8
  808274:	003fdb06 	br	8081e4 <__alt_data_end+0xff8081e4>
  808278:	180d883a 	mov	r6,r3
  80827c:	e00b883a 	mov	r5,fp
  808280:	da000115 	stw	r8,4(sp)
  808284:	d8c00015 	stw	r3,0(sp)
  808288:	08090440 	call	809044 <memmove>
  80828c:	d8c00017 	ldw	r3,0(sp)
  808290:	80800017 	ldw	r2,0(r16)
  808294:	800b883a 	mov	r5,r16
  808298:	a809883a 	mov	r4,r21
  80829c:	10c5883a 	add	r2,r2,r3
  8082a0:	80800015 	stw	r2,0(r16)
  8082a4:	d8c00015 	stw	r3,0(sp)
  8082a8:	080c8bc0 	call	80c8bc <_fflush_r>
  8082ac:	d8c00017 	ldw	r3,0(sp)
  8082b0:	da000117 	ldw	r8,4(sp)
  8082b4:	103fc21e 	bne	r2,zero,8081c0 <__alt_data_end+0xff8081c0>
  8082b8:	182f883a 	mov	r23,r3
  8082bc:	9de7c83a 	sub	r19,r19,r23
  8082c0:	983fe11e 	bne	r19,zero,808248 <__alt_data_end+0xff808248>
  8082c4:	800b883a 	mov	r5,r16
  8082c8:	a809883a 	mov	r4,r21
  8082cc:	080c8bc0 	call	80c8bc <_fflush_r>
  8082d0:	103fbb1e 	bne	r2,zero,8081c0 <__alt_data_end+0xff8081c0>
  8082d4:	0011883a 	mov	r8,zero
  8082d8:	003fdb06 	br	808248 <__alt_data_end+0xff808248>
  8082dc:	94c0012e 	bgeu	r18,r19,8082e4 <__sfvwrite_r+0x31c>
  8082e0:	9027883a 	mov	r19,r18
  8082e4:	980d883a 	mov	r6,r19
  8082e8:	e00b883a 	mov	r5,fp
  8082ec:	08090440 	call	809044 <memmove>
  8082f0:	80800217 	ldw	r2,8(r16)
  8082f4:	80c00017 	ldw	r3,0(r16)
  8082f8:	14c5c83a 	sub	r2,r2,r19
  8082fc:	1cc7883a 	add	r3,r3,r19
  808300:	80800215 	stw	r2,8(r16)
  808304:	80c00015 	stw	r3,0(r16)
  808308:	10004326 	beq	r2,zero,808418 <__sfvwrite_r+0x450>
  80830c:	9805883a 	mov	r2,r19
  808310:	003f8606 	br	80812c <__alt_data_end+0xff80812c>
  808314:	b00d883a 	mov	r6,r22
  808318:	e00b883a 	mov	r5,fp
  80831c:	da000115 	stw	r8,4(sp)
  808320:	08090440 	call	809044 <memmove>
  808324:	80800217 	ldw	r2,8(r16)
  808328:	80c00017 	ldw	r3,0(r16)
  80832c:	da000117 	ldw	r8,4(sp)
  808330:	1585c83a 	sub	r2,r2,r22
  808334:	1dad883a 	add	r22,r3,r22
  808338:	80800215 	stw	r2,8(r16)
  80833c:	85800015 	stw	r22,0(r16)
  808340:	003fbf06 	br	808240 <__alt_data_end+0xff808240>
  808344:	81000017 	ldw	r4,0(r16)
  808348:	9027883a 	mov	r19,r18
  80834c:	902f883a 	mov	r23,r18
  808350:	003f6c06 	br	808104 <__alt_data_end+0xff808104>
  808354:	900d883a 	mov	r6,r18
  808358:	01400284 	movi	r5,10
  80835c:	e009883a 	mov	r4,fp
  808360:	0808e180 	call	808e18 <memchr>
  808364:	10003e26 	beq	r2,zero,808460 <__sfvwrite_r+0x498>
  808368:	10800044 	addi	r2,r2,1
  80836c:	1727c83a 	sub	r19,r2,fp
  808370:	02000044 	movi	r8,1
  808374:	003f9d06 	br	8081ec <__alt_data_end+0xff8081ec>
  808378:	80800517 	ldw	r2,20(r16)
  80837c:	81400417 	ldw	r5,16(r16)
  808380:	81c00017 	ldw	r7,0(r16)
  808384:	10a7883a 	add	r19,r2,r2
  808388:	9885883a 	add	r2,r19,r2
  80838c:	1026d7fa 	srli	r19,r2,31
  808390:	396dc83a 	sub	r22,r7,r5
  808394:	b1000044 	addi	r4,r22,1
  808398:	9885883a 	add	r2,r19,r2
  80839c:	1027d07a 	srai	r19,r2,1
  8083a0:	2485883a 	add	r2,r4,r18
  8083a4:	980d883a 	mov	r6,r19
  8083a8:	9880022e 	bgeu	r19,r2,8083b4 <__sfvwrite_r+0x3ec>
  8083ac:	1027883a 	mov	r19,r2
  8083b0:	100d883a 	mov	r6,r2
  8083b4:	18c1000c 	andi	r3,r3,1024
  8083b8:	18001c26 	beq	r3,zero,80842c <__sfvwrite_r+0x464>
  8083bc:	300b883a 	mov	r5,r6
  8083c0:	a809883a 	mov	r4,r21
  8083c4:	080860c0 	call	80860c <_malloc_r>
  8083c8:	102f883a 	mov	r23,r2
  8083cc:	10002926 	beq	r2,zero,808474 <__sfvwrite_r+0x4ac>
  8083d0:	81400417 	ldw	r5,16(r16)
  8083d4:	b00d883a 	mov	r6,r22
  8083d8:	1009883a 	mov	r4,r2
  8083dc:	0808efc0 	call	808efc <memcpy>
  8083e0:	8080030b 	ldhu	r2,12(r16)
  8083e4:	00fedfc4 	movi	r3,-1153
  8083e8:	10c4703a 	and	r2,r2,r3
  8083ec:	10802014 	ori	r2,r2,128
  8083f0:	8080030d 	sth	r2,12(r16)
  8083f4:	bd89883a 	add	r4,r23,r22
  8083f8:	9d8fc83a 	sub	r7,r19,r22
  8083fc:	85c00415 	stw	r23,16(r16)
  808400:	84c00515 	stw	r19,20(r16)
  808404:	81000015 	stw	r4,0(r16)
  808408:	9027883a 	mov	r19,r18
  80840c:	81c00215 	stw	r7,8(r16)
  808410:	902f883a 	mov	r23,r18
  808414:	003f3b06 	br	808104 <__alt_data_end+0xff808104>
  808418:	800b883a 	mov	r5,r16
  80841c:	a809883a 	mov	r4,r21
  808420:	080c8bc0 	call	80c8bc <_fflush_r>
  808424:	103fb926 	beq	r2,zero,80830c <__alt_data_end+0xff80830c>
  808428:	003f6506 	br	8081c0 <__alt_data_end+0xff8081c0>
  80842c:	a809883a 	mov	r4,r21
  808430:	080a2c40 	call	80a2c4 <_realloc_r>
  808434:	102f883a 	mov	r23,r2
  808438:	103fee1e 	bne	r2,zero,8083f4 <__alt_data_end+0xff8083f4>
  80843c:	81400417 	ldw	r5,16(r16)
  808440:	a809883a 	mov	r4,r21
  808444:	080ca6c0 	call	80ca6c <_free_r>
  808448:	8080030b 	ldhu	r2,12(r16)
  80844c:	00ffdfc4 	movi	r3,-129
  808450:	1884703a 	and	r2,r3,r2
  808454:	00c00304 	movi	r3,12
  808458:	a8c00015 	stw	r3,0(r21)
  80845c:	003f5906 	br	8081c4 <__alt_data_end+0xff8081c4>
  808460:	94c00044 	addi	r19,r18,1
  808464:	02000044 	movi	r8,1
  808468:	003f6006 	br	8081ec <__alt_data_end+0xff8081ec>
  80846c:	00bfffc4 	movi	r2,-1
  808470:	003f0306 	br	808080 <__alt_data_end+0xff808080>
  808474:	00800304 	movi	r2,12
  808478:	a8800015 	stw	r2,0(r21)
  80847c:	8080030b 	ldhu	r2,12(r16)
  808480:	003f5006 	br	8081c4 <__alt_data_end+0xff8081c4>

00808484 <_fwalk>:
  808484:	defff704 	addi	sp,sp,-36
  808488:	dd000415 	stw	r20,16(sp)
  80848c:	dfc00815 	stw	ra,32(sp)
  808490:	ddc00715 	stw	r23,28(sp)
  808494:	dd800615 	stw	r22,24(sp)
  808498:	dd400515 	stw	r21,20(sp)
  80849c:	dcc00315 	stw	r19,12(sp)
  8084a0:	dc800215 	stw	r18,8(sp)
  8084a4:	dc400115 	stw	r17,4(sp)
  8084a8:	dc000015 	stw	r16,0(sp)
  8084ac:	2500b804 	addi	r20,r4,736
  8084b0:	a0002326 	beq	r20,zero,808540 <_fwalk+0xbc>
  8084b4:	282b883a 	mov	r21,r5
  8084b8:	002f883a 	mov	r23,zero
  8084bc:	05800044 	movi	r22,1
  8084c0:	04ffffc4 	movi	r19,-1
  8084c4:	a4400117 	ldw	r17,4(r20)
  8084c8:	a4800217 	ldw	r18,8(r20)
  8084cc:	8c7fffc4 	addi	r17,r17,-1
  8084d0:	88000d16 	blt	r17,zero,808508 <_fwalk+0x84>
  8084d4:	94000304 	addi	r16,r18,12
  8084d8:	94800384 	addi	r18,r18,14
  8084dc:	8080000b 	ldhu	r2,0(r16)
  8084e0:	8c7fffc4 	addi	r17,r17,-1
  8084e4:	813ffd04 	addi	r4,r16,-12
  8084e8:	b080042e 	bgeu	r22,r2,8084fc <_fwalk+0x78>
  8084ec:	9080000f 	ldh	r2,0(r18)
  8084f0:	14c00226 	beq	r2,r19,8084fc <_fwalk+0x78>
  8084f4:	a83ee83a 	callr	r21
  8084f8:	b8aeb03a 	or	r23,r23,r2
  8084fc:	84001a04 	addi	r16,r16,104
  808500:	94801a04 	addi	r18,r18,104
  808504:	8cfff51e 	bne	r17,r19,8084dc <__alt_data_end+0xff8084dc>
  808508:	a5000017 	ldw	r20,0(r20)
  80850c:	a03fed1e 	bne	r20,zero,8084c4 <__alt_data_end+0xff8084c4>
  808510:	b805883a 	mov	r2,r23
  808514:	dfc00817 	ldw	ra,32(sp)
  808518:	ddc00717 	ldw	r23,28(sp)
  80851c:	dd800617 	ldw	r22,24(sp)
  808520:	dd400517 	ldw	r21,20(sp)
  808524:	dd000417 	ldw	r20,16(sp)
  808528:	dcc00317 	ldw	r19,12(sp)
  80852c:	dc800217 	ldw	r18,8(sp)
  808530:	dc400117 	ldw	r17,4(sp)
  808534:	dc000017 	ldw	r16,0(sp)
  808538:	dec00904 	addi	sp,sp,36
  80853c:	f800283a 	ret
  808540:	002f883a 	mov	r23,zero
  808544:	003ff206 	br	808510 <__alt_data_end+0xff808510>

00808548 <_fwalk_reent>:
  808548:	defff704 	addi	sp,sp,-36
  80854c:	dd000415 	stw	r20,16(sp)
  808550:	dfc00815 	stw	ra,32(sp)
  808554:	ddc00715 	stw	r23,28(sp)
  808558:	dd800615 	stw	r22,24(sp)
  80855c:	dd400515 	stw	r21,20(sp)
  808560:	dcc00315 	stw	r19,12(sp)
  808564:	dc800215 	stw	r18,8(sp)
  808568:	dc400115 	stw	r17,4(sp)
  80856c:	dc000015 	stw	r16,0(sp)
  808570:	2500b804 	addi	r20,r4,736
  808574:	a0002326 	beq	r20,zero,808604 <_fwalk_reent+0xbc>
  808578:	282b883a 	mov	r21,r5
  80857c:	2027883a 	mov	r19,r4
  808580:	002f883a 	mov	r23,zero
  808584:	05800044 	movi	r22,1
  808588:	04bfffc4 	movi	r18,-1
  80858c:	a4400117 	ldw	r17,4(r20)
  808590:	a4000217 	ldw	r16,8(r20)
  808594:	8c7fffc4 	addi	r17,r17,-1
  808598:	88000c16 	blt	r17,zero,8085cc <_fwalk_reent+0x84>
  80859c:	84000304 	addi	r16,r16,12
  8085a0:	8080000b 	ldhu	r2,0(r16)
  8085a4:	8c7fffc4 	addi	r17,r17,-1
  8085a8:	817ffd04 	addi	r5,r16,-12
  8085ac:	b080052e 	bgeu	r22,r2,8085c4 <_fwalk_reent+0x7c>
  8085b0:	8080008f 	ldh	r2,2(r16)
  8085b4:	9809883a 	mov	r4,r19
  8085b8:	14800226 	beq	r2,r18,8085c4 <_fwalk_reent+0x7c>
  8085bc:	a83ee83a 	callr	r21
  8085c0:	b8aeb03a 	or	r23,r23,r2
  8085c4:	84001a04 	addi	r16,r16,104
  8085c8:	8cbff51e 	bne	r17,r18,8085a0 <__alt_data_end+0xff8085a0>
  8085cc:	a5000017 	ldw	r20,0(r20)
  8085d0:	a03fee1e 	bne	r20,zero,80858c <__alt_data_end+0xff80858c>
  8085d4:	b805883a 	mov	r2,r23
  8085d8:	dfc00817 	ldw	ra,32(sp)
  8085dc:	ddc00717 	ldw	r23,28(sp)
  8085e0:	dd800617 	ldw	r22,24(sp)
  8085e4:	dd400517 	ldw	r21,20(sp)
  8085e8:	dd000417 	ldw	r20,16(sp)
  8085ec:	dcc00317 	ldw	r19,12(sp)
  8085f0:	dc800217 	ldw	r18,8(sp)
  8085f4:	dc400117 	ldw	r17,4(sp)
  8085f8:	dc000017 	ldw	r16,0(sp)
  8085fc:	dec00904 	addi	sp,sp,36
  808600:	f800283a 	ret
  808604:	002f883a 	mov	r23,zero
  808608:	003ff206 	br	8085d4 <__alt_data_end+0xff8085d4>

0080860c <_malloc_r>:
  80860c:	defff504 	addi	sp,sp,-44
  808610:	dc800315 	stw	r18,12(sp)
  808614:	dfc00a15 	stw	ra,40(sp)
  808618:	df000915 	stw	fp,36(sp)
  80861c:	ddc00815 	stw	r23,32(sp)
  808620:	dd800715 	stw	r22,28(sp)
  808624:	dd400615 	stw	r21,24(sp)
  808628:	dd000515 	stw	r20,20(sp)
  80862c:	dcc00415 	stw	r19,16(sp)
  808630:	dc400215 	stw	r17,8(sp)
  808634:	dc000115 	stw	r16,4(sp)
  808638:	288002c4 	addi	r2,r5,11
  80863c:	00c00584 	movi	r3,22
  808640:	2025883a 	mov	r18,r4
  808644:	18807f2e 	bgeu	r3,r2,808844 <_malloc_r+0x238>
  808648:	047ffe04 	movi	r17,-8
  80864c:	1462703a 	and	r17,r2,r17
  808650:	8800a316 	blt	r17,zero,8088e0 <_malloc_r+0x2d4>
  808654:	8940a236 	bltu	r17,r5,8088e0 <_malloc_r+0x2d4>
  808658:	080d7180 	call	80d718 <__malloc_lock>
  80865c:	00807dc4 	movi	r2,503
  808660:	1441e92e 	bgeu	r2,r17,808e08 <_malloc_r+0x7fc>
  808664:	8804d27a 	srli	r2,r17,9
  808668:	1000a126 	beq	r2,zero,8088f0 <_malloc_r+0x2e4>
  80866c:	00c00104 	movi	r3,4
  808670:	18811e36 	bltu	r3,r2,808aec <_malloc_r+0x4e0>
  808674:	8804d1ba 	srli	r2,r17,6
  808678:	12000e44 	addi	r8,r2,57
  80867c:	11c00e04 	addi	r7,r2,56
  808680:	4209883a 	add	r4,r8,r8
  808684:	04c02074 	movhi	r19,129
  808688:	2109883a 	add	r4,r4,r4
  80868c:	9cc0ed04 	addi	r19,r19,948
  808690:	2109883a 	add	r4,r4,r4
  808694:	9909883a 	add	r4,r19,r4
  808698:	24000117 	ldw	r16,4(r4)
  80869c:	213ffe04 	addi	r4,r4,-8
  8086a0:	24009726 	beq	r4,r16,808900 <_malloc_r+0x2f4>
  8086a4:	80800117 	ldw	r2,4(r16)
  8086a8:	01bfff04 	movi	r6,-4
  8086ac:	014003c4 	movi	r5,15
  8086b0:	1184703a 	and	r2,r2,r6
  8086b4:	1447c83a 	sub	r3,r2,r17
  8086b8:	28c00716 	blt	r5,r3,8086d8 <_malloc_r+0xcc>
  8086bc:	1800920e 	bge	r3,zero,808908 <_malloc_r+0x2fc>
  8086c0:	84000317 	ldw	r16,12(r16)
  8086c4:	24008e26 	beq	r4,r16,808900 <_malloc_r+0x2f4>
  8086c8:	80800117 	ldw	r2,4(r16)
  8086cc:	1184703a 	and	r2,r2,r6
  8086d0:	1447c83a 	sub	r3,r2,r17
  8086d4:	28fff90e 	bge	r5,r3,8086bc <__alt_data_end+0xff8086bc>
  8086d8:	3809883a 	mov	r4,r7
  8086dc:	01802074 	movhi	r6,129
  8086e0:	9c000417 	ldw	r16,16(r19)
  8086e4:	3180ed04 	addi	r6,r6,948
  8086e8:	32000204 	addi	r8,r6,8
  8086ec:	82013426 	beq	r16,r8,808bc0 <_malloc_r+0x5b4>
  8086f0:	80c00117 	ldw	r3,4(r16)
  8086f4:	00bfff04 	movi	r2,-4
  8086f8:	188e703a 	and	r7,r3,r2
  8086fc:	3c45c83a 	sub	r2,r7,r17
  808700:	00c003c4 	movi	r3,15
  808704:	18811f16 	blt	r3,r2,808b84 <_malloc_r+0x578>
  808708:	32000515 	stw	r8,20(r6)
  80870c:	32000415 	stw	r8,16(r6)
  808710:	10007f0e 	bge	r2,zero,808910 <_malloc_r+0x304>
  808714:	00807fc4 	movi	r2,511
  808718:	11c0fd36 	bltu	r2,r7,808b10 <_malloc_r+0x504>
  80871c:	3806d0fa 	srli	r3,r7,3
  808720:	01c00044 	movi	r7,1
  808724:	30800117 	ldw	r2,4(r6)
  808728:	19400044 	addi	r5,r3,1
  80872c:	294b883a 	add	r5,r5,r5
  808730:	1807d0ba 	srai	r3,r3,2
  808734:	294b883a 	add	r5,r5,r5
  808738:	294b883a 	add	r5,r5,r5
  80873c:	298b883a 	add	r5,r5,r6
  808740:	38c6983a 	sll	r3,r7,r3
  808744:	29c00017 	ldw	r7,0(r5)
  808748:	2a7ffe04 	addi	r9,r5,-8
  80874c:	1886b03a 	or	r3,r3,r2
  808750:	82400315 	stw	r9,12(r16)
  808754:	81c00215 	stw	r7,8(r16)
  808758:	30c00115 	stw	r3,4(r6)
  80875c:	2c000015 	stw	r16,0(r5)
  808760:	3c000315 	stw	r16,12(r7)
  808764:	2005d0ba 	srai	r2,r4,2
  808768:	01400044 	movi	r5,1
  80876c:	288a983a 	sll	r5,r5,r2
  808770:	19406f36 	bltu	r3,r5,808930 <_malloc_r+0x324>
  808774:	28c4703a 	and	r2,r5,r3
  808778:	10000a1e 	bne	r2,zero,8087a4 <_malloc_r+0x198>
  80877c:	00bfff04 	movi	r2,-4
  808780:	294b883a 	add	r5,r5,r5
  808784:	2088703a 	and	r4,r4,r2
  808788:	28c4703a 	and	r2,r5,r3
  80878c:	21000104 	addi	r4,r4,4
  808790:	1000041e 	bne	r2,zero,8087a4 <_malloc_r+0x198>
  808794:	294b883a 	add	r5,r5,r5
  808798:	28c4703a 	and	r2,r5,r3
  80879c:	21000104 	addi	r4,r4,4
  8087a0:	103ffc26 	beq	r2,zero,808794 <__alt_data_end+0xff808794>
  8087a4:	02bfff04 	movi	r10,-4
  8087a8:	024003c4 	movi	r9,15
  8087ac:	21800044 	addi	r6,r4,1
  8087b0:	318d883a 	add	r6,r6,r6
  8087b4:	318d883a 	add	r6,r6,r6
  8087b8:	318d883a 	add	r6,r6,r6
  8087bc:	998d883a 	add	r6,r19,r6
  8087c0:	333ffe04 	addi	r12,r6,-8
  8087c4:	2017883a 	mov	r11,r4
  8087c8:	31800104 	addi	r6,r6,4
  8087cc:	34000017 	ldw	r16,0(r6)
  8087d0:	31fffd04 	addi	r7,r6,-12
  8087d4:	81c0041e 	bne	r16,r7,8087e8 <_malloc_r+0x1dc>
  8087d8:	0000fb06 	br	808bc8 <_malloc_r+0x5bc>
  8087dc:	1801030e 	bge	r3,zero,808bec <_malloc_r+0x5e0>
  8087e0:	84000317 	ldw	r16,12(r16)
  8087e4:	81c0f826 	beq	r16,r7,808bc8 <_malloc_r+0x5bc>
  8087e8:	80800117 	ldw	r2,4(r16)
  8087ec:	1284703a 	and	r2,r2,r10
  8087f0:	1447c83a 	sub	r3,r2,r17
  8087f4:	48fff90e 	bge	r9,r3,8087dc <__alt_data_end+0xff8087dc>
  8087f8:	80800317 	ldw	r2,12(r16)
  8087fc:	81000217 	ldw	r4,8(r16)
  808800:	89400054 	ori	r5,r17,1
  808804:	81400115 	stw	r5,4(r16)
  808808:	20800315 	stw	r2,12(r4)
  80880c:	11000215 	stw	r4,8(r2)
  808810:	8463883a 	add	r17,r16,r17
  808814:	9c400515 	stw	r17,20(r19)
  808818:	9c400415 	stw	r17,16(r19)
  80881c:	18800054 	ori	r2,r3,1
  808820:	88800115 	stw	r2,4(r17)
  808824:	8a000315 	stw	r8,12(r17)
  808828:	8a000215 	stw	r8,8(r17)
  80882c:	88e3883a 	add	r17,r17,r3
  808830:	88c00015 	stw	r3,0(r17)
  808834:	9009883a 	mov	r4,r18
  808838:	080d73c0 	call	80d73c <__malloc_unlock>
  80883c:	80800204 	addi	r2,r16,8
  808840:	00001b06 	br	8088b0 <_malloc_r+0x2a4>
  808844:	04400404 	movi	r17,16
  808848:	89402536 	bltu	r17,r5,8088e0 <_malloc_r+0x2d4>
  80884c:	080d7180 	call	80d718 <__malloc_lock>
  808850:	00800184 	movi	r2,6
  808854:	01000084 	movi	r4,2
  808858:	04c02074 	movhi	r19,129
  80885c:	1085883a 	add	r2,r2,r2
  808860:	9cc0ed04 	addi	r19,r19,948
  808864:	1085883a 	add	r2,r2,r2
  808868:	9885883a 	add	r2,r19,r2
  80886c:	14000117 	ldw	r16,4(r2)
  808870:	10fffe04 	addi	r3,r2,-8
  808874:	80c0d926 	beq	r16,r3,808bdc <_malloc_r+0x5d0>
  808878:	80c00117 	ldw	r3,4(r16)
  80887c:	81000317 	ldw	r4,12(r16)
  808880:	00bfff04 	movi	r2,-4
  808884:	1884703a 	and	r2,r3,r2
  808888:	81400217 	ldw	r5,8(r16)
  80888c:	8085883a 	add	r2,r16,r2
  808890:	10c00117 	ldw	r3,4(r2)
  808894:	29000315 	stw	r4,12(r5)
  808898:	21400215 	stw	r5,8(r4)
  80889c:	18c00054 	ori	r3,r3,1
  8088a0:	10c00115 	stw	r3,4(r2)
  8088a4:	9009883a 	mov	r4,r18
  8088a8:	080d73c0 	call	80d73c <__malloc_unlock>
  8088ac:	80800204 	addi	r2,r16,8
  8088b0:	dfc00a17 	ldw	ra,40(sp)
  8088b4:	df000917 	ldw	fp,36(sp)
  8088b8:	ddc00817 	ldw	r23,32(sp)
  8088bc:	dd800717 	ldw	r22,28(sp)
  8088c0:	dd400617 	ldw	r21,24(sp)
  8088c4:	dd000517 	ldw	r20,20(sp)
  8088c8:	dcc00417 	ldw	r19,16(sp)
  8088cc:	dc800317 	ldw	r18,12(sp)
  8088d0:	dc400217 	ldw	r17,8(sp)
  8088d4:	dc000117 	ldw	r16,4(sp)
  8088d8:	dec00b04 	addi	sp,sp,44
  8088dc:	f800283a 	ret
  8088e0:	00800304 	movi	r2,12
  8088e4:	90800015 	stw	r2,0(r18)
  8088e8:	0005883a 	mov	r2,zero
  8088ec:	003ff006 	br	8088b0 <__alt_data_end+0xff8088b0>
  8088f0:	01002004 	movi	r4,128
  8088f4:	02001004 	movi	r8,64
  8088f8:	01c00fc4 	movi	r7,63
  8088fc:	003f6106 	br	808684 <__alt_data_end+0xff808684>
  808900:	4009883a 	mov	r4,r8
  808904:	003f7506 	br	8086dc <__alt_data_end+0xff8086dc>
  808908:	81000317 	ldw	r4,12(r16)
  80890c:	003fde06 	br	808888 <__alt_data_end+0xff808888>
  808910:	81c5883a 	add	r2,r16,r7
  808914:	11400117 	ldw	r5,4(r2)
  808918:	9009883a 	mov	r4,r18
  80891c:	29400054 	ori	r5,r5,1
  808920:	11400115 	stw	r5,4(r2)
  808924:	080d73c0 	call	80d73c <__malloc_unlock>
  808928:	80800204 	addi	r2,r16,8
  80892c:	003fe006 	br	8088b0 <__alt_data_end+0xff8088b0>
  808930:	9c000217 	ldw	r16,8(r19)
  808934:	00bfff04 	movi	r2,-4
  808938:	85800117 	ldw	r22,4(r16)
  80893c:	b0ac703a 	and	r22,r22,r2
  808940:	b4400336 	bltu	r22,r17,808950 <_malloc_r+0x344>
  808944:	b445c83a 	sub	r2,r22,r17
  808948:	00c003c4 	movi	r3,15
  80894c:	18805d16 	blt	r3,r2,808ac4 <_malloc_r+0x4b8>
  808950:	05c02074 	movhi	r23,129
  808954:	00802074 	movhi	r2,129
  808958:	108d1f04 	addi	r2,r2,13436
  80895c:	bdc67404 	addi	r23,r23,6608
  808960:	15400017 	ldw	r21,0(r2)
  808964:	b8c00017 	ldw	r3,0(r23)
  808968:	00bfffc4 	movi	r2,-1
  80896c:	858d883a 	add	r6,r16,r22
  808970:	8d6b883a 	add	r21,r17,r21
  808974:	1880ea26 	beq	r3,r2,808d20 <_malloc_r+0x714>
  808978:	ad4403c4 	addi	r21,r21,4111
  80897c:	00bc0004 	movi	r2,-4096
  808980:	a8aa703a 	and	r21,r21,r2
  808984:	a80b883a 	mov	r5,r21
  808988:	9009883a 	mov	r4,r18
  80898c:	d9800015 	stw	r6,0(sp)
  808990:	080a8280 	call	80a828 <_sbrk_r>
  808994:	1029883a 	mov	r20,r2
  808998:	00bfffc4 	movi	r2,-1
  80899c:	d9800017 	ldw	r6,0(sp)
  8089a0:	a080e826 	beq	r20,r2,808d44 <_malloc_r+0x738>
  8089a4:	a180a636 	bltu	r20,r6,808c40 <_malloc_r+0x634>
  8089a8:	07002074 	movhi	fp,129
  8089ac:	e70d2804 	addi	fp,fp,13472
  8089b0:	e0800017 	ldw	r2,0(fp)
  8089b4:	a887883a 	add	r3,r21,r2
  8089b8:	e0c00015 	stw	r3,0(fp)
  8089bc:	3500e626 	beq	r6,r20,808d58 <_malloc_r+0x74c>
  8089c0:	b9000017 	ldw	r4,0(r23)
  8089c4:	00bfffc4 	movi	r2,-1
  8089c8:	2080ee26 	beq	r4,r2,808d84 <_malloc_r+0x778>
  8089cc:	a185c83a 	sub	r2,r20,r6
  8089d0:	10c5883a 	add	r2,r2,r3
  8089d4:	e0800015 	stw	r2,0(fp)
  8089d8:	a0c001cc 	andi	r3,r20,7
  8089dc:	1800bc26 	beq	r3,zero,808cd0 <_malloc_r+0x6c4>
  8089e0:	a0e9c83a 	sub	r20,r20,r3
  8089e4:	00840204 	movi	r2,4104
  8089e8:	a5000204 	addi	r20,r20,8
  8089ec:	10c7c83a 	sub	r3,r2,r3
  8089f0:	a545883a 	add	r2,r20,r21
  8089f4:	1083ffcc 	andi	r2,r2,4095
  8089f8:	18abc83a 	sub	r21,r3,r2
  8089fc:	a80b883a 	mov	r5,r21
  808a00:	9009883a 	mov	r4,r18
  808a04:	080a8280 	call	80a828 <_sbrk_r>
  808a08:	00ffffc4 	movi	r3,-1
  808a0c:	10c0e126 	beq	r2,r3,808d94 <_malloc_r+0x788>
  808a10:	1505c83a 	sub	r2,r2,r20
  808a14:	1545883a 	add	r2,r2,r21
  808a18:	10800054 	ori	r2,r2,1
  808a1c:	e0c00017 	ldw	r3,0(fp)
  808a20:	9d000215 	stw	r20,8(r19)
  808a24:	a0800115 	stw	r2,4(r20)
  808a28:	a8c7883a 	add	r3,r21,r3
  808a2c:	e0c00015 	stw	r3,0(fp)
  808a30:	84c00e26 	beq	r16,r19,808a6c <_malloc_r+0x460>
  808a34:	018003c4 	movi	r6,15
  808a38:	3580a72e 	bgeu	r6,r22,808cd8 <_malloc_r+0x6cc>
  808a3c:	81400117 	ldw	r5,4(r16)
  808a40:	013ffe04 	movi	r4,-8
  808a44:	b0bffd04 	addi	r2,r22,-12
  808a48:	1104703a 	and	r2,r2,r4
  808a4c:	2900004c 	andi	r4,r5,1
  808a50:	2088b03a 	or	r4,r4,r2
  808a54:	81000115 	stw	r4,4(r16)
  808a58:	01400144 	movi	r5,5
  808a5c:	8089883a 	add	r4,r16,r2
  808a60:	21400115 	stw	r5,4(r4)
  808a64:	21400215 	stw	r5,8(r4)
  808a68:	3080cd36 	bltu	r6,r2,808da0 <_malloc_r+0x794>
  808a6c:	00802074 	movhi	r2,129
  808a70:	108d1e04 	addi	r2,r2,13432
  808a74:	11000017 	ldw	r4,0(r2)
  808a78:	20c0012e 	bgeu	r4,r3,808a80 <_malloc_r+0x474>
  808a7c:	10c00015 	stw	r3,0(r2)
  808a80:	00802074 	movhi	r2,129
  808a84:	108d1d04 	addi	r2,r2,13428
  808a88:	11000017 	ldw	r4,0(r2)
  808a8c:	9c000217 	ldw	r16,8(r19)
  808a90:	20c0012e 	bgeu	r4,r3,808a98 <_malloc_r+0x48c>
  808a94:	10c00015 	stw	r3,0(r2)
  808a98:	80c00117 	ldw	r3,4(r16)
  808a9c:	00bfff04 	movi	r2,-4
  808aa0:	1886703a 	and	r3,r3,r2
  808aa4:	1c45c83a 	sub	r2,r3,r17
  808aa8:	1c400236 	bltu	r3,r17,808ab4 <_malloc_r+0x4a8>
  808aac:	00c003c4 	movi	r3,15
  808ab0:	18800416 	blt	r3,r2,808ac4 <_malloc_r+0x4b8>
  808ab4:	9009883a 	mov	r4,r18
  808ab8:	080d73c0 	call	80d73c <__malloc_unlock>
  808abc:	0005883a 	mov	r2,zero
  808ac0:	003f7b06 	br	8088b0 <__alt_data_end+0xff8088b0>
  808ac4:	88c00054 	ori	r3,r17,1
  808ac8:	80c00115 	stw	r3,4(r16)
  808acc:	8463883a 	add	r17,r16,r17
  808ad0:	10800054 	ori	r2,r2,1
  808ad4:	9c400215 	stw	r17,8(r19)
  808ad8:	88800115 	stw	r2,4(r17)
  808adc:	9009883a 	mov	r4,r18
  808ae0:	080d73c0 	call	80d73c <__malloc_unlock>
  808ae4:	80800204 	addi	r2,r16,8
  808ae8:	003f7106 	br	8088b0 <__alt_data_end+0xff8088b0>
  808aec:	00c00504 	movi	r3,20
  808af0:	18804a2e 	bgeu	r3,r2,808c1c <_malloc_r+0x610>
  808af4:	00c01504 	movi	r3,84
  808af8:	18806e36 	bltu	r3,r2,808cb4 <_malloc_r+0x6a8>
  808afc:	8804d33a 	srli	r2,r17,12
  808b00:	12001bc4 	addi	r8,r2,111
  808b04:	11c01b84 	addi	r7,r2,110
  808b08:	4209883a 	add	r4,r8,r8
  808b0c:	003edd06 	br	808684 <__alt_data_end+0xff808684>
  808b10:	3804d27a 	srli	r2,r7,9
  808b14:	00c00104 	movi	r3,4
  808b18:	1880442e 	bgeu	r3,r2,808c2c <_malloc_r+0x620>
  808b1c:	00c00504 	movi	r3,20
  808b20:	18808136 	bltu	r3,r2,808d28 <_malloc_r+0x71c>
  808b24:	11401704 	addi	r5,r2,92
  808b28:	10c016c4 	addi	r3,r2,91
  808b2c:	294b883a 	add	r5,r5,r5
  808b30:	294b883a 	add	r5,r5,r5
  808b34:	294b883a 	add	r5,r5,r5
  808b38:	994b883a 	add	r5,r19,r5
  808b3c:	28800017 	ldw	r2,0(r5)
  808b40:	01802074 	movhi	r6,129
  808b44:	297ffe04 	addi	r5,r5,-8
  808b48:	3180ed04 	addi	r6,r6,948
  808b4c:	28806526 	beq	r5,r2,808ce4 <_malloc_r+0x6d8>
  808b50:	01bfff04 	movi	r6,-4
  808b54:	10c00117 	ldw	r3,4(r2)
  808b58:	1986703a 	and	r3,r3,r6
  808b5c:	38c0022e 	bgeu	r7,r3,808b68 <_malloc_r+0x55c>
  808b60:	10800217 	ldw	r2,8(r2)
  808b64:	28bffb1e 	bne	r5,r2,808b54 <__alt_data_end+0xff808b54>
  808b68:	11400317 	ldw	r5,12(r2)
  808b6c:	98c00117 	ldw	r3,4(r19)
  808b70:	81400315 	stw	r5,12(r16)
  808b74:	80800215 	stw	r2,8(r16)
  808b78:	2c000215 	stw	r16,8(r5)
  808b7c:	14000315 	stw	r16,12(r2)
  808b80:	003ef806 	br	808764 <__alt_data_end+0xff808764>
  808b84:	88c00054 	ori	r3,r17,1
  808b88:	80c00115 	stw	r3,4(r16)
  808b8c:	8463883a 	add	r17,r16,r17
  808b90:	34400515 	stw	r17,20(r6)
  808b94:	34400415 	stw	r17,16(r6)
  808b98:	10c00054 	ori	r3,r2,1
  808b9c:	8a000315 	stw	r8,12(r17)
  808ba0:	8a000215 	stw	r8,8(r17)
  808ba4:	88c00115 	stw	r3,4(r17)
  808ba8:	88a3883a 	add	r17,r17,r2
  808bac:	88800015 	stw	r2,0(r17)
  808bb0:	9009883a 	mov	r4,r18
  808bb4:	080d73c0 	call	80d73c <__malloc_unlock>
  808bb8:	80800204 	addi	r2,r16,8
  808bbc:	003f3c06 	br	8088b0 <__alt_data_end+0xff8088b0>
  808bc0:	30c00117 	ldw	r3,4(r6)
  808bc4:	003ee706 	br	808764 <__alt_data_end+0xff808764>
  808bc8:	5ac00044 	addi	r11,r11,1
  808bcc:	588000cc 	andi	r2,r11,3
  808bd0:	31800204 	addi	r6,r6,8
  808bd4:	103efd1e 	bne	r2,zero,8087cc <__alt_data_end+0xff8087cc>
  808bd8:	00002406 	br	808c6c <_malloc_r+0x660>
  808bdc:	14000317 	ldw	r16,12(r2)
  808be0:	143f251e 	bne	r2,r16,808878 <__alt_data_end+0xff808878>
  808be4:	21000084 	addi	r4,r4,2
  808be8:	003ebc06 	br	8086dc <__alt_data_end+0xff8086dc>
  808bec:	8085883a 	add	r2,r16,r2
  808bf0:	10c00117 	ldw	r3,4(r2)
  808bf4:	81000317 	ldw	r4,12(r16)
  808bf8:	81400217 	ldw	r5,8(r16)
  808bfc:	18c00054 	ori	r3,r3,1
  808c00:	10c00115 	stw	r3,4(r2)
  808c04:	29000315 	stw	r4,12(r5)
  808c08:	21400215 	stw	r5,8(r4)
  808c0c:	9009883a 	mov	r4,r18
  808c10:	080d73c0 	call	80d73c <__malloc_unlock>
  808c14:	80800204 	addi	r2,r16,8
  808c18:	003f2506 	br	8088b0 <__alt_data_end+0xff8088b0>
  808c1c:	12001704 	addi	r8,r2,92
  808c20:	11c016c4 	addi	r7,r2,91
  808c24:	4209883a 	add	r4,r8,r8
  808c28:	003e9606 	br	808684 <__alt_data_end+0xff808684>
  808c2c:	3804d1ba 	srli	r2,r7,6
  808c30:	11400e44 	addi	r5,r2,57
  808c34:	10c00e04 	addi	r3,r2,56
  808c38:	294b883a 	add	r5,r5,r5
  808c3c:	003fbc06 	br	808b30 <__alt_data_end+0xff808b30>
  808c40:	84ff5926 	beq	r16,r19,8089a8 <__alt_data_end+0xff8089a8>
  808c44:	00802074 	movhi	r2,129
  808c48:	1080ed04 	addi	r2,r2,948
  808c4c:	14000217 	ldw	r16,8(r2)
  808c50:	00bfff04 	movi	r2,-4
  808c54:	80c00117 	ldw	r3,4(r16)
  808c58:	1886703a 	and	r3,r3,r2
  808c5c:	003f9106 	br	808aa4 <__alt_data_end+0xff808aa4>
  808c60:	60800217 	ldw	r2,8(r12)
  808c64:	213fffc4 	addi	r4,r4,-1
  808c68:	1300651e 	bne	r2,r12,808e00 <_malloc_r+0x7f4>
  808c6c:	208000cc 	andi	r2,r4,3
  808c70:	633ffe04 	addi	r12,r12,-8
  808c74:	103ffa1e 	bne	r2,zero,808c60 <__alt_data_end+0xff808c60>
  808c78:	98800117 	ldw	r2,4(r19)
  808c7c:	0146303a 	nor	r3,zero,r5
  808c80:	1884703a 	and	r2,r3,r2
  808c84:	98800115 	stw	r2,4(r19)
  808c88:	294b883a 	add	r5,r5,r5
  808c8c:	117f2836 	bltu	r2,r5,808930 <__alt_data_end+0xff808930>
  808c90:	283f2726 	beq	r5,zero,808930 <__alt_data_end+0xff808930>
  808c94:	2886703a 	and	r3,r5,r2
  808c98:	5809883a 	mov	r4,r11
  808c9c:	183ec31e 	bne	r3,zero,8087ac <__alt_data_end+0xff8087ac>
  808ca0:	294b883a 	add	r5,r5,r5
  808ca4:	2886703a 	and	r3,r5,r2
  808ca8:	21000104 	addi	r4,r4,4
  808cac:	183ffc26 	beq	r3,zero,808ca0 <__alt_data_end+0xff808ca0>
  808cb0:	003ebe06 	br	8087ac <__alt_data_end+0xff8087ac>
  808cb4:	00c05504 	movi	r3,340
  808cb8:	18801236 	bltu	r3,r2,808d04 <_malloc_r+0x6f8>
  808cbc:	8804d3fa 	srli	r2,r17,15
  808cc0:	12001e04 	addi	r8,r2,120
  808cc4:	11c01dc4 	addi	r7,r2,119
  808cc8:	4209883a 	add	r4,r8,r8
  808ccc:	003e6d06 	br	808684 <__alt_data_end+0xff808684>
  808cd0:	00c40004 	movi	r3,4096
  808cd4:	003f4606 	br	8089f0 <__alt_data_end+0xff8089f0>
  808cd8:	00800044 	movi	r2,1
  808cdc:	a0800115 	stw	r2,4(r20)
  808ce0:	003f7406 	br	808ab4 <__alt_data_end+0xff808ab4>
  808ce4:	1805d0ba 	srai	r2,r3,2
  808ce8:	01c00044 	movi	r7,1
  808cec:	30c00117 	ldw	r3,4(r6)
  808cf0:	388e983a 	sll	r7,r7,r2
  808cf4:	2805883a 	mov	r2,r5
  808cf8:	38c6b03a 	or	r3,r7,r3
  808cfc:	30c00115 	stw	r3,4(r6)
  808d00:	003f9b06 	br	808b70 <__alt_data_end+0xff808b70>
  808d04:	00c15504 	movi	r3,1364
  808d08:	18801a36 	bltu	r3,r2,808d74 <_malloc_r+0x768>
  808d0c:	8804d4ba 	srli	r2,r17,18
  808d10:	12001f44 	addi	r8,r2,125
  808d14:	11c01f04 	addi	r7,r2,124
  808d18:	4209883a 	add	r4,r8,r8
  808d1c:	003e5906 	br	808684 <__alt_data_end+0xff808684>
  808d20:	ad400404 	addi	r21,r21,16
  808d24:	003f1706 	br	808984 <__alt_data_end+0xff808984>
  808d28:	00c01504 	movi	r3,84
  808d2c:	18802336 	bltu	r3,r2,808dbc <_malloc_r+0x7b0>
  808d30:	3804d33a 	srli	r2,r7,12
  808d34:	11401bc4 	addi	r5,r2,111
  808d38:	10c01b84 	addi	r3,r2,110
  808d3c:	294b883a 	add	r5,r5,r5
  808d40:	003f7b06 	br	808b30 <__alt_data_end+0xff808b30>
  808d44:	9c000217 	ldw	r16,8(r19)
  808d48:	00bfff04 	movi	r2,-4
  808d4c:	80c00117 	ldw	r3,4(r16)
  808d50:	1886703a 	and	r3,r3,r2
  808d54:	003f5306 	br	808aa4 <__alt_data_end+0xff808aa4>
  808d58:	3083ffcc 	andi	r2,r6,4095
  808d5c:	103f181e 	bne	r2,zero,8089c0 <__alt_data_end+0xff8089c0>
  808d60:	99000217 	ldw	r4,8(r19)
  808d64:	b545883a 	add	r2,r22,r21
  808d68:	10800054 	ori	r2,r2,1
  808d6c:	20800115 	stw	r2,4(r4)
  808d70:	003f3e06 	br	808a6c <__alt_data_end+0xff808a6c>
  808d74:	01003f84 	movi	r4,254
  808d78:	02001fc4 	movi	r8,127
  808d7c:	01c01f84 	movi	r7,126
  808d80:	003e4006 	br	808684 <__alt_data_end+0xff808684>
  808d84:	00802074 	movhi	r2,129
  808d88:	10867404 	addi	r2,r2,6608
  808d8c:	15000015 	stw	r20,0(r2)
  808d90:	003f1106 	br	8089d8 <__alt_data_end+0xff8089d8>
  808d94:	00800044 	movi	r2,1
  808d98:	002b883a 	mov	r21,zero
  808d9c:	003f1f06 	br	808a1c <__alt_data_end+0xff808a1c>
  808da0:	81400204 	addi	r5,r16,8
  808da4:	9009883a 	mov	r4,r18
  808da8:	080ca6c0 	call	80ca6c <_free_r>
  808dac:	00802074 	movhi	r2,129
  808db0:	108d2804 	addi	r2,r2,13472
  808db4:	10c00017 	ldw	r3,0(r2)
  808db8:	003f2c06 	br	808a6c <__alt_data_end+0xff808a6c>
  808dbc:	00c05504 	movi	r3,340
  808dc0:	18800536 	bltu	r3,r2,808dd8 <_malloc_r+0x7cc>
  808dc4:	3804d3fa 	srli	r2,r7,15
  808dc8:	11401e04 	addi	r5,r2,120
  808dcc:	10c01dc4 	addi	r3,r2,119
  808dd0:	294b883a 	add	r5,r5,r5
  808dd4:	003f5606 	br	808b30 <__alt_data_end+0xff808b30>
  808dd8:	00c15504 	movi	r3,1364
  808ddc:	18800536 	bltu	r3,r2,808df4 <_malloc_r+0x7e8>
  808de0:	3804d4ba 	srli	r2,r7,18
  808de4:	11401f44 	addi	r5,r2,125
  808de8:	10c01f04 	addi	r3,r2,124
  808dec:	294b883a 	add	r5,r5,r5
  808df0:	003f4f06 	br	808b30 <__alt_data_end+0xff808b30>
  808df4:	01403f84 	movi	r5,254
  808df8:	00c01f84 	movi	r3,126
  808dfc:	003f4c06 	br	808b30 <__alt_data_end+0xff808b30>
  808e00:	98800117 	ldw	r2,4(r19)
  808e04:	003fa006 	br	808c88 <__alt_data_end+0xff808c88>
  808e08:	8808d0fa 	srli	r4,r17,3
  808e0c:	20800044 	addi	r2,r4,1
  808e10:	1085883a 	add	r2,r2,r2
  808e14:	003e9006 	br	808858 <__alt_data_end+0xff808858>

00808e18 <memchr>:
  808e18:	208000cc 	andi	r2,r4,3
  808e1c:	280f883a 	mov	r7,r5
  808e20:	10003426 	beq	r2,zero,808ef4 <memchr+0xdc>
  808e24:	30bfffc4 	addi	r2,r6,-1
  808e28:	30001a26 	beq	r6,zero,808e94 <memchr+0x7c>
  808e2c:	20c00003 	ldbu	r3,0(r4)
  808e30:	29803fcc 	andi	r6,r5,255
  808e34:	30c0051e 	bne	r6,r3,808e4c <memchr+0x34>
  808e38:	00001806 	br	808e9c <memchr+0x84>
  808e3c:	10001526 	beq	r2,zero,808e94 <memchr+0x7c>
  808e40:	20c00003 	ldbu	r3,0(r4)
  808e44:	10bfffc4 	addi	r2,r2,-1
  808e48:	30c01426 	beq	r6,r3,808e9c <memchr+0x84>
  808e4c:	21000044 	addi	r4,r4,1
  808e50:	20c000cc 	andi	r3,r4,3
  808e54:	183ff91e 	bne	r3,zero,808e3c <__alt_data_end+0xff808e3c>
  808e58:	020000c4 	movi	r8,3
  808e5c:	40801136 	bltu	r8,r2,808ea4 <memchr+0x8c>
  808e60:	10000c26 	beq	r2,zero,808e94 <memchr+0x7c>
  808e64:	20c00003 	ldbu	r3,0(r4)
  808e68:	29403fcc 	andi	r5,r5,255
  808e6c:	28c00b26 	beq	r5,r3,808e9c <memchr+0x84>
  808e70:	20c00044 	addi	r3,r4,1
  808e74:	39803fcc 	andi	r6,r7,255
  808e78:	2089883a 	add	r4,r4,r2
  808e7c:	00000306 	br	808e8c <memchr+0x74>
  808e80:	18c00044 	addi	r3,r3,1
  808e84:	197fffc3 	ldbu	r5,-1(r3)
  808e88:	31400526 	beq	r6,r5,808ea0 <memchr+0x88>
  808e8c:	1805883a 	mov	r2,r3
  808e90:	20fffb1e 	bne	r4,r3,808e80 <__alt_data_end+0xff808e80>
  808e94:	0005883a 	mov	r2,zero
  808e98:	f800283a 	ret
  808e9c:	2005883a 	mov	r2,r4
  808ea0:	f800283a 	ret
  808ea4:	28c03fcc 	andi	r3,r5,255
  808ea8:	1812923a 	slli	r9,r3,8
  808eac:	02ffbff4 	movhi	r11,65279
  808eb0:	02a02074 	movhi	r10,32897
  808eb4:	48d2b03a 	or	r9,r9,r3
  808eb8:	4806943a 	slli	r3,r9,16
  808ebc:	5affbfc4 	addi	r11,r11,-257
  808ec0:	52a02004 	addi	r10,r10,-32640
  808ec4:	48d2b03a 	or	r9,r9,r3
  808ec8:	20c00017 	ldw	r3,0(r4)
  808ecc:	48c6f03a 	xor	r3,r9,r3
  808ed0:	1acd883a 	add	r6,r3,r11
  808ed4:	00c6303a 	nor	r3,zero,r3
  808ed8:	30c6703a 	and	r3,r6,r3
  808edc:	1a86703a 	and	r3,r3,r10
  808ee0:	183fe01e 	bne	r3,zero,808e64 <__alt_data_end+0xff808e64>
  808ee4:	10bfff04 	addi	r2,r2,-4
  808ee8:	21000104 	addi	r4,r4,4
  808eec:	40bff636 	bltu	r8,r2,808ec8 <__alt_data_end+0xff808ec8>
  808ef0:	003fdb06 	br	808e60 <__alt_data_end+0xff808e60>
  808ef4:	3005883a 	mov	r2,r6
  808ef8:	003fd706 	br	808e58 <__alt_data_end+0xff808e58>

00808efc <memcpy>:
  808efc:	defffd04 	addi	sp,sp,-12
  808f00:	dfc00215 	stw	ra,8(sp)
  808f04:	dc400115 	stw	r17,4(sp)
  808f08:	dc000015 	stw	r16,0(sp)
  808f0c:	00c003c4 	movi	r3,15
  808f10:	2005883a 	mov	r2,r4
  808f14:	1980452e 	bgeu	r3,r6,80902c <memcpy+0x130>
  808f18:	2906b03a 	or	r3,r5,r4
  808f1c:	18c000cc 	andi	r3,r3,3
  808f20:	1800441e 	bne	r3,zero,809034 <memcpy+0x138>
  808f24:	347ffc04 	addi	r17,r6,-16
  808f28:	8822d13a 	srli	r17,r17,4
  808f2c:	28c00104 	addi	r3,r5,4
  808f30:	23400104 	addi	r13,r4,4
  808f34:	8820913a 	slli	r16,r17,4
  808f38:	2b000204 	addi	r12,r5,8
  808f3c:	22c00204 	addi	r11,r4,8
  808f40:	84000504 	addi	r16,r16,20
  808f44:	2a800304 	addi	r10,r5,12
  808f48:	22400304 	addi	r9,r4,12
  808f4c:	2c21883a 	add	r16,r5,r16
  808f50:	2811883a 	mov	r8,r5
  808f54:	200f883a 	mov	r7,r4
  808f58:	41000017 	ldw	r4,0(r8)
  808f5c:	1fc00017 	ldw	ra,0(r3)
  808f60:	63c00017 	ldw	r15,0(r12)
  808f64:	39000015 	stw	r4,0(r7)
  808f68:	53800017 	ldw	r14,0(r10)
  808f6c:	6fc00015 	stw	ra,0(r13)
  808f70:	5bc00015 	stw	r15,0(r11)
  808f74:	4b800015 	stw	r14,0(r9)
  808f78:	18c00404 	addi	r3,r3,16
  808f7c:	39c00404 	addi	r7,r7,16
  808f80:	42000404 	addi	r8,r8,16
  808f84:	6b400404 	addi	r13,r13,16
  808f88:	63000404 	addi	r12,r12,16
  808f8c:	5ac00404 	addi	r11,r11,16
  808f90:	52800404 	addi	r10,r10,16
  808f94:	4a400404 	addi	r9,r9,16
  808f98:	1c3fef1e 	bne	r3,r16,808f58 <__alt_data_end+0xff808f58>
  808f9c:	89c00044 	addi	r7,r17,1
  808fa0:	380e913a 	slli	r7,r7,4
  808fa4:	310003cc 	andi	r4,r6,15
  808fa8:	02c000c4 	movi	r11,3
  808fac:	11c7883a 	add	r3,r2,r7
  808fb0:	29cb883a 	add	r5,r5,r7
  808fb4:	5900212e 	bgeu	r11,r4,80903c <memcpy+0x140>
  808fb8:	1813883a 	mov	r9,r3
  808fbc:	2811883a 	mov	r8,r5
  808fc0:	200f883a 	mov	r7,r4
  808fc4:	42800017 	ldw	r10,0(r8)
  808fc8:	4a400104 	addi	r9,r9,4
  808fcc:	39ffff04 	addi	r7,r7,-4
  808fd0:	4abfff15 	stw	r10,-4(r9)
  808fd4:	42000104 	addi	r8,r8,4
  808fd8:	59fffa36 	bltu	r11,r7,808fc4 <__alt_data_end+0xff808fc4>
  808fdc:	213fff04 	addi	r4,r4,-4
  808fe0:	2008d0ba 	srli	r4,r4,2
  808fe4:	318000cc 	andi	r6,r6,3
  808fe8:	21000044 	addi	r4,r4,1
  808fec:	2109883a 	add	r4,r4,r4
  808ff0:	2109883a 	add	r4,r4,r4
  808ff4:	1907883a 	add	r3,r3,r4
  808ff8:	290b883a 	add	r5,r5,r4
  808ffc:	30000626 	beq	r6,zero,809018 <memcpy+0x11c>
  809000:	198d883a 	add	r6,r3,r6
  809004:	29c00003 	ldbu	r7,0(r5)
  809008:	18c00044 	addi	r3,r3,1
  80900c:	29400044 	addi	r5,r5,1
  809010:	19ffffc5 	stb	r7,-1(r3)
  809014:	19bffb1e 	bne	r3,r6,809004 <__alt_data_end+0xff809004>
  809018:	dfc00217 	ldw	ra,8(sp)
  80901c:	dc400117 	ldw	r17,4(sp)
  809020:	dc000017 	ldw	r16,0(sp)
  809024:	dec00304 	addi	sp,sp,12
  809028:	f800283a 	ret
  80902c:	2007883a 	mov	r3,r4
  809030:	003ff206 	br	808ffc <__alt_data_end+0xff808ffc>
  809034:	2007883a 	mov	r3,r4
  809038:	003ff106 	br	809000 <__alt_data_end+0xff809000>
  80903c:	200d883a 	mov	r6,r4
  809040:	003fee06 	br	808ffc <__alt_data_end+0xff808ffc>

00809044 <memmove>:
  809044:	2005883a 	mov	r2,r4
  809048:	29000b2e 	bgeu	r5,r4,809078 <memmove+0x34>
  80904c:	298f883a 	add	r7,r5,r6
  809050:	21c0092e 	bgeu	r4,r7,809078 <memmove+0x34>
  809054:	2187883a 	add	r3,r4,r6
  809058:	198bc83a 	sub	r5,r3,r6
  80905c:	30004826 	beq	r6,zero,809180 <memmove+0x13c>
  809060:	39ffffc4 	addi	r7,r7,-1
  809064:	39000003 	ldbu	r4,0(r7)
  809068:	18ffffc4 	addi	r3,r3,-1
  80906c:	19000005 	stb	r4,0(r3)
  809070:	28fffb1e 	bne	r5,r3,809060 <__alt_data_end+0xff809060>
  809074:	f800283a 	ret
  809078:	00c003c4 	movi	r3,15
  80907c:	1980412e 	bgeu	r3,r6,809184 <memmove+0x140>
  809080:	2886b03a 	or	r3,r5,r2
  809084:	18c000cc 	andi	r3,r3,3
  809088:	1800401e 	bne	r3,zero,80918c <memmove+0x148>
  80908c:	33fffc04 	addi	r15,r6,-16
  809090:	781ed13a 	srli	r15,r15,4
  809094:	28c00104 	addi	r3,r5,4
  809098:	13400104 	addi	r13,r2,4
  80909c:	781c913a 	slli	r14,r15,4
  8090a0:	2b000204 	addi	r12,r5,8
  8090a4:	12c00204 	addi	r11,r2,8
  8090a8:	73800504 	addi	r14,r14,20
  8090ac:	2a800304 	addi	r10,r5,12
  8090b0:	12400304 	addi	r9,r2,12
  8090b4:	2b9d883a 	add	r14,r5,r14
  8090b8:	2811883a 	mov	r8,r5
  8090bc:	100f883a 	mov	r7,r2
  8090c0:	41000017 	ldw	r4,0(r8)
  8090c4:	39c00404 	addi	r7,r7,16
  8090c8:	18c00404 	addi	r3,r3,16
  8090cc:	393ffc15 	stw	r4,-16(r7)
  8090d0:	193ffc17 	ldw	r4,-16(r3)
  8090d4:	6b400404 	addi	r13,r13,16
  8090d8:	5ac00404 	addi	r11,r11,16
  8090dc:	693ffc15 	stw	r4,-16(r13)
  8090e0:	61000017 	ldw	r4,0(r12)
  8090e4:	4a400404 	addi	r9,r9,16
  8090e8:	42000404 	addi	r8,r8,16
  8090ec:	593ffc15 	stw	r4,-16(r11)
  8090f0:	51000017 	ldw	r4,0(r10)
  8090f4:	63000404 	addi	r12,r12,16
  8090f8:	52800404 	addi	r10,r10,16
  8090fc:	493ffc15 	stw	r4,-16(r9)
  809100:	1bbfef1e 	bne	r3,r14,8090c0 <__alt_data_end+0xff8090c0>
  809104:	79000044 	addi	r4,r15,1
  809108:	2008913a 	slli	r4,r4,4
  80910c:	328003cc 	andi	r10,r6,15
  809110:	02c000c4 	movi	r11,3
  809114:	1107883a 	add	r3,r2,r4
  809118:	290b883a 	add	r5,r5,r4
  80911c:	5a801e2e 	bgeu	r11,r10,809198 <memmove+0x154>
  809120:	1813883a 	mov	r9,r3
  809124:	2811883a 	mov	r8,r5
  809128:	500f883a 	mov	r7,r10
  80912c:	41000017 	ldw	r4,0(r8)
  809130:	4a400104 	addi	r9,r9,4
  809134:	39ffff04 	addi	r7,r7,-4
  809138:	493fff15 	stw	r4,-4(r9)
  80913c:	42000104 	addi	r8,r8,4
  809140:	59fffa36 	bltu	r11,r7,80912c <__alt_data_end+0xff80912c>
  809144:	513fff04 	addi	r4,r10,-4
  809148:	2008d0ba 	srli	r4,r4,2
  80914c:	318000cc 	andi	r6,r6,3
  809150:	21000044 	addi	r4,r4,1
  809154:	2109883a 	add	r4,r4,r4
  809158:	2109883a 	add	r4,r4,r4
  80915c:	1907883a 	add	r3,r3,r4
  809160:	290b883a 	add	r5,r5,r4
  809164:	30000b26 	beq	r6,zero,809194 <memmove+0x150>
  809168:	198d883a 	add	r6,r3,r6
  80916c:	29c00003 	ldbu	r7,0(r5)
  809170:	18c00044 	addi	r3,r3,1
  809174:	29400044 	addi	r5,r5,1
  809178:	19ffffc5 	stb	r7,-1(r3)
  80917c:	19bffb1e 	bne	r3,r6,80916c <__alt_data_end+0xff80916c>
  809180:	f800283a 	ret
  809184:	1007883a 	mov	r3,r2
  809188:	003ff606 	br	809164 <__alt_data_end+0xff809164>
  80918c:	1007883a 	mov	r3,r2
  809190:	003ff506 	br	809168 <__alt_data_end+0xff809168>
  809194:	f800283a 	ret
  809198:	500d883a 	mov	r6,r10
  80919c:	003ff106 	br	809164 <__alt_data_end+0xff809164>

008091a0 <memset>:
  8091a0:	20c000cc 	andi	r3,r4,3
  8091a4:	2005883a 	mov	r2,r4
  8091a8:	18004426 	beq	r3,zero,8092bc <memset+0x11c>
  8091ac:	31ffffc4 	addi	r7,r6,-1
  8091b0:	30004026 	beq	r6,zero,8092b4 <memset+0x114>
  8091b4:	2813883a 	mov	r9,r5
  8091b8:	200d883a 	mov	r6,r4
  8091bc:	2007883a 	mov	r3,r4
  8091c0:	00000406 	br	8091d4 <memset+0x34>
  8091c4:	3a3fffc4 	addi	r8,r7,-1
  8091c8:	31800044 	addi	r6,r6,1
  8091cc:	38003926 	beq	r7,zero,8092b4 <memset+0x114>
  8091d0:	400f883a 	mov	r7,r8
  8091d4:	18c00044 	addi	r3,r3,1
  8091d8:	32400005 	stb	r9,0(r6)
  8091dc:	1a0000cc 	andi	r8,r3,3
  8091e0:	403ff81e 	bne	r8,zero,8091c4 <__alt_data_end+0xff8091c4>
  8091e4:	010000c4 	movi	r4,3
  8091e8:	21c02d2e 	bgeu	r4,r7,8092a0 <memset+0x100>
  8091ec:	29003fcc 	andi	r4,r5,255
  8091f0:	200c923a 	slli	r6,r4,8
  8091f4:	3108b03a 	or	r4,r6,r4
  8091f8:	200c943a 	slli	r6,r4,16
  8091fc:	218cb03a 	or	r6,r4,r6
  809200:	010003c4 	movi	r4,15
  809204:	21c0182e 	bgeu	r4,r7,809268 <memset+0xc8>
  809208:	3b3ffc04 	addi	r12,r7,-16
  80920c:	6018d13a 	srli	r12,r12,4
  809210:	1a000104 	addi	r8,r3,4
  809214:	1ac00204 	addi	r11,r3,8
  809218:	6008913a 	slli	r4,r12,4
  80921c:	1a800304 	addi	r10,r3,12
  809220:	1813883a 	mov	r9,r3
  809224:	21000504 	addi	r4,r4,20
  809228:	1909883a 	add	r4,r3,r4
  80922c:	49800015 	stw	r6,0(r9)
  809230:	41800015 	stw	r6,0(r8)
  809234:	59800015 	stw	r6,0(r11)
  809238:	51800015 	stw	r6,0(r10)
  80923c:	42000404 	addi	r8,r8,16
  809240:	4a400404 	addi	r9,r9,16
  809244:	5ac00404 	addi	r11,r11,16
  809248:	52800404 	addi	r10,r10,16
  80924c:	413ff71e 	bne	r8,r4,80922c <__alt_data_end+0xff80922c>
  809250:	63000044 	addi	r12,r12,1
  809254:	6018913a 	slli	r12,r12,4
  809258:	39c003cc 	andi	r7,r7,15
  80925c:	010000c4 	movi	r4,3
  809260:	1b07883a 	add	r3,r3,r12
  809264:	21c00e2e 	bgeu	r4,r7,8092a0 <memset+0x100>
  809268:	1813883a 	mov	r9,r3
  80926c:	3811883a 	mov	r8,r7
  809270:	010000c4 	movi	r4,3
  809274:	49800015 	stw	r6,0(r9)
  809278:	423fff04 	addi	r8,r8,-4
  80927c:	4a400104 	addi	r9,r9,4
  809280:	223ffc36 	bltu	r4,r8,809274 <__alt_data_end+0xff809274>
  809284:	393fff04 	addi	r4,r7,-4
  809288:	2008d0ba 	srli	r4,r4,2
  80928c:	39c000cc 	andi	r7,r7,3
  809290:	21000044 	addi	r4,r4,1
  809294:	2109883a 	add	r4,r4,r4
  809298:	2109883a 	add	r4,r4,r4
  80929c:	1907883a 	add	r3,r3,r4
  8092a0:	38000526 	beq	r7,zero,8092b8 <memset+0x118>
  8092a4:	19cf883a 	add	r7,r3,r7
  8092a8:	19400005 	stb	r5,0(r3)
  8092ac:	18c00044 	addi	r3,r3,1
  8092b0:	38fffd1e 	bne	r7,r3,8092a8 <__alt_data_end+0xff8092a8>
  8092b4:	f800283a 	ret
  8092b8:	f800283a 	ret
  8092bc:	2007883a 	mov	r3,r4
  8092c0:	300f883a 	mov	r7,r6
  8092c4:	003fc706 	br	8091e4 <__alt_data_end+0xff8091e4>

008092c8 <_Balloc>:
  8092c8:	20801317 	ldw	r2,76(r4)
  8092cc:	defffc04 	addi	sp,sp,-16
  8092d0:	dc400115 	stw	r17,4(sp)
  8092d4:	dc000015 	stw	r16,0(sp)
  8092d8:	dfc00315 	stw	ra,12(sp)
  8092dc:	dc800215 	stw	r18,8(sp)
  8092e0:	2023883a 	mov	r17,r4
  8092e4:	2821883a 	mov	r16,r5
  8092e8:	10000f26 	beq	r2,zero,809328 <_Balloc+0x60>
  8092ec:	8407883a 	add	r3,r16,r16
  8092f0:	18c7883a 	add	r3,r3,r3
  8092f4:	10c7883a 	add	r3,r2,r3
  8092f8:	18800017 	ldw	r2,0(r3)
  8092fc:	10001126 	beq	r2,zero,809344 <_Balloc+0x7c>
  809300:	11000017 	ldw	r4,0(r2)
  809304:	19000015 	stw	r4,0(r3)
  809308:	10000415 	stw	zero,16(r2)
  80930c:	10000315 	stw	zero,12(r2)
  809310:	dfc00317 	ldw	ra,12(sp)
  809314:	dc800217 	ldw	r18,8(sp)
  809318:	dc400117 	ldw	r17,4(sp)
  80931c:	dc000017 	ldw	r16,0(sp)
  809320:	dec00404 	addi	sp,sp,16
  809324:	f800283a 	ret
  809328:	01800844 	movi	r6,33
  80932c:	01400104 	movi	r5,4
  809330:	080ac500 	call	80ac50 <_calloc_r>
  809334:	88801315 	stw	r2,76(r17)
  809338:	103fec1e 	bne	r2,zero,8092ec <__alt_data_end+0xff8092ec>
  80933c:	0005883a 	mov	r2,zero
  809340:	003ff306 	br	809310 <__alt_data_end+0xff809310>
  809344:	01400044 	movi	r5,1
  809348:	2c24983a 	sll	r18,r5,r16
  80934c:	8809883a 	mov	r4,r17
  809350:	91800144 	addi	r6,r18,5
  809354:	318d883a 	add	r6,r6,r6
  809358:	318d883a 	add	r6,r6,r6
  80935c:	080ac500 	call	80ac50 <_calloc_r>
  809360:	103ff626 	beq	r2,zero,80933c <__alt_data_end+0xff80933c>
  809364:	14000115 	stw	r16,4(r2)
  809368:	14800215 	stw	r18,8(r2)
  80936c:	003fe606 	br	809308 <__alt_data_end+0xff809308>

00809370 <_Bfree>:
  809370:	28000826 	beq	r5,zero,809394 <_Bfree+0x24>
  809374:	28c00117 	ldw	r3,4(r5)
  809378:	20801317 	ldw	r2,76(r4)
  80937c:	18c7883a 	add	r3,r3,r3
  809380:	18c7883a 	add	r3,r3,r3
  809384:	10c5883a 	add	r2,r2,r3
  809388:	10c00017 	ldw	r3,0(r2)
  80938c:	28c00015 	stw	r3,0(r5)
  809390:	11400015 	stw	r5,0(r2)
  809394:	f800283a 	ret

00809398 <__multadd>:
  809398:	defffa04 	addi	sp,sp,-24
  80939c:	dc800315 	stw	r18,12(sp)
  8093a0:	dc400215 	stw	r17,8(sp)
  8093a4:	dc000115 	stw	r16,4(sp)
  8093a8:	2823883a 	mov	r17,r5
  8093ac:	2c000417 	ldw	r16,16(r5)
  8093b0:	dfc00515 	stw	ra,20(sp)
  8093b4:	dcc00415 	stw	r19,16(sp)
  8093b8:	2025883a 	mov	r18,r4
  8093bc:	29400504 	addi	r5,r5,20
  8093c0:	0011883a 	mov	r8,zero
  8093c4:	28c00017 	ldw	r3,0(r5)
  8093c8:	29400104 	addi	r5,r5,4
  8093cc:	42000044 	addi	r8,r8,1
  8093d0:	18bfffcc 	andi	r2,r3,65535
  8093d4:	1185383a 	mul	r2,r2,r6
  8093d8:	1806d43a 	srli	r3,r3,16
  8093dc:	11cf883a 	add	r7,r2,r7
  8093e0:	3808d43a 	srli	r4,r7,16
  8093e4:	1987383a 	mul	r3,r3,r6
  8093e8:	38bfffcc 	andi	r2,r7,65535
  8093ec:	1907883a 	add	r3,r3,r4
  8093f0:	1808943a 	slli	r4,r3,16
  8093f4:	180ed43a 	srli	r7,r3,16
  8093f8:	2085883a 	add	r2,r4,r2
  8093fc:	28bfff15 	stw	r2,-4(r5)
  809400:	443ff016 	blt	r8,r16,8093c4 <__alt_data_end+0xff8093c4>
  809404:	38000926 	beq	r7,zero,80942c <__multadd+0x94>
  809408:	88800217 	ldw	r2,8(r17)
  80940c:	80800f0e 	bge	r16,r2,80944c <__multadd+0xb4>
  809410:	80800144 	addi	r2,r16,5
  809414:	1085883a 	add	r2,r2,r2
  809418:	1085883a 	add	r2,r2,r2
  80941c:	8885883a 	add	r2,r17,r2
  809420:	11c00015 	stw	r7,0(r2)
  809424:	84000044 	addi	r16,r16,1
  809428:	8c000415 	stw	r16,16(r17)
  80942c:	8805883a 	mov	r2,r17
  809430:	dfc00517 	ldw	ra,20(sp)
  809434:	dcc00417 	ldw	r19,16(sp)
  809438:	dc800317 	ldw	r18,12(sp)
  80943c:	dc400217 	ldw	r17,8(sp)
  809440:	dc000117 	ldw	r16,4(sp)
  809444:	dec00604 	addi	sp,sp,24
  809448:	f800283a 	ret
  80944c:	89400117 	ldw	r5,4(r17)
  809450:	9009883a 	mov	r4,r18
  809454:	d9c00015 	stw	r7,0(sp)
  809458:	29400044 	addi	r5,r5,1
  80945c:	08092c80 	call	8092c8 <_Balloc>
  809460:	89800417 	ldw	r6,16(r17)
  809464:	89400304 	addi	r5,r17,12
  809468:	11000304 	addi	r4,r2,12
  80946c:	31800084 	addi	r6,r6,2
  809470:	318d883a 	add	r6,r6,r6
  809474:	318d883a 	add	r6,r6,r6
  809478:	1027883a 	mov	r19,r2
  80947c:	0808efc0 	call	808efc <memcpy>
  809480:	d9c00017 	ldw	r7,0(sp)
  809484:	88000a26 	beq	r17,zero,8094b0 <__multadd+0x118>
  809488:	88c00117 	ldw	r3,4(r17)
  80948c:	90801317 	ldw	r2,76(r18)
  809490:	18c7883a 	add	r3,r3,r3
  809494:	18c7883a 	add	r3,r3,r3
  809498:	10c5883a 	add	r2,r2,r3
  80949c:	10c00017 	ldw	r3,0(r2)
  8094a0:	88c00015 	stw	r3,0(r17)
  8094a4:	14400015 	stw	r17,0(r2)
  8094a8:	9823883a 	mov	r17,r19
  8094ac:	003fd806 	br	809410 <__alt_data_end+0xff809410>
  8094b0:	9823883a 	mov	r17,r19
  8094b4:	003fd606 	br	809410 <__alt_data_end+0xff809410>

008094b8 <__s2b>:
  8094b8:	defff904 	addi	sp,sp,-28
  8094bc:	dc400115 	stw	r17,4(sp)
  8094c0:	dc000015 	stw	r16,0(sp)
  8094c4:	2023883a 	mov	r17,r4
  8094c8:	2821883a 	mov	r16,r5
  8094cc:	39000204 	addi	r4,r7,8
  8094d0:	01400244 	movi	r5,9
  8094d4:	dcc00315 	stw	r19,12(sp)
  8094d8:	dc800215 	stw	r18,8(sp)
  8094dc:	dfc00615 	stw	ra,24(sp)
  8094e0:	dd400515 	stw	r21,20(sp)
  8094e4:	dd000415 	stw	r20,16(sp)
  8094e8:	3825883a 	mov	r18,r7
  8094ec:	3027883a 	mov	r19,r6
  8094f0:	0802f000 	call	802f00 <__divsi3>
  8094f4:	00c00044 	movi	r3,1
  8094f8:	000b883a 	mov	r5,zero
  8094fc:	1880030e 	bge	r3,r2,80950c <__s2b+0x54>
  809500:	18c7883a 	add	r3,r3,r3
  809504:	29400044 	addi	r5,r5,1
  809508:	18bffd16 	blt	r3,r2,809500 <__alt_data_end+0xff809500>
  80950c:	8809883a 	mov	r4,r17
  809510:	08092c80 	call	8092c8 <_Balloc>
  809514:	d8c00717 	ldw	r3,28(sp)
  809518:	10c00515 	stw	r3,20(r2)
  80951c:	00c00044 	movi	r3,1
  809520:	10c00415 	stw	r3,16(r2)
  809524:	00c00244 	movi	r3,9
  809528:	1cc0210e 	bge	r3,r19,8095b0 <__s2b+0xf8>
  80952c:	80eb883a 	add	r21,r16,r3
  809530:	a829883a 	mov	r20,r21
  809534:	84e1883a 	add	r16,r16,r19
  809538:	a1c00007 	ldb	r7,0(r20)
  80953c:	01800284 	movi	r6,10
  809540:	a5000044 	addi	r20,r20,1
  809544:	100b883a 	mov	r5,r2
  809548:	39fff404 	addi	r7,r7,-48
  80954c:	8809883a 	mov	r4,r17
  809550:	08093980 	call	809398 <__multadd>
  809554:	a43ff81e 	bne	r20,r16,809538 <__alt_data_end+0xff809538>
  809558:	ace1883a 	add	r16,r21,r19
  80955c:	843ffe04 	addi	r16,r16,-8
  809560:	9c800a0e 	bge	r19,r18,80958c <__s2b+0xd4>
  809564:	94e5c83a 	sub	r18,r18,r19
  809568:	84a5883a 	add	r18,r16,r18
  80956c:	81c00007 	ldb	r7,0(r16)
  809570:	01800284 	movi	r6,10
  809574:	84000044 	addi	r16,r16,1
  809578:	100b883a 	mov	r5,r2
  80957c:	39fff404 	addi	r7,r7,-48
  809580:	8809883a 	mov	r4,r17
  809584:	08093980 	call	809398 <__multadd>
  809588:	84bff81e 	bne	r16,r18,80956c <__alt_data_end+0xff80956c>
  80958c:	dfc00617 	ldw	ra,24(sp)
  809590:	dd400517 	ldw	r21,20(sp)
  809594:	dd000417 	ldw	r20,16(sp)
  809598:	dcc00317 	ldw	r19,12(sp)
  80959c:	dc800217 	ldw	r18,8(sp)
  8095a0:	dc400117 	ldw	r17,4(sp)
  8095a4:	dc000017 	ldw	r16,0(sp)
  8095a8:	dec00704 	addi	sp,sp,28
  8095ac:	f800283a 	ret
  8095b0:	84000284 	addi	r16,r16,10
  8095b4:	1827883a 	mov	r19,r3
  8095b8:	003fe906 	br	809560 <__alt_data_end+0xff809560>

008095bc <__hi0bits>:
  8095bc:	20bfffec 	andhi	r2,r4,65535
  8095c0:	1000141e 	bne	r2,zero,809614 <__hi0bits+0x58>
  8095c4:	2008943a 	slli	r4,r4,16
  8095c8:	00800404 	movi	r2,16
  8095cc:	20ffc02c 	andhi	r3,r4,65280
  8095d0:	1800021e 	bne	r3,zero,8095dc <__hi0bits+0x20>
  8095d4:	2008923a 	slli	r4,r4,8
  8095d8:	10800204 	addi	r2,r2,8
  8095dc:	20fc002c 	andhi	r3,r4,61440
  8095e0:	1800021e 	bne	r3,zero,8095ec <__hi0bits+0x30>
  8095e4:	2008913a 	slli	r4,r4,4
  8095e8:	10800104 	addi	r2,r2,4
  8095ec:	20f0002c 	andhi	r3,r4,49152
  8095f0:	1800031e 	bne	r3,zero,809600 <__hi0bits+0x44>
  8095f4:	2109883a 	add	r4,r4,r4
  8095f8:	10800084 	addi	r2,r2,2
  8095fc:	2109883a 	add	r4,r4,r4
  809600:	20000316 	blt	r4,zero,809610 <__hi0bits+0x54>
  809604:	2110002c 	andhi	r4,r4,16384
  809608:	2000041e 	bne	r4,zero,80961c <__hi0bits+0x60>
  80960c:	00800804 	movi	r2,32
  809610:	f800283a 	ret
  809614:	0005883a 	mov	r2,zero
  809618:	003fec06 	br	8095cc <__alt_data_end+0xff8095cc>
  80961c:	10800044 	addi	r2,r2,1
  809620:	f800283a 	ret

00809624 <__lo0bits>:
  809624:	20c00017 	ldw	r3,0(r4)
  809628:	188001cc 	andi	r2,r3,7
  80962c:	10000826 	beq	r2,zero,809650 <__lo0bits+0x2c>
  809630:	1880004c 	andi	r2,r3,1
  809634:	1000211e 	bne	r2,zero,8096bc <__lo0bits+0x98>
  809638:	1880008c 	andi	r2,r3,2
  80963c:	1000211e 	bne	r2,zero,8096c4 <__lo0bits+0xa0>
  809640:	1806d0ba 	srli	r3,r3,2
  809644:	00800084 	movi	r2,2
  809648:	20c00015 	stw	r3,0(r4)
  80964c:	f800283a 	ret
  809650:	18bfffcc 	andi	r2,r3,65535
  809654:	10001326 	beq	r2,zero,8096a4 <__lo0bits+0x80>
  809658:	0005883a 	mov	r2,zero
  80965c:	19403fcc 	andi	r5,r3,255
  809660:	2800021e 	bne	r5,zero,80966c <__lo0bits+0x48>
  809664:	1806d23a 	srli	r3,r3,8
  809668:	10800204 	addi	r2,r2,8
  80966c:	194003cc 	andi	r5,r3,15
  809670:	2800021e 	bne	r5,zero,80967c <__lo0bits+0x58>
  809674:	1806d13a 	srli	r3,r3,4
  809678:	10800104 	addi	r2,r2,4
  80967c:	194000cc 	andi	r5,r3,3
  809680:	2800021e 	bne	r5,zero,80968c <__lo0bits+0x68>
  809684:	1806d0ba 	srli	r3,r3,2
  809688:	10800084 	addi	r2,r2,2
  80968c:	1940004c 	andi	r5,r3,1
  809690:	2800081e 	bne	r5,zero,8096b4 <__lo0bits+0x90>
  809694:	1806d07a 	srli	r3,r3,1
  809698:	1800051e 	bne	r3,zero,8096b0 <__lo0bits+0x8c>
  80969c:	00800804 	movi	r2,32
  8096a0:	f800283a 	ret
  8096a4:	1806d43a 	srli	r3,r3,16
  8096a8:	00800404 	movi	r2,16
  8096ac:	003feb06 	br	80965c <__alt_data_end+0xff80965c>
  8096b0:	10800044 	addi	r2,r2,1
  8096b4:	20c00015 	stw	r3,0(r4)
  8096b8:	f800283a 	ret
  8096bc:	0005883a 	mov	r2,zero
  8096c0:	f800283a 	ret
  8096c4:	1806d07a 	srli	r3,r3,1
  8096c8:	00800044 	movi	r2,1
  8096cc:	20c00015 	stw	r3,0(r4)
  8096d0:	f800283a 	ret

008096d4 <__i2b>:
  8096d4:	defffd04 	addi	sp,sp,-12
  8096d8:	dc000015 	stw	r16,0(sp)
  8096dc:	04000044 	movi	r16,1
  8096e0:	dc400115 	stw	r17,4(sp)
  8096e4:	2823883a 	mov	r17,r5
  8096e8:	800b883a 	mov	r5,r16
  8096ec:	dfc00215 	stw	ra,8(sp)
  8096f0:	08092c80 	call	8092c8 <_Balloc>
  8096f4:	14400515 	stw	r17,20(r2)
  8096f8:	14000415 	stw	r16,16(r2)
  8096fc:	dfc00217 	ldw	ra,8(sp)
  809700:	dc400117 	ldw	r17,4(sp)
  809704:	dc000017 	ldw	r16,0(sp)
  809708:	dec00304 	addi	sp,sp,12
  80970c:	f800283a 	ret

00809710 <__multiply>:
  809710:	defffa04 	addi	sp,sp,-24
  809714:	dcc00315 	stw	r19,12(sp)
  809718:	dc800215 	stw	r18,8(sp)
  80971c:	34c00417 	ldw	r19,16(r6)
  809720:	2c800417 	ldw	r18,16(r5)
  809724:	dd000415 	stw	r20,16(sp)
  809728:	dc400115 	stw	r17,4(sp)
  80972c:	dfc00515 	stw	ra,20(sp)
  809730:	dc000015 	stw	r16,0(sp)
  809734:	2829883a 	mov	r20,r5
  809738:	3023883a 	mov	r17,r6
  80973c:	94c0050e 	bge	r18,r19,809754 <__multiply+0x44>
  809740:	9007883a 	mov	r3,r18
  809744:	3029883a 	mov	r20,r6
  809748:	9825883a 	mov	r18,r19
  80974c:	2823883a 	mov	r17,r5
  809750:	1827883a 	mov	r19,r3
  809754:	a0800217 	ldw	r2,8(r20)
  809758:	94e1883a 	add	r16,r18,r19
  80975c:	a1400117 	ldw	r5,4(r20)
  809760:	1400010e 	bge	r2,r16,809768 <__multiply+0x58>
  809764:	29400044 	addi	r5,r5,1
  809768:	08092c80 	call	8092c8 <_Balloc>
  80976c:	8415883a 	add	r10,r16,r16
  809770:	12c00504 	addi	r11,r2,20
  809774:	5295883a 	add	r10,r10,r10
  809778:	5a95883a 	add	r10,r11,r10
  80977c:	5807883a 	mov	r3,r11
  809780:	5a80032e 	bgeu	r11,r10,809790 <__multiply+0x80>
  809784:	18000015 	stw	zero,0(r3)
  809788:	18c00104 	addi	r3,r3,4
  80978c:	1abffd36 	bltu	r3,r10,809784 <__alt_data_end+0xff809784>
  809790:	9ce7883a 	add	r19,r19,r19
  809794:	94a5883a 	add	r18,r18,r18
  809798:	89800504 	addi	r6,r17,20
  80979c:	9ce7883a 	add	r19,r19,r19
  8097a0:	a3400504 	addi	r13,r20,20
  8097a4:	94a5883a 	add	r18,r18,r18
  8097a8:	34d9883a 	add	r12,r6,r19
  8097ac:	6c93883a 	add	r9,r13,r18
  8097b0:	3300422e 	bgeu	r6,r12,8098bc <__multiply+0x1ac>
  8097b4:	37c00017 	ldw	ra,0(r6)
  8097b8:	fbffffcc 	andi	r15,ra,65535
  8097bc:	78001b26 	beq	r15,zero,80982c <__multiply+0x11c>
  8097c0:	5811883a 	mov	r8,r11
  8097c4:	681d883a 	mov	r14,r13
  8097c8:	000f883a 	mov	r7,zero
  8097cc:	71000017 	ldw	r4,0(r14)
  8097d0:	40c00017 	ldw	r3,0(r8)
  8097d4:	73800104 	addi	r14,r14,4
  8097d8:	217fffcc 	andi	r5,r4,65535
  8097dc:	2bcb383a 	mul	r5,r5,r15
  8097e0:	2008d43a 	srli	r4,r4,16
  8097e4:	1c7fffcc 	andi	r17,r3,65535
  8097e8:	2c4b883a 	add	r5,r5,r17
  8097ec:	29cb883a 	add	r5,r5,r7
  8097f0:	23c9383a 	mul	r4,r4,r15
  8097f4:	1806d43a 	srli	r3,r3,16
  8097f8:	280ed43a 	srli	r7,r5,16
  8097fc:	297fffcc 	andi	r5,r5,65535
  809800:	20c7883a 	add	r3,r4,r3
  809804:	19c7883a 	add	r3,r3,r7
  809808:	1808943a 	slli	r4,r3,16
  80980c:	4023883a 	mov	r17,r8
  809810:	180ed43a 	srli	r7,r3,16
  809814:	214ab03a 	or	r5,r4,r5
  809818:	41400015 	stw	r5,0(r8)
  80981c:	42000104 	addi	r8,r8,4
  809820:	727fea36 	bltu	r14,r9,8097cc <__alt_data_end+0xff8097cc>
  809824:	89c00115 	stw	r7,4(r17)
  809828:	37c00017 	ldw	ra,0(r6)
  80982c:	f83ed43a 	srli	ra,ra,16
  809830:	f8001f26 	beq	ra,zero,8098b0 <__multiply+0x1a0>
  809834:	58c00017 	ldw	r3,0(r11)
  809838:	681d883a 	mov	r14,r13
  80983c:	581f883a 	mov	r15,r11
  809840:	1811883a 	mov	r8,r3
  809844:	5825883a 	mov	r18,r11
  809848:	000f883a 	mov	r7,zero
  80984c:	00000106 	br	809854 <__multiply+0x144>
  809850:	8825883a 	mov	r18,r17
  809854:	7140000b 	ldhu	r5,0(r14)
  809858:	4010d43a 	srli	r8,r8,16
  80985c:	193fffcc 	andi	r4,r3,65535
  809860:	2fcb383a 	mul	r5,r5,ra
  809864:	7bc00104 	addi	r15,r15,4
  809868:	73800104 	addi	r14,r14,4
  80986c:	2a0b883a 	add	r5,r5,r8
  809870:	29cb883a 	add	r5,r5,r7
  809874:	2806943a 	slli	r3,r5,16
  809878:	94400104 	addi	r17,r18,4
  80987c:	280ad43a 	srli	r5,r5,16
  809880:	1908b03a 	or	r4,r3,r4
  809884:	793fff15 	stw	r4,-4(r15)
  809888:	70ffff17 	ldw	r3,-4(r14)
  80988c:	8a000017 	ldw	r8,0(r17)
  809890:	1806d43a 	srli	r3,r3,16
  809894:	413fffcc 	andi	r4,r8,65535
  809898:	1fc7383a 	mul	r3,r3,ra
  80989c:	1907883a 	add	r3,r3,r4
  8098a0:	1947883a 	add	r3,r3,r5
  8098a4:	180ed43a 	srli	r7,r3,16
  8098a8:	727fe936 	bltu	r14,r9,809850 <__alt_data_end+0xff809850>
  8098ac:	90c00115 	stw	r3,4(r18)
  8098b0:	31800104 	addi	r6,r6,4
  8098b4:	5ac00104 	addi	r11,r11,4
  8098b8:	333fbe36 	bltu	r6,r12,8097b4 <__alt_data_end+0xff8097b4>
  8098bc:	0400090e 	bge	zero,r16,8098e4 <__multiply+0x1d4>
  8098c0:	50ffff17 	ldw	r3,-4(r10)
  8098c4:	52bfff04 	addi	r10,r10,-4
  8098c8:	18000326 	beq	r3,zero,8098d8 <__multiply+0x1c8>
  8098cc:	00000506 	br	8098e4 <__multiply+0x1d4>
  8098d0:	50c00017 	ldw	r3,0(r10)
  8098d4:	1800031e 	bne	r3,zero,8098e4 <__multiply+0x1d4>
  8098d8:	843fffc4 	addi	r16,r16,-1
  8098dc:	52bfff04 	addi	r10,r10,-4
  8098e0:	803ffb1e 	bne	r16,zero,8098d0 <__alt_data_end+0xff8098d0>
  8098e4:	14000415 	stw	r16,16(r2)
  8098e8:	dfc00517 	ldw	ra,20(sp)
  8098ec:	dd000417 	ldw	r20,16(sp)
  8098f0:	dcc00317 	ldw	r19,12(sp)
  8098f4:	dc800217 	ldw	r18,8(sp)
  8098f8:	dc400117 	ldw	r17,4(sp)
  8098fc:	dc000017 	ldw	r16,0(sp)
  809900:	dec00604 	addi	sp,sp,24
  809904:	f800283a 	ret

00809908 <__pow5mult>:
  809908:	defffa04 	addi	sp,sp,-24
  80990c:	dcc00315 	stw	r19,12(sp)
  809910:	dc000015 	stw	r16,0(sp)
  809914:	dfc00515 	stw	ra,20(sp)
  809918:	dd000415 	stw	r20,16(sp)
  80991c:	dc800215 	stw	r18,8(sp)
  809920:	dc400115 	stw	r17,4(sp)
  809924:	308000cc 	andi	r2,r6,3
  809928:	3021883a 	mov	r16,r6
  80992c:	2027883a 	mov	r19,r4
  809930:	10002f1e 	bne	r2,zero,8099f0 <__pow5mult+0xe8>
  809934:	2825883a 	mov	r18,r5
  809938:	8021d0ba 	srai	r16,r16,2
  80993c:	80001a26 	beq	r16,zero,8099a8 <__pow5mult+0xa0>
  809940:	9c401217 	ldw	r17,72(r19)
  809944:	8800061e 	bne	r17,zero,809960 <__pow5mult+0x58>
  809948:	00003406 	br	809a1c <__pow5mult+0x114>
  80994c:	8021d07a 	srai	r16,r16,1
  809950:	80001526 	beq	r16,zero,8099a8 <__pow5mult+0xa0>
  809954:	88800017 	ldw	r2,0(r17)
  809958:	10001c26 	beq	r2,zero,8099cc <__pow5mult+0xc4>
  80995c:	1023883a 	mov	r17,r2
  809960:	8080004c 	andi	r2,r16,1
  809964:	103ff926 	beq	r2,zero,80994c <__alt_data_end+0xff80994c>
  809968:	880d883a 	mov	r6,r17
  80996c:	900b883a 	mov	r5,r18
  809970:	9809883a 	mov	r4,r19
  809974:	08097100 	call	809710 <__multiply>
  809978:	90001b26 	beq	r18,zero,8099e8 <__pow5mult+0xe0>
  80997c:	91000117 	ldw	r4,4(r18)
  809980:	98c01317 	ldw	r3,76(r19)
  809984:	8021d07a 	srai	r16,r16,1
  809988:	2109883a 	add	r4,r4,r4
  80998c:	2109883a 	add	r4,r4,r4
  809990:	1907883a 	add	r3,r3,r4
  809994:	19000017 	ldw	r4,0(r3)
  809998:	91000015 	stw	r4,0(r18)
  80999c:	1c800015 	stw	r18,0(r3)
  8099a0:	1025883a 	mov	r18,r2
  8099a4:	803feb1e 	bne	r16,zero,809954 <__alt_data_end+0xff809954>
  8099a8:	9005883a 	mov	r2,r18
  8099ac:	dfc00517 	ldw	ra,20(sp)
  8099b0:	dd000417 	ldw	r20,16(sp)
  8099b4:	dcc00317 	ldw	r19,12(sp)
  8099b8:	dc800217 	ldw	r18,8(sp)
  8099bc:	dc400117 	ldw	r17,4(sp)
  8099c0:	dc000017 	ldw	r16,0(sp)
  8099c4:	dec00604 	addi	sp,sp,24
  8099c8:	f800283a 	ret
  8099cc:	880d883a 	mov	r6,r17
  8099d0:	880b883a 	mov	r5,r17
  8099d4:	9809883a 	mov	r4,r19
  8099d8:	08097100 	call	809710 <__multiply>
  8099dc:	88800015 	stw	r2,0(r17)
  8099e0:	10000015 	stw	zero,0(r2)
  8099e4:	003fdd06 	br	80995c <__alt_data_end+0xff80995c>
  8099e8:	1025883a 	mov	r18,r2
  8099ec:	003fd706 	br	80994c <__alt_data_end+0xff80994c>
  8099f0:	10bfffc4 	addi	r2,r2,-1
  8099f4:	1085883a 	add	r2,r2,r2
  8099f8:	00c02074 	movhi	r3,129
  8099fc:	18ff8b04 	addi	r3,r3,-468
  809a00:	1085883a 	add	r2,r2,r2
  809a04:	1885883a 	add	r2,r3,r2
  809a08:	11800017 	ldw	r6,0(r2)
  809a0c:	000f883a 	mov	r7,zero
  809a10:	08093980 	call	809398 <__multadd>
  809a14:	1025883a 	mov	r18,r2
  809a18:	003fc706 	br	809938 <__alt_data_end+0xff809938>
  809a1c:	05000044 	movi	r20,1
  809a20:	a00b883a 	mov	r5,r20
  809a24:	9809883a 	mov	r4,r19
  809a28:	08092c80 	call	8092c8 <_Balloc>
  809a2c:	1023883a 	mov	r17,r2
  809a30:	00809c44 	movi	r2,625
  809a34:	88800515 	stw	r2,20(r17)
  809a38:	8d000415 	stw	r20,16(r17)
  809a3c:	9c401215 	stw	r17,72(r19)
  809a40:	88000015 	stw	zero,0(r17)
  809a44:	003fc606 	br	809960 <__alt_data_end+0xff809960>

00809a48 <__lshift>:
  809a48:	defff904 	addi	sp,sp,-28
  809a4c:	dd400515 	stw	r21,20(sp)
  809a50:	dcc00315 	stw	r19,12(sp)
  809a54:	302bd17a 	srai	r21,r6,5
  809a58:	2cc00417 	ldw	r19,16(r5)
  809a5c:	28800217 	ldw	r2,8(r5)
  809a60:	dd000415 	stw	r20,16(sp)
  809a64:	ace7883a 	add	r19,r21,r19
  809a68:	dc800215 	stw	r18,8(sp)
  809a6c:	dc400115 	stw	r17,4(sp)
  809a70:	dc000015 	stw	r16,0(sp)
  809a74:	dfc00615 	stw	ra,24(sp)
  809a78:	9c000044 	addi	r16,r19,1
  809a7c:	2823883a 	mov	r17,r5
  809a80:	3029883a 	mov	r20,r6
  809a84:	2025883a 	mov	r18,r4
  809a88:	29400117 	ldw	r5,4(r5)
  809a8c:	1400030e 	bge	r2,r16,809a9c <__lshift+0x54>
  809a90:	1085883a 	add	r2,r2,r2
  809a94:	29400044 	addi	r5,r5,1
  809a98:	143ffd16 	blt	r2,r16,809a90 <__alt_data_end+0xff809a90>
  809a9c:	9009883a 	mov	r4,r18
  809aa0:	08092c80 	call	8092c8 <_Balloc>
  809aa4:	10c00504 	addi	r3,r2,20
  809aa8:	0540070e 	bge	zero,r21,809ac8 <__lshift+0x80>
  809aac:	ad6b883a 	add	r21,r21,r21
  809ab0:	ad6b883a 	add	r21,r21,r21
  809ab4:	1809883a 	mov	r4,r3
  809ab8:	1d47883a 	add	r3,r3,r21
  809abc:	20000015 	stw	zero,0(r4)
  809ac0:	21000104 	addi	r4,r4,4
  809ac4:	193ffd1e 	bne	r3,r4,809abc <__alt_data_end+0xff809abc>
  809ac8:	8a000417 	ldw	r8,16(r17)
  809acc:	89000504 	addi	r4,r17,20
  809ad0:	a18007cc 	andi	r6,r20,31
  809ad4:	4211883a 	add	r8,r8,r8
  809ad8:	4211883a 	add	r8,r8,r8
  809adc:	2211883a 	add	r8,r4,r8
  809ae0:	30002326 	beq	r6,zero,809b70 <__lshift+0x128>
  809ae4:	02400804 	movi	r9,32
  809ae8:	4993c83a 	sub	r9,r9,r6
  809aec:	000b883a 	mov	r5,zero
  809af0:	21c00017 	ldw	r7,0(r4)
  809af4:	1815883a 	mov	r10,r3
  809af8:	18c00104 	addi	r3,r3,4
  809afc:	398e983a 	sll	r7,r7,r6
  809b00:	21000104 	addi	r4,r4,4
  809b04:	394ab03a 	or	r5,r7,r5
  809b08:	197fff15 	stw	r5,-4(r3)
  809b0c:	217fff17 	ldw	r5,-4(r4)
  809b10:	2a4ad83a 	srl	r5,r5,r9
  809b14:	223ff636 	bltu	r4,r8,809af0 <__alt_data_end+0xff809af0>
  809b18:	51400115 	stw	r5,4(r10)
  809b1c:	28001a1e 	bne	r5,zero,809b88 <__lshift+0x140>
  809b20:	843fffc4 	addi	r16,r16,-1
  809b24:	14000415 	stw	r16,16(r2)
  809b28:	88000826 	beq	r17,zero,809b4c <__lshift+0x104>
  809b2c:	89000117 	ldw	r4,4(r17)
  809b30:	90c01317 	ldw	r3,76(r18)
  809b34:	2109883a 	add	r4,r4,r4
  809b38:	2109883a 	add	r4,r4,r4
  809b3c:	1907883a 	add	r3,r3,r4
  809b40:	19000017 	ldw	r4,0(r3)
  809b44:	89000015 	stw	r4,0(r17)
  809b48:	1c400015 	stw	r17,0(r3)
  809b4c:	dfc00617 	ldw	ra,24(sp)
  809b50:	dd400517 	ldw	r21,20(sp)
  809b54:	dd000417 	ldw	r20,16(sp)
  809b58:	dcc00317 	ldw	r19,12(sp)
  809b5c:	dc800217 	ldw	r18,8(sp)
  809b60:	dc400117 	ldw	r17,4(sp)
  809b64:	dc000017 	ldw	r16,0(sp)
  809b68:	dec00704 	addi	sp,sp,28
  809b6c:	f800283a 	ret
  809b70:	21400017 	ldw	r5,0(r4)
  809b74:	18c00104 	addi	r3,r3,4
  809b78:	21000104 	addi	r4,r4,4
  809b7c:	197fff15 	stw	r5,-4(r3)
  809b80:	223ffb36 	bltu	r4,r8,809b70 <__alt_data_end+0xff809b70>
  809b84:	003fe606 	br	809b20 <__alt_data_end+0xff809b20>
  809b88:	9c000084 	addi	r16,r19,2
  809b8c:	003fe406 	br	809b20 <__alt_data_end+0xff809b20>

00809b90 <__mcmp>:
  809b90:	20800417 	ldw	r2,16(r4)
  809b94:	28c00417 	ldw	r3,16(r5)
  809b98:	10c5c83a 	sub	r2,r2,r3
  809b9c:	1000111e 	bne	r2,zero,809be4 <__mcmp+0x54>
  809ba0:	18c7883a 	add	r3,r3,r3
  809ba4:	18c7883a 	add	r3,r3,r3
  809ba8:	21000504 	addi	r4,r4,20
  809bac:	29400504 	addi	r5,r5,20
  809bb0:	20c5883a 	add	r2,r4,r3
  809bb4:	28cb883a 	add	r5,r5,r3
  809bb8:	00000106 	br	809bc0 <__mcmp+0x30>
  809bbc:	20800a2e 	bgeu	r4,r2,809be8 <__mcmp+0x58>
  809bc0:	10bfff04 	addi	r2,r2,-4
  809bc4:	297fff04 	addi	r5,r5,-4
  809bc8:	11800017 	ldw	r6,0(r2)
  809bcc:	28c00017 	ldw	r3,0(r5)
  809bd0:	30fffa26 	beq	r6,r3,809bbc <__alt_data_end+0xff809bbc>
  809bd4:	30c00236 	bltu	r6,r3,809be0 <__mcmp+0x50>
  809bd8:	00800044 	movi	r2,1
  809bdc:	f800283a 	ret
  809be0:	00bfffc4 	movi	r2,-1
  809be4:	f800283a 	ret
  809be8:	0005883a 	mov	r2,zero
  809bec:	f800283a 	ret

00809bf0 <__mdiff>:
  809bf0:	28c00417 	ldw	r3,16(r5)
  809bf4:	30800417 	ldw	r2,16(r6)
  809bf8:	defffa04 	addi	sp,sp,-24
  809bfc:	dcc00315 	stw	r19,12(sp)
  809c00:	dc800215 	stw	r18,8(sp)
  809c04:	dfc00515 	stw	ra,20(sp)
  809c08:	dd000415 	stw	r20,16(sp)
  809c0c:	dc400115 	stw	r17,4(sp)
  809c10:	dc000015 	stw	r16,0(sp)
  809c14:	1887c83a 	sub	r3,r3,r2
  809c18:	2825883a 	mov	r18,r5
  809c1c:	3027883a 	mov	r19,r6
  809c20:	1800141e 	bne	r3,zero,809c74 <__mdiff+0x84>
  809c24:	1085883a 	add	r2,r2,r2
  809c28:	1085883a 	add	r2,r2,r2
  809c2c:	2a000504 	addi	r8,r5,20
  809c30:	34000504 	addi	r16,r6,20
  809c34:	4087883a 	add	r3,r8,r2
  809c38:	8085883a 	add	r2,r16,r2
  809c3c:	00000106 	br	809c44 <__mdiff+0x54>
  809c40:	40c0592e 	bgeu	r8,r3,809da8 <__mdiff+0x1b8>
  809c44:	18ffff04 	addi	r3,r3,-4
  809c48:	10bfff04 	addi	r2,r2,-4
  809c4c:	19c00017 	ldw	r7,0(r3)
  809c50:	11400017 	ldw	r5,0(r2)
  809c54:	397ffa26 	beq	r7,r5,809c40 <__alt_data_end+0xff809c40>
  809c58:	3940592e 	bgeu	r7,r5,809dc0 <__mdiff+0x1d0>
  809c5c:	9005883a 	mov	r2,r18
  809c60:	4023883a 	mov	r17,r8
  809c64:	9825883a 	mov	r18,r19
  809c68:	05000044 	movi	r20,1
  809c6c:	1027883a 	mov	r19,r2
  809c70:	00000406 	br	809c84 <__mdiff+0x94>
  809c74:	18005616 	blt	r3,zero,809dd0 <__mdiff+0x1e0>
  809c78:	34400504 	addi	r17,r6,20
  809c7c:	2c000504 	addi	r16,r5,20
  809c80:	0029883a 	mov	r20,zero
  809c84:	91400117 	ldw	r5,4(r18)
  809c88:	08092c80 	call	8092c8 <_Balloc>
  809c8c:	92400417 	ldw	r9,16(r18)
  809c90:	9b000417 	ldw	r12,16(r19)
  809c94:	12c00504 	addi	r11,r2,20
  809c98:	4a51883a 	add	r8,r9,r9
  809c9c:	6319883a 	add	r12,r12,r12
  809ca0:	4211883a 	add	r8,r8,r8
  809ca4:	6319883a 	add	r12,r12,r12
  809ca8:	15000315 	stw	r20,12(r2)
  809cac:	8211883a 	add	r8,r16,r8
  809cb0:	8b19883a 	add	r12,r17,r12
  809cb4:	0007883a 	mov	r3,zero
  809cb8:	81400017 	ldw	r5,0(r16)
  809cbc:	89c00017 	ldw	r7,0(r17)
  809cc0:	59800104 	addi	r6,r11,4
  809cc4:	293fffcc 	andi	r4,r5,65535
  809cc8:	20c7883a 	add	r3,r4,r3
  809ccc:	393fffcc 	andi	r4,r7,65535
  809cd0:	1909c83a 	sub	r4,r3,r4
  809cd4:	280ad43a 	srli	r5,r5,16
  809cd8:	380ed43a 	srli	r7,r7,16
  809cdc:	2007d43a 	srai	r3,r4,16
  809ce0:	213fffcc 	andi	r4,r4,65535
  809ce4:	29cbc83a 	sub	r5,r5,r7
  809ce8:	28c7883a 	add	r3,r5,r3
  809cec:	180a943a 	slli	r5,r3,16
  809cf0:	8c400104 	addi	r17,r17,4
  809cf4:	84000104 	addi	r16,r16,4
  809cf8:	2908b03a 	or	r4,r5,r4
  809cfc:	59000015 	stw	r4,0(r11)
  809d00:	1807d43a 	srai	r3,r3,16
  809d04:	3015883a 	mov	r10,r6
  809d08:	3017883a 	mov	r11,r6
  809d0c:	8b3fea36 	bltu	r17,r12,809cb8 <__alt_data_end+0xff809cb8>
  809d10:	8200162e 	bgeu	r16,r8,809d6c <__mdiff+0x17c>
  809d14:	8017883a 	mov	r11,r16
  809d18:	59400017 	ldw	r5,0(r11)
  809d1c:	31800104 	addi	r6,r6,4
  809d20:	5ac00104 	addi	r11,r11,4
  809d24:	293fffcc 	andi	r4,r5,65535
  809d28:	20c7883a 	add	r3,r4,r3
  809d2c:	280ed43a 	srli	r7,r5,16
  809d30:	180bd43a 	srai	r5,r3,16
  809d34:	193fffcc 	andi	r4,r3,65535
  809d38:	3947883a 	add	r3,r7,r5
  809d3c:	180a943a 	slli	r5,r3,16
  809d40:	1807d43a 	srai	r3,r3,16
  809d44:	2908b03a 	or	r4,r5,r4
  809d48:	313fff15 	stw	r4,-4(r6)
  809d4c:	5a3ff236 	bltu	r11,r8,809d18 <__alt_data_end+0xff809d18>
  809d50:	0406303a 	nor	r3,zero,r16
  809d54:	1a07883a 	add	r3,r3,r8
  809d58:	1806d0ba 	srli	r3,r3,2
  809d5c:	18c00044 	addi	r3,r3,1
  809d60:	18c7883a 	add	r3,r3,r3
  809d64:	18c7883a 	add	r3,r3,r3
  809d68:	50d5883a 	add	r10,r10,r3
  809d6c:	50ffff04 	addi	r3,r10,-4
  809d70:	2000041e 	bne	r4,zero,809d84 <__mdiff+0x194>
  809d74:	18ffff04 	addi	r3,r3,-4
  809d78:	19000017 	ldw	r4,0(r3)
  809d7c:	4a7fffc4 	addi	r9,r9,-1
  809d80:	203ffc26 	beq	r4,zero,809d74 <__alt_data_end+0xff809d74>
  809d84:	12400415 	stw	r9,16(r2)
  809d88:	dfc00517 	ldw	ra,20(sp)
  809d8c:	dd000417 	ldw	r20,16(sp)
  809d90:	dcc00317 	ldw	r19,12(sp)
  809d94:	dc800217 	ldw	r18,8(sp)
  809d98:	dc400117 	ldw	r17,4(sp)
  809d9c:	dc000017 	ldw	r16,0(sp)
  809da0:	dec00604 	addi	sp,sp,24
  809da4:	f800283a 	ret
  809da8:	000b883a 	mov	r5,zero
  809dac:	08092c80 	call	8092c8 <_Balloc>
  809db0:	00c00044 	movi	r3,1
  809db4:	10c00415 	stw	r3,16(r2)
  809db8:	10000515 	stw	zero,20(r2)
  809dbc:	003ff206 	br	809d88 <__alt_data_end+0xff809d88>
  809dc0:	8023883a 	mov	r17,r16
  809dc4:	0029883a 	mov	r20,zero
  809dc8:	4021883a 	mov	r16,r8
  809dcc:	003fad06 	br	809c84 <__alt_data_end+0xff809c84>
  809dd0:	9005883a 	mov	r2,r18
  809dd4:	94400504 	addi	r17,r18,20
  809dd8:	9c000504 	addi	r16,r19,20
  809ddc:	9825883a 	mov	r18,r19
  809de0:	05000044 	movi	r20,1
  809de4:	1027883a 	mov	r19,r2
  809de8:	003fa606 	br	809c84 <__alt_data_end+0xff809c84>

00809dec <__ulp>:
  809dec:	295ffc2c 	andhi	r5,r5,32752
  809df0:	00bf3034 	movhi	r2,64704
  809df4:	2887883a 	add	r3,r5,r2
  809df8:	00c0020e 	bge	zero,r3,809e04 <__ulp+0x18>
  809dfc:	0005883a 	mov	r2,zero
  809e00:	f800283a 	ret
  809e04:	00c7c83a 	sub	r3,zero,r3
  809e08:	1807d53a 	srai	r3,r3,20
  809e0c:	008004c4 	movi	r2,19
  809e10:	10c00b0e 	bge	r2,r3,809e40 <__ulp+0x54>
  809e14:	18bffb04 	addi	r2,r3,-20
  809e18:	01000784 	movi	r4,30
  809e1c:	0007883a 	mov	r3,zero
  809e20:	20800516 	blt	r4,r2,809e38 <__ulp+0x4c>
  809e24:	010007c4 	movi	r4,31
  809e28:	2089c83a 	sub	r4,r4,r2
  809e2c:	00800044 	movi	r2,1
  809e30:	1104983a 	sll	r2,r2,r4
  809e34:	f800283a 	ret
  809e38:	00800044 	movi	r2,1
  809e3c:	f800283a 	ret
  809e40:	01400234 	movhi	r5,8
  809e44:	28c7d83a 	sra	r3,r5,r3
  809e48:	0005883a 	mov	r2,zero
  809e4c:	f800283a 	ret

00809e50 <__b2d>:
  809e50:	defffa04 	addi	sp,sp,-24
  809e54:	dc000015 	stw	r16,0(sp)
  809e58:	24000417 	ldw	r16,16(r4)
  809e5c:	dc400115 	stw	r17,4(sp)
  809e60:	24400504 	addi	r17,r4,20
  809e64:	8421883a 	add	r16,r16,r16
  809e68:	8421883a 	add	r16,r16,r16
  809e6c:	8c21883a 	add	r16,r17,r16
  809e70:	dc800215 	stw	r18,8(sp)
  809e74:	84bfff17 	ldw	r18,-4(r16)
  809e78:	dd000415 	stw	r20,16(sp)
  809e7c:	dcc00315 	stw	r19,12(sp)
  809e80:	9009883a 	mov	r4,r18
  809e84:	2829883a 	mov	r20,r5
  809e88:	dfc00515 	stw	ra,20(sp)
  809e8c:	08095bc0 	call	8095bc <__hi0bits>
  809e90:	00c00804 	movi	r3,32
  809e94:	1889c83a 	sub	r4,r3,r2
  809e98:	a1000015 	stw	r4,0(r20)
  809e9c:	01000284 	movi	r4,10
  809ea0:	84ffff04 	addi	r19,r16,-4
  809ea4:	20801216 	blt	r4,r2,809ef0 <__b2d+0xa0>
  809ea8:	018002c4 	movi	r6,11
  809eac:	308dc83a 	sub	r6,r6,r2
  809eb0:	9186d83a 	srl	r3,r18,r6
  809eb4:	18cffc34 	orhi	r3,r3,16368
  809eb8:	8cc0212e 	bgeu	r17,r19,809f40 <__b2d+0xf0>
  809ebc:	813ffe17 	ldw	r4,-8(r16)
  809ec0:	218cd83a 	srl	r6,r4,r6
  809ec4:	10800544 	addi	r2,r2,21
  809ec8:	9084983a 	sll	r2,r18,r2
  809ecc:	1184b03a 	or	r2,r2,r6
  809ed0:	dfc00517 	ldw	ra,20(sp)
  809ed4:	dd000417 	ldw	r20,16(sp)
  809ed8:	dcc00317 	ldw	r19,12(sp)
  809edc:	dc800217 	ldw	r18,8(sp)
  809ee0:	dc400117 	ldw	r17,4(sp)
  809ee4:	dc000017 	ldw	r16,0(sp)
  809ee8:	dec00604 	addi	sp,sp,24
  809eec:	f800283a 	ret
  809ef0:	8cc00f2e 	bgeu	r17,r19,809f30 <__b2d+0xe0>
  809ef4:	117ffd44 	addi	r5,r2,-11
  809ef8:	80bffe17 	ldw	r2,-8(r16)
  809efc:	28000e26 	beq	r5,zero,809f38 <__b2d+0xe8>
  809f00:	1949c83a 	sub	r4,r3,r5
  809f04:	9164983a 	sll	r18,r18,r5
  809f08:	1106d83a 	srl	r3,r2,r4
  809f0c:	81bffe04 	addi	r6,r16,-8
  809f10:	948ffc34 	orhi	r18,r18,16368
  809f14:	90c6b03a 	or	r3,r18,r3
  809f18:	89800e2e 	bgeu	r17,r6,809f54 <__b2d+0x104>
  809f1c:	81bffd17 	ldw	r6,-12(r16)
  809f20:	1144983a 	sll	r2,r2,r5
  809f24:	310ad83a 	srl	r5,r6,r4
  809f28:	2884b03a 	or	r2,r5,r2
  809f2c:	003fe806 	br	809ed0 <__alt_data_end+0xff809ed0>
  809f30:	10bffd44 	addi	r2,r2,-11
  809f34:	1000041e 	bne	r2,zero,809f48 <__b2d+0xf8>
  809f38:	90cffc34 	orhi	r3,r18,16368
  809f3c:	003fe406 	br	809ed0 <__alt_data_end+0xff809ed0>
  809f40:	000d883a 	mov	r6,zero
  809f44:	003fdf06 	br	809ec4 <__alt_data_end+0xff809ec4>
  809f48:	90a4983a 	sll	r18,r18,r2
  809f4c:	0005883a 	mov	r2,zero
  809f50:	003ff906 	br	809f38 <__alt_data_end+0xff809f38>
  809f54:	1144983a 	sll	r2,r2,r5
  809f58:	003fdd06 	br	809ed0 <__alt_data_end+0xff809ed0>

00809f5c <__d2b>:
  809f5c:	defff804 	addi	sp,sp,-32
  809f60:	dc000215 	stw	r16,8(sp)
  809f64:	3021883a 	mov	r16,r6
  809f68:	dc400315 	stw	r17,12(sp)
  809f6c:	8022907a 	slli	r17,r16,1
  809f70:	dd000615 	stw	r20,24(sp)
  809f74:	2829883a 	mov	r20,r5
  809f78:	01400044 	movi	r5,1
  809f7c:	dcc00515 	stw	r19,20(sp)
  809f80:	dc800415 	stw	r18,16(sp)
  809f84:	dfc00715 	stw	ra,28(sp)
  809f88:	3825883a 	mov	r18,r7
  809f8c:	8822d57a 	srli	r17,r17,21
  809f90:	08092c80 	call	8092c8 <_Balloc>
  809f94:	1027883a 	mov	r19,r2
  809f98:	00800434 	movhi	r2,16
  809f9c:	10bfffc4 	addi	r2,r2,-1
  809fa0:	808c703a 	and	r6,r16,r2
  809fa4:	88000126 	beq	r17,zero,809fac <__d2b+0x50>
  809fa8:	31800434 	orhi	r6,r6,16
  809fac:	d9800015 	stw	r6,0(sp)
  809fb0:	a0002426 	beq	r20,zero,80a044 <__d2b+0xe8>
  809fb4:	d9000104 	addi	r4,sp,4
  809fb8:	dd000115 	stw	r20,4(sp)
  809fbc:	08096240 	call	809624 <__lo0bits>
  809fc0:	d8c00017 	ldw	r3,0(sp)
  809fc4:	10002f1e 	bne	r2,zero,80a084 <__d2b+0x128>
  809fc8:	d9000117 	ldw	r4,4(sp)
  809fcc:	99000515 	stw	r4,20(r19)
  809fd0:	1821003a 	cmpeq	r16,r3,zero
  809fd4:	01000084 	movi	r4,2
  809fd8:	2421c83a 	sub	r16,r4,r16
  809fdc:	98c00615 	stw	r3,24(r19)
  809fe0:	9c000415 	stw	r16,16(r19)
  809fe4:	88001f1e 	bne	r17,zero,80a064 <__d2b+0x108>
  809fe8:	10bef384 	addi	r2,r2,-1074
  809fec:	90800015 	stw	r2,0(r18)
  809ff0:	00900034 	movhi	r2,16384
  809ff4:	10bfffc4 	addi	r2,r2,-1
  809ff8:	8085883a 	add	r2,r16,r2
  809ffc:	1085883a 	add	r2,r2,r2
  80a000:	1085883a 	add	r2,r2,r2
  80a004:	9885883a 	add	r2,r19,r2
  80a008:	11000517 	ldw	r4,20(r2)
  80a00c:	8020917a 	slli	r16,r16,5
  80a010:	08095bc0 	call	8095bc <__hi0bits>
  80a014:	d8c00817 	ldw	r3,32(sp)
  80a018:	8085c83a 	sub	r2,r16,r2
  80a01c:	18800015 	stw	r2,0(r3)
  80a020:	9805883a 	mov	r2,r19
  80a024:	dfc00717 	ldw	ra,28(sp)
  80a028:	dd000617 	ldw	r20,24(sp)
  80a02c:	dcc00517 	ldw	r19,20(sp)
  80a030:	dc800417 	ldw	r18,16(sp)
  80a034:	dc400317 	ldw	r17,12(sp)
  80a038:	dc000217 	ldw	r16,8(sp)
  80a03c:	dec00804 	addi	sp,sp,32
  80a040:	f800283a 	ret
  80a044:	d809883a 	mov	r4,sp
  80a048:	08096240 	call	809624 <__lo0bits>
  80a04c:	d8c00017 	ldw	r3,0(sp)
  80a050:	04000044 	movi	r16,1
  80a054:	9c000415 	stw	r16,16(r19)
  80a058:	98c00515 	stw	r3,20(r19)
  80a05c:	10800804 	addi	r2,r2,32
  80a060:	883fe126 	beq	r17,zero,809fe8 <__alt_data_end+0xff809fe8>
  80a064:	00c00d44 	movi	r3,53
  80a068:	8c7ef344 	addi	r17,r17,-1075
  80a06c:	88a3883a 	add	r17,r17,r2
  80a070:	1885c83a 	sub	r2,r3,r2
  80a074:	d8c00817 	ldw	r3,32(sp)
  80a078:	94400015 	stw	r17,0(r18)
  80a07c:	18800015 	stw	r2,0(r3)
  80a080:	003fe706 	br	80a020 <__alt_data_end+0xff80a020>
  80a084:	01000804 	movi	r4,32
  80a088:	2089c83a 	sub	r4,r4,r2
  80a08c:	1908983a 	sll	r4,r3,r4
  80a090:	d9400117 	ldw	r5,4(sp)
  80a094:	1886d83a 	srl	r3,r3,r2
  80a098:	2148b03a 	or	r4,r4,r5
  80a09c:	99000515 	stw	r4,20(r19)
  80a0a0:	d8c00015 	stw	r3,0(sp)
  80a0a4:	003fca06 	br	809fd0 <__alt_data_end+0xff809fd0>

0080a0a8 <__ratio>:
  80a0a8:	defff904 	addi	sp,sp,-28
  80a0ac:	dc400315 	stw	r17,12(sp)
  80a0b0:	2823883a 	mov	r17,r5
  80a0b4:	d9400104 	addi	r5,sp,4
  80a0b8:	dfc00615 	stw	ra,24(sp)
  80a0bc:	dcc00515 	stw	r19,20(sp)
  80a0c0:	dc800415 	stw	r18,16(sp)
  80a0c4:	2027883a 	mov	r19,r4
  80a0c8:	dc000215 	stw	r16,8(sp)
  80a0cc:	0809e500 	call	809e50 <__b2d>
  80a0d0:	d80b883a 	mov	r5,sp
  80a0d4:	8809883a 	mov	r4,r17
  80a0d8:	1025883a 	mov	r18,r2
  80a0dc:	1821883a 	mov	r16,r3
  80a0e0:	0809e500 	call	809e50 <__b2d>
  80a0e4:	8a000417 	ldw	r8,16(r17)
  80a0e8:	99000417 	ldw	r4,16(r19)
  80a0ec:	d9400117 	ldw	r5,4(sp)
  80a0f0:	2209c83a 	sub	r4,r4,r8
  80a0f4:	2010917a 	slli	r8,r4,5
  80a0f8:	d9000017 	ldw	r4,0(sp)
  80a0fc:	2909c83a 	sub	r4,r5,r4
  80a100:	4109883a 	add	r4,r8,r4
  80a104:	01000e0e 	bge	zero,r4,80a140 <__ratio+0x98>
  80a108:	2008953a 	slli	r4,r4,20
  80a10c:	2421883a 	add	r16,r4,r16
  80a110:	100d883a 	mov	r6,r2
  80a114:	180f883a 	mov	r7,r3
  80a118:	9009883a 	mov	r4,r18
  80a11c:	800b883a 	mov	r5,r16
  80a120:	0804e2c0 	call	804e2c <__divdf3>
  80a124:	dfc00617 	ldw	ra,24(sp)
  80a128:	dcc00517 	ldw	r19,20(sp)
  80a12c:	dc800417 	ldw	r18,16(sp)
  80a130:	dc400317 	ldw	r17,12(sp)
  80a134:	dc000217 	ldw	r16,8(sp)
  80a138:	dec00704 	addi	sp,sp,28
  80a13c:	f800283a 	ret
  80a140:	2008953a 	slli	r4,r4,20
  80a144:	1907c83a 	sub	r3,r3,r4
  80a148:	003ff106 	br	80a110 <__alt_data_end+0xff80a110>

0080a14c <_mprec_log10>:
  80a14c:	defffe04 	addi	sp,sp,-8
  80a150:	dc000015 	stw	r16,0(sp)
  80a154:	dfc00115 	stw	ra,4(sp)
  80a158:	008005c4 	movi	r2,23
  80a15c:	2021883a 	mov	r16,r4
  80a160:	11000d0e 	bge	r2,r4,80a198 <_mprec_log10+0x4c>
  80a164:	0005883a 	mov	r2,zero
  80a168:	00cffc34 	movhi	r3,16368
  80a16c:	843fffc4 	addi	r16,r16,-1
  80a170:	000d883a 	mov	r6,zero
  80a174:	01d00934 	movhi	r7,16420
  80a178:	1009883a 	mov	r4,r2
  80a17c:	180b883a 	mov	r5,r3
  80a180:	08058780 	call	805878 <__muldf3>
  80a184:	803ff91e 	bne	r16,zero,80a16c <__alt_data_end+0xff80a16c>
  80a188:	dfc00117 	ldw	ra,4(sp)
  80a18c:	dc000017 	ldw	r16,0(sp)
  80a190:	dec00204 	addi	sp,sp,8
  80a194:	f800283a 	ret
  80a198:	202090fa 	slli	r16,r4,3
  80a19c:	00802074 	movhi	r2,129
  80a1a0:	10bfa204 	addi	r2,r2,-376
  80a1a4:	1421883a 	add	r16,r2,r16
  80a1a8:	80800017 	ldw	r2,0(r16)
  80a1ac:	80c00117 	ldw	r3,4(r16)
  80a1b0:	dfc00117 	ldw	ra,4(sp)
  80a1b4:	dc000017 	ldw	r16,0(sp)
  80a1b8:	dec00204 	addi	sp,sp,8
  80a1bc:	f800283a 	ret

0080a1c0 <__copybits>:
  80a1c0:	297fffc4 	addi	r5,r5,-1
  80a1c4:	280fd17a 	srai	r7,r5,5
  80a1c8:	30c00417 	ldw	r3,16(r6)
  80a1cc:	30800504 	addi	r2,r6,20
  80a1d0:	39c00044 	addi	r7,r7,1
  80a1d4:	18c7883a 	add	r3,r3,r3
  80a1d8:	39cf883a 	add	r7,r7,r7
  80a1dc:	18c7883a 	add	r3,r3,r3
  80a1e0:	39cf883a 	add	r7,r7,r7
  80a1e4:	10c7883a 	add	r3,r2,r3
  80a1e8:	21cf883a 	add	r7,r4,r7
  80a1ec:	10c00d2e 	bgeu	r2,r3,80a224 <__copybits+0x64>
  80a1f0:	200b883a 	mov	r5,r4
  80a1f4:	12000017 	ldw	r8,0(r2)
  80a1f8:	29400104 	addi	r5,r5,4
  80a1fc:	10800104 	addi	r2,r2,4
  80a200:	2a3fff15 	stw	r8,-4(r5)
  80a204:	10fffb36 	bltu	r2,r3,80a1f4 <__alt_data_end+0xff80a1f4>
  80a208:	1985c83a 	sub	r2,r3,r6
  80a20c:	10bffac4 	addi	r2,r2,-21
  80a210:	1004d0ba 	srli	r2,r2,2
  80a214:	10800044 	addi	r2,r2,1
  80a218:	1085883a 	add	r2,r2,r2
  80a21c:	1085883a 	add	r2,r2,r2
  80a220:	2089883a 	add	r4,r4,r2
  80a224:	21c0032e 	bgeu	r4,r7,80a234 <__copybits+0x74>
  80a228:	20000015 	stw	zero,0(r4)
  80a22c:	21000104 	addi	r4,r4,4
  80a230:	21fffd36 	bltu	r4,r7,80a228 <__alt_data_end+0xff80a228>
  80a234:	f800283a 	ret

0080a238 <__any_on>:
  80a238:	20c00417 	ldw	r3,16(r4)
  80a23c:	2805d17a 	srai	r2,r5,5
  80a240:	21000504 	addi	r4,r4,20
  80a244:	18800d0e 	bge	r3,r2,80a27c <__any_on+0x44>
  80a248:	18c7883a 	add	r3,r3,r3
  80a24c:	18c7883a 	add	r3,r3,r3
  80a250:	20c7883a 	add	r3,r4,r3
  80a254:	20c0192e 	bgeu	r4,r3,80a2bc <__any_on+0x84>
  80a258:	18bfff17 	ldw	r2,-4(r3)
  80a25c:	18ffff04 	addi	r3,r3,-4
  80a260:	1000041e 	bne	r2,zero,80a274 <__any_on+0x3c>
  80a264:	20c0142e 	bgeu	r4,r3,80a2b8 <__any_on+0x80>
  80a268:	18ffff04 	addi	r3,r3,-4
  80a26c:	19400017 	ldw	r5,0(r3)
  80a270:	283ffc26 	beq	r5,zero,80a264 <__alt_data_end+0xff80a264>
  80a274:	00800044 	movi	r2,1
  80a278:	f800283a 	ret
  80a27c:	10c00a0e 	bge	r2,r3,80a2a8 <__any_on+0x70>
  80a280:	1085883a 	add	r2,r2,r2
  80a284:	1085883a 	add	r2,r2,r2
  80a288:	294007cc 	andi	r5,r5,31
  80a28c:	2087883a 	add	r3,r4,r2
  80a290:	283ff026 	beq	r5,zero,80a254 <__alt_data_end+0xff80a254>
  80a294:	19800017 	ldw	r6,0(r3)
  80a298:	3144d83a 	srl	r2,r6,r5
  80a29c:	114a983a 	sll	r5,r2,r5
  80a2a0:	317ff41e 	bne	r6,r5,80a274 <__alt_data_end+0xff80a274>
  80a2a4:	003feb06 	br	80a254 <__alt_data_end+0xff80a254>
  80a2a8:	1085883a 	add	r2,r2,r2
  80a2ac:	1085883a 	add	r2,r2,r2
  80a2b0:	2087883a 	add	r3,r4,r2
  80a2b4:	003fe706 	br	80a254 <__alt_data_end+0xff80a254>
  80a2b8:	f800283a 	ret
  80a2bc:	0005883a 	mov	r2,zero
  80a2c0:	f800283a 	ret

0080a2c4 <_realloc_r>:
  80a2c4:	defff604 	addi	sp,sp,-40
  80a2c8:	dc800215 	stw	r18,8(sp)
  80a2cc:	dfc00915 	stw	ra,36(sp)
  80a2d0:	df000815 	stw	fp,32(sp)
  80a2d4:	ddc00715 	stw	r23,28(sp)
  80a2d8:	dd800615 	stw	r22,24(sp)
  80a2dc:	dd400515 	stw	r21,20(sp)
  80a2e0:	dd000415 	stw	r20,16(sp)
  80a2e4:	dcc00315 	stw	r19,12(sp)
  80a2e8:	dc400115 	stw	r17,4(sp)
  80a2ec:	dc000015 	stw	r16,0(sp)
  80a2f0:	3025883a 	mov	r18,r6
  80a2f4:	2800b726 	beq	r5,zero,80a5d4 <_realloc_r+0x310>
  80a2f8:	282b883a 	mov	r21,r5
  80a2fc:	2029883a 	mov	r20,r4
  80a300:	080d7180 	call	80d718 <__malloc_lock>
  80a304:	a8bfff17 	ldw	r2,-4(r21)
  80a308:	043fff04 	movi	r16,-4
  80a30c:	90c002c4 	addi	r3,r18,11
  80a310:	01000584 	movi	r4,22
  80a314:	acfffe04 	addi	r19,r21,-8
  80a318:	1420703a 	and	r16,r2,r16
  80a31c:	20c0332e 	bgeu	r4,r3,80a3ec <_realloc_r+0x128>
  80a320:	047ffe04 	movi	r17,-8
  80a324:	1c62703a 	and	r17,r3,r17
  80a328:	8807883a 	mov	r3,r17
  80a32c:	88005816 	blt	r17,zero,80a490 <_realloc_r+0x1cc>
  80a330:	8c805736 	bltu	r17,r18,80a490 <_realloc_r+0x1cc>
  80a334:	80c0300e 	bge	r16,r3,80a3f8 <_realloc_r+0x134>
  80a338:	07002074 	movhi	fp,129
  80a33c:	e700ed04 	addi	fp,fp,948
  80a340:	e1c00217 	ldw	r7,8(fp)
  80a344:	9c09883a 	add	r4,r19,r16
  80a348:	22000117 	ldw	r8,4(r4)
  80a34c:	21c06326 	beq	r4,r7,80a4dc <_realloc_r+0x218>
  80a350:	017fff84 	movi	r5,-2
  80a354:	414a703a 	and	r5,r8,r5
  80a358:	214b883a 	add	r5,r4,r5
  80a35c:	29800117 	ldw	r6,4(r5)
  80a360:	3180004c 	andi	r6,r6,1
  80a364:	30003f26 	beq	r6,zero,80a464 <_realloc_r+0x1a0>
  80a368:	1080004c 	andi	r2,r2,1
  80a36c:	10008326 	beq	r2,zero,80a57c <_realloc_r+0x2b8>
  80a370:	900b883a 	mov	r5,r18
  80a374:	a009883a 	mov	r4,r20
  80a378:	080860c0 	call	80860c <_malloc_r>
  80a37c:	1025883a 	mov	r18,r2
  80a380:	10011e26 	beq	r2,zero,80a7fc <_realloc_r+0x538>
  80a384:	a93fff17 	ldw	r4,-4(r21)
  80a388:	10fffe04 	addi	r3,r2,-8
  80a38c:	00bfff84 	movi	r2,-2
  80a390:	2084703a 	and	r2,r4,r2
  80a394:	9885883a 	add	r2,r19,r2
  80a398:	1880ee26 	beq	r3,r2,80a754 <_realloc_r+0x490>
  80a39c:	81bfff04 	addi	r6,r16,-4
  80a3a0:	00800904 	movi	r2,36
  80a3a4:	1180b836 	bltu	r2,r6,80a688 <_realloc_r+0x3c4>
  80a3a8:	00c004c4 	movi	r3,19
  80a3ac:	19809636 	bltu	r3,r6,80a608 <_realloc_r+0x344>
  80a3b0:	9005883a 	mov	r2,r18
  80a3b4:	a807883a 	mov	r3,r21
  80a3b8:	19000017 	ldw	r4,0(r3)
  80a3bc:	11000015 	stw	r4,0(r2)
  80a3c0:	19000117 	ldw	r4,4(r3)
  80a3c4:	11000115 	stw	r4,4(r2)
  80a3c8:	18c00217 	ldw	r3,8(r3)
  80a3cc:	10c00215 	stw	r3,8(r2)
  80a3d0:	a80b883a 	mov	r5,r21
  80a3d4:	a009883a 	mov	r4,r20
  80a3d8:	080ca6c0 	call	80ca6c <_free_r>
  80a3dc:	a009883a 	mov	r4,r20
  80a3e0:	080d73c0 	call	80d73c <__malloc_unlock>
  80a3e4:	9005883a 	mov	r2,r18
  80a3e8:	00001206 	br	80a434 <_realloc_r+0x170>
  80a3ec:	00c00404 	movi	r3,16
  80a3f0:	1823883a 	mov	r17,r3
  80a3f4:	003fce06 	br	80a330 <__alt_data_end+0xff80a330>
  80a3f8:	a825883a 	mov	r18,r21
  80a3fc:	8445c83a 	sub	r2,r16,r17
  80a400:	00c003c4 	movi	r3,15
  80a404:	18802636 	bltu	r3,r2,80a4a0 <_realloc_r+0x1dc>
  80a408:	99800117 	ldw	r6,4(r19)
  80a40c:	9c07883a 	add	r3,r19,r16
  80a410:	3180004c 	andi	r6,r6,1
  80a414:	3420b03a 	or	r16,r6,r16
  80a418:	9c000115 	stw	r16,4(r19)
  80a41c:	18800117 	ldw	r2,4(r3)
  80a420:	10800054 	ori	r2,r2,1
  80a424:	18800115 	stw	r2,4(r3)
  80a428:	a009883a 	mov	r4,r20
  80a42c:	080d73c0 	call	80d73c <__malloc_unlock>
  80a430:	9005883a 	mov	r2,r18
  80a434:	dfc00917 	ldw	ra,36(sp)
  80a438:	df000817 	ldw	fp,32(sp)
  80a43c:	ddc00717 	ldw	r23,28(sp)
  80a440:	dd800617 	ldw	r22,24(sp)
  80a444:	dd400517 	ldw	r21,20(sp)
  80a448:	dd000417 	ldw	r20,16(sp)
  80a44c:	dcc00317 	ldw	r19,12(sp)
  80a450:	dc800217 	ldw	r18,8(sp)
  80a454:	dc400117 	ldw	r17,4(sp)
  80a458:	dc000017 	ldw	r16,0(sp)
  80a45c:	dec00a04 	addi	sp,sp,40
  80a460:	f800283a 	ret
  80a464:	017fff04 	movi	r5,-4
  80a468:	414a703a 	and	r5,r8,r5
  80a46c:	814d883a 	add	r6,r16,r5
  80a470:	30c01f16 	blt	r6,r3,80a4f0 <_realloc_r+0x22c>
  80a474:	20800317 	ldw	r2,12(r4)
  80a478:	20c00217 	ldw	r3,8(r4)
  80a47c:	a825883a 	mov	r18,r21
  80a480:	3021883a 	mov	r16,r6
  80a484:	18800315 	stw	r2,12(r3)
  80a488:	10c00215 	stw	r3,8(r2)
  80a48c:	003fdb06 	br	80a3fc <__alt_data_end+0xff80a3fc>
  80a490:	00800304 	movi	r2,12
  80a494:	a0800015 	stw	r2,0(r20)
  80a498:	0005883a 	mov	r2,zero
  80a49c:	003fe506 	br	80a434 <__alt_data_end+0xff80a434>
  80a4a0:	98c00117 	ldw	r3,4(r19)
  80a4a4:	9c4b883a 	add	r5,r19,r17
  80a4a8:	11000054 	ori	r4,r2,1
  80a4ac:	18c0004c 	andi	r3,r3,1
  80a4b0:	1c62b03a 	or	r17,r3,r17
  80a4b4:	9c400115 	stw	r17,4(r19)
  80a4b8:	29000115 	stw	r4,4(r5)
  80a4bc:	2885883a 	add	r2,r5,r2
  80a4c0:	10c00117 	ldw	r3,4(r2)
  80a4c4:	29400204 	addi	r5,r5,8
  80a4c8:	a009883a 	mov	r4,r20
  80a4cc:	18c00054 	ori	r3,r3,1
  80a4d0:	10c00115 	stw	r3,4(r2)
  80a4d4:	080ca6c0 	call	80ca6c <_free_r>
  80a4d8:	003fd306 	br	80a428 <__alt_data_end+0xff80a428>
  80a4dc:	017fff04 	movi	r5,-4
  80a4e0:	414a703a 	and	r5,r8,r5
  80a4e4:	89800404 	addi	r6,r17,16
  80a4e8:	8151883a 	add	r8,r16,r5
  80a4ec:	4180590e 	bge	r8,r6,80a654 <_realloc_r+0x390>
  80a4f0:	1080004c 	andi	r2,r2,1
  80a4f4:	103f9e1e 	bne	r2,zero,80a370 <__alt_data_end+0xff80a370>
  80a4f8:	adbffe17 	ldw	r22,-8(r21)
  80a4fc:	00bfff04 	movi	r2,-4
  80a500:	9dadc83a 	sub	r22,r19,r22
  80a504:	b1800117 	ldw	r6,4(r22)
  80a508:	3084703a 	and	r2,r6,r2
  80a50c:	20002026 	beq	r4,zero,80a590 <_realloc_r+0x2cc>
  80a510:	80af883a 	add	r23,r16,r2
  80a514:	b96f883a 	add	r23,r23,r5
  80a518:	21c05f26 	beq	r4,r7,80a698 <_realloc_r+0x3d4>
  80a51c:	b8c01c16 	blt	r23,r3,80a590 <_realloc_r+0x2cc>
  80a520:	20800317 	ldw	r2,12(r4)
  80a524:	20c00217 	ldw	r3,8(r4)
  80a528:	81bfff04 	addi	r6,r16,-4
  80a52c:	01000904 	movi	r4,36
  80a530:	18800315 	stw	r2,12(r3)
  80a534:	10c00215 	stw	r3,8(r2)
  80a538:	b0c00217 	ldw	r3,8(r22)
  80a53c:	b0800317 	ldw	r2,12(r22)
  80a540:	b4800204 	addi	r18,r22,8
  80a544:	18800315 	stw	r2,12(r3)
  80a548:	10c00215 	stw	r3,8(r2)
  80a54c:	21801b36 	bltu	r4,r6,80a5bc <_realloc_r+0x2f8>
  80a550:	008004c4 	movi	r2,19
  80a554:	1180352e 	bgeu	r2,r6,80a62c <_realloc_r+0x368>
  80a558:	a8800017 	ldw	r2,0(r21)
  80a55c:	b0800215 	stw	r2,8(r22)
  80a560:	a8800117 	ldw	r2,4(r21)
  80a564:	b0800315 	stw	r2,12(r22)
  80a568:	008006c4 	movi	r2,27
  80a56c:	11807f36 	bltu	r2,r6,80a76c <_realloc_r+0x4a8>
  80a570:	b0800404 	addi	r2,r22,16
  80a574:	ad400204 	addi	r21,r21,8
  80a578:	00002d06 	br	80a630 <_realloc_r+0x36c>
  80a57c:	adbffe17 	ldw	r22,-8(r21)
  80a580:	00bfff04 	movi	r2,-4
  80a584:	9dadc83a 	sub	r22,r19,r22
  80a588:	b1000117 	ldw	r4,4(r22)
  80a58c:	2084703a 	and	r2,r4,r2
  80a590:	b03f7726 	beq	r22,zero,80a370 <__alt_data_end+0xff80a370>
  80a594:	80af883a 	add	r23,r16,r2
  80a598:	b8ff7516 	blt	r23,r3,80a370 <__alt_data_end+0xff80a370>
  80a59c:	b0800317 	ldw	r2,12(r22)
  80a5a0:	b0c00217 	ldw	r3,8(r22)
  80a5a4:	81bfff04 	addi	r6,r16,-4
  80a5a8:	01000904 	movi	r4,36
  80a5ac:	18800315 	stw	r2,12(r3)
  80a5b0:	10c00215 	stw	r3,8(r2)
  80a5b4:	b4800204 	addi	r18,r22,8
  80a5b8:	21bfe52e 	bgeu	r4,r6,80a550 <__alt_data_end+0xff80a550>
  80a5bc:	a80b883a 	mov	r5,r21
  80a5c0:	9009883a 	mov	r4,r18
  80a5c4:	08090440 	call	809044 <memmove>
  80a5c8:	b821883a 	mov	r16,r23
  80a5cc:	b027883a 	mov	r19,r22
  80a5d0:	003f8a06 	br	80a3fc <__alt_data_end+0xff80a3fc>
  80a5d4:	300b883a 	mov	r5,r6
  80a5d8:	dfc00917 	ldw	ra,36(sp)
  80a5dc:	df000817 	ldw	fp,32(sp)
  80a5e0:	ddc00717 	ldw	r23,28(sp)
  80a5e4:	dd800617 	ldw	r22,24(sp)
  80a5e8:	dd400517 	ldw	r21,20(sp)
  80a5ec:	dd000417 	ldw	r20,16(sp)
  80a5f0:	dcc00317 	ldw	r19,12(sp)
  80a5f4:	dc800217 	ldw	r18,8(sp)
  80a5f8:	dc400117 	ldw	r17,4(sp)
  80a5fc:	dc000017 	ldw	r16,0(sp)
  80a600:	dec00a04 	addi	sp,sp,40
  80a604:	080860c1 	jmpi	80860c <_malloc_r>
  80a608:	a8c00017 	ldw	r3,0(r21)
  80a60c:	90c00015 	stw	r3,0(r18)
  80a610:	a8c00117 	ldw	r3,4(r21)
  80a614:	90c00115 	stw	r3,4(r18)
  80a618:	00c006c4 	movi	r3,27
  80a61c:	19804536 	bltu	r3,r6,80a734 <_realloc_r+0x470>
  80a620:	90800204 	addi	r2,r18,8
  80a624:	a8c00204 	addi	r3,r21,8
  80a628:	003f6306 	br	80a3b8 <__alt_data_end+0xff80a3b8>
  80a62c:	9005883a 	mov	r2,r18
  80a630:	a8c00017 	ldw	r3,0(r21)
  80a634:	b821883a 	mov	r16,r23
  80a638:	b027883a 	mov	r19,r22
  80a63c:	10c00015 	stw	r3,0(r2)
  80a640:	a8c00117 	ldw	r3,4(r21)
  80a644:	10c00115 	stw	r3,4(r2)
  80a648:	a8c00217 	ldw	r3,8(r21)
  80a64c:	10c00215 	stw	r3,8(r2)
  80a650:	003f6a06 	br	80a3fc <__alt_data_end+0xff80a3fc>
  80a654:	9c67883a 	add	r19,r19,r17
  80a658:	4445c83a 	sub	r2,r8,r17
  80a65c:	e4c00215 	stw	r19,8(fp)
  80a660:	10800054 	ori	r2,r2,1
  80a664:	98800115 	stw	r2,4(r19)
  80a668:	a8bfff17 	ldw	r2,-4(r21)
  80a66c:	a009883a 	mov	r4,r20
  80a670:	1080004c 	andi	r2,r2,1
  80a674:	1462b03a 	or	r17,r2,r17
  80a678:	ac7fff15 	stw	r17,-4(r21)
  80a67c:	080d73c0 	call	80d73c <__malloc_unlock>
  80a680:	a805883a 	mov	r2,r21
  80a684:	003f6b06 	br	80a434 <__alt_data_end+0xff80a434>
  80a688:	a80b883a 	mov	r5,r21
  80a68c:	9009883a 	mov	r4,r18
  80a690:	08090440 	call	809044 <memmove>
  80a694:	003f4e06 	br	80a3d0 <__alt_data_end+0xff80a3d0>
  80a698:	89000404 	addi	r4,r17,16
  80a69c:	b93fbc16 	blt	r23,r4,80a590 <__alt_data_end+0xff80a590>
  80a6a0:	b0800317 	ldw	r2,12(r22)
  80a6a4:	b0c00217 	ldw	r3,8(r22)
  80a6a8:	81bfff04 	addi	r6,r16,-4
  80a6ac:	01000904 	movi	r4,36
  80a6b0:	18800315 	stw	r2,12(r3)
  80a6b4:	10c00215 	stw	r3,8(r2)
  80a6b8:	b4800204 	addi	r18,r22,8
  80a6bc:	21804336 	bltu	r4,r6,80a7cc <_realloc_r+0x508>
  80a6c0:	008004c4 	movi	r2,19
  80a6c4:	11803f2e 	bgeu	r2,r6,80a7c4 <_realloc_r+0x500>
  80a6c8:	a8800017 	ldw	r2,0(r21)
  80a6cc:	b0800215 	stw	r2,8(r22)
  80a6d0:	a8800117 	ldw	r2,4(r21)
  80a6d4:	b0800315 	stw	r2,12(r22)
  80a6d8:	008006c4 	movi	r2,27
  80a6dc:	11803f36 	bltu	r2,r6,80a7dc <_realloc_r+0x518>
  80a6e0:	b0800404 	addi	r2,r22,16
  80a6e4:	ad400204 	addi	r21,r21,8
  80a6e8:	a8c00017 	ldw	r3,0(r21)
  80a6ec:	10c00015 	stw	r3,0(r2)
  80a6f0:	a8c00117 	ldw	r3,4(r21)
  80a6f4:	10c00115 	stw	r3,4(r2)
  80a6f8:	a8c00217 	ldw	r3,8(r21)
  80a6fc:	10c00215 	stw	r3,8(r2)
  80a700:	b447883a 	add	r3,r22,r17
  80a704:	bc45c83a 	sub	r2,r23,r17
  80a708:	e0c00215 	stw	r3,8(fp)
  80a70c:	10800054 	ori	r2,r2,1
  80a710:	18800115 	stw	r2,4(r3)
  80a714:	b0800117 	ldw	r2,4(r22)
  80a718:	a009883a 	mov	r4,r20
  80a71c:	1080004c 	andi	r2,r2,1
  80a720:	1462b03a 	or	r17,r2,r17
  80a724:	b4400115 	stw	r17,4(r22)
  80a728:	080d73c0 	call	80d73c <__malloc_unlock>
  80a72c:	9005883a 	mov	r2,r18
  80a730:	003f4006 	br	80a434 <__alt_data_end+0xff80a434>
  80a734:	a8c00217 	ldw	r3,8(r21)
  80a738:	90c00215 	stw	r3,8(r18)
  80a73c:	a8c00317 	ldw	r3,12(r21)
  80a740:	90c00315 	stw	r3,12(r18)
  80a744:	30801126 	beq	r6,r2,80a78c <_realloc_r+0x4c8>
  80a748:	90800404 	addi	r2,r18,16
  80a74c:	a8c00404 	addi	r3,r21,16
  80a750:	003f1906 	br	80a3b8 <__alt_data_end+0xff80a3b8>
  80a754:	90ffff17 	ldw	r3,-4(r18)
  80a758:	00bfff04 	movi	r2,-4
  80a75c:	a825883a 	mov	r18,r21
  80a760:	1884703a 	and	r2,r3,r2
  80a764:	80a1883a 	add	r16,r16,r2
  80a768:	003f2406 	br	80a3fc <__alt_data_end+0xff80a3fc>
  80a76c:	a8800217 	ldw	r2,8(r21)
  80a770:	b0800415 	stw	r2,16(r22)
  80a774:	a8800317 	ldw	r2,12(r21)
  80a778:	b0800515 	stw	r2,20(r22)
  80a77c:	31000a26 	beq	r6,r4,80a7a8 <_realloc_r+0x4e4>
  80a780:	b0800604 	addi	r2,r22,24
  80a784:	ad400404 	addi	r21,r21,16
  80a788:	003fa906 	br	80a630 <__alt_data_end+0xff80a630>
  80a78c:	a9000417 	ldw	r4,16(r21)
  80a790:	90800604 	addi	r2,r18,24
  80a794:	a8c00604 	addi	r3,r21,24
  80a798:	91000415 	stw	r4,16(r18)
  80a79c:	a9000517 	ldw	r4,20(r21)
  80a7a0:	91000515 	stw	r4,20(r18)
  80a7a4:	003f0406 	br	80a3b8 <__alt_data_end+0xff80a3b8>
  80a7a8:	a8c00417 	ldw	r3,16(r21)
  80a7ac:	ad400604 	addi	r21,r21,24
  80a7b0:	b0800804 	addi	r2,r22,32
  80a7b4:	b0c00615 	stw	r3,24(r22)
  80a7b8:	a8ffff17 	ldw	r3,-4(r21)
  80a7bc:	b0c00715 	stw	r3,28(r22)
  80a7c0:	003f9b06 	br	80a630 <__alt_data_end+0xff80a630>
  80a7c4:	9005883a 	mov	r2,r18
  80a7c8:	003fc706 	br	80a6e8 <__alt_data_end+0xff80a6e8>
  80a7cc:	a80b883a 	mov	r5,r21
  80a7d0:	9009883a 	mov	r4,r18
  80a7d4:	08090440 	call	809044 <memmove>
  80a7d8:	003fc906 	br	80a700 <__alt_data_end+0xff80a700>
  80a7dc:	a8800217 	ldw	r2,8(r21)
  80a7e0:	b0800415 	stw	r2,16(r22)
  80a7e4:	a8800317 	ldw	r2,12(r21)
  80a7e8:	b0800515 	stw	r2,20(r22)
  80a7ec:	31000726 	beq	r6,r4,80a80c <_realloc_r+0x548>
  80a7f0:	b0800604 	addi	r2,r22,24
  80a7f4:	ad400404 	addi	r21,r21,16
  80a7f8:	003fbb06 	br	80a6e8 <__alt_data_end+0xff80a6e8>
  80a7fc:	a009883a 	mov	r4,r20
  80a800:	080d73c0 	call	80d73c <__malloc_unlock>
  80a804:	0005883a 	mov	r2,zero
  80a808:	003f0a06 	br	80a434 <__alt_data_end+0xff80a434>
  80a80c:	a8c00417 	ldw	r3,16(r21)
  80a810:	ad400604 	addi	r21,r21,24
  80a814:	b0800804 	addi	r2,r22,32
  80a818:	b0c00615 	stw	r3,24(r22)
  80a81c:	a8ffff17 	ldw	r3,-4(r21)
  80a820:	b0c00715 	stw	r3,28(r22)
  80a824:	003fb006 	br	80a6e8 <__alt_data_end+0xff80a6e8>

0080a828 <_sbrk_r>:
  80a828:	defffd04 	addi	sp,sp,-12
  80a82c:	dc000015 	stw	r16,0(sp)
  80a830:	04002074 	movhi	r16,129
  80a834:	dc400115 	stw	r17,4(sp)
  80a838:	840d2004 	addi	r16,r16,13440
  80a83c:	2023883a 	mov	r17,r4
  80a840:	2809883a 	mov	r4,r5
  80a844:	dfc00215 	stw	ra,8(sp)
  80a848:	80000015 	stw	zero,0(r16)
  80a84c:	080d9380 	call	80d938 <sbrk>
  80a850:	00ffffc4 	movi	r3,-1
  80a854:	10c00526 	beq	r2,r3,80a86c <_sbrk_r+0x44>
  80a858:	dfc00217 	ldw	ra,8(sp)
  80a85c:	dc400117 	ldw	r17,4(sp)
  80a860:	dc000017 	ldw	r16,0(sp)
  80a864:	dec00304 	addi	sp,sp,12
  80a868:	f800283a 	ret
  80a86c:	80c00017 	ldw	r3,0(r16)
  80a870:	183ff926 	beq	r3,zero,80a858 <__alt_data_end+0xff80a858>
  80a874:	88c00015 	stw	r3,0(r17)
  80a878:	003ff706 	br	80a858 <__alt_data_end+0xff80a858>

0080a87c <__sread>:
  80a87c:	defffe04 	addi	sp,sp,-8
  80a880:	dc000015 	stw	r16,0(sp)
  80a884:	2821883a 	mov	r16,r5
  80a888:	2940038f 	ldh	r5,14(r5)
  80a88c:	dfc00115 	stw	ra,4(sp)
  80a890:	080cf980 	call	80cf98 <_read_r>
  80a894:	10000716 	blt	r2,zero,80a8b4 <__sread+0x38>
  80a898:	80c01417 	ldw	r3,80(r16)
  80a89c:	1887883a 	add	r3,r3,r2
  80a8a0:	80c01415 	stw	r3,80(r16)
  80a8a4:	dfc00117 	ldw	ra,4(sp)
  80a8a8:	dc000017 	ldw	r16,0(sp)
  80a8ac:	dec00204 	addi	sp,sp,8
  80a8b0:	f800283a 	ret
  80a8b4:	80c0030b 	ldhu	r3,12(r16)
  80a8b8:	18fbffcc 	andi	r3,r3,61439
  80a8bc:	80c0030d 	sth	r3,12(r16)
  80a8c0:	dfc00117 	ldw	ra,4(sp)
  80a8c4:	dc000017 	ldw	r16,0(sp)
  80a8c8:	dec00204 	addi	sp,sp,8
  80a8cc:	f800283a 	ret

0080a8d0 <__seofread>:
  80a8d0:	0005883a 	mov	r2,zero
  80a8d4:	f800283a 	ret

0080a8d8 <__swrite>:
  80a8d8:	2880030b 	ldhu	r2,12(r5)
  80a8dc:	defffb04 	addi	sp,sp,-20
  80a8e0:	dcc00315 	stw	r19,12(sp)
  80a8e4:	dc800215 	stw	r18,8(sp)
  80a8e8:	dc400115 	stw	r17,4(sp)
  80a8ec:	dc000015 	stw	r16,0(sp)
  80a8f0:	dfc00415 	stw	ra,16(sp)
  80a8f4:	10c0400c 	andi	r3,r2,256
  80a8f8:	2821883a 	mov	r16,r5
  80a8fc:	2023883a 	mov	r17,r4
  80a900:	3025883a 	mov	r18,r6
  80a904:	3827883a 	mov	r19,r7
  80a908:	18000526 	beq	r3,zero,80a920 <__swrite+0x48>
  80a90c:	2940038f 	ldh	r5,14(r5)
  80a910:	01c00084 	movi	r7,2
  80a914:	000d883a 	mov	r6,zero
  80a918:	080cd7c0 	call	80cd7c <_lseek_r>
  80a91c:	8080030b 	ldhu	r2,12(r16)
  80a920:	8140038f 	ldh	r5,14(r16)
  80a924:	10bbffcc 	andi	r2,r2,61439
  80a928:	980f883a 	mov	r7,r19
  80a92c:	900d883a 	mov	r6,r18
  80a930:	8809883a 	mov	r4,r17
  80a934:	8080030d 	sth	r2,12(r16)
  80a938:	dfc00417 	ldw	ra,16(sp)
  80a93c:	dcc00317 	ldw	r19,12(sp)
  80a940:	dc800217 	ldw	r18,8(sp)
  80a944:	dc400117 	ldw	r17,4(sp)
  80a948:	dc000017 	ldw	r16,0(sp)
  80a94c:	dec00504 	addi	sp,sp,20
  80a950:	080aa481 	jmpi	80aa48 <_write_r>

0080a954 <__sseek>:
  80a954:	defffe04 	addi	sp,sp,-8
  80a958:	dc000015 	stw	r16,0(sp)
  80a95c:	2821883a 	mov	r16,r5
  80a960:	2940038f 	ldh	r5,14(r5)
  80a964:	dfc00115 	stw	ra,4(sp)
  80a968:	080cd7c0 	call	80cd7c <_lseek_r>
  80a96c:	00ffffc4 	movi	r3,-1
  80a970:	10c00826 	beq	r2,r3,80a994 <__sseek+0x40>
  80a974:	80c0030b 	ldhu	r3,12(r16)
  80a978:	80801415 	stw	r2,80(r16)
  80a97c:	18c40014 	ori	r3,r3,4096
  80a980:	80c0030d 	sth	r3,12(r16)
  80a984:	dfc00117 	ldw	ra,4(sp)
  80a988:	dc000017 	ldw	r16,0(sp)
  80a98c:	dec00204 	addi	sp,sp,8
  80a990:	f800283a 	ret
  80a994:	80c0030b 	ldhu	r3,12(r16)
  80a998:	18fbffcc 	andi	r3,r3,61439
  80a99c:	80c0030d 	sth	r3,12(r16)
  80a9a0:	dfc00117 	ldw	ra,4(sp)
  80a9a4:	dc000017 	ldw	r16,0(sp)
  80a9a8:	dec00204 	addi	sp,sp,8
  80a9ac:	f800283a 	ret

0080a9b0 <__sclose>:
  80a9b0:	2940038f 	ldh	r5,14(r5)
  80a9b4:	080abfc1 	jmpi	80abfc <_close_r>

0080a9b8 <strcpy>:
  80a9b8:	2906b03a 	or	r3,r5,r4
  80a9bc:	18c000cc 	andi	r3,r3,3
  80a9c0:	2005883a 	mov	r2,r4
  80a9c4:	1800161e 	bne	r3,zero,80aa20 <strcpy+0x68>
  80a9c8:	29c00017 	ldw	r7,0(r5)
  80a9cc:	02ffbff4 	movhi	r11,65279
  80a9d0:	5affbfc4 	addi	r11,r11,-257
  80a9d4:	02a02074 	movhi	r10,32897
  80a9d8:	01c6303a 	nor	r3,zero,r7
  80a9dc:	3ac9883a 	add	r4,r7,r11
  80a9e0:	52a02004 	addi	r10,r10,-32640
  80a9e4:	20c6703a 	and	r3,r4,r3
  80a9e8:	1a86703a 	and	r3,r3,r10
  80a9ec:	18000c1e 	bne	r3,zero,80aa20 <strcpy+0x68>
  80a9f0:	1011883a 	mov	r8,r2
  80a9f4:	41c00015 	stw	r7,0(r8)
  80a9f8:	29400104 	addi	r5,r5,4
  80a9fc:	29c00017 	ldw	r7,0(r5)
  80aa00:	41800104 	addi	r6,r8,4
  80aa04:	3011883a 	mov	r8,r6
  80aa08:	3ad3883a 	add	r9,r7,r11
  80aa0c:	01c6303a 	nor	r3,zero,r7
  80aa10:	48c6703a 	and	r3,r9,r3
  80aa14:	1a86703a 	and	r3,r3,r10
  80aa18:	183ff626 	beq	r3,zero,80a9f4 <__alt_data_end+0xff80a9f4>
  80aa1c:	00000106 	br	80aa24 <strcpy+0x6c>
  80aa20:	100d883a 	mov	r6,r2
  80aa24:	28c00003 	ldbu	r3,0(r5)
  80aa28:	31800044 	addi	r6,r6,1
  80aa2c:	29400044 	addi	r5,r5,1
  80aa30:	30ffffc5 	stb	r3,-1(r6)
  80aa34:	18c03fcc 	andi	r3,r3,255
  80aa38:	18c0201c 	xori	r3,r3,128
  80aa3c:	18ffe004 	addi	r3,r3,-128
  80aa40:	183ff81e 	bne	r3,zero,80aa24 <__alt_data_end+0xff80aa24>
  80aa44:	f800283a 	ret

0080aa48 <_write_r>:
  80aa48:	defffd04 	addi	sp,sp,-12
  80aa4c:	2805883a 	mov	r2,r5
  80aa50:	dc000015 	stw	r16,0(sp)
  80aa54:	04002074 	movhi	r16,129
  80aa58:	dc400115 	stw	r17,4(sp)
  80aa5c:	300b883a 	mov	r5,r6
  80aa60:	840d2004 	addi	r16,r16,13440
  80aa64:	2023883a 	mov	r17,r4
  80aa68:	380d883a 	mov	r6,r7
  80aa6c:	1009883a 	mov	r4,r2
  80aa70:	dfc00215 	stw	ra,8(sp)
  80aa74:	80000015 	stw	zero,0(r16)
  80aa78:	080dad80 	call	80dad8 <write>
  80aa7c:	00ffffc4 	movi	r3,-1
  80aa80:	10c00526 	beq	r2,r3,80aa98 <_write_r+0x50>
  80aa84:	dfc00217 	ldw	ra,8(sp)
  80aa88:	dc400117 	ldw	r17,4(sp)
  80aa8c:	dc000017 	ldw	r16,0(sp)
  80aa90:	dec00304 	addi	sp,sp,12
  80aa94:	f800283a 	ret
  80aa98:	80c00017 	ldw	r3,0(r16)
  80aa9c:	183ff926 	beq	r3,zero,80aa84 <__alt_data_end+0xff80aa84>
  80aaa0:	88c00015 	stw	r3,0(r17)
  80aaa4:	003ff706 	br	80aa84 <__alt_data_end+0xff80aa84>

0080aaa8 <__swsetup_r>:
  80aaa8:	00802074 	movhi	r2,129
  80aaac:	defffd04 	addi	sp,sp,-12
  80aab0:	10867304 	addi	r2,r2,6604
  80aab4:	dc400115 	stw	r17,4(sp)
  80aab8:	2023883a 	mov	r17,r4
  80aabc:	11000017 	ldw	r4,0(r2)
  80aac0:	dc000015 	stw	r16,0(sp)
  80aac4:	dfc00215 	stw	ra,8(sp)
  80aac8:	2821883a 	mov	r16,r5
  80aacc:	20000226 	beq	r4,zero,80aad8 <__swsetup_r+0x30>
  80aad0:	20800e17 	ldw	r2,56(r4)
  80aad4:	10003126 	beq	r2,zero,80ab9c <__swsetup_r+0xf4>
  80aad8:	8080030b 	ldhu	r2,12(r16)
  80aadc:	10c0020c 	andi	r3,r2,8
  80aae0:	1009883a 	mov	r4,r2
  80aae4:	18000f26 	beq	r3,zero,80ab24 <__swsetup_r+0x7c>
  80aae8:	80c00417 	ldw	r3,16(r16)
  80aaec:	18001526 	beq	r3,zero,80ab44 <__swsetup_r+0x9c>
  80aaf0:	1100004c 	andi	r4,r2,1
  80aaf4:	20001c1e 	bne	r4,zero,80ab68 <__swsetup_r+0xc0>
  80aaf8:	1080008c 	andi	r2,r2,2
  80aafc:	1000291e 	bne	r2,zero,80aba4 <__swsetup_r+0xfc>
  80ab00:	80800517 	ldw	r2,20(r16)
  80ab04:	80800215 	stw	r2,8(r16)
  80ab08:	18001c26 	beq	r3,zero,80ab7c <__swsetup_r+0xd4>
  80ab0c:	0005883a 	mov	r2,zero
  80ab10:	dfc00217 	ldw	ra,8(sp)
  80ab14:	dc400117 	ldw	r17,4(sp)
  80ab18:	dc000017 	ldw	r16,0(sp)
  80ab1c:	dec00304 	addi	sp,sp,12
  80ab20:	f800283a 	ret
  80ab24:	2080040c 	andi	r2,r4,16
  80ab28:	10002e26 	beq	r2,zero,80abe4 <__swsetup_r+0x13c>
  80ab2c:	2080010c 	andi	r2,r4,4
  80ab30:	10001e1e 	bne	r2,zero,80abac <__swsetup_r+0x104>
  80ab34:	80c00417 	ldw	r3,16(r16)
  80ab38:	20800214 	ori	r2,r4,8
  80ab3c:	8080030d 	sth	r2,12(r16)
  80ab40:	183feb1e 	bne	r3,zero,80aaf0 <__alt_data_end+0xff80aaf0>
  80ab44:	1100a00c 	andi	r4,r2,640
  80ab48:	01408004 	movi	r5,512
  80ab4c:	217fe826 	beq	r4,r5,80aaf0 <__alt_data_end+0xff80aaf0>
  80ab50:	800b883a 	mov	r5,r16
  80ab54:	8809883a 	mov	r4,r17
  80ab58:	080cddc0 	call	80cddc <__smakebuf_r>
  80ab5c:	8080030b 	ldhu	r2,12(r16)
  80ab60:	80c00417 	ldw	r3,16(r16)
  80ab64:	003fe206 	br	80aaf0 <__alt_data_end+0xff80aaf0>
  80ab68:	80800517 	ldw	r2,20(r16)
  80ab6c:	80000215 	stw	zero,8(r16)
  80ab70:	0085c83a 	sub	r2,zero,r2
  80ab74:	80800615 	stw	r2,24(r16)
  80ab78:	183fe41e 	bne	r3,zero,80ab0c <__alt_data_end+0xff80ab0c>
  80ab7c:	80c0030b 	ldhu	r3,12(r16)
  80ab80:	0005883a 	mov	r2,zero
  80ab84:	1900200c 	andi	r4,r3,128
  80ab88:	203fe126 	beq	r4,zero,80ab10 <__alt_data_end+0xff80ab10>
  80ab8c:	18c01014 	ori	r3,r3,64
  80ab90:	80c0030d 	sth	r3,12(r16)
  80ab94:	00bfffc4 	movi	r2,-1
  80ab98:	003fdd06 	br	80ab10 <__alt_data_end+0xff80ab10>
  80ab9c:	0807f780 	call	807f78 <__sinit>
  80aba0:	003fcd06 	br	80aad8 <__alt_data_end+0xff80aad8>
  80aba4:	0005883a 	mov	r2,zero
  80aba8:	003fd606 	br	80ab04 <__alt_data_end+0xff80ab04>
  80abac:	81400c17 	ldw	r5,48(r16)
  80abb0:	28000626 	beq	r5,zero,80abcc <__swsetup_r+0x124>
  80abb4:	80801004 	addi	r2,r16,64
  80abb8:	28800326 	beq	r5,r2,80abc8 <__swsetup_r+0x120>
  80abbc:	8809883a 	mov	r4,r17
  80abc0:	080ca6c0 	call	80ca6c <_free_r>
  80abc4:	8100030b 	ldhu	r4,12(r16)
  80abc8:	80000c15 	stw	zero,48(r16)
  80abcc:	80c00417 	ldw	r3,16(r16)
  80abd0:	00bff6c4 	movi	r2,-37
  80abd4:	1108703a 	and	r4,r2,r4
  80abd8:	80000115 	stw	zero,4(r16)
  80abdc:	80c00015 	stw	r3,0(r16)
  80abe0:	003fd506 	br	80ab38 <__alt_data_end+0xff80ab38>
  80abe4:	00800244 	movi	r2,9
  80abe8:	88800015 	stw	r2,0(r17)
  80abec:	20801014 	ori	r2,r4,64
  80abf0:	8080030d 	sth	r2,12(r16)
  80abf4:	00bfffc4 	movi	r2,-1
  80abf8:	003fc506 	br	80ab10 <__alt_data_end+0xff80ab10>

0080abfc <_close_r>:
  80abfc:	defffd04 	addi	sp,sp,-12
  80ac00:	dc000015 	stw	r16,0(sp)
  80ac04:	04002074 	movhi	r16,129
  80ac08:	dc400115 	stw	r17,4(sp)
  80ac0c:	840d2004 	addi	r16,r16,13440
  80ac10:	2023883a 	mov	r17,r4
  80ac14:	2809883a 	mov	r4,r5
  80ac18:	dfc00215 	stw	ra,8(sp)
  80ac1c:	80000015 	stw	zero,0(r16)
  80ac20:	080d1d80 	call	80d1d8 <close>
  80ac24:	00ffffc4 	movi	r3,-1
  80ac28:	10c00526 	beq	r2,r3,80ac40 <_close_r+0x44>
  80ac2c:	dfc00217 	ldw	ra,8(sp)
  80ac30:	dc400117 	ldw	r17,4(sp)
  80ac34:	dc000017 	ldw	r16,0(sp)
  80ac38:	dec00304 	addi	sp,sp,12
  80ac3c:	f800283a 	ret
  80ac40:	80c00017 	ldw	r3,0(r16)
  80ac44:	183ff926 	beq	r3,zero,80ac2c <__alt_data_end+0xff80ac2c>
  80ac48:	88c00015 	stw	r3,0(r17)
  80ac4c:	003ff706 	br	80ac2c <__alt_data_end+0xff80ac2c>

0080ac50 <_calloc_r>:
  80ac50:	298b383a 	mul	r5,r5,r6
  80ac54:	defffe04 	addi	sp,sp,-8
  80ac58:	dfc00115 	stw	ra,4(sp)
  80ac5c:	dc000015 	stw	r16,0(sp)
  80ac60:	080860c0 	call	80860c <_malloc_r>
  80ac64:	10002926 	beq	r2,zero,80ad0c <_calloc_r+0xbc>
  80ac68:	11bfff17 	ldw	r6,-4(r2)
  80ac6c:	1021883a 	mov	r16,r2
  80ac70:	00bfff04 	movi	r2,-4
  80ac74:	308c703a 	and	r6,r6,r2
  80ac78:	00c00904 	movi	r3,36
  80ac7c:	308d883a 	add	r6,r6,r2
  80ac80:	19801636 	bltu	r3,r6,80acdc <_calloc_r+0x8c>
  80ac84:	008004c4 	movi	r2,19
  80ac88:	11800b2e 	bgeu	r2,r6,80acb8 <_calloc_r+0x68>
  80ac8c:	80000015 	stw	zero,0(r16)
  80ac90:	80000115 	stw	zero,4(r16)
  80ac94:	008006c4 	movi	r2,27
  80ac98:	11801a2e 	bgeu	r2,r6,80ad04 <_calloc_r+0xb4>
  80ac9c:	80000215 	stw	zero,8(r16)
  80aca0:	80000315 	stw	zero,12(r16)
  80aca4:	30c0151e 	bne	r6,r3,80acfc <_calloc_r+0xac>
  80aca8:	80000415 	stw	zero,16(r16)
  80acac:	80800604 	addi	r2,r16,24
  80acb0:	80000515 	stw	zero,20(r16)
  80acb4:	00000106 	br	80acbc <_calloc_r+0x6c>
  80acb8:	8005883a 	mov	r2,r16
  80acbc:	10000015 	stw	zero,0(r2)
  80acc0:	10000115 	stw	zero,4(r2)
  80acc4:	10000215 	stw	zero,8(r2)
  80acc8:	8005883a 	mov	r2,r16
  80accc:	dfc00117 	ldw	ra,4(sp)
  80acd0:	dc000017 	ldw	r16,0(sp)
  80acd4:	dec00204 	addi	sp,sp,8
  80acd8:	f800283a 	ret
  80acdc:	000b883a 	mov	r5,zero
  80ace0:	8009883a 	mov	r4,r16
  80ace4:	08091a00 	call	8091a0 <memset>
  80ace8:	8005883a 	mov	r2,r16
  80acec:	dfc00117 	ldw	ra,4(sp)
  80acf0:	dc000017 	ldw	r16,0(sp)
  80acf4:	dec00204 	addi	sp,sp,8
  80acf8:	f800283a 	ret
  80acfc:	80800404 	addi	r2,r16,16
  80ad00:	003fee06 	br	80acbc <__alt_data_end+0xff80acbc>
  80ad04:	80800204 	addi	r2,r16,8
  80ad08:	003fec06 	br	80acbc <__alt_data_end+0xff80acbc>
  80ad0c:	0005883a 	mov	r2,zero
  80ad10:	003fee06 	br	80accc <__alt_data_end+0xff80accc>

0080ad14 <quorem>:
  80ad14:	defff704 	addi	sp,sp,-36
  80ad18:	dc800215 	stw	r18,8(sp)
  80ad1c:	20800417 	ldw	r2,16(r4)
  80ad20:	2c800417 	ldw	r18,16(r5)
  80ad24:	dfc00815 	stw	ra,32(sp)
  80ad28:	ddc00715 	stw	r23,28(sp)
  80ad2c:	dd800615 	stw	r22,24(sp)
  80ad30:	dd400515 	stw	r21,20(sp)
  80ad34:	dd000415 	stw	r20,16(sp)
  80ad38:	dcc00315 	stw	r19,12(sp)
  80ad3c:	dc400115 	stw	r17,4(sp)
  80ad40:	dc000015 	stw	r16,0(sp)
  80ad44:	14807116 	blt	r2,r18,80af0c <quorem+0x1f8>
  80ad48:	94bfffc4 	addi	r18,r18,-1
  80ad4c:	94ad883a 	add	r22,r18,r18
  80ad50:	b5ad883a 	add	r22,r22,r22
  80ad54:	2c400504 	addi	r17,r5,20
  80ad58:	8da9883a 	add	r20,r17,r22
  80ad5c:	25400504 	addi	r21,r4,20
  80ad60:	282f883a 	mov	r23,r5
  80ad64:	adad883a 	add	r22,r21,r22
  80ad68:	a1400017 	ldw	r5,0(r20)
  80ad6c:	2021883a 	mov	r16,r4
  80ad70:	b1000017 	ldw	r4,0(r22)
  80ad74:	29400044 	addi	r5,r5,1
  80ad78:	0802ff80 	call	802ff8 <__udivsi3>
  80ad7c:	1027883a 	mov	r19,r2
  80ad80:	10002c26 	beq	r2,zero,80ae34 <quorem+0x120>
  80ad84:	a813883a 	mov	r9,r21
  80ad88:	880b883a 	mov	r5,r17
  80ad8c:	0009883a 	mov	r4,zero
  80ad90:	000d883a 	mov	r6,zero
  80ad94:	2a000017 	ldw	r8,0(r5)
  80ad98:	49c00017 	ldw	r7,0(r9)
  80ad9c:	29400104 	addi	r5,r5,4
  80ada0:	40bfffcc 	andi	r2,r8,65535
  80ada4:	14c5383a 	mul	r2,r2,r19
  80ada8:	4010d43a 	srli	r8,r8,16
  80adac:	38ffffcc 	andi	r3,r7,65535
  80adb0:	1105883a 	add	r2,r2,r4
  80adb4:	1008d43a 	srli	r4,r2,16
  80adb8:	44d1383a 	mul	r8,r8,r19
  80adbc:	198d883a 	add	r6,r3,r6
  80adc0:	10ffffcc 	andi	r3,r2,65535
  80adc4:	30c7c83a 	sub	r3,r6,r3
  80adc8:	380ed43a 	srli	r7,r7,16
  80adcc:	4105883a 	add	r2,r8,r4
  80add0:	180dd43a 	srai	r6,r3,16
  80add4:	113fffcc 	andi	r4,r2,65535
  80add8:	390fc83a 	sub	r7,r7,r4
  80addc:	398d883a 	add	r6,r7,r6
  80ade0:	300e943a 	slli	r7,r6,16
  80ade4:	18ffffcc 	andi	r3,r3,65535
  80ade8:	1008d43a 	srli	r4,r2,16
  80adec:	38ceb03a 	or	r7,r7,r3
  80adf0:	49c00015 	stw	r7,0(r9)
  80adf4:	300dd43a 	srai	r6,r6,16
  80adf8:	4a400104 	addi	r9,r9,4
  80adfc:	a17fe52e 	bgeu	r20,r5,80ad94 <__alt_data_end+0xff80ad94>
  80ae00:	b0800017 	ldw	r2,0(r22)
  80ae04:	10000b1e 	bne	r2,zero,80ae34 <quorem+0x120>
  80ae08:	b0bfff04 	addi	r2,r22,-4
  80ae0c:	a880082e 	bgeu	r21,r2,80ae30 <quorem+0x11c>
  80ae10:	b0ffff17 	ldw	r3,-4(r22)
  80ae14:	18000326 	beq	r3,zero,80ae24 <quorem+0x110>
  80ae18:	00000506 	br	80ae30 <quorem+0x11c>
  80ae1c:	10c00017 	ldw	r3,0(r2)
  80ae20:	1800031e 	bne	r3,zero,80ae30 <quorem+0x11c>
  80ae24:	10bfff04 	addi	r2,r2,-4
  80ae28:	94bfffc4 	addi	r18,r18,-1
  80ae2c:	a8bffb36 	bltu	r21,r2,80ae1c <__alt_data_end+0xff80ae1c>
  80ae30:	84800415 	stw	r18,16(r16)
  80ae34:	b80b883a 	mov	r5,r23
  80ae38:	8009883a 	mov	r4,r16
  80ae3c:	0809b900 	call	809b90 <__mcmp>
  80ae40:	10002616 	blt	r2,zero,80aedc <quorem+0x1c8>
  80ae44:	9cc00044 	addi	r19,r19,1
  80ae48:	a805883a 	mov	r2,r21
  80ae4c:	000b883a 	mov	r5,zero
  80ae50:	11000017 	ldw	r4,0(r2)
  80ae54:	89800017 	ldw	r6,0(r17)
  80ae58:	10800104 	addi	r2,r2,4
  80ae5c:	20ffffcc 	andi	r3,r4,65535
  80ae60:	194b883a 	add	r5,r3,r5
  80ae64:	30ffffcc 	andi	r3,r6,65535
  80ae68:	28c7c83a 	sub	r3,r5,r3
  80ae6c:	300cd43a 	srli	r6,r6,16
  80ae70:	2008d43a 	srli	r4,r4,16
  80ae74:	180bd43a 	srai	r5,r3,16
  80ae78:	18ffffcc 	andi	r3,r3,65535
  80ae7c:	2189c83a 	sub	r4,r4,r6
  80ae80:	2149883a 	add	r4,r4,r5
  80ae84:	200c943a 	slli	r6,r4,16
  80ae88:	8c400104 	addi	r17,r17,4
  80ae8c:	200bd43a 	srai	r5,r4,16
  80ae90:	30c6b03a 	or	r3,r6,r3
  80ae94:	10ffff15 	stw	r3,-4(r2)
  80ae98:	a47fed2e 	bgeu	r20,r17,80ae50 <__alt_data_end+0xff80ae50>
  80ae9c:	9485883a 	add	r2,r18,r18
  80aea0:	1085883a 	add	r2,r2,r2
  80aea4:	a887883a 	add	r3,r21,r2
  80aea8:	18800017 	ldw	r2,0(r3)
  80aeac:	10000b1e 	bne	r2,zero,80aedc <quorem+0x1c8>
  80aeb0:	18bfff04 	addi	r2,r3,-4
  80aeb4:	a880082e 	bgeu	r21,r2,80aed8 <quorem+0x1c4>
  80aeb8:	18ffff17 	ldw	r3,-4(r3)
  80aebc:	18000326 	beq	r3,zero,80aecc <quorem+0x1b8>
  80aec0:	00000506 	br	80aed8 <quorem+0x1c4>
  80aec4:	10c00017 	ldw	r3,0(r2)
  80aec8:	1800031e 	bne	r3,zero,80aed8 <quorem+0x1c4>
  80aecc:	10bfff04 	addi	r2,r2,-4
  80aed0:	94bfffc4 	addi	r18,r18,-1
  80aed4:	a8bffb36 	bltu	r21,r2,80aec4 <__alt_data_end+0xff80aec4>
  80aed8:	84800415 	stw	r18,16(r16)
  80aedc:	9805883a 	mov	r2,r19
  80aee0:	dfc00817 	ldw	ra,32(sp)
  80aee4:	ddc00717 	ldw	r23,28(sp)
  80aee8:	dd800617 	ldw	r22,24(sp)
  80aeec:	dd400517 	ldw	r21,20(sp)
  80aef0:	dd000417 	ldw	r20,16(sp)
  80aef4:	dcc00317 	ldw	r19,12(sp)
  80aef8:	dc800217 	ldw	r18,8(sp)
  80aefc:	dc400117 	ldw	r17,4(sp)
  80af00:	dc000017 	ldw	r16,0(sp)
  80af04:	dec00904 	addi	sp,sp,36
  80af08:	f800283a 	ret
  80af0c:	0005883a 	mov	r2,zero
  80af10:	003ff306 	br	80aee0 <__alt_data_end+0xff80aee0>

0080af14 <_dtoa_r>:
  80af14:	20801017 	ldw	r2,64(r4)
  80af18:	deffde04 	addi	sp,sp,-136
  80af1c:	df002015 	stw	fp,128(sp)
  80af20:	dcc01b15 	stw	r19,108(sp)
  80af24:	dc801a15 	stw	r18,104(sp)
  80af28:	dc401915 	stw	r17,100(sp)
  80af2c:	dc001815 	stw	r16,96(sp)
  80af30:	dfc02115 	stw	ra,132(sp)
  80af34:	ddc01f15 	stw	r23,124(sp)
  80af38:	dd801e15 	stw	r22,120(sp)
  80af3c:	dd401d15 	stw	r21,116(sp)
  80af40:	dd001c15 	stw	r20,112(sp)
  80af44:	d9c00315 	stw	r7,12(sp)
  80af48:	2039883a 	mov	fp,r4
  80af4c:	3023883a 	mov	r17,r6
  80af50:	2825883a 	mov	r18,r5
  80af54:	dc002417 	ldw	r16,144(sp)
  80af58:	3027883a 	mov	r19,r6
  80af5c:	10000826 	beq	r2,zero,80af80 <_dtoa_r+0x6c>
  80af60:	21801117 	ldw	r6,68(r4)
  80af64:	00c00044 	movi	r3,1
  80af68:	100b883a 	mov	r5,r2
  80af6c:	1986983a 	sll	r3,r3,r6
  80af70:	11800115 	stw	r6,4(r2)
  80af74:	10c00215 	stw	r3,8(r2)
  80af78:	08093700 	call	809370 <_Bfree>
  80af7c:	e0001015 	stw	zero,64(fp)
  80af80:	88002e16 	blt	r17,zero,80b03c <_dtoa_r+0x128>
  80af84:	80000015 	stw	zero,0(r16)
  80af88:	889ffc2c 	andhi	r2,r17,32752
  80af8c:	00dffc34 	movhi	r3,32752
  80af90:	10c01c26 	beq	r2,r3,80b004 <_dtoa_r+0xf0>
  80af94:	000d883a 	mov	r6,zero
  80af98:	000f883a 	mov	r7,zero
  80af9c:	9009883a 	mov	r4,r18
  80afa0:	980b883a 	mov	r5,r19
  80afa4:	08057140 	call	805714 <__eqdf2>
  80afa8:	10002b1e 	bne	r2,zero,80b058 <_dtoa_r+0x144>
  80afac:	d9c02317 	ldw	r7,140(sp)
  80afb0:	00800044 	movi	r2,1
  80afb4:	38800015 	stw	r2,0(r7)
  80afb8:	d8802517 	ldw	r2,148(sp)
  80afbc:	10019e26 	beq	r2,zero,80b638 <_dtoa_r+0x724>
  80afc0:	d8c02517 	ldw	r3,148(sp)
  80afc4:	00802074 	movhi	r2,129
  80afc8:	10bfd844 	addi	r2,r2,-159
  80afcc:	18800015 	stw	r2,0(r3)
  80afd0:	10bfffc4 	addi	r2,r2,-1
  80afd4:	dfc02117 	ldw	ra,132(sp)
  80afd8:	df002017 	ldw	fp,128(sp)
  80afdc:	ddc01f17 	ldw	r23,124(sp)
  80afe0:	dd801e17 	ldw	r22,120(sp)
  80afe4:	dd401d17 	ldw	r21,116(sp)
  80afe8:	dd001c17 	ldw	r20,112(sp)
  80afec:	dcc01b17 	ldw	r19,108(sp)
  80aff0:	dc801a17 	ldw	r18,104(sp)
  80aff4:	dc401917 	ldw	r17,100(sp)
  80aff8:	dc001817 	ldw	r16,96(sp)
  80affc:	dec02204 	addi	sp,sp,136
  80b000:	f800283a 	ret
  80b004:	d8c02317 	ldw	r3,140(sp)
  80b008:	0089c3c4 	movi	r2,9999
  80b00c:	18800015 	stw	r2,0(r3)
  80b010:	90017726 	beq	r18,zero,80b5f0 <_dtoa_r+0x6dc>
  80b014:	00802074 	movhi	r2,129
  80b018:	10bfd704 	addi	r2,r2,-164
  80b01c:	d9002517 	ldw	r4,148(sp)
  80b020:	203fec26 	beq	r4,zero,80afd4 <__alt_data_end+0xff80afd4>
  80b024:	10c000c7 	ldb	r3,3(r2)
  80b028:	1801781e 	bne	r3,zero,80b60c <_dtoa_r+0x6f8>
  80b02c:	10c000c4 	addi	r3,r2,3
  80b030:	d9802517 	ldw	r6,148(sp)
  80b034:	30c00015 	stw	r3,0(r6)
  80b038:	003fe606 	br	80afd4 <__alt_data_end+0xff80afd4>
  80b03c:	04e00034 	movhi	r19,32768
  80b040:	9cffffc4 	addi	r19,r19,-1
  80b044:	00800044 	movi	r2,1
  80b048:	8ce6703a 	and	r19,r17,r19
  80b04c:	80800015 	stw	r2,0(r16)
  80b050:	9823883a 	mov	r17,r19
  80b054:	003fcc06 	br	80af88 <__alt_data_end+0xff80af88>
  80b058:	d8800204 	addi	r2,sp,8
  80b05c:	d8800015 	stw	r2,0(sp)
  80b060:	d9c00104 	addi	r7,sp,4
  80b064:	900b883a 	mov	r5,r18
  80b068:	980d883a 	mov	r6,r19
  80b06c:	e009883a 	mov	r4,fp
  80b070:	8820d53a 	srli	r16,r17,20
  80b074:	0809f5c0 	call	809f5c <__d2b>
  80b078:	d8800915 	stw	r2,36(sp)
  80b07c:	8001651e 	bne	r16,zero,80b614 <_dtoa_r+0x700>
  80b080:	dd800217 	ldw	r22,8(sp)
  80b084:	dc000117 	ldw	r16,4(sp)
  80b088:	00800804 	movi	r2,32
  80b08c:	b421883a 	add	r16,r22,r16
  80b090:	80c10c84 	addi	r3,r16,1074
  80b094:	10c2d10e 	bge	r2,r3,80bbdc <_dtoa_r+0xcc8>
  80b098:	00801004 	movi	r2,64
  80b09c:	81010484 	addi	r4,r16,1042
  80b0a0:	10c7c83a 	sub	r3,r2,r3
  80b0a4:	9108d83a 	srl	r4,r18,r4
  80b0a8:	88e2983a 	sll	r17,r17,r3
  80b0ac:	2448b03a 	or	r4,r4,r17
  80b0b0:	08069e80 	call	8069e8 <__floatunsidf>
  80b0b4:	017f8434 	movhi	r5,65040
  80b0b8:	01800044 	movi	r6,1
  80b0bc:	1009883a 	mov	r4,r2
  80b0c0:	194b883a 	add	r5,r3,r5
  80b0c4:	843fffc4 	addi	r16,r16,-1
  80b0c8:	d9801115 	stw	r6,68(sp)
  80b0cc:	000d883a 	mov	r6,zero
  80b0d0:	01cffe34 	movhi	r7,16376
  80b0d4:	0805f900 	call	805f90 <__subdf3>
  80b0d8:	0198dbf4 	movhi	r6,25455
  80b0dc:	01cff4f4 	movhi	r7,16339
  80b0e0:	3190d844 	addi	r6,r6,17249
  80b0e4:	39e1e9c4 	addi	r7,r7,-30809
  80b0e8:	1009883a 	mov	r4,r2
  80b0ec:	180b883a 	mov	r5,r3
  80b0f0:	08058780 	call	805878 <__muldf3>
  80b0f4:	01a2d874 	movhi	r6,35681
  80b0f8:	01cff1f4 	movhi	r7,16327
  80b0fc:	31b22cc4 	addi	r6,r6,-14157
  80b100:	39e28a04 	addi	r7,r7,-30168
  80b104:	180b883a 	mov	r5,r3
  80b108:	1009883a 	mov	r4,r2
  80b10c:	08045800 	call	804580 <__adddf3>
  80b110:	8009883a 	mov	r4,r16
  80b114:	1029883a 	mov	r20,r2
  80b118:	1823883a 	mov	r17,r3
  80b11c:	080690c0 	call	80690c <__floatsidf>
  80b120:	019427f4 	movhi	r6,20639
  80b124:	01cff4f4 	movhi	r7,16339
  80b128:	319e7ec4 	addi	r6,r6,31227
  80b12c:	39d104c4 	addi	r7,r7,17427
  80b130:	1009883a 	mov	r4,r2
  80b134:	180b883a 	mov	r5,r3
  80b138:	08058780 	call	805878 <__muldf3>
  80b13c:	100d883a 	mov	r6,r2
  80b140:	180f883a 	mov	r7,r3
  80b144:	a009883a 	mov	r4,r20
  80b148:	880b883a 	mov	r5,r17
  80b14c:	08045800 	call	804580 <__adddf3>
  80b150:	1009883a 	mov	r4,r2
  80b154:	180b883a 	mov	r5,r3
  80b158:	1029883a 	mov	r20,r2
  80b15c:	1823883a 	mov	r17,r3
  80b160:	080688c0 	call	80688c <__fixdfsi>
  80b164:	000d883a 	mov	r6,zero
  80b168:	000f883a 	mov	r7,zero
  80b16c:	a009883a 	mov	r4,r20
  80b170:	880b883a 	mov	r5,r17
  80b174:	d8800515 	stw	r2,20(sp)
  80b178:	080d0a80 	call	80d0a8 <__ledf2>
  80b17c:	10028716 	blt	r2,zero,80bb9c <_dtoa_r+0xc88>
  80b180:	d8c00517 	ldw	r3,20(sp)
  80b184:	00800584 	movi	r2,22
  80b188:	10c27536 	bltu	r2,r3,80bb60 <_dtoa_r+0xc4c>
  80b18c:	180490fa 	slli	r2,r3,3
  80b190:	00c02074 	movhi	r3,129
  80b194:	18ffa204 	addi	r3,r3,-376
  80b198:	1885883a 	add	r2,r3,r2
  80b19c:	11000017 	ldw	r4,0(r2)
  80b1a0:	11400117 	ldw	r5,4(r2)
  80b1a4:	900d883a 	mov	r6,r18
  80b1a8:	980f883a 	mov	r7,r19
  80b1ac:	080579c0 	call	80579c <__gedf2>
  80b1b0:	00828d0e 	bge	zero,r2,80bbe8 <_dtoa_r+0xcd4>
  80b1b4:	d9000517 	ldw	r4,20(sp)
  80b1b8:	d8000e15 	stw	zero,56(sp)
  80b1bc:	213fffc4 	addi	r4,r4,-1
  80b1c0:	d9000515 	stw	r4,20(sp)
  80b1c4:	b42dc83a 	sub	r22,r22,r16
  80b1c8:	b5bfffc4 	addi	r22,r22,-1
  80b1cc:	b0026f16 	blt	r22,zero,80bb8c <_dtoa_r+0xc78>
  80b1d0:	d8000815 	stw	zero,32(sp)
  80b1d4:	d9c00517 	ldw	r7,20(sp)
  80b1d8:	38026416 	blt	r7,zero,80bb6c <_dtoa_r+0xc58>
  80b1dc:	b1ed883a 	add	r22,r22,r7
  80b1e0:	d9c00d15 	stw	r7,52(sp)
  80b1e4:	d8000a15 	stw	zero,40(sp)
  80b1e8:	d9800317 	ldw	r6,12(sp)
  80b1ec:	00800244 	movi	r2,9
  80b1f0:	11811436 	bltu	r2,r6,80b644 <_dtoa_r+0x730>
  80b1f4:	00800144 	movi	r2,5
  80b1f8:	1184e10e 	bge	r2,r6,80c580 <_dtoa_r+0x166c>
  80b1fc:	31bfff04 	addi	r6,r6,-4
  80b200:	d9800315 	stw	r6,12(sp)
  80b204:	0023883a 	mov	r17,zero
  80b208:	d9800317 	ldw	r6,12(sp)
  80b20c:	008000c4 	movi	r2,3
  80b210:	30836726 	beq	r6,r2,80bfb0 <_dtoa_r+0x109c>
  80b214:	1183410e 	bge	r2,r6,80bf1c <_dtoa_r+0x1008>
  80b218:	d9c00317 	ldw	r7,12(sp)
  80b21c:	00800104 	movi	r2,4
  80b220:	38827c26 	beq	r7,r2,80bc14 <_dtoa_r+0xd00>
  80b224:	00800144 	movi	r2,5
  80b228:	3884c41e 	bne	r7,r2,80c53c <_dtoa_r+0x1628>
  80b22c:	00800044 	movi	r2,1
  80b230:	d8800b15 	stw	r2,44(sp)
  80b234:	d8c00517 	ldw	r3,20(sp)
  80b238:	d9002217 	ldw	r4,136(sp)
  80b23c:	1907883a 	add	r3,r3,r4
  80b240:	19800044 	addi	r6,r3,1
  80b244:	d8c00c15 	stw	r3,48(sp)
  80b248:	d9800615 	stw	r6,24(sp)
  80b24c:	0183a40e 	bge	zero,r6,80c0e0 <_dtoa_r+0x11cc>
  80b250:	d9800617 	ldw	r6,24(sp)
  80b254:	3021883a 	mov	r16,r6
  80b258:	e0001115 	stw	zero,68(fp)
  80b25c:	008005c4 	movi	r2,23
  80b260:	1184c92e 	bgeu	r2,r6,80c588 <_dtoa_r+0x1674>
  80b264:	00c00044 	movi	r3,1
  80b268:	00800104 	movi	r2,4
  80b26c:	1085883a 	add	r2,r2,r2
  80b270:	11000504 	addi	r4,r2,20
  80b274:	180b883a 	mov	r5,r3
  80b278:	18c00044 	addi	r3,r3,1
  80b27c:	313ffb2e 	bgeu	r6,r4,80b26c <__alt_data_end+0xff80b26c>
  80b280:	e1401115 	stw	r5,68(fp)
  80b284:	e009883a 	mov	r4,fp
  80b288:	08092c80 	call	8092c8 <_Balloc>
  80b28c:	d8800715 	stw	r2,28(sp)
  80b290:	e0801015 	stw	r2,64(fp)
  80b294:	00800384 	movi	r2,14
  80b298:	1400f736 	bltu	r2,r16,80b678 <_dtoa_r+0x764>
  80b29c:	8800f626 	beq	r17,zero,80b678 <_dtoa_r+0x764>
  80b2a0:	d9c00517 	ldw	r7,20(sp)
  80b2a4:	01c39a0e 	bge	zero,r7,80c110 <_dtoa_r+0x11fc>
  80b2a8:	388003cc 	andi	r2,r7,15
  80b2ac:	100490fa 	slli	r2,r2,3
  80b2b0:	382bd13a 	srai	r21,r7,4
  80b2b4:	00c02074 	movhi	r3,129
  80b2b8:	18ffa204 	addi	r3,r3,-376
  80b2bc:	1885883a 	add	r2,r3,r2
  80b2c0:	a8c0040c 	andi	r3,r21,16
  80b2c4:	12400017 	ldw	r9,0(r2)
  80b2c8:	12000117 	ldw	r8,4(r2)
  80b2cc:	18037926 	beq	r3,zero,80c0b4 <_dtoa_r+0x11a0>
  80b2d0:	00802074 	movhi	r2,129
  80b2d4:	10bf9804 	addi	r2,r2,-416
  80b2d8:	11800817 	ldw	r6,32(r2)
  80b2dc:	11c00917 	ldw	r7,36(r2)
  80b2e0:	9009883a 	mov	r4,r18
  80b2e4:	980b883a 	mov	r5,r19
  80b2e8:	da001715 	stw	r8,92(sp)
  80b2ec:	da401615 	stw	r9,88(sp)
  80b2f0:	0804e2c0 	call	804e2c <__divdf3>
  80b2f4:	da001717 	ldw	r8,92(sp)
  80b2f8:	da401617 	ldw	r9,88(sp)
  80b2fc:	ad4003cc 	andi	r21,r21,15
  80b300:	040000c4 	movi	r16,3
  80b304:	1023883a 	mov	r17,r2
  80b308:	1829883a 	mov	r20,r3
  80b30c:	a8001126 	beq	r21,zero,80b354 <_dtoa_r+0x440>
  80b310:	05c02074 	movhi	r23,129
  80b314:	bdff9804 	addi	r23,r23,-416
  80b318:	4805883a 	mov	r2,r9
  80b31c:	4007883a 	mov	r3,r8
  80b320:	a980004c 	andi	r6,r21,1
  80b324:	1009883a 	mov	r4,r2
  80b328:	a82bd07a 	srai	r21,r21,1
  80b32c:	180b883a 	mov	r5,r3
  80b330:	30000426 	beq	r6,zero,80b344 <_dtoa_r+0x430>
  80b334:	b9800017 	ldw	r6,0(r23)
  80b338:	b9c00117 	ldw	r7,4(r23)
  80b33c:	84000044 	addi	r16,r16,1
  80b340:	08058780 	call	805878 <__muldf3>
  80b344:	bdc00204 	addi	r23,r23,8
  80b348:	a83ff51e 	bne	r21,zero,80b320 <__alt_data_end+0xff80b320>
  80b34c:	1013883a 	mov	r9,r2
  80b350:	1811883a 	mov	r8,r3
  80b354:	480d883a 	mov	r6,r9
  80b358:	400f883a 	mov	r7,r8
  80b35c:	8809883a 	mov	r4,r17
  80b360:	a00b883a 	mov	r5,r20
  80b364:	0804e2c0 	call	804e2c <__divdf3>
  80b368:	d8800f15 	stw	r2,60(sp)
  80b36c:	d8c01015 	stw	r3,64(sp)
  80b370:	d8c00e17 	ldw	r3,56(sp)
  80b374:	18000626 	beq	r3,zero,80b390 <_dtoa_r+0x47c>
  80b378:	d9000f17 	ldw	r4,60(sp)
  80b37c:	d9401017 	ldw	r5,64(sp)
  80b380:	000d883a 	mov	r6,zero
  80b384:	01cffc34 	movhi	r7,16368
  80b388:	080d0a80 	call	80d0a8 <__ledf2>
  80b38c:	10040b16 	blt	r2,zero,80c3bc <_dtoa_r+0x14a8>
  80b390:	8009883a 	mov	r4,r16
  80b394:	080690c0 	call	80690c <__floatsidf>
  80b398:	d9800f17 	ldw	r6,60(sp)
  80b39c:	d9c01017 	ldw	r7,64(sp)
  80b3a0:	1009883a 	mov	r4,r2
  80b3a4:	180b883a 	mov	r5,r3
  80b3a8:	08058780 	call	805878 <__muldf3>
  80b3ac:	000d883a 	mov	r6,zero
  80b3b0:	01d00734 	movhi	r7,16412
  80b3b4:	1009883a 	mov	r4,r2
  80b3b8:	180b883a 	mov	r5,r3
  80b3bc:	08045800 	call	804580 <__adddf3>
  80b3c0:	1021883a 	mov	r16,r2
  80b3c4:	d8800617 	ldw	r2,24(sp)
  80b3c8:	047f3034 	movhi	r17,64704
  80b3cc:	1c63883a 	add	r17,r3,r17
  80b3d0:	10031826 	beq	r2,zero,80c034 <_dtoa_r+0x1120>
  80b3d4:	d8c00517 	ldw	r3,20(sp)
  80b3d8:	db000617 	ldw	r12,24(sp)
  80b3dc:	d8c01315 	stw	r3,76(sp)
  80b3e0:	d9000b17 	ldw	r4,44(sp)
  80b3e4:	20038f26 	beq	r4,zero,80c224 <_dtoa_r+0x1310>
  80b3e8:	60bfffc4 	addi	r2,r12,-1
  80b3ec:	100490fa 	slli	r2,r2,3
  80b3f0:	00c02074 	movhi	r3,129
  80b3f4:	18ffa204 	addi	r3,r3,-376
  80b3f8:	1885883a 	add	r2,r3,r2
  80b3fc:	11800017 	ldw	r6,0(r2)
  80b400:	11c00117 	ldw	r7,4(r2)
  80b404:	d8800717 	ldw	r2,28(sp)
  80b408:	0009883a 	mov	r4,zero
  80b40c:	014ff834 	movhi	r5,16352
  80b410:	db001615 	stw	r12,88(sp)
  80b414:	15c00044 	addi	r23,r2,1
  80b418:	0804e2c0 	call	804e2c <__divdf3>
  80b41c:	800d883a 	mov	r6,r16
  80b420:	880f883a 	mov	r7,r17
  80b424:	1009883a 	mov	r4,r2
  80b428:	180b883a 	mov	r5,r3
  80b42c:	0805f900 	call	805f90 <__subdf3>
  80b430:	d9401017 	ldw	r5,64(sp)
  80b434:	d9000f17 	ldw	r4,60(sp)
  80b438:	102b883a 	mov	r21,r2
  80b43c:	d8c01215 	stw	r3,72(sp)
  80b440:	080688c0 	call	80688c <__fixdfsi>
  80b444:	1009883a 	mov	r4,r2
  80b448:	1029883a 	mov	r20,r2
  80b44c:	080690c0 	call	80690c <__floatsidf>
  80b450:	d9000f17 	ldw	r4,60(sp)
  80b454:	d9401017 	ldw	r5,64(sp)
  80b458:	100d883a 	mov	r6,r2
  80b45c:	180f883a 	mov	r7,r3
  80b460:	0805f900 	call	805f90 <__subdf3>
  80b464:	1823883a 	mov	r17,r3
  80b468:	d8c00717 	ldw	r3,28(sp)
  80b46c:	d9401217 	ldw	r5,72(sp)
  80b470:	a2000c04 	addi	r8,r20,48
  80b474:	1021883a 	mov	r16,r2
  80b478:	1a000005 	stb	r8,0(r3)
  80b47c:	800d883a 	mov	r6,r16
  80b480:	880f883a 	mov	r7,r17
  80b484:	a809883a 	mov	r4,r21
  80b488:	4029883a 	mov	r20,r8
  80b48c:	080579c0 	call	80579c <__gedf2>
  80b490:	00841d16 	blt	zero,r2,80c508 <_dtoa_r+0x15f4>
  80b494:	800d883a 	mov	r6,r16
  80b498:	880f883a 	mov	r7,r17
  80b49c:	0009883a 	mov	r4,zero
  80b4a0:	014ffc34 	movhi	r5,16368
  80b4a4:	0805f900 	call	805f90 <__subdf3>
  80b4a8:	d9401217 	ldw	r5,72(sp)
  80b4ac:	100d883a 	mov	r6,r2
  80b4b0:	180f883a 	mov	r7,r3
  80b4b4:	a809883a 	mov	r4,r21
  80b4b8:	080579c0 	call	80579c <__gedf2>
  80b4bc:	db001617 	ldw	r12,88(sp)
  80b4c0:	00840e16 	blt	zero,r2,80c4fc <_dtoa_r+0x15e8>
  80b4c4:	00800044 	movi	r2,1
  80b4c8:	13006b0e 	bge	r2,r12,80b678 <_dtoa_r+0x764>
  80b4cc:	d9000717 	ldw	r4,28(sp)
  80b4d0:	dd800f15 	stw	r22,60(sp)
  80b4d4:	dcc01015 	stw	r19,64(sp)
  80b4d8:	2319883a 	add	r12,r4,r12
  80b4dc:	dcc01217 	ldw	r19,72(sp)
  80b4e0:	602d883a 	mov	r22,r12
  80b4e4:	dc801215 	stw	r18,72(sp)
  80b4e8:	b825883a 	mov	r18,r23
  80b4ec:	00000906 	br	80b514 <_dtoa_r+0x600>
  80b4f0:	0805f900 	call	805f90 <__subdf3>
  80b4f4:	a80d883a 	mov	r6,r21
  80b4f8:	980f883a 	mov	r7,r19
  80b4fc:	1009883a 	mov	r4,r2
  80b500:	180b883a 	mov	r5,r3
  80b504:	080d0a80 	call	80d0a8 <__ledf2>
  80b508:	1003e816 	blt	r2,zero,80c4ac <_dtoa_r+0x1598>
  80b50c:	b825883a 	mov	r18,r23
  80b510:	bd83e926 	beq	r23,r22,80c4b8 <_dtoa_r+0x15a4>
  80b514:	a809883a 	mov	r4,r21
  80b518:	980b883a 	mov	r5,r19
  80b51c:	000d883a 	mov	r6,zero
  80b520:	01d00934 	movhi	r7,16420
  80b524:	08058780 	call	805878 <__muldf3>
  80b528:	000d883a 	mov	r6,zero
  80b52c:	01d00934 	movhi	r7,16420
  80b530:	8009883a 	mov	r4,r16
  80b534:	880b883a 	mov	r5,r17
  80b538:	102b883a 	mov	r21,r2
  80b53c:	1827883a 	mov	r19,r3
  80b540:	08058780 	call	805878 <__muldf3>
  80b544:	180b883a 	mov	r5,r3
  80b548:	1009883a 	mov	r4,r2
  80b54c:	1821883a 	mov	r16,r3
  80b550:	1023883a 	mov	r17,r2
  80b554:	080688c0 	call	80688c <__fixdfsi>
  80b558:	1009883a 	mov	r4,r2
  80b55c:	1029883a 	mov	r20,r2
  80b560:	080690c0 	call	80690c <__floatsidf>
  80b564:	8809883a 	mov	r4,r17
  80b568:	800b883a 	mov	r5,r16
  80b56c:	100d883a 	mov	r6,r2
  80b570:	180f883a 	mov	r7,r3
  80b574:	0805f900 	call	805f90 <__subdf3>
  80b578:	a5000c04 	addi	r20,r20,48
  80b57c:	a80d883a 	mov	r6,r21
  80b580:	980f883a 	mov	r7,r19
  80b584:	1009883a 	mov	r4,r2
  80b588:	180b883a 	mov	r5,r3
  80b58c:	95000005 	stb	r20,0(r18)
  80b590:	1021883a 	mov	r16,r2
  80b594:	1823883a 	mov	r17,r3
  80b598:	080d0a80 	call	80d0a8 <__ledf2>
  80b59c:	bdc00044 	addi	r23,r23,1
  80b5a0:	800d883a 	mov	r6,r16
  80b5a4:	880f883a 	mov	r7,r17
  80b5a8:	0009883a 	mov	r4,zero
  80b5ac:	014ffc34 	movhi	r5,16368
  80b5b0:	103fcf0e 	bge	r2,zero,80b4f0 <__alt_data_end+0xff80b4f0>
  80b5b4:	d8c01317 	ldw	r3,76(sp)
  80b5b8:	d8c00515 	stw	r3,20(sp)
  80b5bc:	d9400917 	ldw	r5,36(sp)
  80b5c0:	e009883a 	mov	r4,fp
  80b5c4:	08093700 	call	809370 <_Bfree>
  80b5c8:	d9000517 	ldw	r4,20(sp)
  80b5cc:	d9802317 	ldw	r6,140(sp)
  80b5d0:	d9c02517 	ldw	r7,148(sp)
  80b5d4:	b8000005 	stb	zero,0(r23)
  80b5d8:	20800044 	addi	r2,r4,1
  80b5dc:	30800015 	stw	r2,0(r6)
  80b5e0:	3802aa26 	beq	r7,zero,80c08c <_dtoa_r+0x1178>
  80b5e4:	3dc00015 	stw	r23,0(r7)
  80b5e8:	d8800717 	ldw	r2,28(sp)
  80b5ec:	003e7906 	br	80afd4 <__alt_data_end+0xff80afd4>
  80b5f0:	00800434 	movhi	r2,16
  80b5f4:	10bfffc4 	addi	r2,r2,-1
  80b5f8:	88a2703a 	and	r17,r17,r2
  80b5fc:	883e851e 	bne	r17,zero,80b014 <__alt_data_end+0xff80b014>
  80b600:	00802074 	movhi	r2,129
  80b604:	10bfd404 	addi	r2,r2,-176
  80b608:	003e8406 	br	80b01c <__alt_data_end+0xff80b01c>
  80b60c:	10c00204 	addi	r3,r2,8
  80b610:	003e8706 	br	80b030 <__alt_data_end+0xff80b030>
  80b614:	01400434 	movhi	r5,16
  80b618:	297fffc4 	addi	r5,r5,-1
  80b61c:	994a703a 	and	r5,r19,r5
  80b620:	9009883a 	mov	r4,r18
  80b624:	843f0044 	addi	r16,r16,-1023
  80b628:	294ffc34 	orhi	r5,r5,16368
  80b62c:	dd800217 	ldw	r22,8(sp)
  80b630:	d8001115 	stw	zero,68(sp)
  80b634:	003ea506 	br	80b0cc <__alt_data_end+0xff80b0cc>
  80b638:	00802074 	movhi	r2,129
  80b63c:	10bfd804 	addi	r2,r2,-160
  80b640:	003e6406 	br	80afd4 <__alt_data_end+0xff80afd4>
  80b644:	e0001115 	stw	zero,68(fp)
  80b648:	000b883a 	mov	r5,zero
  80b64c:	e009883a 	mov	r4,fp
  80b650:	08092c80 	call	8092c8 <_Balloc>
  80b654:	01bfffc4 	movi	r6,-1
  80b658:	01c00044 	movi	r7,1
  80b65c:	d8800715 	stw	r2,28(sp)
  80b660:	d9800c15 	stw	r6,48(sp)
  80b664:	e0801015 	stw	r2,64(fp)
  80b668:	d8000315 	stw	zero,12(sp)
  80b66c:	d9c00b15 	stw	r7,44(sp)
  80b670:	d9800615 	stw	r6,24(sp)
  80b674:	d8002215 	stw	zero,136(sp)
  80b678:	d8800117 	ldw	r2,4(sp)
  80b67c:	10008916 	blt	r2,zero,80b8a4 <_dtoa_r+0x990>
  80b680:	d9000517 	ldw	r4,20(sp)
  80b684:	00c00384 	movi	r3,14
  80b688:	19008616 	blt	r3,r4,80b8a4 <_dtoa_r+0x990>
  80b68c:	200490fa 	slli	r2,r4,3
  80b690:	00c02074 	movhi	r3,129
  80b694:	d9802217 	ldw	r6,136(sp)
  80b698:	18ffa204 	addi	r3,r3,-376
  80b69c:	1885883a 	add	r2,r3,r2
  80b6a0:	14000017 	ldw	r16,0(r2)
  80b6a4:	14400117 	ldw	r17,4(r2)
  80b6a8:	30016316 	blt	r6,zero,80bc38 <_dtoa_r+0xd24>
  80b6ac:	800d883a 	mov	r6,r16
  80b6b0:	880f883a 	mov	r7,r17
  80b6b4:	9009883a 	mov	r4,r18
  80b6b8:	980b883a 	mov	r5,r19
  80b6bc:	0804e2c0 	call	804e2c <__divdf3>
  80b6c0:	180b883a 	mov	r5,r3
  80b6c4:	1009883a 	mov	r4,r2
  80b6c8:	080688c0 	call	80688c <__fixdfsi>
  80b6cc:	1009883a 	mov	r4,r2
  80b6d0:	102b883a 	mov	r21,r2
  80b6d4:	080690c0 	call	80690c <__floatsidf>
  80b6d8:	800d883a 	mov	r6,r16
  80b6dc:	880f883a 	mov	r7,r17
  80b6e0:	1009883a 	mov	r4,r2
  80b6e4:	180b883a 	mov	r5,r3
  80b6e8:	08058780 	call	805878 <__muldf3>
  80b6ec:	100d883a 	mov	r6,r2
  80b6f0:	180f883a 	mov	r7,r3
  80b6f4:	9009883a 	mov	r4,r18
  80b6f8:	980b883a 	mov	r5,r19
  80b6fc:	0805f900 	call	805f90 <__subdf3>
  80b700:	d9c00717 	ldw	r7,28(sp)
  80b704:	1009883a 	mov	r4,r2
  80b708:	a8800c04 	addi	r2,r21,48
  80b70c:	38800005 	stb	r2,0(r7)
  80b710:	3dc00044 	addi	r23,r7,1
  80b714:	d9c00617 	ldw	r7,24(sp)
  80b718:	01800044 	movi	r6,1
  80b71c:	180b883a 	mov	r5,r3
  80b720:	2005883a 	mov	r2,r4
  80b724:	39803826 	beq	r7,r6,80b808 <_dtoa_r+0x8f4>
  80b728:	000d883a 	mov	r6,zero
  80b72c:	01d00934 	movhi	r7,16420
  80b730:	08058780 	call	805878 <__muldf3>
  80b734:	000d883a 	mov	r6,zero
  80b738:	000f883a 	mov	r7,zero
  80b73c:	1009883a 	mov	r4,r2
  80b740:	180b883a 	mov	r5,r3
  80b744:	1025883a 	mov	r18,r2
  80b748:	1827883a 	mov	r19,r3
  80b74c:	08057140 	call	805714 <__eqdf2>
  80b750:	103f9a26 	beq	r2,zero,80b5bc <__alt_data_end+0xff80b5bc>
  80b754:	d9c00617 	ldw	r7,24(sp)
  80b758:	d8c00717 	ldw	r3,28(sp)
  80b75c:	b829883a 	mov	r20,r23
  80b760:	38bfffc4 	addi	r2,r7,-1
  80b764:	18ad883a 	add	r22,r3,r2
  80b768:	00000a06 	br	80b794 <_dtoa_r+0x880>
  80b76c:	08058780 	call	805878 <__muldf3>
  80b770:	000d883a 	mov	r6,zero
  80b774:	000f883a 	mov	r7,zero
  80b778:	1009883a 	mov	r4,r2
  80b77c:	180b883a 	mov	r5,r3
  80b780:	1025883a 	mov	r18,r2
  80b784:	1827883a 	mov	r19,r3
  80b788:	b829883a 	mov	r20,r23
  80b78c:	08057140 	call	805714 <__eqdf2>
  80b790:	103f8a26 	beq	r2,zero,80b5bc <__alt_data_end+0xff80b5bc>
  80b794:	800d883a 	mov	r6,r16
  80b798:	880f883a 	mov	r7,r17
  80b79c:	9009883a 	mov	r4,r18
  80b7a0:	980b883a 	mov	r5,r19
  80b7a4:	0804e2c0 	call	804e2c <__divdf3>
  80b7a8:	180b883a 	mov	r5,r3
  80b7ac:	1009883a 	mov	r4,r2
  80b7b0:	080688c0 	call	80688c <__fixdfsi>
  80b7b4:	1009883a 	mov	r4,r2
  80b7b8:	102b883a 	mov	r21,r2
  80b7bc:	080690c0 	call	80690c <__floatsidf>
  80b7c0:	800d883a 	mov	r6,r16
  80b7c4:	880f883a 	mov	r7,r17
  80b7c8:	1009883a 	mov	r4,r2
  80b7cc:	180b883a 	mov	r5,r3
  80b7d0:	08058780 	call	805878 <__muldf3>
  80b7d4:	100d883a 	mov	r6,r2
  80b7d8:	180f883a 	mov	r7,r3
  80b7dc:	9009883a 	mov	r4,r18
  80b7e0:	980b883a 	mov	r5,r19
  80b7e4:	0805f900 	call	805f90 <__subdf3>
  80b7e8:	aa000c04 	addi	r8,r21,48
  80b7ec:	a2000005 	stb	r8,0(r20)
  80b7f0:	000d883a 	mov	r6,zero
  80b7f4:	01d00934 	movhi	r7,16420
  80b7f8:	1009883a 	mov	r4,r2
  80b7fc:	180b883a 	mov	r5,r3
  80b800:	a5c00044 	addi	r23,r20,1
  80b804:	b53fd91e 	bne	r22,r20,80b76c <__alt_data_end+0xff80b76c>
  80b808:	100d883a 	mov	r6,r2
  80b80c:	180f883a 	mov	r7,r3
  80b810:	1009883a 	mov	r4,r2
  80b814:	180b883a 	mov	r5,r3
  80b818:	08045800 	call	804580 <__adddf3>
  80b81c:	100d883a 	mov	r6,r2
  80b820:	180f883a 	mov	r7,r3
  80b824:	8009883a 	mov	r4,r16
  80b828:	880b883a 	mov	r5,r17
  80b82c:	1027883a 	mov	r19,r2
  80b830:	1825883a 	mov	r18,r3
  80b834:	080d0a80 	call	80d0a8 <__ledf2>
  80b838:	10000816 	blt	r2,zero,80b85c <_dtoa_r+0x948>
  80b83c:	980d883a 	mov	r6,r19
  80b840:	900f883a 	mov	r7,r18
  80b844:	8009883a 	mov	r4,r16
  80b848:	880b883a 	mov	r5,r17
  80b84c:	08057140 	call	805714 <__eqdf2>
  80b850:	103f5a1e 	bne	r2,zero,80b5bc <__alt_data_end+0xff80b5bc>
  80b854:	ad40004c 	andi	r21,r21,1
  80b858:	a83f5826 	beq	r21,zero,80b5bc <__alt_data_end+0xff80b5bc>
  80b85c:	bd3fffc3 	ldbu	r20,-1(r23)
  80b860:	b8bfffc4 	addi	r2,r23,-1
  80b864:	1007883a 	mov	r3,r2
  80b868:	01400e44 	movi	r5,57
  80b86c:	d9800717 	ldw	r6,28(sp)
  80b870:	00000506 	br	80b888 <_dtoa_r+0x974>
  80b874:	18ffffc4 	addi	r3,r3,-1
  80b878:	11824726 	beq	r2,r6,80c198 <_dtoa_r+0x1284>
  80b87c:	1d000003 	ldbu	r20,0(r3)
  80b880:	102f883a 	mov	r23,r2
  80b884:	10bfffc4 	addi	r2,r2,-1
  80b888:	a1003fcc 	andi	r4,r20,255
  80b88c:	2100201c 	xori	r4,r4,128
  80b890:	213fe004 	addi	r4,r4,-128
  80b894:	217ff726 	beq	r4,r5,80b874 <__alt_data_end+0xff80b874>
  80b898:	a2000044 	addi	r8,r20,1
  80b89c:	12000005 	stb	r8,0(r2)
  80b8a0:	003f4606 	br	80b5bc <__alt_data_end+0xff80b5bc>
  80b8a4:	d9000b17 	ldw	r4,44(sp)
  80b8a8:	2000c826 	beq	r4,zero,80bbcc <_dtoa_r+0xcb8>
  80b8ac:	d9800317 	ldw	r6,12(sp)
  80b8b0:	00c00044 	movi	r3,1
  80b8b4:	1980f90e 	bge	r3,r6,80bc9c <_dtoa_r+0xd88>
  80b8b8:	d8800617 	ldw	r2,24(sp)
  80b8bc:	d8c00a17 	ldw	r3,40(sp)
  80b8c0:	157fffc4 	addi	r21,r2,-1
  80b8c4:	1d41f316 	blt	r3,r21,80c094 <_dtoa_r+0x1180>
  80b8c8:	1d6bc83a 	sub	r21,r3,r21
  80b8cc:	d9c00617 	ldw	r7,24(sp)
  80b8d0:	3802aa16 	blt	r7,zero,80c37c <_dtoa_r+0x1468>
  80b8d4:	dd000817 	ldw	r20,32(sp)
  80b8d8:	d8800617 	ldw	r2,24(sp)
  80b8dc:	d8c00817 	ldw	r3,32(sp)
  80b8e0:	01400044 	movi	r5,1
  80b8e4:	e009883a 	mov	r4,fp
  80b8e8:	1887883a 	add	r3,r3,r2
  80b8ec:	d8c00815 	stw	r3,32(sp)
  80b8f0:	b0ad883a 	add	r22,r22,r2
  80b8f4:	08096d40 	call	8096d4 <__i2b>
  80b8f8:	1023883a 	mov	r17,r2
  80b8fc:	a0000826 	beq	r20,zero,80b920 <_dtoa_r+0xa0c>
  80b900:	0580070e 	bge	zero,r22,80b920 <_dtoa_r+0xa0c>
  80b904:	a005883a 	mov	r2,r20
  80b908:	b500b916 	blt	r22,r20,80bbf0 <_dtoa_r+0xcdc>
  80b90c:	d9000817 	ldw	r4,32(sp)
  80b910:	a0a9c83a 	sub	r20,r20,r2
  80b914:	b0adc83a 	sub	r22,r22,r2
  80b918:	2089c83a 	sub	r4,r4,r2
  80b91c:	d9000815 	stw	r4,32(sp)
  80b920:	d9800a17 	ldw	r6,40(sp)
  80b924:	0181810e 	bge	zero,r6,80bf2c <_dtoa_r+0x1018>
  80b928:	d9c00b17 	ldw	r7,44(sp)
  80b92c:	3800b326 	beq	r7,zero,80bbfc <_dtoa_r+0xce8>
  80b930:	a800b226 	beq	r21,zero,80bbfc <_dtoa_r+0xce8>
  80b934:	880b883a 	mov	r5,r17
  80b938:	a80d883a 	mov	r6,r21
  80b93c:	e009883a 	mov	r4,fp
  80b940:	08099080 	call	809908 <__pow5mult>
  80b944:	d9800917 	ldw	r6,36(sp)
  80b948:	100b883a 	mov	r5,r2
  80b94c:	e009883a 	mov	r4,fp
  80b950:	1023883a 	mov	r17,r2
  80b954:	08097100 	call	809710 <__multiply>
  80b958:	1021883a 	mov	r16,r2
  80b95c:	d8800a17 	ldw	r2,40(sp)
  80b960:	d9400917 	ldw	r5,36(sp)
  80b964:	e009883a 	mov	r4,fp
  80b968:	1545c83a 	sub	r2,r2,r21
  80b96c:	d8800a15 	stw	r2,40(sp)
  80b970:	08093700 	call	809370 <_Bfree>
  80b974:	d8c00a17 	ldw	r3,40(sp)
  80b978:	18009f1e 	bne	r3,zero,80bbf8 <_dtoa_r+0xce4>
  80b97c:	05c00044 	movi	r23,1
  80b980:	e009883a 	mov	r4,fp
  80b984:	b80b883a 	mov	r5,r23
  80b988:	08096d40 	call	8096d4 <__i2b>
  80b98c:	d9000d17 	ldw	r4,52(sp)
  80b990:	102b883a 	mov	r21,r2
  80b994:	2000ce26 	beq	r4,zero,80bcd0 <_dtoa_r+0xdbc>
  80b998:	200d883a 	mov	r6,r4
  80b99c:	100b883a 	mov	r5,r2
  80b9a0:	e009883a 	mov	r4,fp
  80b9a4:	08099080 	call	809908 <__pow5mult>
  80b9a8:	d9800317 	ldw	r6,12(sp)
  80b9ac:	102b883a 	mov	r21,r2
  80b9b0:	b981810e 	bge	r23,r6,80bfb8 <_dtoa_r+0x10a4>
  80b9b4:	0027883a 	mov	r19,zero
  80b9b8:	a8800417 	ldw	r2,16(r21)
  80b9bc:	05c00804 	movi	r23,32
  80b9c0:	10800104 	addi	r2,r2,4
  80b9c4:	1085883a 	add	r2,r2,r2
  80b9c8:	1085883a 	add	r2,r2,r2
  80b9cc:	a885883a 	add	r2,r21,r2
  80b9d0:	11000017 	ldw	r4,0(r2)
  80b9d4:	08095bc0 	call	8095bc <__hi0bits>
  80b9d8:	b885c83a 	sub	r2,r23,r2
  80b9dc:	1585883a 	add	r2,r2,r22
  80b9e0:	108007cc 	andi	r2,r2,31
  80b9e4:	1000b326 	beq	r2,zero,80bcb4 <_dtoa_r+0xda0>
  80b9e8:	00c00804 	movi	r3,32
  80b9ec:	1887c83a 	sub	r3,r3,r2
  80b9f0:	01000104 	movi	r4,4
  80b9f4:	20c2cd0e 	bge	r4,r3,80c52c <_dtoa_r+0x1618>
  80b9f8:	00c00704 	movi	r3,28
  80b9fc:	1885c83a 	sub	r2,r3,r2
  80ba00:	d8c00817 	ldw	r3,32(sp)
  80ba04:	a0a9883a 	add	r20,r20,r2
  80ba08:	b0ad883a 	add	r22,r22,r2
  80ba0c:	1887883a 	add	r3,r3,r2
  80ba10:	d8c00815 	stw	r3,32(sp)
  80ba14:	d9800817 	ldw	r6,32(sp)
  80ba18:	0180040e 	bge	zero,r6,80ba2c <_dtoa_r+0xb18>
  80ba1c:	800b883a 	mov	r5,r16
  80ba20:	e009883a 	mov	r4,fp
  80ba24:	0809a480 	call	809a48 <__lshift>
  80ba28:	1021883a 	mov	r16,r2
  80ba2c:	0580050e 	bge	zero,r22,80ba44 <_dtoa_r+0xb30>
  80ba30:	a80b883a 	mov	r5,r21
  80ba34:	b00d883a 	mov	r6,r22
  80ba38:	e009883a 	mov	r4,fp
  80ba3c:	0809a480 	call	809a48 <__lshift>
  80ba40:	102b883a 	mov	r21,r2
  80ba44:	d9c00e17 	ldw	r7,56(sp)
  80ba48:	3801211e 	bne	r7,zero,80bed0 <_dtoa_r+0xfbc>
  80ba4c:	d9800617 	ldw	r6,24(sp)
  80ba50:	0181380e 	bge	zero,r6,80bf34 <_dtoa_r+0x1020>
  80ba54:	d8c00b17 	ldw	r3,44(sp)
  80ba58:	1800ab1e 	bne	r3,zero,80bd08 <_dtoa_r+0xdf4>
  80ba5c:	dc800717 	ldw	r18,28(sp)
  80ba60:	dcc00617 	ldw	r19,24(sp)
  80ba64:	9029883a 	mov	r20,r18
  80ba68:	00000206 	br	80ba74 <_dtoa_r+0xb60>
  80ba6c:	08093980 	call	809398 <__multadd>
  80ba70:	1021883a 	mov	r16,r2
  80ba74:	a80b883a 	mov	r5,r21
  80ba78:	8009883a 	mov	r4,r16
  80ba7c:	080ad140 	call	80ad14 <quorem>
  80ba80:	10800c04 	addi	r2,r2,48
  80ba84:	90800005 	stb	r2,0(r18)
  80ba88:	94800044 	addi	r18,r18,1
  80ba8c:	9507c83a 	sub	r3,r18,r20
  80ba90:	000f883a 	mov	r7,zero
  80ba94:	01800284 	movi	r6,10
  80ba98:	800b883a 	mov	r5,r16
  80ba9c:	e009883a 	mov	r4,fp
  80baa0:	1cfff216 	blt	r3,r19,80ba6c <__alt_data_end+0xff80ba6c>
  80baa4:	1011883a 	mov	r8,r2
  80baa8:	d8800617 	ldw	r2,24(sp)
  80baac:	0082370e 	bge	zero,r2,80c38c <_dtoa_r+0x1478>
  80bab0:	d9000717 	ldw	r4,28(sp)
  80bab4:	0025883a 	mov	r18,zero
  80bab8:	20af883a 	add	r23,r4,r2
  80babc:	01800044 	movi	r6,1
  80bac0:	800b883a 	mov	r5,r16
  80bac4:	e009883a 	mov	r4,fp
  80bac8:	da001715 	stw	r8,92(sp)
  80bacc:	0809a480 	call	809a48 <__lshift>
  80bad0:	a80b883a 	mov	r5,r21
  80bad4:	1009883a 	mov	r4,r2
  80bad8:	d8800915 	stw	r2,36(sp)
  80badc:	0809b900 	call	809b90 <__mcmp>
  80bae0:	da001717 	ldw	r8,92(sp)
  80bae4:	0081800e 	bge	zero,r2,80c0e8 <_dtoa_r+0x11d4>
  80bae8:	b93fffc3 	ldbu	r4,-1(r23)
  80baec:	b8bfffc4 	addi	r2,r23,-1
  80baf0:	1007883a 	mov	r3,r2
  80baf4:	01800e44 	movi	r6,57
  80baf8:	d9c00717 	ldw	r7,28(sp)
  80bafc:	00000506 	br	80bb14 <_dtoa_r+0xc00>
  80bb00:	18ffffc4 	addi	r3,r3,-1
  80bb04:	11c12326 	beq	r2,r7,80bf94 <_dtoa_r+0x1080>
  80bb08:	19000003 	ldbu	r4,0(r3)
  80bb0c:	102f883a 	mov	r23,r2
  80bb10:	10bfffc4 	addi	r2,r2,-1
  80bb14:	21403fcc 	andi	r5,r4,255
  80bb18:	2940201c 	xori	r5,r5,128
  80bb1c:	297fe004 	addi	r5,r5,-128
  80bb20:	29bff726 	beq	r5,r6,80bb00 <__alt_data_end+0xff80bb00>
  80bb24:	21000044 	addi	r4,r4,1
  80bb28:	11000005 	stb	r4,0(r2)
  80bb2c:	a80b883a 	mov	r5,r21
  80bb30:	e009883a 	mov	r4,fp
  80bb34:	08093700 	call	809370 <_Bfree>
  80bb38:	883ea026 	beq	r17,zero,80b5bc <__alt_data_end+0xff80b5bc>
  80bb3c:	90000426 	beq	r18,zero,80bb50 <_dtoa_r+0xc3c>
  80bb40:	94400326 	beq	r18,r17,80bb50 <_dtoa_r+0xc3c>
  80bb44:	900b883a 	mov	r5,r18
  80bb48:	e009883a 	mov	r4,fp
  80bb4c:	08093700 	call	809370 <_Bfree>
  80bb50:	880b883a 	mov	r5,r17
  80bb54:	e009883a 	mov	r4,fp
  80bb58:	08093700 	call	809370 <_Bfree>
  80bb5c:	003e9706 	br	80b5bc <__alt_data_end+0xff80b5bc>
  80bb60:	01800044 	movi	r6,1
  80bb64:	d9800e15 	stw	r6,56(sp)
  80bb68:	003d9606 	br	80b1c4 <__alt_data_end+0xff80b1c4>
  80bb6c:	d8800817 	ldw	r2,32(sp)
  80bb70:	d8c00517 	ldw	r3,20(sp)
  80bb74:	d8000d15 	stw	zero,52(sp)
  80bb78:	10c5c83a 	sub	r2,r2,r3
  80bb7c:	00c9c83a 	sub	r4,zero,r3
  80bb80:	d8800815 	stw	r2,32(sp)
  80bb84:	d9000a15 	stw	r4,40(sp)
  80bb88:	003d9706 	br	80b1e8 <__alt_data_end+0xff80b1e8>
  80bb8c:	05adc83a 	sub	r22,zero,r22
  80bb90:	dd800815 	stw	r22,32(sp)
  80bb94:	002d883a 	mov	r22,zero
  80bb98:	003d8e06 	br	80b1d4 <__alt_data_end+0xff80b1d4>
  80bb9c:	d9000517 	ldw	r4,20(sp)
  80bba0:	080690c0 	call	80690c <__floatsidf>
  80bba4:	100d883a 	mov	r6,r2
  80bba8:	180f883a 	mov	r7,r3
  80bbac:	a009883a 	mov	r4,r20
  80bbb0:	880b883a 	mov	r5,r17
  80bbb4:	08057140 	call	805714 <__eqdf2>
  80bbb8:	103d7126 	beq	r2,zero,80b180 <__alt_data_end+0xff80b180>
  80bbbc:	d9c00517 	ldw	r7,20(sp)
  80bbc0:	39ffffc4 	addi	r7,r7,-1
  80bbc4:	d9c00515 	stw	r7,20(sp)
  80bbc8:	003d6d06 	br	80b180 <__alt_data_end+0xff80b180>
  80bbcc:	dd400a17 	ldw	r21,40(sp)
  80bbd0:	dd000817 	ldw	r20,32(sp)
  80bbd4:	0023883a 	mov	r17,zero
  80bbd8:	003f4806 	br	80b8fc <__alt_data_end+0xff80b8fc>
  80bbdc:	10e3c83a 	sub	r17,r2,r3
  80bbe0:	9448983a 	sll	r4,r18,r17
  80bbe4:	003d3206 	br	80b0b0 <__alt_data_end+0xff80b0b0>
  80bbe8:	d8000e15 	stw	zero,56(sp)
  80bbec:	003d7506 	br	80b1c4 <__alt_data_end+0xff80b1c4>
  80bbf0:	b005883a 	mov	r2,r22
  80bbf4:	003f4506 	br	80b90c <__alt_data_end+0xff80b90c>
  80bbf8:	dc000915 	stw	r16,36(sp)
  80bbfc:	d9800a17 	ldw	r6,40(sp)
  80bc00:	d9400917 	ldw	r5,36(sp)
  80bc04:	e009883a 	mov	r4,fp
  80bc08:	08099080 	call	809908 <__pow5mult>
  80bc0c:	1021883a 	mov	r16,r2
  80bc10:	003f5a06 	br	80b97c <__alt_data_end+0xff80b97c>
  80bc14:	01c00044 	movi	r7,1
  80bc18:	d9c00b15 	stw	r7,44(sp)
  80bc1c:	d8802217 	ldw	r2,136(sp)
  80bc20:	0081280e 	bge	zero,r2,80c0c4 <_dtoa_r+0x11b0>
  80bc24:	100d883a 	mov	r6,r2
  80bc28:	1021883a 	mov	r16,r2
  80bc2c:	d8800c15 	stw	r2,48(sp)
  80bc30:	d8800615 	stw	r2,24(sp)
  80bc34:	003d8806 	br	80b258 <__alt_data_end+0xff80b258>
  80bc38:	d8800617 	ldw	r2,24(sp)
  80bc3c:	00be9b16 	blt	zero,r2,80b6ac <__alt_data_end+0xff80b6ac>
  80bc40:	10010f1e 	bne	r2,zero,80c080 <_dtoa_r+0x116c>
  80bc44:	880b883a 	mov	r5,r17
  80bc48:	000d883a 	mov	r6,zero
  80bc4c:	01d00534 	movhi	r7,16404
  80bc50:	8009883a 	mov	r4,r16
  80bc54:	08058780 	call	805878 <__muldf3>
  80bc58:	900d883a 	mov	r6,r18
  80bc5c:	980f883a 	mov	r7,r19
  80bc60:	1009883a 	mov	r4,r2
  80bc64:	180b883a 	mov	r5,r3
  80bc68:	080579c0 	call	80579c <__gedf2>
  80bc6c:	002b883a 	mov	r21,zero
  80bc70:	0023883a 	mov	r17,zero
  80bc74:	1000bf16 	blt	r2,zero,80bf74 <_dtoa_r+0x1060>
  80bc78:	d9802217 	ldw	r6,136(sp)
  80bc7c:	ddc00717 	ldw	r23,28(sp)
  80bc80:	018c303a 	nor	r6,zero,r6
  80bc84:	d9800515 	stw	r6,20(sp)
  80bc88:	a80b883a 	mov	r5,r21
  80bc8c:	e009883a 	mov	r4,fp
  80bc90:	08093700 	call	809370 <_Bfree>
  80bc94:	883e4926 	beq	r17,zero,80b5bc <__alt_data_end+0xff80b5bc>
  80bc98:	003fad06 	br	80bb50 <__alt_data_end+0xff80bb50>
  80bc9c:	d9c01117 	ldw	r7,68(sp)
  80bca0:	3801bc26 	beq	r7,zero,80c394 <_dtoa_r+0x1480>
  80bca4:	10810cc4 	addi	r2,r2,1075
  80bca8:	dd400a17 	ldw	r21,40(sp)
  80bcac:	dd000817 	ldw	r20,32(sp)
  80bcb0:	003f0a06 	br	80b8dc <__alt_data_end+0xff80b8dc>
  80bcb4:	00800704 	movi	r2,28
  80bcb8:	d9000817 	ldw	r4,32(sp)
  80bcbc:	a0a9883a 	add	r20,r20,r2
  80bcc0:	b0ad883a 	add	r22,r22,r2
  80bcc4:	2089883a 	add	r4,r4,r2
  80bcc8:	d9000815 	stw	r4,32(sp)
  80bccc:	003f5106 	br	80ba14 <__alt_data_end+0xff80ba14>
  80bcd0:	d8c00317 	ldw	r3,12(sp)
  80bcd4:	b8c1fc0e 	bge	r23,r3,80c4c8 <_dtoa_r+0x15b4>
  80bcd8:	0027883a 	mov	r19,zero
  80bcdc:	b805883a 	mov	r2,r23
  80bce0:	003f3e06 	br	80b9dc <__alt_data_end+0xff80b9dc>
  80bce4:	880b883a 	mov	r5,r17
  80bce8:	e009883a 	mov	r4,fp
  80bcec:	000f883a 	mov	r7,zero
  80bcf0:	01800284 	movi	r6,10
  80bcf4:	08093980 	call	809398 <__multadd>
  80bcf8:	d9000c17 	ldw	r4,48(sp)
  80bcfc:	1023883a 	mov	r17,r2
  80bd00:	0102040e 	bge	zero,r4,80c514 <_dtoa_r+0x1600>
  80bd04:	d9000615 	stw	r4,24(sp)
  80bd08:	0500050e 	bge	zero,r20,80bd20 <_dtoa_r+0xe0c>
  80bd0c:	880b883a 	mov	r5,r17
  80bd10:	a00d883a 	mov	r6,r20
  80bd14:	e009883a 	mov	r4,fp
  80bd18:	0809a480 	call	809a48 <__lshift>
  80bd1c:	1023883a 	mov	r17,r2
  80bd20:	9801241e 	bne	r19,zero,80c1b4 <_dtoa_r+0x12a0>
  80bd24:	8829883a 	mov	r20,r17
  80bd28:	d9000617 	ldw	r4,24(sp)
  80bd2c:	dcc00717 	ldw	r19,28(sp)
  80bd30:	9480004c 	andi	r18,r18,1
  80bd34:	20bfffc4 	addi	r2,r4,-1
  80bd38:	9885883a 	add	r2,r19,r2
  80bd3c:	d8800415 	stw	r2,16(sp)
  80bd40:	dc800615 	stw	r18,24(sp)
  80bd44:	a80b883a 	mov	r5,r21
  80bd48:	8009883a 	mov	r4,r16
  80bd4c:	080ad140 	call	80ad14 <quorem>
  80bd50:	880b883a 	mov	r5,r17
  80bd54:	8009883a 	mov	r4,r16
  80bd58:	102f883a 	mov	r23,r2
  80bd5c:	0809b900 	call	809b90 <__mcmp>
  80bd60:	a80b883a 	mov	r5,r21
  80bd64:	a00d883a 	mov	r6,r20
  80bd68:	e009883a 	mov	r4,fp
  80bd6c:	102d883a 	mov	r22,r2
  80bd70:	0809bf00 	call	809bf0 <__mdiff>
  80bd74:	1007883a 	mov	r3,r2
  80bd78:	10800317 	ldw	r2,12(r2)
  80bd7c:	bc800c04 	addi	r18,r23,48
  80bd80:	180b883a 	mov	r5,r3
  80bd84:	10004e1e 	bne	r2,zero,80bec0 <_dtoa_r+0xfac>
  80bd88:	8009883a 	mov	r4,r16
  80bd8c:	d8c01615 	stw	r3,88(sp)
  80bd90:	0809b900 	call	809b90 <__mcmp>
  80bd94:	d8c01617 	ldw	r3,88(sp)
  80bd98:	e009883a 	mov	r4,fp
  80bd9c:	d8801615 	stw	r2,88(sp)
  80bda0:	180b883a 	mov	r5,r3
  80bda4:	08093700 	call	809370 <_Bfree>
  80bda8:	d8801617 	ldw	r2,88(sp)
  80bdac:	1000041e 	bne	r2,zero,80bdc0 <_dtoa_r+0xeac>
  80bdb0:	d9800317 	ldw	r6,12(sp)
  80bdb4:	3000021e 	bne	r6,zero,80bdc0 <_dtoa_r+0xeac>
  80bdb8:	d8c00617 	ldw	r3,24(sp)
  80bdbc:	18003726 	beq	r3,zero,80be9c <_dtoa_r+0xf88>
  80bdc0:	b0002016 	blt	r22,zero,80be44 <_dtoa_r+0xf30>
  80bdc4:	b000041e 	bne	r22,zero,80bdd8 <_dtoa_r+0xec4>
  80bdc8:	d9000317 	ldw	r4,12(sp)
  80bdcc:	2000021e 	bne	r4,zero,80bdd8 <_dtoa_r+0xec4>
  80bdd0:	d8c00617 	ldw	r3,24(sp)
  80bdd4:	18001b26 	beq	r3,zero,80be44 <_dtoa_r+0xf30>
  80bdd8:	00810716 	blt	zero,r2,80c1f8 <_dtoa_r+0x12e4>
  80bddc:	d8c00417 	ldw	r3,16(sp)
  80bde0:	9d800044 	addi	r22,r19,1
  80bde4:	9c800005 	stb	r18,0(r19)
  80bde8:	b02f883a 	mov	r23,r22
  80bdec:	98c10626 	beq	r19,r3,80c208 <_dtoa_r+0x12f4>
  80bdf0:	800b883a 	mov	r5,r16
  80bdf4:	000f883a 	mov	r7,zero
  80bdf8:	01800284 	movi	r6,10
  80bdfc:	e009883a 	mov	r4,fp
  80be00:	08093980 	call	809398 <__multadd>
  80be04:	1021883a 	mov	r16,r2
  80be08:	000f883a 	mov	r7,zero
  80be0c:	01800284 	movi	r6,10
  80be10:	880b883a 	mov	r5,r17
  80be14:	e009883a 	mov	r4,fp
  80be18:	8d002526 	beq	r17,r20,80beb0 <_dtoa_r+0xf9c>
  80be1c:	08093980 	call	809398 <__multadd>
  80be20:	a00b883a 	mov	r5,r20
  80be24:	000f883a 	mov	r7,zero
  80be28:	01800284 	movi	r6,10
  80be2c:	e009883a 	mov	r4,fp
  80be30:	1023883a 	mov	r17,r2
  80be34:	08093980 	call	809398 <__multadd>
  80be38:	1029883a 	mov	r20,r2
  80be3c:	b027883a 	mov	r19,r22
  80be40:	003fc006 	br	80bd44 <__alt_data_end+0xff80bd44>
  80be44:	9011883a 	mov	r8,r18
  80be48:	00800e0e 	bge	zero,r2,80be84 <_dtoa_r+0xf70>
  80be4c:	800b883a 	mov	r5,r16
  80be50:	01800044 	movi	r6,1
  80be54:	e009883a 	mov	r4,fp
  80be58:	da001715 	stw	r8,92(sp)
  80be5c:	0809a480 	call	809a48 <__lshift>
  80be60:	a80b883a 	mov	r5,r21
  80be64:	1009883a 	mov	r4,r2
  80be68:	1021883a 	mov	r16,r2
  80be6c:	0809b900 	call	809b90 <__mcmp>
  80be70:	da001717 	ldw	r8,92(sp)
  80be74:	0081960e 	bge	zero,r2,80c4d0 <_dtoa_r+0x15bc>
  80be78:	00800e44 	movi	r2,57
  80be7c:	40817026 	beq	r8,r2,80c440 <_dtoa_r+0x152c>
  80be80:	ba000c44 	addi	r8,r23,49
  80be84:	8825883a 	mov	r18,r17
  80be88:	9dc00044 	addi	r23,r19,1
  80be8c:	9a000005 	stb	r8,0(r19)
  80be90:	a023883a 	mov	r17,r20
  80be94:	dc000915 	stw	r16,36(sp)
  80be98:	003f2406 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80be9c:	00800e44 	movi	r2,57
  80bea0:	9011883a 	mov	r8,r18
  80bea4:	90816626 	beq	r18,r2,80c440 <_dtoa_r+0x152c>
  80bea8:	05bff516 	blt	zero,r22,80be80 <__alt_data_end+0xff80be80>
  80beac:	003ff506 	br	80be84 <__alt_data_end+0xff80be84>
  80beb0:	08093980 	call	809398 <__multadd>
  80beb4:	1023883a 	mov	r17,r2
  80beb8:	1029883a 	mov	r20,r2
  80bebc:	003fdf06 	br	80be3c <__alt_data_end+0xff80be3c>
  80bec0:	e009883a 	mov	r4,fp
  80bec4:	08093700 	call	809370 <_Bfree>
  80bec8:	00800044 	movi	r2,1
  80becc:	003fbc06 	br	80bdc0 <__alt_data_end+0xff80bdc0>
  80bed0:	a80b883a 	mov	r5,r21
  80bed4:	8009883a 	mov	r4,r16
  80bed8:	0809b900 	call	809b90 <__mcmp>
  80bedc:	103edb0e 	bge	r2,zero,80ba4c <__alt_data_end+0xff80ba4c>
  80bee0:	800b883a 	mov	r5,r16
  80bee4:	000f883a 	mov	r7,zero
  80bee8:	01800284 	movi	r6,10
  80beec:	e009883a 	mov	r4,fp
  80bef0:	08093980 	call	809398 <__multadd>
  80bef4:	1021883a 	mov	r16,r2
  80bef8:	d8800517 	ldw	r2,20(sp)
  80befc:	d8c00b17 	ldw	r3,44(sp)
  80bf00:	10bfffc4 	addi	r2,r2,-1
  80bf04:	d8800515 	stw	r2,20(sp)
  80bf08:	183f761e 	bne	r3,zero,80bce4 <__alt_data_end+0xff80bce4>
  80bf0c:	d9000c17 	ldw	r4,48(sp)
  80bf10:	0101730e 	bge	zero,r4,80c4e0 <_dtoa_r+0x15cc>
  80bf14:	d9000615 	stw	r4,24(sp)
  80bf18:	003ed006 	br	80ba5c <__alt_data_end+0xff80ba5c>
  80bf1c:	00800084 	movi	r2,2
  80bf20:	3081861e 	bne	r6,r2,80c53c <_dtoa_r+0x1628>
  80bf24:	d8000b15 	stw	zero,44(sp)
  80bf28:	003f3c06 	br	80bc1c <__alt_data_end+0xff80bc1c>
  80bf2c:	dc000917 	ldw	r16,36(sp)
  80bf30:	003e9206 	br	80b97c <__alt_data_end+0xff80b97c>
  80bf34:	d9c00317 	ldw	r7,12(sp)
  80bf38:	00800084 	movi	r2,2
  80bf3c:	11fec50e 	bge	r2,r7,80ba54 <__alt_data_end+0xff80ba54>
  80bf40:	d9000617 	ldw	r4,24(sp)
  80bf44:	20013c1e 	bne	r4,zero,80c438 <_dtoa_r+0x1524>
  80bf48:	a80b883a 	mov	r5,r21
  80bf4c:	000f883a 	mov	r7,zero
  80bf50:	01800144 	movi	r6,5
  80bf54:	e009883a 	mov	r4,fp
  80bf58:	08093980 	call	809398 <__multadd>
  80bf5c:	100b883a 	mov	r5,r2
  80bf60:	8009883a 	mov	r4,r16
  80bf64:	102b883a 	mov	r21,r2
  80bf68:	0809b900 	call	809b90 <__mcmp>
  80bf6c:	dc000915 	stw	r16,36(sp)
  80bf70:	00bf410e 	bge	zero,r2,80bc78 <__alt_data_end+0xff80bc78>
  80bf74:	d9c00717 	ldw	r7,28(sp)
  80bf78:	00800c44 	movi	r2,49
  80bf7c:	38800005 	stb	r2,0(r7)
  80bf80:	d8800517 	ldw	r2,20(sp)
  80bf84:	3dc00044 	addi	r23,r7,1
  80bf88:	10800044 	addi	r2,r2,1
  80bf8c:	d8800515 	stw	r2,20(sp)
  80bf90:	003f3d06 	br	80bc88 <__alt_data_end+0xff80bc88>
  80bf94:	d9800517 	ldw	r6,20(sp)
  80bf98:	d9c00717 	ldw	r7,28(sp)
  80bf9c:	00800c44 	movi	r2,49
  80bfa0:	31800044 	addi	r6,r6,1
  80bfa4:	d9800515 	stw	r6,20(sp)
  80bfa8:	38800005 	stb	r2,0(r7)
  80bfac:	003edf06 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80bfb0:	d8000b15 	stw	zero,44(sp)
  80bfb4:	003c9f06 	br	80b234 <__alt_data_end+0xff80b234>
  80bfb8:	903e7e1e 	bne	r18,zero,80b9b4 <__alt_data_end+0xff80b9b4>
  80bfbc:	00800434 	movhi	r2,16
  80bfc0:	10bfffc4 	addi	r2,r2,-1
  80bfc4:	9884703a 	and	r2,r19,r2
  80bfc8:	1000ea1e 	bne	r2,zero,80c374 <_dtoa_r+0x1460>
  80bfcc:	9cdffc2c 	andhi	r19,r19,32752
  80bfd0:	9800e826 	beq	r19,zero,80c374 <_dtoa_r+0x1460>
  80bfd4:	d9c00817 	ldw	r7,32(sp)
  80bfd8:	b5800044 	addi	r22,r22,1
  80bfdc:	04c00044 	movi	r19,1
  80bfe0:	39c00044 	addi	r7,r7,1
  80bfe4:	d9c00815 	stw	r7,32(sp)
  80bfe8:	d8800d17 	ldw	r2,52(sp)
  80bfec:	103e721e 	bne	r2,zero,80b9b8 <__alt_data_end+0xff80b9b8>
  80bff0:	00800044 	movi	r2,1
  80bff4:	003e7906 	br	80b9dc <__alt_data_end+0xff80b9dc>
  80bff8:	8009883a 	mov	r4,r16
  80bffc:	080690c0 	call	80690c <__floatsidf>
  80c000:	d9800f17 	ldw	r6,60(sp)
  80c004:	d9c01017 	ldw	r7,64(sp)
  80c008:	1009883a 	mov	r4,r2
  80c00c:	180b883a 	mov	r5,r3
  80c010:	08058780 	call	805878 <__muldf3>
  80c014:	000d883a 	mov	r6,zero
  80c018:	01d00734 	movhi	r7,16412
  80c01c:	1009883a 	mov	r4,r2
  80c020:	180b883a 	mov	r5,r3
  80c024:	08045800 	call	804580 <__adddf3>
  80c028:	047f3034 	movhi	r17,64704
  80c02c:	1021883a 	mov	r16,r2
  80c030:	1c63883a 	add	r17,r3,r17
  80c034:	d9000f17 	ldw	r4,60(sp)
  80c038:	d9401017 	ldw	r5,64(sp)
  80c03c:	000d883a 	mov	r6,zero
  80c040:	01d00534 	movhi	r7,16404
  80c044:	0805f900 	call	805f90 <__subdf3>
  80c048:	800d883a 	mov	r6,r16
  80c04c:	880f883a 	mov	r7,r17
  80c050:	1009883a 	mov	r4,r2
  80c054:	180b883a 	mov	r5,r3
  80c058:	102b883a 	mov	r21,r2
  80c05c:	1829883a 	mov	r20,r3
  80c060:	080579c0 	call	80579c <__gedf2>
  80c064:	00806c16 	blt	zero,r2,80c218 <_dtoa_r+0x1304>
  80c068:	89e0003c 	xorhi	r7,r17,32768
  80c06c:	800d883a 	mov	r6,r16
  80c070:	a809883a 	mov	r4,r21
  80c074:	a00b883a 	mov	r5,r20
  80c078:	080d0a80 	call	80d0a8 <__ledf2>
  80c07c:	103d7e0e 	bge	r2,zero,80b678 <__alt_data_end+0xff80b678>
  80c080:	002b883a 	mov	r21,zero
  80c084:	0023883a 	mov	r17,zero
  80c088:	003efb06 	br	80bc78 <__alt_data_end+0xff80bc78>
  80c08c:	d8800717 	ldw	r2,28(sp)
  80c090:	003bd006 	br	80afd4 <__alt_data_end+0xff80afd4>
  80c094:	d9000a17 	ldw	r4,40(sp)
  80c098:	d9800d17 	ldw	r6,52(sp)
  80c09c:	dd400a15 	stw	r21,40(sp)
  80c0a0:	a905c83a 	sub	r2,r21,r4
  80c0a4:	308d883a 	add	r6,r6,r2
  80c0a8:	d9800d15 	stw	r6,52(sp)
  80c0ac:	002b883a 	mov	r21,zero
  80c0b0:	003e0606 	br	80b8cc <__alt_data_end+0xff80b8cc>
  80c0b4:	9023883a 	mov	r17,r18
  80c0b8:	9829883a 	mov	r20,r19
  80c0bc:	04000084 	movi	r16,2
  80c0c0:	003c9206 	br	80b30c <__alt_data_end+0xff80b30c>
  80c0c4:	04000044 	movi	r16,1
  80c0c8:	dc000c15 	stw	r16,48(sp)
  80c0cc:	dc000615 	stw	r16,24(sp)
  80c0d0:	dc002215 	stw	r16,136(sp)
  80c0d4:	e0001115 	stw	zero,68(fp)
  80c0d8:	000b883a 	mov	r5,zero
  80c0dc:	003c6906 	br	80b284 <__alt_data_end+0xff80b284>
  80c0e0:	3021883a 	mov	r16,r6
  80c0e4:	003ffb06 	br	80c0d4 <__alt_data_end+0xff80c0d4>
  80c0e8:	1000021e 	bne	r2,zero,80c0f4 <_dtoa_r+0x11e0>
  80c0ec:	4200004c 	andi	r8,r8,1
  80c0f0:	403e7d1e 	bne	r8,zero,80bae8 <__alt_data_end+0xff80bae8>
  80c0f4:	01000c04 	movi	r4,48
  80c0f8:	00000106 	br	80c100 <_dtoa_r+0x11ec>
  80c0fc:	102f883a 	mov	r23,r2
  80c100:	b8bfffc4 	addi	r2,r23,-1
  80c104:	10c00007 	ldb	r3,0(r2)
  80c108:	193ffc26 	beq	r3,r4,80c0fc <__alt_data_end+0xff80c0fc>
  80c10c:	003e8706 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80c110:	d8800517 	ldw	r2,20(sp)
  80c114:	00a3c83a 	sub	r17,zero,r2
  80c118:	8800a426 	beq	r17,zero,80c3ac <_dtoa_r+0x1498>
  80c11c:	888003cc 	andi	r2,r17,15
  80c120:	100490fa 	slli	r2,r2,3
  80c124:	00c02074 	movhi	r3,129
  80c128:	18ffa204 	addi	r3,r3,-376
  80c12c:	1885883a 	add	r2,r3,r2
  80c130:	11800017 	ldw	r6,0(r2)
  80c134:	11c00117 	ldw	r7,4(r2)
  80c138:	9009883a 	mov	r4,r18
  80c13c:	980b883a 	mov	r5,r19
  80c140:	8823d13a 	srai	r17,r17,4
  80c144:	08058780 	call	805878 <__muldf3>
  80c148:	d8800f15 	stw	r2,60(sp)
  80c14c:	d8c01015 	stw	r3,64(sp)
  80c150:	8800e826 	beq	r17,zero,80c4f4 <_dtoa_r+0x15e0>
  80c154:	05002074 	movhi	r20,129
  80c158:	a53f9804 	addi	r20,r20,-416
  80c15c:	04000084 	movi	r16,2
  80c160:	8980004c 	andi	r6,r17,1
  80c164:	1009883a 	mov	r4,r2
  80c168:	8823d07a 	srai	r17,r17,1
  80c16c:	180b883a 	mov	r5,r3
  80c170:	30000426 	beq	r6,zero,80c184 <_dtoa_r+0x1270>
  80c174:	a1800017 	ldw	r6,0(r20)
  80c178:	a1c00117 	ldw	r7,4(r20)
  80c17c:	84000044 	addi	r16,r16,1
  80c180:	08058780 	call	805878 <__muldf3>
  80c184:	a5000204 	addi	r20,r20,8
  80c188:	883ff51e 	bne	r17,zero,80c160 <__alt_data_end+0xff80c160>
  80c18c:	d8800f15 	stw	r2,60(sp)
  80c190:	d8c01015 	stw	r3,64(sp)
  80c194:	003c7606 	br	80b370 <__alt_data_end+0xff80b370>
  80c198:	00c00c04 	movi	r3,48
  80c19c:	10c00005 	stb	r3,0(r2)
  80c1a0:	d8c00517 	ldw	r3,20(sp)
  80c1a4:	bd3fffc3 	ldbu	r20,-1(r23)
  80c1a8:	18c00044 	addi	r3,r3,1
  80c1ac:	d8c00515 	stw	r3,20(sp)
  80c1b0:	003db906 	br	80b898 <__alt_data_end+0xff80b898>
  80c1b4:	89400117 	ldw	r5,4(r17)
  80c1b8:	e009883a 	mov	r4,fp
  80c1bc:	08092c80 	call	8092c8 <_Balloc>
  80c1c0:	89800417 	ldw	r6,16(r17)
  80c1c4:	89400304 	addi	r5,r17,12
  80c1c8:	11000304 	addi	r4,r2,12
  80c1cc:	31800084 	addi	r6,r6,2
  80c1d0:	318d883a 	add	r6,r6,r6
  80c1d4:	318d883a 	add	r6,r6,r6
  80c1d8:	1027883a 	mov	r19,r2
  80c1dc:	0808efc0 	call	808efc <memcpy>
  80c1e0:	01800044 	movi	r6,1
  80c1e4:	980b883a 	mov	r5,r19
  80c1e8:	e009883a 	mov	r4,fp
  80c1ec:	0809a480 	call	809a48 <__lshift>
  80c1f0:	1029883a 	mov	r20,r2
  80c1f4:	003ecc06 	br	80bd28 <__alt_data_end+0xff80bd28>
  80c1f8:	00800e44 	movi	r2,57
  80c1fc:	90809026 	beq	r18,r2,80c440 <_dtoa_r+0x152c>
  80c200:	92000044 	addi	r8,r18,1
  80c204:	003f1f06 	br	80be84 <__alt_data_end+0xff80be84>
  80c208:	9011883a 	mov	r8,r18
  80c20c:	8825883a 	mov	r18,r17
  80c210:	a023883a 	mov	r17,r20
  80c214:	003e2906 	br	80babc <__alt_data_end+0xff80babc>
  80c218:	002b883a 	mov	r21,zero
  80c21c:	0023883a 	mov	r17,zero
  80c220:	003f5406 	br	80bf74 <__alt_data_end+0xff80bf74>
  80c224:	61bfffc4 	addi	r6,r12,-1
  80c228:	300490fa 	slli	r2,r6,3
  80c22c:	00c02074 	movhi	r3,129
  80c230:	18ffa204 	addi	r3,r3,-376
  80c234:	1885883a 	add	r2,r3,r2
  80c238:	11000017 	ldw	r4,0(r2)
  80c23c:	11400117 	ldw	r5,4(r2)
  80c240:	d8800717 	ldw	r2,28(sp)
  80c244:	880f883a 	mov	r7,r17
  80c248:	d9801215 	stw	r6,72(sp)
  80c24c:	800d883a 	mov	r6,r16
  80c250:	db001615 	stw	r12,88(sp)
  80c254:	15c00044 	addi	r23,r2,1
  80c258:	08058780 	call	805878 <__muldf3>
  80c25c:	d9401017 	ldw	r5,64(sp)
  80c260:	d9000f17 	ldw	r4,60(sp)
  80c264:	d8c01515 	stw	r3,84(sp)
  80c268:	d8801415 	stw	r2,80(sp)
  80c26c:	080688c0 	call	80688c <__fixdfsi>
  80c270:	1009883a 	mov	r4,r2
  80c274:	1021883a 	mov	r16,r2
  80c278:	080690c0 	call	80690c <__floatsidf>
  80c27c:	d9000f17 	ldw	r4,60(sp)
  80c280:	d9401017 	ldw	r5,64(sp)
  80c284:	100d883a 	mov	r6,r2
  80c288:	180f883a 	mov	r7,r3
  80c28c:	0805f900 	call	805f90 <__subdf3>
  80c290:	1829883a 	mov	r20,r3
  80c294:	d8c00717 	ldw	r3,28(sp)
  80c298:	84000c04 	addi	r16,r16,48
  80c29c:	1023883a 	mov	r17,r2
  80c2a0:	1c000005 	stb	r16,0(r3)
  80c2a4:	db001617 	ldw	r12,88(sp)
  80c2a8:	00800044 	movi	r2,1
  80c2ac:	60802226 	beq	r12,r2,80c338 <_dtoa_r+0x1424>
  80c2b0:	d9c00717 	ldw	r7,28(sp)
  80c2b4:	8805883a 	mov	r2,r17
  80c2b8:	b82b883a 	mov	r21,r23
  80c2bc:	3b19883a 	add	r12,r7,r12
  80c2c0:	6023883a 	mov	r17,r12
  80c2c4:	a007883a 	mov	r3,r20
  80c2c8:	dc800f15 	stw	r18,60(sp)
  80c2cc:	000d883a 	mov	r6,zero
  80c2d0:	01d00934 	movhi	r7,16420
  80c2d4:	1009883a 	mov	r4,r2
  80c2d8:	180b883a 	mov	r5,r3
  80c2dc:	08058780 	call	805878 <__muldf3>
  80c2e0:	180b883a 	mov	r5,r3
  80c2e4:	1009883a 	mov	r4,r2
  80c2e8:	1829883a 	mov	r20,r3
  80c2ec:	1025883a 	mov	r18,r2
  80c2f0:	080688c0 	call	80688c <__fixdfsi>
  80c2f4:	1009883a 	mov	r4,r2
  80c2f8:	1021883a 	mov	r16,r2
  80c2fc:	080690c0 	call	80690c <__floatsidf>
  80c300:	100d883a 	mov	r6,r2
  80c304:	180f883a 	mov	r7,r3
  80c308:	9009883a 	mov	r4,r18
  80c30c:	a00b883a 	mov	r5,r20
  80c310:	84000c04 	addi	r16,r16,48
  80c314:	0805f900 	call	805f90 <__subdf3>
  80c318:	ad400044 	addi	r21,r21,1
  80c31c:	ac3fffc5 	stb	r16,-1(r21)
  80c320:	ac7fea1e 	bne	r21,r17,80c2cc <__alt_data_end+0xff80c2cc>
  80c324:	1023883a 	mov	r17,r2
  80c328:	d8801217 	ldw	r2,72(sp)
  80c32c:	dc800f17 	ldw	r18,60(sp)
  80c330:	1829883a 	mov	r20,r3
  80c334:	b8af883a 	add	r23,r23,r2
  80c338:	d9001417 	ldw	r4,80(sp)
  80c33c:	d9401517 	ldw	r5,84(sp)
  80c340:	000d883a 	mov	r6,zero
  80c344:	01cff834 	movhi	r7,16352
  80c348:	08045800 	call	804580 <__adddf3>
  80c34c:	880d883a 	mov	r6,r17
  80c350:	a00f883a 	mov	r7,r20
  80c354:	1009883a 	mov	r4,r2
  80c358:	180b883a 	mov	r5,r3
  80c35c:	080d0a80 	call	80d0a8 <__ledf2>
  80c360:	10003e0e 	bge	r2,zero,80c45c <_dtoa_r+0x1548>
  80c364:	d9001317 	ldw	r4,76(sp)
  80c368:	bd3fffc3 	ldbu	r20,-1(r23)
  80c36c:	d9000515 	stw	r4,20(sp)
  80c370:	003d3b06 	br	80b860 <__alt_data_end+0xff80b860>
  80c374:	0027883a 	mov	r19,zero
  80c378:	003f1b06 	br	80bfe8 <__alt_data_end+0xff80bfe8>
  80c37c:	d8800817 	ldw	r2,32(sp)
  80c380:	11e9c83a 	sub	r20,r2,r7
  80c384:	0005883a 	mov	r2,zero
  80c388:	003d5406 	br	80b8dc <__alt_data_end+0xff80b8dc>
  80c38c:	00800044 	movi	r2,1
  80c390:	003dc706 	br	80bab0 <__alt_data_end+0xff80bab0>
  80c394:	d8c00217 	ldw	r3,8(sp)
  80c398:	00800d84 	movi	r2,54
  80c39c:	dd400a17 	ldw	r21,40(sp)
  80c3a0:	10c5c83a 	sub	r2,r2,r3
  80c3a4:	dd000817 	ldw	r20,32(sp)
  80c3a8:	003d4c06 	br	80b8dc <__alt_data_end+0xff80b8dc>
  80c3ac:	dc800f15 	stw	r18,60(sp)
  80c3b0:	dcc01015 	stw	r19,64(sp)
  80c3b4:	04000084 	movi	r16,2
  80c3b8:	003bed06 	br	80b370 <__alt_data_end+0xff80b370>
  80c3bc:	d9000617 	ldw	r4,24(sp)
  80c3c0:	203f0d26 	beq	r4,zero,80bff8 <__alt_data_end+0xff80bff8>
  80c3c4:	d9800c17 	ldw	r6,48(sp)
  80c3c8:	01bcab0e 	bge	zero,r6,80b678 <__alt_data_end+0xff80b678>
  80c3cc:	d9401017 	ldw	r5,64(sp)
  80c3d0:	d9000f17 	ldw	r4,60(sp)
  80c3d4:	000d883a 	mov	r6,zero
  80c3d8:	01d00934 	movhi	r7,16420
  80c3dc:	08058780 	call	805878 <__muldf3>
  80c3e0:	81000044 	addi	r4,r16,1
  80c3e4:	d8800f15 	stw	r2,60(sp)
  80c3e8:	d8c01015 	stw	r3,64(sp)
  80c3ec:	080690c0 	call	80690c <__floatsidf>
  80c3f0:	d9800f17 	ldw	r6,60(sp)
  80c3f4:	d9c01017 	ldw	r7,64(sp)
  80c3f8:	1009883a 	mov	r4,r2
  80c3fc:	180b883a 	mov	r5,r3
  80c400:	08058780 	call	805878 <__muldf3>
  80c404:	01d00734 	movhi	r7,16412
  80c408:	000d883a 	mov	r6,zero
  80c40c:	1009883a 	mov	r4,r2
  80c410:	180b883a 	mov	r5,r3
  80c414:	08045800 	call	804580 <__adddf3>
  80c418:	d9c00517 	ldw	r7,20(sp)
  80c41c:	047f3034 	movhi	r17,64704
  80c420:	1021883a 	mov	r16,r2
  80c424:	39ffffc4 	addi	r7,r7,-1
  80c428:	d9c01315 	stw	r7,76(sp)
  80c42c:	1c63883a 	add	r17,r3,r17
  80c430:	db000c17 	ldw	r12,48(sp)
  80c434:	003bea06 	br	80b3e0 <__alt_data_end+0xff80b3e0>
  80c438:	dc000915 	stw	r16,36(sp)
  80c43c:	003e0e06 	br	80bc78 <__alt_data_end+0xff80bc78>
  80c440:	01000e44 	movi	r4,57
  80c444:	8825883a 	mov	r18,r17
  80c448:	9dc00044 	addi	r23,r19,1
  80c44c:	99000005 	stb	r4,0(r19)
  80c450:	a023883a 	mov	r17,r20
  80c454:	dc000915 	stw	r16,36(sp)
  80c458:	003da406 	br	80baec <__alt_data_end+0xff80baec>
  80c45c:	d9801417 	ldw	r6,80(sp)
  80c460:	d9c01517 	ldw	r7,84(sp)
  80c464:	0009883a 	mov	r4,zero
  80c468:	014ff834 	movhi	r5,16352
  80c46c:	0805f900 	call	805f90 <__subdf3>
  80c470:	880d883a 	mov	r6,r17
  80c474:	a00f883a 	mov	r7,r20
  80c478:	1009883a 	mov	r4,r2
  80c47c:	180b883a 	mov	r5,r3
  80c480:	080579c0 	call	80579c <__gedf2>
  80c484:	00bc7c0e 	bge	zero,r2,80b678 <__alt_data_end+0xff80b678>
  80c488:	01000c04 	movi	r4,48
  80c48c:	00000106 	br	80c494 <_dtoa_r+0x1580>
  80c490:	102f883a 	mov	r23,r2
  80c494:	b8bfffc4 	addi	r2,r23,-1
  80c498:	10c00007 	ldb	r3,0(r2)
  80c49c:	193ffc26 	beq	r3,r4,80c490 <__alt_data_end+0xff80c490>
  80c4a0:	d9801317 	ldw	r6,76(sp)
  80c4a4:	d9800515 	stw	r6,20(sp)
  80c4a8:	003c4406 	br	80b5bc <__alt_data_end+0xff80b5bc>
  80c4ac:	d9801317 	ldw	r6,76(sp)
  80c4b0:	d9800515 	stw	r6,20(sp)
  80c4b4:	003cea06 	br	80b860 <__alt_data_end+0xff80b860>
  80c4b8:	dd800f17 	ldw	r22,60(sp)
  80c4bc:	dcc01017 	ldw	r19,64(sp)
  80c4c0:	dc801217 	ldw	r18,72(sp)
  80c4c4:	003c6c06 	br	80b678 <__alt_data_end+0xff80b678>
  80c4c8:	903e031e 	bne	r18,zero,80bcd8 <__alt_data_end+0xff80bcd8>
  80c4cc:	003ebb06 	br	80bfbc <__alt_data_end+0xff80bfbc>
  80c4d0:	103e6c1e 	bne	r2,zero,80be84 <__alt_data_end+0xff80be84>
  80c4d4:	4080004c 	andi	r2,r8,1
  80c4d8:	103e6a26 	beq	r2,zero,80be84 <__alt_data_end+0xff80be84>
  80c4dc:	003e6606 	br	80be78 <__alt_data_end+0xff80be78>
  80c4e0:	d8c00317 	ldw	r3,12(sp)
  80c4e4:	00800084 	movi	r2,2
  80c4e8:	10c02916 	blt	r2,r3,80c590 <_dtoa_r+0x167c>
  80c4ec:	d9000c17 	ldw	r4,48(sp)
  80c4f0:	003e8806 	br	80bf14 <__alt_data_end+0xff80bf14>
  80c4f4:	04000084 	movi	r16,2
  80c4f8:	003b9d06 	br	80b370 <__alt_data_end+0xff80b370>
  80c4fc:	d9001317 	ldw	r4,76(sp)
  80c500:	d9000515 	stw	r4,20(sp)
  80c504:	003cd606 	br	80b860 <__alt_data_end+0xff80b860>
  80c508:	d8801317 	ldw	r2,76(sp)
  80c50c:	d8800515 	stw	r2,20(sp)
  80c510:	003c2a06 	br	80b5bc <__alt_data_end+0xff80b5bc>
  80c514:	d9800317 	ldw	r6,12(sp)
  80c518:	00800084 	movi	r2,2
  80c51c:	11801516 	blt	r2,r6,80c574 <_dtoa_r+0x1660>
  80c520:	d9c00c17 	ldw	r7,48(sp)
  80c524:	d9c00615 	stw	r7,24(sp)
  80c528:	003df706 	br	80bd08 <__alt_data_end+0xff80bd08>
  80c52c:	193d3926 	beq	r3,r4,80ba14 <__alt_data_end+0xff80ba14>
  80c530:	00c00f04 	movi	r3,60
  80c534:	1885c83a 	sub	r2,r3,r2
  80c538:	003ddf06 	br	80bcb8 <__alt_data_end+0xff80bcb8>
  80c53c:	e009883a 	mov	r4,fp
  80c540:	e0001115 	stw	zero,68(fp)
  80c544:	000b883a 	mov	r5,zero
  80c548:	08092c80 	call	8092c8 <_Balloc>
  80c54c:	d8800715 	stw	r2,28(sp)
  80c550:	d8c00717 	ldw	r3,28(sp)
  80c554:	00bfffc4 	movi	r2,-1
  80c558:	01000044 	movi	r4,1
  80c55c:	d8800c15 	stw	r2,48(sp)
  80c560:	e0c01015 	stw	r3,64(fp)
  80c564:	d9000b15 	stw	r4,44(sp)
  80c568:	d8800615 	stw	r2,24(sp)
  80c56c:	d8002215 	stw	zero,136(sp)
  80c570:	003c4106 	br	80b678 <__alt_data_end+0xff80b678>
  80c574:	d8c00c17 	ldw	r3,48(sp)
  80c578:	d8c00615 	stw	r3,24(sp)
  80c57c:	003e7006 	br	80bf40 <__alt_data_end+0xff80bf40>
  80c580:	04400044 	movi	r17,1
  80c584:	003b2006 	br	80b208 <__alt_data_end+0xff80b208>
  80c588:	000b883a 	mov	r5,zero
  80c58c:	003b3d06 	br	80b284 <__alt_data_end+0xff80b284>
  80c590:	d8800c17 	ldw	r2,48(sp)
  80c594:	d8800615 	stw	r2,24(sp)
  80c598:	003e6906 	br	80bf40 <__alt_data_end+0xff80bf40>

0080c59c <_fclose_r>:
  80c59c:	28003926 	beq	r5,zero,80c684 <_fclose_r+0xe8>
  80c5a0:	defffc04 	addi	sp,sp,-16
  80c5a4:	dc400115 	stw	r17,4(sp)
  80c5a8:	dc000015 	stw	r16,0(sp)
  80c5ac:	dfc00315 	stw	ra,12(sp)
  80c5b0:	dc800215 	stw	r18,8(sp)
  80c5b4:	2023883a 	mov	r17,r4
  80c5b8:	2821883a 	mov	r16,r5
  80c5bc:	20000226 	beq	r4,zero,80c5c8 <_fclose_r+0x2c>
  80c5c0:	20800e17 	ldw	r2,56(r4)
  80c5c4:	10002726 	beq	r2,zero,80c664 <_fclose_r+0xc8>
  80c5c8:	8080030f 	ldh	r2,12(r16)
  80c5cc:	1000071e 	bne	r2,zero,80c5ec <_fclose_r+0x50>
  80c5d0:	0005883a 	mov	r2,zero
  80c5d4:	dfc00317 	ldw	ra,12(sp)
  80c5d8:	dc800217 	ldw	r18,8(sp)
  80c5dc:	dc400117 	ldw	r17,4(sp)
  80c5e0:	dc000017 	ldw	r16,0(sp)
  80c5e4:	dec00404 	addi	sp,sp,16
  80c5e8:	f800283a 	ret
  80c5ec:	800b883a 	mov	r5,r16
  80c5f0:	8809883a 	mov	r4,r17
  80c5f4:	080c6a00 	call	80c6a0 <__sflush_r>
  80c5f8:	1025883a 	mov	r18,r2
  80c5fc:	80800b17 	ldw	r2,44(r16)
  80c600:	10000426 	beq	r2,zero,80c614 <_fclose_r+0x78>
  80c604:	81400717 	ldw	r5,28(r16)
  80c608:	8809883a 	mov	r4,r17
  80c60c:	103ee83a 	callr	r2
  80c610:	10001616 	blt	r2,zero,80c66c <_fclose_r+0xd0>
  80c614:	8080030b 	ldhu	r2,12(r16)
  80c618:	1080200c 	andi	r2,r2,128
  80c61c:	1000151e 	bne	r2,zero,80c674 <_fclose_r+0xd8>
  80c620:	81400c17 	ldw	r5,48(r16)
  80c624:	28000526 	beq	r5,zero,80c63c <_fclose_r+0xa0>
  80c628:	80801004 	addi	r2,r16,64
  80c62c:	28800226 	beq	r5,r2,80c638 <_fclose_r+0x9c>
  80c630:	8809883a 	mov	r4,r17
  80c634:	080ca6c0 	call	80ca6c <_free_r>
  80c638:	80000c15 	stw	zero,48(r16)
  80c63c:	81401117 	ldw	r5,68(r16)
  80c640:	28000326 	beq	r5,zero,80c650 <_fclose_r+0xb4>
  80c644:	8809883a 	mov	r4,r17
  80c648:	080ca6c0 	call	80ca6c <_free_r>
  80c64c:	80001115 	stw	zero,68(r16)
  80c650:	0807f880 	call	807f88 <__sfp_lock_acquire>
  80c654:	8000030d 	sth	zero,12(r16)
  80c658:	0807f8c0 	call	807f8c <__sfp_lock_release>
  80c65c:	9005883a 	mov	r2,r18
  80c660:	003fdc06 	br	80c5d4 <__alt_data_end+0xff80c5d4>
  80c664:	0807f780 	call	807f78 <__sinit>
  80c668:	003fd706 	br	80c5c8 <__alt_data_end+0xff80c5c8>
  80c66c:	04bfffc4 	movi	r18,-1
  80c670:	003fe806 	br	80c614 <__alt_data_end+0xff80c614>
  80c674:	81400417 	ldw	r5,16(r16)
  80c678:	8809883a 	mov	r4,r17
  80c67c:	080ca6c0 	call	80ca6c <_free_r>
  80c680:	003fe706 	br	80c620 <__alt_data_end+0xff80c620>
  80c684:	0005883a 	mov	r2,zero
  80c688:	f800283a 	ret

0080c68c <fclose>:
  80c68c:	00802074 	movhi	r2,129
  80c690:	10867304 	addi	r2,r2,6604
  80c694:	200b883a 	mov	r5,r4
  80c698:	11000017 	ldw	r4,0(r2)
  80c69c:	080c59c1 	jmpi	80c59c <_fclose_r>

0080c6a0 <__sflush_r>:
  80c6a0:	2880030b 	ldhu	r2,12(r5)
  80c6a4:	defffb04 	addi	sp,sp,-20
  80c6a8:	dcc00315 	stw	r19,12(sp)
  80c6ac:	dc400115 	stw	r17,4(sp)
  80c6b0:	dfc00415 	stw	ra,16(sp)
  80c6b4:	dc800215 	stw	r18,8(sp)
  80c6b8:	dc000015 	stw	r16,0(sp)
  80c6bc:	10c0020c 	andi	r3,r2,8
  80c6c0:	2823883a 	mov	r17,r5
  80c6c4:	2027883a 	mov	r19,r4
  80c6c8:	1800311e 	bne	r3,zero,80c790 <__sflush_r+0xf0>
  80c6cc:	28c00117 	ldw	r3,4(r5)
  80c6d0:	10820014 	ori	r2,r2,2048
  80c6d4:	2880030d 	sth	r2,12(r5)
  80c6d8:	00c04b0e 	bge	zero,r3,80c808 <__sflush_r+0x168>
  80c6dc:	8a000a17 	ldw	r8,40(r17)
  80c6e0:	40002326 	beq	r8,zero,80c770 <__sflush_r+0xd0>
  80c6e4:	9c000017 	ldw	r16,0(r19)
  80c6e8:	10c4000c 	andi	r3,r2,4096
  80c6ec:	98000015 	stw	zero,0(r19)
  80c6f0:	18004826 	beq	r3,zero,80c814 <__sflush_r+0x174>
  80c6f4:	89801417 	ldw	r6,80(r17)
  80c6f8:	10c0010c 	andi	r3,r2,4
  80c6fc:	18000626 	beq	r3,zero,80c718 <__sflush_r+0x78>
  80c700:	88c00117 	ldw	r3,4(r17)
  80c704:	88800c17 	ldw	r2,48(r17)
  80c708:	30cdc83a 	sub	r6,r6,r3
  80c70c:	10000226 	beq	r2,zero,80c718 <__sflush_r+0x78>
  80c710:	88800f17 	ldw	r2,60(r17)
  80c714:	308dc83a 	sub	r6,r6,r2
  80c718:	89400717 	ldw	r5,28(r17)
  80c71c:	000f883a 	mov	r7,zero
  80c720:	9809883a 	mov	r4,r19
  80c724:	403ee83a 	callr	r8
  80c728:	00ffffc4 	movi	r3,-1
  80c72c:	10c04426 	beq	r2,r3,80c840 <__sflush_r+0x1a0>
  80c730:	88c0030b 	ldhu	r3,12(r17)
  80c734:	89000417 	ldw	r4,16(r17)
  80c738:	88000115 	stw	zero,4(r17)
  80c73c:	197dffcc 	andi	r5,r3,63487
  80c740:	8940030d 	sth	r5,12(r17)
  80c744:	89000015 	stw	r4,0(r17)
  80c748:	18c4000c 	andi	r3,r3,4096
  80c74c:	18002c1e 	bne	r3,zero,80c800 <__sflush_r+0x160>
  80c750:	89400c17 	ldw	r5,48(r17)
  80c754:	9c000015 	stw	r16,0(r19)
  80c758:	28000526 	beq	r5,zero,80c770 <__sflush_r+0xd0>
  80c75c:	88801004 	addi	r2,r17,64
  80c760:	28800226 	beq	r5,r2,80c76c <__sflush_r+0xcc>
  80c764:	9809883a 	mov	r4,r19
  80c768:	080ca6c0 	call	80ca6c <_free_r>
  80c76c:	88000c15 	stw	zero,48(r17)
  80c770:	0005883a 	mov	r2,zero
  80c774:	dfc00417 	ldw	ra,16(sp)
  80c778:	dcc00317 	ldw	r19,12(sp)
  80c77c:	dc800217 	ldw	r18,8(sp)
  80c780:	dc400117 	ldw	r17,4(sp)
  80c784:	dc000017 	ldw	r16,0(sp)
  80c788:	dec00504 	addi	sp,sp,20
  80c78c:	f800283a 	ret
  80c790:	2c800417 	ldw	r18,16(r5)
  80c794:	903ff626 	beq	r18,zero,80c770 <__alt_data_end+0xff80c770>
  80c798:	2c000017 	ldw	r16,0(r5)
  80c79c:	108000cc 	andi	r2,r2,3
  80c7a0:	2c800015 	stw	r18,0(r5)
  80c7a4:	84a1c83a 	sub	r16,r16,r18
  80c7a8:	1000131e 	bne	r2,zero,80c7f8 <__sflush_r+0x158>
  80c7ac:	28800517 	ldw	r2,20(r5)
  80c7b0:	88800215 	stw	r2,8(r17)
  80c7b4:	04000316 	blt	zero,r16,80c7c4 <__sflush_r+0x124>
  80c7b8:	003fed06 	br	80c770 <__alt_data_end+0xff80c770>
  80c7bc:	90a5883a 	add	r18,r18,r2
  80c7c0:	043feb0e 	bge	zero,r16,80c770 <__alt_data_end+0xff80c770>
  80c7c4:	88800917 	ldw	r2,36(r17)
  80c7c8:	89400717 	ldw	r5,28(r17)
  80c7cc:	800f883a 	mov	r7,r16
  80c7d0:	900d883a 	mov	r6,r18
  80c7d4:	9809883a 	mov	r4,r19
  80c7d8:	103ee83a 	callr	r2
  80c7dc:	80a1c83a 	sub	r16,r16,r2
  80c7e0:	00bff616 	blt	zero,r2,80c7bc <__alt_data_end+0xff80c7bc>
  80c7e4:	88c0030b 	ldhu	r3,12(r17)
  80c7e8:	00bfffc4 	movi	r2,-1
  80c7ec:	18c01014 	ori	r3,r3,64
  80c7f0:	88c0030d 	sth	r3,12(r17)
  80c7f4:	003fdf06 	br	80c774 <__alt_data_end+0xff80c774>
  80c7f8:	0005883a 	mov	r2,zero
  80c7fc:	003fec06 	br	80c7b0 <__alt_data_end+0xff80c7b0>
  80c800:	88801415 	stw	r2,80(r17)
  80c804:	003fd206 	br	80c750 <__alt_data_end+0xff80c750>
  80c808:	28c00f17 	ldw	r3,60(r5)
  80c80c:	00ffb316 	blt	zero,r3,80c6dc <__alt_data_end+0xff80c6dc>
  80c810:	003fd706 	br	80c770 <__alt_data_end+0xff80c770>
  80c814:	89400717 	ldw	r5,28(r17)
  80c818:	000d883a 	mov	r6,zero
  80c81c:	01c00044 	movi	r7,1
  80c820:	9809883a 	mov	r4,r19
  80c824:	403ee83a 	callr	r8
  80c828:	100d883a 	mov	r6,r2
  80c82c:	00bfffc4 	movi	r2,-1
  80c830:	30801426 	beq	r6,r2,80c884 <__sflush_r+0x1e4>
  80c834:	8880030b 	ldhu	r2,12(r17)
  80c838:	8a000a17 	ldw	r8,40(r17)
  80c83c:	003fae06 	br	80c6f8 <__alt_data_end+0xff80c6f8>
  80c840:	98c00017 	ldw	r3,0(r19)
  80c844:	183fba26 	beq	r3,zero,80c730 <__alt_data_end+0xff80c730>
  80c848:	01000744 	movi	r4,29
  80c84c:	19000626 	beq	r3,r4,80c868 <__sflush_r+0x1c8>
  80c850:	01000584 	movi	r4,22
  80c854:	19000426 	beq	r3,r4,80c868 <__sflush_r+0x1c8>
  80c858:	88c0030b 	ldhu	r3,12(r17)
  80c85c:	18c01014 	ori	r3,r3,64
  80c860:	88c0030d 	sth	r3,12(r17)
  80c864:	003fc306 	br	80c774 <__alt_data_end+0xff80c774>
  80c868:	8880030b 	ldhu	r2,12(r17)
  80c86c:	88c00417 	ldw	r3,16(r17)
  80c870:	88000115 	stw	zero,4(r17)
  80c874:	10bdffcc 	andi	r2,r2,63487
  80c878:	8880030d 	sth	r2,12(r17)
  80c87c:	88c00015 	stw	r3,0(r17)
  80c880:	003fb306 	br	80c750 <__alt_data_end+0xff80c750>
  80c884:	98800017 	ldw	r2,0(r19)
  80c888:	103fea26 	beq	r2,zero,80c834 <__alt_data_end+0xff80c834>
  80c88c:	00c00744 	movi	r3,29
  80c890:	10c00226 	beq	r2,r3,80c89c <__sflush_r+0x1fc>
  80c894:	00c00584 	movi	r3,22
  80c898:	10c0031e 	bne	r2,r3,80c8a8 <__sflush_r+0x208>
  80c89c:	9c000015 	stw	r16,0(r19)
  80c8a0:	0005883a 	mov	r2,zero
  80c8a4:	003fb306 	br	80c774 <__alt_data_end+0xff80c774>
  80c8a8:	88c0030b 	ldhu	r3,12(r17)
  80c8ac:	3005883a 	mov	r2,r6
  80c8b0:	18c01014 	ori	r3,r3,64
  80c8b4:	88c0030d 	sth	r3,12(r17)
  80c8b8:	003fae06 	br	80c774 <__alt_data_end+0xff80c774>

0080c8bc <_fflush_r>:
  80c8bc:	defffd04 	addi	sp,sp,-12
  80c8c0:	dc000115 	stw	r16,4(sp)
  80c8c4:	dfc00215 	stw	ra,8(sp)
  80c8c8:	2021883a 	mov	r16,r4
  80c8cc:	20000226 	beq	r4,zero,80c8d8 <_fflush_r+0x1c>
  80c8d0:	20800e17 	ldw	r2,56(r4)
  80c8d4:	10000c26 	beq	r2,zero,80c908 <_fflush_r+0x4c>
  80c8d8:	2880030f 	ldh	r2,12(r5)
  80c8dc:	1000051e 	bne	r2,zero,80c8f4 <_fflush_r+0x38>
  80c8e0:	0005883a 	mov	r2,zero
  80c8e4:	dfc00217 	ldw	ra,8(sp)
  80c8e8:	dc000117 	ldw	r16,4(sp)
  80c8ec:	dec00304 	addi	sp,sp,12
  80c8f0:	f800283a 	ret
  80c8f4:	8009883a 	mov	r4,r16
  80c8f8:	dfc00217 	ldw	ra,8(sp)
  80c8fc:	dc000117 	ldw	r16,4(sp)
  80c900:	dec00304 	addi	sp,sp,12
  80c904:	080c6a01 	jmpi	80c6a0 <__sflush_r>
  80c908:	d9400015 	stw	r5,0(sp)
  80c90c:	0807f780 	call	807f78 <__sinit>
  80c910:	d9400017 	ldw	r5,0(sp)
  80c914:	003ff006 	br	80c8d8 <__alt_data_end+0xff80c8d8>

0080c918 <fflush>:
  80c918:	20000526 	beq	r4,zero,80c930 <fflush+0x18>
  80c91c:	00802074 	movhi	r2,129
  80c920:	10867304 	addi	r2,r2,6604
  80c924:	200b883a 	mov	r5,r4
  80c928:	11000017 	ldw	r4,0(r2)
  80c92c:	080c8bc1 	jmpi	80c8bc <_fflush_r>
  80c930:	00802074 	movhi	r2,129
  80c934:	10867204 	addi	r2,r2,6600
  80c938:	11000017 	ldw	r4,0(r2)
  80c93c:	01402074 	movhi	r5,129
  80c940:	29722f04 	addi	r5,r5,-14148
  80c944:	08085481 	jmpi	808548 <_fwalk_reent>

0080c948 <_malloc_trim_r>:
  80c948:	defffb04 	addi	sp,sp,-20
  80c94c:	dcc00315 	stw	r19,12(sp)
  80c950:	04c02074 	movhi	r19,129
  80c954:	dc800215 	stw	r18,8(sp)
  80c958:	dc400115 	stw	r17,4(sp)
  80c95c:	dc000015 	stw	r16,0(sp)
  80c960:	dfc00415 	stw	ra,16(sp)
  80c964:	2821883a 	mov	r16,r5
  80c968:	9cc0ed04 	addi	r19,r19,948
  80c96c:	2025883a 	mov	r18,r4
  80c970:	080d7180 	call	80d718 <__malloc_lock>
  80c974:	98800217 	ldw	r2,8(r19)
  80c978:	14400117 	ldw	r17,4(r2)
  80c97c:	00bfff04 	movi	r2,-4
  80c980:	88a2703a 	and	r17,r17,r2
  80c984:	8c21c83a 	sub	r16,r17,r16
  80c988:	8403fbc4 	addi	r16,r16,4079
  80c98c:	8020d33a 	srli	r16,r16,12
  80c990:	0083ffc4 	movi	r2,4095
  80c994:	843fffc4 	addi	r16,r16,-1
  80c998:	8020933a 	slli	r16,r16,12
  80c99c:	1400060e 	bge	r2,r16,80c9b8 <_malloc_trim_r+0x70>
  80c9a0:	000b883a 	mov	r5,zero
  80c9a4:	9009883a 	mov	r4,r18
  80c9a8:	080a8280 	call	80a828 <_sbrk_r>
  80c9ac:	98c00217 	ldw	r3,8(r19)
  80c9b0:	1c47883a 	add	r3,r3,r17
  80c9b4:	10c00a26 	beq	r2,r3,80c9e0 <_malloc_trim_r+0x98>
  80c9b8:	9009883a 	mov	r4,r18
  80c9bc:	080d73c0 	call	80d73c <__malloc_unlock>
  80c9c0:	0005883a 	mov	r2,zero
  80c9c4:	dfc00417 	ldw	ra,16(sp)
  80c9c8:	dcc00317 	ldw	r19,12(sp)
  80c9cc:	dc800217 	ldw	r18,8(sp)
  80c9d0:	dc400117 	ldw	r17,4(sp)
  80c9d4:	dc000017 	ldw	r16,0(sp)
  80c9d8:	dec00504 	addi	sp,sp,20
  80c9dc:	f800283a 	ret
  80c9e0:	040bc83a 	sub	r5,zero,r16
  80c9e4:	9009883a 	mov	r4,r18
  80c9e8:	080a8280 	call	80a828 <_sbrk_r>
  80c9ec:	00ffffc4 	movi	r3,-1
  80c9f0:	10c00d26 	beq	r2,r3,80ca28 <_malloc_trim_r+0xe0>
  80c9f4:	00c02074 	movhi	r3,129
  80c9f8:	18cd2804 	addi	r3,r3,13472
  80c9fc:	18800017 	ldw	r2,0(r3)
  80ca00:	99000217 	ldw	r4,8(r19)
  80ca04:	8c23c83a 	sub	r17,r17,r16
  80ca08:	8c400054 	ori	r17,r17,1
  80ca0c:	1421c83a 	sub	r16,r2,r16
  80ca10:	24400115 	stw	r17,4(r4)
  80ca14:	9009883a 	mov	r4,r18
  80ca18:	1c000015 	stw	r16,0(r3)
  80ca1c:	080d73c0 	call	80d73c <__malloc_unlock>
  80ca20:	00800044 	movi	r2,1
  80ca24:	003fe706 	br	80c9c4 <__alt_data_end+0xff80c9c4>
  80ca28:	000b883a 	mov	r5,zero
  80ca2c:	9009883a 	mov	r4,r18
  80ca30:	080a8280 	call	80a828 <_sbrk_r>
  80ca34:	99000217 	ldw	r4,8(r19)
  80ca38:	014003c4 	movi	r5,15
  80ca3c:	1107c83a 	sub	r3,r2,r4
  80ca40:	28ffdd0e 	bge	r5,r3,80c9b8 <__alt_data_end+0xff80c9b8>
  80ca44:	01402074 	movhi	r5,129
  80ca48:	29467404 	addi	r5,r5,6608
  80ca4c:	29400017 	ldw	r5,0(r5)
  80ca50:	18c00054 	ori	r3,r3,1
  80ca54:	20c00115 	stw	r3,4(r4)
  80ca58:	00c02074 	movhi	r3,129
  80ca5c:	1145c83a 	sub	r2,r2,r5
  80ca60:	18cd2804 	addi	r3,r3,13472
  80ca64:	18800015 	stw	r2,0(r3)
  80ca68:	003fd306 	br	80c9b8 <__alt_data_end+0xff80c9b8>

0080ca6c <_free_r>:
  80ca6c:	28004126 	beq	r5,zero,80cb74 <_free_r+0x108>
  80ca70:	defffd04 	addi	sp,sp,-12
  80ca74:	dc400115 	stw	r17,4(sp)
  80ca78:	dc000015 	stw	r16,0(sp)
  80ca7c:	2023883a 	mov	r17,r4
  80ca80:	2821883a 	mov	r16,r5
  80ca84:	dfc00215 	stw	ra,8(sp)
  80ca88:	080d7180 	call	80d718 <__malloc_lock>
  80ca8c:	81ffff17 	ldw	r7,-4(r16)
  80ca90:	00bfff84 	movi	r2,-2
  80ca94:	01002074 	movhi	r4,129
  80ca98:	81bffe04 	addi	r6,r16,-8
  80ca9c:	3884703a 	and	r2,r7,r2
  80caa0:	2100ed04 	addi	r4,r4,948
  80caa4:	308b883a 	add	r5,r6,r2
  80caa8:	2a400117 	ldw	r9,4(r5)
  80caac:	22000217 	ldw	r8,8(r4)
  80cab0:	00ffff04 	movi	r3,-4
  80cab4:	48c6703a 	and	r3,r9,r3
  80cab8:	2a005726 	beq	r5,r8,80cc18 <_free_r+0x1ac>
  80cabc:	28c00115 	stw	r3,4(r5)
  80cac0:	39c0004c 	andi	r7,r7,1
  80cac4:	3800091e 	bne	r7,zero,80caec <_free_r+0x80>
  80cac8:	823ffe17 	ldw	r8,-8(r16)
  80cacc:	22400204 	addi	r9,r4,8
  80cad0:	320dc83a 	sub	r6,r6,r8
  80cad4:	31c00217 	ldw	r7,8(r6)
  80cad8:	1205883a 	add	r2,r2,r8
  80cadc:	3a406526 	beq	r7,r9,80cc74 <_free_r+0x208>
  80cae0:	32000317 	ldw	r8,12(r6)
  80cae4:	3a000315 	stw	r8,12(r7)
  80cae8:	41c00215 	stw	r7,8(r8)
  80caec:	28cf883a 	add	r7,r5,r3
  80caf0:	39c00117 	ldw	r7,4(r7)
  80caf4:	39c0004c 	andi	r7,r7,1
  80caf8:	38003a26 	beq	r7,zero,80cbe4 <_free_r+0x178>
  80cafc:	10c00054 	ori	r3,r2,1
  80cb00:	30c00115 	stw	r3,4(r6)
  80cb04:	3087883a 	add	r3,r6,r2
  80cb08:	18800015 	stw	r2,0(r3)
  80cb0c:	00c07fc4 	movi	r3,511
  80cb10:	18801936 	bltu	r3,r2,80cb78 <_free_r+0x10c>
  80cb14:	1004d0fa 	srli	r2,r2,3
  80cb18:	01c00044 	movi	r7,1
  80cb1c:	21400117 	ldw	r5,4(r4)
  80cb20:	10c00044 	addi	r3,r2,1
  80cb24:	18c7883a 	add	r3,r3,r3
  80cb28:	1005d0ba 	srai	r2,r2,2
  80cb2c:	18c7883a 	add	r3,r3,r3
  80cb30:	18c7883a 	add	r3,r3,r3
  80cb34:	1907883a 	add	r3,r3,r4
  80cb38:	3884983a 	sll	r2,r7,r2
  80cb3c:	19c00017 	ldw	r7,0(r3)
  80cb40:	1a3ffe04 	addi	r8,r3,-8
  80cb44:	1144b03a 	or	r2,r2,r5
  80cb48:	32000315 	stw	r8,12(r6)
  80cb4c:	31c00215 	stw	r7,8(r6)
  80cb50:	20800115 	stw	r2,4(r4)
  80cb54:	19800015 	stw	r6,0(r3)
  80cb58:	39800315 	stw	r6,12(r7)
  80cb5c:	8809883a 	mov	r4,r17
  80cb60:	dfc00217 	ldw	ra,8(sp)
  80cb64:	dc400117 	ldw	r17,4(sp)
  80cb68:	dc000017 	ldw	r16,0(sp)
  80cb6c:	dec00304 	addi	sp,sp,12
  80cb70:	080d73c1 	jmpi	80d73c <__malloc_unlock>
  80cb74:	f800283a 	ret
  80cb78:	100ad27a 	srli	r5,r2,9
  80cb7c:	00c00104 	movi	r3,4
  80cb80:	19404a36 	bltu	r3,r5,80ccac <_free_r+0x240>
  80cb84:	100ad1ba 	srli	r5,r2,6
  80cb88:	28c00e44 	addi	r3,r5,57
  80cb8c:	18c7883a 	add	r3,r3,r3
  80cb90:	29400e04 	addi	r5,r5,56
  80cb94:	18c7883a 	add	r3,r3,r3
  80cb98:	18c7883a 	add	r3,r3,r3
  80cb9c:	1909883a 	add	r4,r3,r4
  80cba0:	20c00017 	ldw	r3,0(r4)
  80cba4:	01c02074 	movhi	r7,129
  80cba8:	213ffe04 	addi	r4,r4,-8
  80cbac:	39c0ed04 	addi	r7,r7,948
  80cbb0:	20c04426 	beq	r4,r3,80ccc4 <_free_r+0x258>
  80cbb4:	01ffff04 	movi	r7,-4
  80cbb8:	19400117 	ldw	r5,4(r3)
  80cbbc:	29ca703a 	and	r5,r5,r7
  80cbc0:	1140022e 	bgeu	r2,r5,80cbcc <_free_r+0x160>
  80cbc4:	18c00217 	ldw	r3,8(r3)
  80cbc8:	20fffb1e 	bne	r4,r3,80cbb8 <__alt_data_end+0xff80cbb8>
  80cbcc:	19000317 	ldw	r4,12(r3)
  80cbd0:	31000315 	stw	r4,12(r6)
  80cbd4:	30c00215 	stw	r3,8(r6)
  80cbd8:	21800215 	stw	r6,8(r4)
  80cbdc:	19800315 	stw	r6,12(r3)
  80cbe0:	003fde06 	br	80cb5c <__alt_data_end+0xff80cb5c>
  80cbe4:	29c00217 	ldw	r7,8(r5)
  80cbe8:	10c5883a 	add	r2,r2,r3
  80cbec:	00c02074 	movhi	r3,129
  80cbf0:	18c0ef04 	addi	r3,r3,956
  80cbf4:	38c03b26 	beq	r7,r3,80cce4 <_free_r+0x278>
  80cbf8:	2a000317 	ldw	r8,12(r5)
  80cbfc:	11400054 	ori	r5,r2,1
  80cc00:	3087883a 	add	r3,r6,r2
  80cc04:	3a000315 	stw	r8,12(r7)
  80cc08:	41c00215 	stw	r7,8(r8)
  80cc0c:	31400115 	stw	r5,4(r6)
  80cc10:	18800015 	stw	r2,0(r3)
  80cc14:	003fbd06 	br	80cb0c <__alt_data_end+0xff80cb0c>
  80cc18:	39c0004c 	andi	r7,r7,1
  80cc1c:	10c5883a 	add	r2,r2,r3
  80cc20:	3800071e 	bne	r7,zero,80cc40 <_free_r+0x1d4>
  80cc24:	81fffe17 	ldw	r7,-8(r16)
  80cc28:	31cdc83a 	sub	r6,r6,r7
  80cc2c:	30c00317 	ldw	r3,12(r6)
  80cc30:	31400217 	ldw	r5,8(r6)
  80cc34:	11c5883a 	add	r2,r2,r7
  80cc38:	28c00315 	stw	r3,12(r5)
  80cc3c:	19400215 	stw	r5,8(r3)
  80cc40:	10c00054 	ori	r3,r2,1
  80cc44:	30c00115 	stw	r3,4(r6)
  80cc48:	00c02074 	movhi	r3,129
  80cc4c:	18c67504 	addi	r3,r3,6612
  80cc50:	18c00017 	ldw	r3,0(r3)
  80cc54:	21800215 	stw	r6,8(r4)
  80cc58:	10ffc036 	bltu	r2,r3,80cb5c <__alt_data_end+0xff80cb5c>
  80cc5c:	00802074 	movhi	r2,129
  80cc60:	108d1f04 	addi	r2,r2,13436
  80cc64:	11400017 	ldw	r5,0(r2)
  80cc68:	8809883a 	mov	r4,r17
  80cc6c:	080c9480 	call	80c948 <_malloc_trim_r>
  80cc70:	003fba06 	br	80cb5c <__alt_data_end+0xff80cb5c>
  80cc74:	28c9883a 	add	r4,r5,r3
  80cc78:	21000117 	ldw	r4,4(r4)
  80cc7c:	2100004c 	andi	r4,r4,1
  80cc80:	2000391e 	bne	r4,zero,80cd68 <_free_r+0x2fc>
  80cc84:	29c00217 	ldw	r7,8(r5)
  80cc88:	29000317 	ldw	r4,12(r5)
  80cc8c:	1885883a 	add	r2,r3,r2
  80cc90:	10c00054 	ori	r3,r2,1
  80cc94:	39000315 	stw	r4,12(r7)
  80cc98:	21c00215 	stw	r7,8(r4)
  80cc9c:	30c00115 	stw	r3,4(r6)
  80cca0:	308d883a 	add	r6,r6,r2
  80cca4:	30800015 	stw	r2,0(r6)
  80cca8:	003fac06 	br	80cb5c <__alt_data_end+0xff80cb5c>
  80ccac:	00c00504 	movi	r3,20
  80ccb0:	19401536 	bltu	r3,r5,80cd08 <_free_r+0x29c>
  80ccb4:	28c01704 	addi	r3,r5,92
  80ccb8:	18c7883a 	add	r3,r3,r3
  80ccbc:	294016c4 	addi	r5,r5,91
  80ccc0:	003fb406 	br	80cb94 <__alt_data_end+0xff80cb94>
  80ccc4:	280bd0ba 	srai	r5,r5,2
  80ccc8:	00c00044 	movi	r3,1
  80cccc:	38800117 	ldw	r2,4(r7)
  80ccd0:	194a983a 	sll	r5,r3,r5
  80ccd4:	2007883a 	mov	r3,r4
  80ccd8:	2884b03a 	or	r2,r5,r2
  80ccdc:	38800115 	stw	r2,4(r7)
  80cce0:	003fbb06 	br	80cbd0 <__alt_data_end+0xff80cbd0>
  80cce4:	21800515 	stw	r6,20(r4)
  80cce8:	21800415 	stw	r6,16(r4)
  80ccec:	10c00054 	ori	r3,r2,1
  80ccf0:	31c00315 	stw	r7,12(r6)
  80ccf4:	31c00215 	stw	r7,8(r6)
  80ccf8:	30c00115 	stw	r3,4(r6)
  80ccfc:	308d883a 	add	r6,r6,r2
  80cd00:	30800015 	stw	r2,0(r6)
  80cd04:	003f9506 	br	80cb5c <__alt_data_end+0xff80cb5c>
  80cd08:	00c01504 	movi	r3,84
  80cd0c:	19400536 	bltu	r3,r5,80cd24 <_free_r+0x2b8>
  80cd10:	100ad33a 	srli	r5,r2,12
  80cd14:	28c01bc4 	addi	r3,r5,111
  80cd18:	18c7883a 	add	r3,r3,r3
  80cd1c:	29401b84 	addi	r5,r5,110
  80cd20:	003f9c06 	br	80cb94 <__alt_data_end+0xff80cb94>
  80cd24:	00c05504 	movi	r3,340
  80cd28:	19400536 	bltu	r3,r5,80cd40 <_free_r+0x2d4>
  80cd2c:	100ad3fa 	srli	r5,r2,15
  80cd30:	28c01e04 	addi	r3,r5,120
  80cd34:	18c7883a 	add	r3,r3,r3
  80cd38:	29401dc4 	addi	r5,r5,119
  80cd3c:	003f9506 	br	80cb94 <__alt_data_end+0xff80cb94>
  80cd40:	00c15504 	movi	r3,1364
  80cd44:	19400536 	bltu	r3,r5,80cd5c <_free_r+0x2f0>
  80cd48:	100ad4ba 	srli	r5,r2,18
  80cd4c:	28c01f44 	addi	r3,r5,125
  80cd50:	18c7883a 	add	r3,r3,r3
  80cd54:	29401f04 	addi	r5,r5,124
  80cd58:	003f8e06 	br	80cb94 <__alt_data_end+0xff80cb94>
  80cd5c:	00c03f84 	movi	r3,254
  80cd60:	01401f84 	movi	r5,126
  80cd64:	003f8b06 	br	80cb94 <__alt_data_end+0xff80cb94>
  80cd68:	10c00054 	ori	r3,r2,1
  80cd6c:	30c00115 	stw	r3,4(r6)
  80cd70:	308d883a 	add	r6,r6,r2
  80cd74:	30800015 	stw	r2,0(r6)
  80cd78:	003f7806 	br	80cb5c <__alt_data_end+0xff80cb5c>

0080cd7c <_lseek_r>:
  80cd7c:	defffd04 	addi	sp,sp,-12
  80cd80:	2805883a 	mov	r2,r5
  80cd84:	dc000015 	stw	r16,0(sp)
  80cd88:	04002074 	movhi	r16,129
  80cd8c:	dc400115 	stw	r17,4(sp)
  80cd90:	300b883a 	mov	r5,r6
  80cd94:	840d2004 	addi	r16,r16,13440
  80cd98:	2023883a 	mov	r17,r4
  80cd9c:	380d883a 	mov	r6,r7
  80cda0:	1009883a 	mov	r4,r2
  80cda4:	dfc00215 	stw	ra,8(sp)
  80cda8:	80000015 	stw	zero,0(r16)
  80cdac:	080d5c80 	call	80d5c8 <lseek>
  80cdb0:	00ffffc4 	movi	r3,-1
  80cdb4:	10c00526 	beq	r2,r3,80cdcc <_lseek_r+0x50>
  80cdb8:	dfc00217 	ldw	ra,8(sp)
  80cdbc:	dc400117 	ldw	r17,4(sp)
  80cdc0:	dc000017 	ldw	r16,0(sp)
  80cdc4:	dec00304 	addi	sp,sp,12
  80cdc8:	f800283a 	ret
  80cdcc:	80c00017 	ldw	r3,0(r16)
  80cdd0:	183ff926 	beq	r3,zero,80cdb8 <__alt_data_end+0xff80cdb8>
  80cdd4:	88c00015 	stw	r3,0(r17)
  80cdd8:	003ff706 	br	80cdb8 <__alt_data_end+0xff80cdb8>

0080cddc <__smakebuf_r>:
  80cddc:	2880030b 	ldhu	r2,12(r5)
  80cde0:	10c0008c 	andi	r3,r2,2
  80cde4:	1800411e 	bne	r3,zero,80ceec <__smakebuf_r+0x110>
  80cde8:	deffec04 	addi	sp,sp,-80
  80cdec:	dc000f15 	stw	r16,60(sp)
  80cdf0:	2821883a 	mov	r16,r5
  80cdf4:	2940038f 	ldh	r5,14(r5)
  80cdf8:	dc401015 	stw	r17,64(sp)
  80cdfc:	dfc01315 	stw	ra,76(sp)
  80ce00:	dcc01215 	stw	r19,72(sp)
  80ce04:	dc801115 	stw	r18,68(sp)
  80ce08:	2023883a 	mov	r17,r4
  80ce0c:	28001c16 	blt	r5,zero,80ce80 <__smakebuf_r+0xa4>
  80ce10:	d80d883a 	mov	r6,sp
  80ce14:	080cff80 	call	80cff8 <_fstat_r>
  80ce18:	10001816 	blt	r2,zero,80ce7c <__smakebuf_r+0xa0>
  80ce1c:	d8800117 	ldw	r2,4(sp)
  80ce20:	00e00014 	movui	r3,32768
  80ce24:	10bc000c 	andi	r2,r2,61440
  80ce28:	14c80020 	cmpeqi	r19,r2,8192
  80ce2c:	10c03726 	beq	r2,r3,80cf0c <__smakebuf_r+0x130>
  80ce30:	80c0030b 	ldhu	r3,12(r16)
  80ce34:	18c20014 	ori	r3,r3,2048
  80ce38:	80c0030d 	sth	r3,12(r16)
  80ce3c:	00c80004 	movi	r3,8192
  80ce40:	10c0521e 	bne	r2,r3,80cf8c <__smakebuf_r+0x1b0>
  80ce44:	8140038f 	ldh	r5,14(r16)
  80ce48:	8809883a 	mov	r4,r17
  80ce4c:	080d0540 	call	80d054 <_isatty_r>
  80ce50:	10004c26 	beq	r2,zero,80cf84 <__smakebuf_r+0x1a8>
  80ce54:	8080030b 	ldhu	r2,12(r16)
  80ce58:	80c010c4 	addi	r3,r16,67
  80ce5c:	80c00015 	stw	r3,0(r16)
  80ce60:	10800054 	ori	r2,r2,1
  80ce64:	8080030d 	sth	r2,12(r16)
  80ce68:	00800044 	movi	r2,1
  80ce6c:	80c00415 	stw	r3,16(r16)
  80ce70:	80800515 	stw	r2,20(r16)
  80ce74:	04810004 	movi	r18,1024
  80ce78:	00000706 	br	80ce98 <__smakebuf_r+0xbc>
  80ce7c:	8080030b 	ldhu	r2,12(r16)
  80ce80:	10c0200c 	andi	r3,r2,128
  80ce84:	18001f1e 	bne	r3,zero,80cf04 <__smakebuf_r+0x128>
  80ce88:	04810004 	movi	r18,1024
  80ce8c:	10820014 	ori	r2,r2,2048
  80ce90:	8080030d 	sth	r2,12(r16)
  80ce94:	0027883a 	mov	r19,zero
  80ce98:	900b883a 	mov	r5,r18
  80ce9c:	8809883a 	mov	r4,r17
  80cea0:	080860c0 	call	80860c <_malloc_r>
  80cea4:	10002c26 	beq	r2,zero,80cf58 <__smakebuf_r+0x17c>
  80cea8:	80c0030b 	ldhu	r3,12(r16)
  80ceac:	01002034 	movhi	r4,128
  80ceb0:	211f0c04 	addi	r4,r4,31792
  80ceb4:	89000f15 	stw	r4,60(r17)
  80ceb8:	18c02014 	ori	r3,r3,128
  80cebc:	80c0030d 	sth	r3,12(r16)
  80cec0:	80800015 	stw	r2,0(r16)
  80cec4:	80800415 	stw	r2,16(r16)
  80cec8:	84800515 	stw	r18,20(r16)
  80cecc:	98001a1e 	bne	r19,zero,80cf38 <__smakebuf_r+0x15c>
  80ced0:	dfc01317 	ldw	ra,76(sp)
  80ced4:	dcc01217 	ldw	r19,72(sp)
  80ced8:	dc801117 	ldw	r18,68(sp)
  80cedc:	dc401017 	ldw	r17,64(sp)
  80cee0:	dc000f17 	ldw	r16,60(sp)
  80cee4:	dec01404 	addi	sp,sp,80
  80cee8:	f800283a 	ret
  80ceec:	288010c4 	addi	r2,r5,67
  80cef0:	28800015 	stw	r2,0(r5)
  80cef4:	28800415 	stw	r2,16(r5)
  80cef8:	00800044 	movi	r2,1
  80cefc:	28800515 	stw	r2,20(r5)
  80cf00:	f800283a 	ret
  80cf04:	04801004 	movi	r18,64
  80cf08:	003fe006 	br	80ce8c <__alt_data_end+0xff80ce8c>
  80cf0c:	81000a17 	ldw	r4,40(r16)
  80cf10:	00c02074 	movhi	r3,129
  80cf14:	18ea5504 	addi	r3,r3,-22188
  80cf18:	20ffc51e 	bne	r4,r3,80ce30 <__alt_data_end+0xff80ce30>
  80cf1c:	8080030b 	ldhu	r2,12(r16)
  80cf20:	04810004 	movi	r18,1024
  80cf24:	84801315 	stw	r18,76(r16)
  80cf28:	1484b03a 	or	r2,r2,r18
  80cf2c:	8080030d 	sth	r2,12(r16)
  80cf30:	0027883a 	mov	r19,zero
  80cf34:	003fd806 	br	80ce98 <__alt_data_end+0xff80ce98>
  80cf38:	8140038f 	ldh	r5,14(r16)
  80cf3c:	8809883a 	mov	r4,r17
  80cf40:	080d0540 	call	80d054 <_isatty_r>
  80cf44:	103fe226 	beq	r2,zero,80ced0 <__alt_data_end+0xff80ced0>
  80cf48:	8080030b 	ldhu	r2,12(r16)
  80cf4c:	10800054 	ori	r2,r2,1
  80cf50:	8080030d 	sth	r2,12(r16)
  80cf54:	003fde06 	br	80ced0 <__alt_data_end+0xff80ced0>
  80cf58:	8080030b 	ldhu	r2,12(r16)
  80cf5c:	10c0800c 	andi	r3,r2,512
  80cf60:	183fdb1e 	bne	r3,zero,80ced0 <__alt_data_end+0xff80ced0>
  80cf64:	10800094 	ori	r2,r2,2
  80cf68:	80c010c4 	addi	r3,r16,67
  80cf6c:	8080030d 	sth	r2,12(r16)
  80cf70:	00800044 	movi	r2,1
  80cf74:	80c00015 	stw	r3,0(r16)
  80cf78:	80c00415 	stw	r3,16(r16)
  80cf7c:	80800515 	stw	r2,20(r16)
  80cf80:	003fd306 	br	80ced0 <__alt_data_end+0xff80ced0>
  80cf84:	04810004 	movi	r18,1024
  80cf88:	003fc306 	br	80ce98 <__alt_data_end+0xff80ce98>
  80cf8c:	0027883a 	mov	r19,zero
  80cf90:	04810004 	movi	r18,1024
  80cf94:	003fc006 	br	80ce98 <__alt_data_end+0xff80ce98>

0080cf98 <_read_r>:
  80cf98:	defffd04 	addi	sp,sp,-12
  80cf9c:	2805883a 	mov	r2,r5
  80cfa0:	dc000015 	stw	r16,0(sp)
  80cfa4:	04002074 	movhi	r16,129
  80cfa8:	dc400115 	stw	r17,4(sp)
  80cfac:	300b883a 	mov	r5,r6
  80cfb0:	840d2004 	addi	r16,r16,13440
  80cfb4:	2023883a 	mov	r17,r4
  80cfb8:	380d883a 	mov	r6,r7
  80cfbc:	1009883a 	mov	r4,r2
  80cfc0:	dfc00215 	stw	ra,8(sp)
  80cfc4:	80000015 	stw	zero,0(r16)
  80cfc8:	080d7d80 	call	80d7d8 <read>
  80cfcc:	00ffffc4 	movi	r3,-1
  80cfd0:	10c00526 	beq	r2,r3,80cfe8 <_read_r+0x50>
  80cfd4:	dfc00217 	ldw	ra,8(sp)
  80cfd8:	dc400117 	ldw	r17,4(sp)
  80cfdc:	dc000017 	ldw	r16,0(sp)
  80cfe0:	dec00304 	addi	sp,sp,12
  80cfe4:	f800283a 	ret
  80cfe8:	80c00017 	ldw	r3,0(r16)
  80cfec:	183ff926 	beq	r3,zero,80cfd4 <__alt_data_end+0xff80cfd4>
  80cff0:	88c00015 	stw	r3,0(r17)
  80cff4:	003ff706 	br	80cfd4 <__alt_data_end+0xff80cfd4>

0080cff8 <_fstat_r>:
  80cff8:	defffd04 	addi	sp,sp,-12
  80cffc:	2805883a 	mov	r2,r5
  80d000:	dc000015 	stw	r16,0(sp)
  80d004:	04002074 	movhi	r16,129
  80d008:	dc400115 	stw	r17,4(sp)
  80d00c:	840d2004 	addi	r16,r16,13440
  80d010:	2023883a 	mov	r17,r4
  80d014:	300b883a 	mov	r5,r6
  80d018:	1009883a 	mov	r4,r2
  80d01c:	dfc00215 	stw	ra,8(sp)
  80d020:	80000015 	stw	zero,0(r16)
  80d024:	080d3100 	call	80d310 <fstat>
  80d028:	00ffffc4 	movi	r3,-1
  80d02c:	10c00526 	beq	r2,r3,80d044 <_fstat_r+0x4c>
  80d030:	dfc00217 	ldw	ra,8(sp)
  80d034:	dc400117 	ldw	r17,4(sp)
  80d038:	dc000017 	ldw	r16,0(sp)
  80d03c:	dec00304 	addi	sp,sp,12
  80d040:	f800283a 	ret
  80d044:	80c00017 	ldw	r3,0(r16)
  80d048:	183ff926 	beq	r3,zero,80d030 <__alt_data_end+0xff80d030>
  80d04c:	88c00015 	stw	r3,0(r17)
  80d050:	003ff706 	br	80d030 <__alt_data_end+0xff80d030>

0080d054 <_isatty_r>:
  80d054:	defffd04 	addi	sp,sp,-12
  80d058:	dc000015 	stw	r16,0(sp)
  80d05c:	04002074 	movhi	r16,129
  80d060:	dc400115 	stw	r17,4(sp)
  80d064:	840d2004 	addi	r16,r16,13440
  80d068:	2023883a 	mov	r17,r4
  80d06c:	2809883a 	mov	r4,r5
  80d070:	dfc00215 	stw	ra,8(sp)
  80d074:	80000015 	stw	zero,0(r16)
  80d078:	080d3fc0 	call	80d3fc <isatty>
  80d07c:	00ffffc4 	movi	r3,-1
  80d080:	10c00526 	beq	r2,r3,80d098 <_isatty_r+0x44>
  80d084:	dfc00217 	ldw	ra,8(sp)
  80d088:	dc400117 	ldw	r17,4(sp)
  80d08c:	dc000017 	ldw	r16,0(sp)
  80d090:	dec00304 	addi	sp,sp,12
  80d094:	f800283a 	ret
  80d098:	80c00017 	ldw	r3,0(r16)
  80d09c:	183ff926 	beq	r3,zero,80d084 <__alt_data_end+0xff80d084>
  80d0a0:	88c00015 	stw	r3,0(r17)
  80d0a4:	003ff706 	br	80d084 <__alt_data_end+0xff80d084>

0080d0a8 <__ledf2>:
  80d0a8:	2804d53a 	srli	r2,r5,20
  80d0ac:	3810d53a 	srli	r8,r7,20
  80d0b0:	00c00434 	movhi	r3,16
  80d0b4:	18ffffc4 	addi	r3,r3,-1
  80d0b8:	1081ffcc 	andi	r2,r2,2047
  80d0bc:	0241ffc4 	movi	r9,2047
  80d0c0:	28d4703a 	and	r10,r5,r3
  80d0c4:	4201ffcc 	andi	r8,r8,2047
  80d0c8:	38c6703a 	and	r3,r7,r3
  80d0cc:	280ad7fa 	srli	r5,r5,31
  80d0d0:	380ed7fa 	srli	r7,r7,31
  80d0d4:	12401f26 	beq	r2,r9,80d154 <__ledf2+0xac>
  80d0d8:	0241ffc4 	movi	r9,2047
  80d0dc:	42401426 	beq	r8,r9,80d130 <__ledf2+0x88>
  80d0e0:	1000091e 	bne	r2,zero,80d108 <__ledf2+0x60>
  80d0e4:	2296b03a 	or	r11,r4,r10
  80d0e8:	5813003a 	cmpeq	r9,r11,zero
  80d0ec:	29403fcc 	andi	r5,r5,255
  80d0f0:	40000a1e 	bne	r8,zero,80d11c <__ledf2+0x74>
  80d0f4:	30d8b03a 	or	r12,r6,r3
  80d0f8:	6000081e 	bne	r12,zero,80d11c <__ledf2+0x74>
  80d0fc:	0005883a 	mov	r2,zero
  80d100:	5800111e 	bne	r11,zero,80d148 <__ledf2+0xa0>
  80d104:	f800283a 	ret
  80d108:	29403fcc 	andi	r5,r5,255
  80d10c:	40000c1e 	bne	r8,zero,80d140 <__ledf2+0x98>
  80d110:	30d2b03a 	or	r9,r6,r3
  80d114:	48000c26 	beq	r9,zero,80d148 <__ledf2+0xa0>
  80d118:	0013883a 	mov	r9,zero
  80d11c:	39c03fcc 	andi	r7,r7,255
  80d120:	48000826 	beq	r9,zero,80d144 <__ledf2+0x9c>
  80d124:	38001126 	beq	r7,zero,80d16c <__ledf2+0xc4>
  80d128:	00800044 	movi	r2,1
  80d12c:	f800283a 	ret
  80d130:	30d2b03a 	or	r9,r6,r3
  80d134:	483fea26 	beq	r9,zero,80d0e0 <__alt_data_end+0xff80d0e0>
  80d138:	00800084 	movi	r2,2
  80d13c:	f800283a 	ret
  80d140:	39c03fcc 	andi	r7,r7,255
  80d144:	39400726 	beq	r7,r5,80d164 <__ledf2+0xbc>
  80d148:	2800081e 	bne	r5,zero,80d16c <__ledf2+0xc4>
  80d14c:	00800044 	movi	r2,1
  80d150:	f800283a 	ret
  80d154:	2292b03a 	or	r9,r4,r10
  80d158:	483fdf26 	beq	r9,zero,80d0d8 <__alt_data_end+0xff80d0d8>
  80d15c:	00800084 	movi	r2,2
  80d160:	f800283a 	ret
  80d164:	4080030e 	bge	r8,r2,80d174 <__ledf2+0xcc>
  80d168:	383fef26 	beq	r7,zero,80d128 <__alt_data_end+0xff80d128>
  80d16c:	00bfffc4 	movi	r2,-1
  80d170:	f800283a 	ret
  80d174:	123feb16 	blt	r2,r8,80d124 <__alt_data_end+0xff80d124>
  80d178:	1abff336 	bltu	r3,r10,80d148 <__alt_data_end+0xff80d148>
  80d17c:	50c00326 	beq	r10,r3,80d18c <__ledf2+0xe4>
  80d180:	50c0042e 	bgeu	r10,r3,80d194 <__ledf2+0xec>
  80d184:	283fe81e 	bne	r5,zero,80d128 <__alt_data_end+0xff80d128>
  80d188:	003ff806 	br	80d16c <__alt_data_end+0xff80d16c>
  80d18c:	313fee36 	bltu	r6,r4,80d148 <__alt_data_end+0xff80d148>
  80d190:	21bffc36 	bltu	r4,r6,80d184 <__alt_data_end+0xff80d184>
  80d194:	0005883a 	mov	r2,zero
  80d198:	f800283a 	ret

0080d19c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d19c:	defffe04 	addi	sp,sp,-8
  80d1a0:	dfc00115 	stw	ra,4(sp)
  80d1a4:	df000015 	stw	fp,0(sp)
  80d1a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d1ac:	d0a00a17 	ldw	r2,-32728(gp)
  80d1b0:	10000326 	beq	r2,zero,80d1c0 <alt_get_errno+0x24>
  80d1b4:	d0a00a17 	ldw	r2,-32728(gp)
  80d1b8:	103ee83a 	callr	r2
  80d1bc:	00000106 	br	80d1c4 <alt_get_errno+0x28>
  80d1c0:	d0a6af04 	addi	r2,gp,-25924
}
  80d1c4:	e037883a 	mov	sp,fp
  80d1c8:	dfc00117 	ldw	ra,4(sp)
  80d1cc:	df000017 	ldw	fp,0(sp)
  80d1d0:	dec00204 	addi	sp,sp,8
  80d1d4:	f800283a 	ret

0080d1d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80d1d8:	defffb04 	addi	sp,sp,-20
  80d1dc:	dfc00415 	stw	ra,16(sp)
  80d1e0:	df000315 	stw	fp,12(sp)
  80d1e4:	df000304 	addi	fp,sp,12
  80d1e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80d1ec:	e0bfff17 	ldw	r2,-4(fp)
  80d1f0:	10000616 	blt	r2,zero,80d20c <close+0x34>
  80d1f4:	e0bfff17 	ldw	r2,-4(fp)
  80d1f8:	10c00324 	muli	r3,r2,12
  80d1fc:	00802074 	movhi	r2,129
  80d200:	1081f904 	addi	r2,r2,2020
  80d204:	1885883a 	add	r2,r3,r2
  80d208:	00000106 	br	80d210 <close+0x38>
  80d20c:	0005883a 	mov	r2,zero
  80d210:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80d214:	e0bffd17 	ldw	r2,-12(fp)
  80d218:	10001926 	beq	r2,zero,80d280 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80d21c:	e0bffd17 	ldw	r2,-12(fp)
  80d220:	10800017 	ldw	r2,0(r2)
  80d224:	10800417 	ldw	r2,16(r2)
  80d228:	10000626 	beq	r2,zero,80d244 <close+0x6c>
  80d22c:	e0bffd17 	ldw	r2,-12(fp)
  80d230:	10800017 	ldw	r2,0(r2)
  80d234:	10800417 	ldw	r2,16(r2)
  80d238:	e13ffd17 	ldw	r4,-12(fp)
  80d23c:	103ee83a 	callr	r2
  80d240:	00000106 	br	80d248 <close+0x70>
  80d244:	0005883a 	mov	r2,zero
  80d248:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80d24c:	e13fff17 	ldw	r4,-4(fp)
  80d250:	080d8d40 	call	80d8d4 <alt_release_fd>
    if (rval < 0)
  80d254:	e0bffe17 	ldw	r2,-8(fp)
  80d258:	1000070e 	bge	r2,zero,80d278 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80d25c:	080d19c0 	call	80d19c <alt_get_errno>
  80d260:	1007883a 	mov	r3,r2
  80d264:	e0bffe17 	ldw	r2,-8(fp)
  80d268:	0085c83a 	sub	r2,zero,r2
  80d26c:	18800015 	stw	r2,0(r3)
      return -1;
  80d270:	00bfffc4 	movi	r2,-1
  80d274:	00000706 	br	80d294 <close+0xbc>
    }
    return 0;
  80d278:	0005883a 	mov	r2,zero
  80d27c:	00000506 	br	80d294 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d280:	080d19c0 	call	80d19c <alt_get_errno>
  80d284:	1007883a 	mov	r3,r2
  80d288:	00801444 	movi	r2,81
  80d28c:	18800015 	stw	r2,0(r3)
    return -1;
  80d290:	00bfffc4 	movi	r2,-1
  }
}
  80d294:	e037883a 	mov	sp,fp
  80d298:	dfc00117 	ldw	ra,4(sp)
  80d29c:	df000017 	ldw	fp,0(sp)
  80d2a0:	dec00204 	addi	sp,sp,8
  80d2a4:	f800283a 	ret

0080d2a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80d2a8:	defffc04 	addi	sp,sp,-16
  80d2ac:	df000315 	stw	fp,12(sp)
  80d2b0:	df000304 	addi	fp,sp,12
  80d2b4:	e13ffd15 	stw	r4,-12(fp)
  80d2b8:	e17ffe15 	stw	r5,-8(fp)
  80d2bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80d2c0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d2c4:	e037883a 	mov	sp,fp
  80d2c8:	df000017 	ldw	fp,0(sp)
  80d2cc:	dec00104 	addi	sp,sp,4
  80d2d0:	f800283a 	ret

0080d2d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d2d4:	defffe04 	addi	sp,sp,-8
  80d2d8:	dfc00115 	stw	ra,4(sp)
  80d2dc:	df000015 	stw	fp,0(sp)
  80d2e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d2e4:	d0a00a17 	ldw	r2,-32728(gp)
  80d2e8:	10000326 	beq	r2,zero,80d2f8 <alt_get_errno+0x24>
  80d2ec:	d0a00a17 	ldw	r2,-32728(gp)
  80d2f0:	103ee83a 	callr	r2
  80d2f4:	00000106 	br	80d2fc <alt_get_errno+0x28>
  80d2f8:	d0a6af04 	addi	r2,gp,-25924
}
  80d2fc:	e037883a 	mov	sp,fp
  80d300:	dfc00117 	ldw	ra,4(sp)
  80d304:	df000017 	ldw	fp,0(sp)
  80d308:	dec00204 	addi	sp,sp,8
  80d30c:	f800283a 	ret

0080d310 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80d310:	defffb04 	addi	sp,sp,-20
  80d314:	dfc00415 	stw	ra,16(sp)
  80d318:	df000315 	stw	fp,12(sp)
  80d31c:	df000304 	addi	fp,sp,12
  80d320:	e13ffe15 	stw	r4,-8(fp)
  80d324:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d328:	e0bffe17 	ldw	r2,-8(fp)
  80d32c:	10000616 	blt	r2,zero,80d348 <fstat+0x38>
  80d330:	e0bffe17 	ldw	r2,-8(fp)
  80d334:	10c00324 	muli	r3,r2,12
  80d338:	00802074 	movhi	r2,129
  80d33c:	1081f904 	addi	r2,r2,2020
  80d340:	1885883a 	add	r2,r3,r2
  80d344:	00000106 	br	80d34c <fstat+0x3c>
  80d348:	0005883a 	mov	r2,zero
  80d34c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80d350:	e0bffd17 	ldw	r2,-12(fp)
  80d354:	10001026 	beq	r2,zero,80d398 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80d358:	e0bffd17 	ldw	r2,-12(fp)
  80d35c:	10800017 	ldw	r2,0(r2)
  80d360:	10800817 	ldw	r2,32(r2)
  80d364:	10000726 	beq	r2,zero,80d384 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80d368:	e0bffd17 	ldw	r2,-12(fp)
  80d36c:	10800017 	ldw	r2,0(r2)
  80d370:	10800817 	ldw	r2,32(r2)
  80d374:	e17fff17 	ldw	r5,-4(fp)
  80d378:	e13ffd17 	ldw	r4,-12(fp)
  80d37c:	103ee83a 	callr	r2
  80d380:	00000a06 	br	80d3ac <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80d384:	e0bfff17 	ldw	r2,-4(fp)
  80d388:	00c80004 	movi	r3,8192
  80d38c:	10c00115 	stw	r3,4(r2)
      return 0;
  80d390:	0005883a 	mov	r2,zero
  80d394:	00000506 	br	80d3ac <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d398:	080d2d40 	call	80d2d4 <alt_get_errno>
  80d39c:	1007883a 	mov	r3,r2
  80d3a0:	00801444 	movi	r2,81
  80d3a4:	18800015 	stw	r2,0(r3)
    return -1;
  80d3a8:	00bfffc4 	movi	r2,-1
  }
}
  80d3ac:	e037883a 	mov	sp,fp
  80d3b0:	dfc00117 	ldw	ra,4(sp)
  80d3b4:	df000017 	ldw	fp,0(sp)
  80d3b8:	dec00204 	addi	sp,sp,8
  80d3bc:	f800283a 	ret

0080d3c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d3c0:	defffe04 	addi	sp,sp,-8
  80d3c4:	dfc00115 	stw	ra,4(sp)
  80d3c8:	df000015 	stw	fp,0(sp)
  80d3cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d3d0:	d0a00a17 	ldw	r2,-32728(gp)
  80d3d4:	10000326 	beq	r2,zero,80d3e4 <alt_get_errno+0x24>
  80d3d8:	d0a00a17 	ldw	r2,-32728(gp)
  80d3dc:	103ee83a 	callr	r2
  80d3e0:	00000106 	br	80d3e8 <alt_get_errno+0x28>
  80d3e4:	d0a6af04 	addi	r2,gp,-25924
}
  80d3e8:	e037883a 	mov	sp,fp
  80d3ec:	dfc00117 	ldw	ra,4(sp)
  80d3f0:	df000017 	ldw	fp,0(sp)
  80d3f4:	dec00204 	addi	sp,sp,8
  80d3f8:	f800283a 	ret

0080d3fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80d3fc:	deffed04 	addi	sp,sp,-76
  80d400:	dfc01215 	stw	ra,72(sp)
  80d404:	df001115 	stw	fp,68(sp)
  80d408:	df001104 	addi	fp,sp,68
  80d40c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d410:	e0bfff17 	ldw	r2,-4(fp)
  80d414:	10000616 	blt	r2,zero,80d430 <isatty+0x34>
  80d418:	e0bfff17 	ldw	r2,-4(fp)
  80d41c:	10c00324 	muli	r3,r2,12
  80d420:	00802074 	movhi	r2,129
  80d424:	1081f904 	addi	r2,r2,2020
  80d428:	1885883a 	add	r2,r3,r2
  80d42c:	00000106 	br	80d434 <isatty+0x38>
  80d430:	0005883a 	mov	r2,zero
  80d434:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80d438:	e0bfef17 	ldw	r2,-68(fp)
  80d43c:	10000e26 	beq	r2,zero,80d478 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80d440:	e0bfef17 	ldw	r2,-68(fp)
  80d444:	10800017 	ldw	r2,0(r2)
  80d448:	10800817 	ldw	r2,32(r2)
  80d44c:	1000021e 	bne	r2,zero,80d458 <isatty+0x5c>
    {
      return 1;
  80d450:	00800044 	movi	r2,1
  80d454:	00000d06 	br	80d48c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80d458:	e0bff004 	addi	r2,fp,-64
  80d45c:	100b883a 	mov	r5,r2
  80d460:	e13fff17 	ldw	r4,-4(fp)
  80d464:	080d3100 	call	80d310 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80d468:	e0bff117 	ldw	r2,-60(fp)
  80d46c:	10880020 	cmpeqi	r2,r2,8192
  80d470:	10803fcc 	andi	r2,r2,255
  80d474:	00000506 	br	80d48c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d478:	080d3c00 	call	80d3c0 <alt_get_errno>
  80d47c:	1007883a 	mov	r3,r2
  80d480:	00801444 	movi	r2,81
  80d484:	18800015 	stw	r2,0(r3)
    return 0;
  80d488:	0005883a 	mov	r2,zero
  }
}
  80d48c:	e037883a 	mov	sp,fp
  80d490:	dfc00117 	ldw	ra,4(sp)
  80d494:	df000017 	ldw	fp,0(sp)
  80d498:	dec00204 	addi	sp,sp,8
  80d49c:	f800283a 	ret

0080d4a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80d4a0:	defffc04 	addi	sp,sp,-16
  80d4a4:	df000315 	stw	fp,12(sp)
  80d4a8:	df000304 	addi	fp,sp,12
  80d4ac:	e13ffd15 	stw	r4,-12(fp)
  80d4b0:	e17ffe15 	stw	r5,-8(fp)
  80d4b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80d4b8:	e0fffe17 	ldw	r3,-8(fp)
  80d4bc:	e0bffd17 	ldw	r2,-12(fp)
  80d4c0:	18800c26 	beq	r3,r2,80d4f4 <alt_load_section+0x54>
  {
    while( to != end )
  80d4c4:	00000806 	br	80d4e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80d4c8:	e0bffe17 	ldw	r2,-8(fp)
  80d4cc:	10c00104 	addi	r3,r2,4
  80d4d0:	e0fffe15 	stw	r3,-8(fp)
  80d4d4:	e0fffd17 	ldw	r3,-12(fp)
  80d4d8:	19000104 	addi	r4,r3,4
  80d4dc:	e13ffd15 	stw	r4,-12(fp)
  80d4e0:	18c00017 	ldw	r3,0(r3)
  80d4e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80d4e8:	e0fffe17 	ldw	r3,-8(fp)
  80d4ec:	e0bfff17 	ldw	r2,-4(fp)
  80d4f0:	18bff51e 	bne	r3,r2,80d4c8 <__alt_data_end+0xff80d4c8>
    {
      *to++ = *from++;
    }
  }
}
  80d4f4:	0001883a 	nop
  80d4f8:	e037883a 	mov	sp,fp
  80d4fc:	df000017 	ldw	fp,0(sp)
  80d500:	dec00104 	addi	sp,sp,4
  80d504:	f800283a 	ret

0080d508 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80d508:	defffe04 	addi	sp,sp,-8
  80d50c:	dfc00115 	stw	ra,4(sp)
  80d510:	df000015 	stw	fp,0(sp)
  80d514:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80d518:	01802074 	movhi	r6,129
  80d51c:	31868004 	addi	r6,r6,6656
  80d520:	01402074 	movhi	r5,129
  80d524:	297fe404 	addi	r5,r5,-112
  80d528:	01002074 	movhi	r4,129
  80d52c:	21068004 	addi	r4,r4,6656
  80d530:	080d4a00 	call	80d4a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80d534:	01802034 	movhi	r6,128
  80d538:	31809104 	addi	r6,r6,580
  80d53c:	01402034 	movhi	r5,128
  80d540:	29400804 	addi	r5,r5,32
  80d544:	01002034 	movhi	r4,128
  80d548:	21000804 	addi	r4,r4,32
  80d54c:	080d4a00 	call	80d4a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80d550:	01802074 	movhi	r6,129
  80d554:	31bfe404 	addi	r6,r6,-112
  80d558:	01402074 	movhi	r5,129
  80d55c:	297ebc04 	addi	r5,r5,-1296
  80d560:	01002074 	movhi	r4,129
  80d564:	213ebc04 	addi	r4,r4,-1296
  80d568:	080d4a00 	call	80d4a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80d56c:	080e9280 	call	80e928 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80d570:	080eb100 	call	80eb10 <alt_icache_flush_all>
}
  80d574:	0001883a 	nop
  80d578:	e037883a 	mov	sp,fp
  80d57c:	dfc00117 	ldw	ra,4(sp)
  80d580:	df000017 	ldw	fp,0(sp)
  80d584:	dec00204 	addi	sp,sp,8
  80d588:	f800283a 	ret

0080d58c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d58c:	defffe04 	addi	sp,sp,-8
  80d590:	dfc00115 	stw	ra,4(sp)
  80d594:	df000015 	stw	fp,0(sp)
  80d598:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d59c:	d0a00a17 	ldw	r2,-32728(gp)
  80d5a0:	10000326 	beq	r2,zero,80d5b0 <alt_get_errno+0x24>
  80d5a4:	d0a00a17 	ldw	r2,-32728(gp)
  80d5a8:	103ee83a 	callr	r2
  80d5ac:	00000106 	br	80d5b4 <alt_get_errno+0x28>
  80d5b0:	d0a6af04 	addi	r2,gp,-25924
}
  80d5b4:	e037883a 	mov	sp,fp
  80d5b8:	dfc00117 	ldw	ra,4(sp)
  80d5bc:	df000017 	ldw	fp,0(sp)
  80d5c0:	dec00204 	addi	sp,sp,8
  80d5c4:	f800283a 	ret

0080d5c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80d5c8:	defff904 	addi	sp,sp,-28
  80d5cc:	dfc00615 	stw	ra,24(sp)
  80d5d0:	df000515 	stw	fp,20(sp)
  80d5d4:	df000504 	addi	fp,sp,20
  80d5d8:	e13ffd15 	stw	r4,-12(fp)
  80d5dc:	e17ffe15 	stw	r5,-8(fp)
  80d5e0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80d5e4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d5e8:	e0bffd17 	ldw	r2,-12(fp)
  80d5ec:	10000616 	blt	r2,zero,80d608 <lseek+0x40>
  80d5f0:	e0bffd17 	ldw	r2,-12(fp)
  80d5f4:	10c00324 	muli	r3,r2,12
  80d5f8:	00802074 	movhi	r2,129
  80d5fc:	1081f904 	addi	r2,r2,2020
  80d600:	1885883a 	add	r2,r3,r2
  80d604:	00000106 	br	80d60c <lseek+0x44>
  80d608:	0005883a 	mov	r2,zero
  80d60c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80d610:	e0bffc17 	ldw	r2,-16(fp)
  80d614:	10001026 	beq	r2,zero,80d658 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80d618:	e0bffc17 	ldw	r2,-16(fp)
  80d61c:	10800017 	ldw	r2,0(r2)
  80d620:	10800717 	ldw	r2,28(r2)
  80d624:	10000926 	beq	r2,zero,80d64c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80d628:	e0bffc17 	ldw	r2,-16(fp)
  80d62c:	10800017 	ldw	r2,0(r2)
  80d630:	10800717 	ldw	r2,28(r2)
  80d634:	e1bfff17 	ldw	r6,-4(fp)
  80d638:	e17ffe17 	ldw	r5,-8(fp)
  80d63c:	e13ffc17 	ldw	r4,-16(fp)
  80d640:	103ee83a 	callr	r2
  80d644:	e0bffb15 	stw	r2,-20(fp)
  80d648:	00000506 	br	80d660 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80d64c:	00bfde84 	movi	r2,-134
  80d650:	e0bffb15 	stw	r2,-20(fp)
  80d654:	00000206 	br	80d660 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80d658:	00bfebc4 	movi	r2,-81
  80d65c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80d660:	e0bffb17 	ldw	r2,-20(fp)
  80d664:	1000070e 	bge	r2,zero,80d684 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80d668:	080d58c0 	call	80d58c <alt_get_errno>
  80d66c:	1007883a 	mov	r3,r2
  80d670:	e0bffb17 	ldw	r2,-20(fp)
  80d674:	0085c83a 	sub	r2,zero,r2
  80d678:	18800015 	stw	r2,0(r3)
    rc = -1;
  80d67c:	00bfffc4 	movi	r2,-1
  80d680:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80d684:	e0bffb17 	ldw	r2,-20(fp)
}
  80d688:	e037883a 	mov	sp,fp
  80d68c:	dfc00117 	ldw	ra,4(sp)
  80d690:	df000017 	ldw	fp,0(sp)
  80d694:	dec00204 	addi	sp,sp,8
  80d698:	f800283a 	ret

0080d69c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80d69c:	defffd04 	addi	sp,sp,-12
  80d6a0:	dfc00215 	stw	ra,8(sp)
  80d6a4:	df000115 	stw	fp,4(sp)
  80d6a8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80d6ac:	0009883a 	mov	r4,zero
  80d6b0:	080dc040 	call	80dc04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80d6b4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80d6b8:	080dc3c0 	call	80dc3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80d6bc:	01802074 	movhi	r6,129
  80d6c0:	31bfdc04 	addi	r6,r6,-144
  80d6c4:	01402074 	movhi	r5,129
  80d6c8:	297fdc04 	addi	r5,r5,-144
  80d6cc:	01002074 	movhi	r4,129
  80d6d0:	213fdc04 	addi	r4,r4,-144
  80d6d4:	080eea80 	call	80eea8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80d6d8:	080ea500 	call	80ea50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80d6dc:	01002074 	movhi	r4,129
  80d6e0:	213aac04 	addi	r4,r4,-5456
  80d6e4:	080f6a80 	call	80f6a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80d6e8:	d0a6b017 	ldw	r2,-25920(gp)
  80d6ec:	d0e6b117 	ldw	r3,-25916(gp)
  80d6f0:	d126b217 	ldw	r4,-25912(gp)
  80d6f4:	200d883a 	mov	r6,r4
  80d6f8:	180b883a 	mov	r5,r3
  80d6fc:	1009883a 	mov	r4,r2
  80d700:	08006900 	call	800690 <main>
  80d704:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80d708:	01000044 	movi	r4,1
  80d70c:	080d1d80 	call	80d1d8 <close>
  exit (result);
  80d710:	e13fff17 	ldw	r4,-4(fp)
  80d714:	080f6bc0 	call	80f6bc <exit>

0080d718 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80d718:	defffe04 	addi	sp,sp,-8
  80d71c:	df000115 	stw	fp,4(sp)
  80d720:	df000104 	addi	fp,sp,4
  80d724:	e13fff15 	stw	r4,-4(fp)
}
  80d728:	0001883a 	nop
  80d72c:	e037883a 	mov	sp,fp
  80d730:	df000017 	ldw	fp,0(sp)
  80d734:	dec00104 	addi	sp,sp,4
  80d738:	f800283a 	ret

0080d73c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80d73c:	defffe04 	addi	sp,sp,-8
  80d740:	df000115 	stw	fp,4(sp)
  80d744:	df000104 	addi	fp,sp,4
  80d748:	e13fff15 	stw	r4,-4(fp)
}
  80d74c:	0001883a 	nop
  80d750:	e037883a 	mov	sp,fp
  80d754:	df000017 	ldw	fp,0(sp)
  80d758:	dec00104 	addi	sp,sp,4
  80d75c:	f800283a 	ret

0080d760 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
  80d760:	defffd04 	addi	sp,sp,-12
  80d764:	dfc00215 	stw	ra,8(sp)
  80d768:	df000115 	stw	fp,4(sp)
  80d76c:	df000104 	addi	fp,sp,4
  80d770:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
  80d774:	d0a00217 	ldw	r2,-32760(gp)
  80d778:	10800217 	ldw	r2,8(r2)
  80d77c:	100b883a 	mov	r5,r2
  80d780:	e13fff17 	ldw	r4,-4(fp)
  80d784:	080f7900 	call	80f790 <fputs>
#endif
#endif
}
  80d788:	e037883a 	mov	sp,fp
  80d78c:	dfc00117 	ldw	ra,4(sp)
  80d790:	df000017 	ldw	fp,0(sp)
  80d794:	dec00204 	addi	sp,sp,8
  80d798:	f800283a 	ret

0080d79c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d79c:	defffe04 	addi	sp,sp,-8
  80d7a0:	dfc00115 	stw	ra,4(sp)
  80d7a4:	df000015 	stw	fp,0(sp)
  80d7a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d7ac:	d0a00a17 	ldw	r2,-32728(gp)
  80d7b0:	10000326 	beq	r2,zero,80d7c0 <alt_get_errno+0x24>
  80d7b4:	d0a00a17 	ldw	r2,-32728(gp)
  80d7b8:	103ee83a 	callr	r2
  80d7bc:	00000106 	br	80d7c4 <alt_get_errno+0x28>
  80d7c0:	d0a6af04 	addi	r2,gp,-25924
}
  80d7c4:	e037883a 	mov	sp,fp
  80d7c8:	dfc00117 	ldw	ra,4(sp)
  80d7cc:	df000017 	ldw	fp,0(sp)
  80d7d0:	dec00204 	addi	sp,sp,8
  80d7d4:	f800283a 	ret

0080d7d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80d7d8:	defff904 	addi	sp,sp,-28
  80d7dc:	dfc00615 	stw	ra,24(sp)
  80d7e0:	df000515 	stw	fp,20(sp)
  80d7e4:	df000504 	addi	fp,sp,20
  80d7e8:	e13ffd15 	stw	r4,-12(fp)
  80d7ec:	e17ffe15 	stw	r5,-8(fp)
  80d7f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d7f4:	e0bffd17 	ldw	r2,-12(fp)
  80d7f8:	10000616 	blt	r2,zero,80d814 <read+0x3c>
  80d7fc:	e0bffd17 	ldw	r2,-12(fp)
  80d800:	10c00324 	muli	r3,r2,12
  80d804:	00802074 	movhi	r2,129
  80d808:	1081f904 	addi	r2,r2,2020
  80d80c:	1885883a 	add	r2,r3,r2
  80d810:	00000106 	br	80d818 <read+0x40>
  80d814:	0005883a 	mov	r2,zero
  80d818:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80d81c:	e0bffb17 	ldw	r2,-20(fp)
  80d820:	10002226 	beq	r2,zero,80d8ac <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80d824:	e0bffb17 	ldw	r2,-20(fp)
  80d828:	10800217 	ldw	r2,8(r2)
  80d82c:	108000cc 	andi	r2,r2,3
  80d830:	10800060 	cmpeqi	r2,r2,1
  80d834:	1000181e 	bne	r2,zero,80d898 <read+0xc0>
        (fd->dev->read))
  80d838:	e0bffb17 	ldw	r2,-20(fp)
  80d83c:	10800017 	ldw	r2,0(r2)
  80d840:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80d844:	10001426 	beq	r2,zero,80d898 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80d848:	e0bffb17 	ldw	r2,-20(fp)
  80d84c:	10800017 	ldw	r2,0(r2)
  80d850:	10800517 	ldw	r2,20(r2)
  80d854:	e0ffff17 	ldw	r3,-4(fp)
  80d858:	180d883a 	mov	r6,r3
  80d85c:	e17ffe17 	ldw	r5,-8(fp)
  80d860:	e13ffb17 	ldw	r4,-20(fp)
  80d864:	103ee83a 	callr	r2
  80d868:	e0bffc15 	stw	r2,-16(fp)
  80d86c:	e0bffc17 	ldw	r2,-16(fp)
  80d870:	1000070e 	bge	r2,zero,80d890 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80d874:	080d79c0 	call	80d79c <alt_get_errno>
  80d878:	1007883a 	mov	r3,r2
  80d87c:	e0bffc17 	ldw	r2,-16(fp)
  80d880:	0085c83a 	sub	r2,zero,r2
  80d884:	18800015 	stw	r2,0(r3)
          return -1;
  80d888:	00bfffc4 	movi	r2,-1
  80d88c:	00000c06 	br	80d8c0 <read+0xe8>
        }
        return rval;
  80d890:	e0bffc17 	ldw	r2,-16(fp)
  80d894:	00000a06 	br	80d8c0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80d898:	080d79c0 	call	80d79c <alt_get_errno>
  80d89c:	1007883a 	mov	r3,r2
  80d8a0:	00800344 	movi	r2,13
  80d8a4:	18800015 	stw	r2,0(r3)
  80d8a8:	00000406 	br	80d8bc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80d8ac:	080d79c0 	call	80d79c <alt_get_errno>
  80d8b0:	1007883a 	mov	r3,r2
  80d8b4:	00801444 	movi	r2,81
  80d8b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d8bc:	00bfffc4 	movi	r2,-1
}
  80d8c0:	e037883a 	mov	sp,fp
  80d8c4:	dfc00117 	ldw	ra,4(sp)
  80d8c8:	df000017 	ldw	fp,0(sp)
  80d8cc:	dec00204 	addi	sp,sp,8
  80d8d0:	f800283a 	ret

0080d8d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80d8d4:	defffe04 	addi	sp,sp,-8
  80d8d8:	df000115 	stw	fp,4(sp)
  80d8dc:	df000104 	addi	fp,sp,4
  80d8e0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80d8e4:	e0bfff17 	ldw	r2,-4(fp)
  80d8e8:	108000d0 	cmplti	r2,r2,3
  80d8ec:	10000d1e 	bne	r2,zero,80d924 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80d8f0:	00802074 	movhi	r2,129
  80d8f4:	1081f904 	addi	r2,r2,2020
  80d8f8:	e0ffff17 	ldw	r3,-4(fp)
  80d8fc:	18c00324 	muli	r3,r3,12
  80d900:	10c5883a 	add	r2,r2,r3
  80d904:	10800204 	addi	r2,r2,8
  80d908:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80d90c:	00802074 	movhi	r2,129
  80d910:	1081f904 	addi	r2,r2,2020
  80d914:	e0ffff17 	ldw	r3,-4(fp)
  80d918:	18c00324 	muli	r3,r3,12
  80d91c:	10c5883a 	add	r2,r2,r3
  80d920:	10000015 	stw	zero,0(r2)
  }
}
  80d924:	0001883a 	nop
  80d928:	e037883a 	mov	sp,fp
  80d92c:	df000017 	ldw	fp,0(sp)
  80d930:	dec00104 	addi	sp,sp,4
  80d934:	f800283a 	ret

0080d938 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80d938:	defff904 	addi	sp,sp,-28
  80d93c:	df000615 	stw	fp,24(sp)
  80d940:	df000604 	addi	fp,sp,24
  80d944:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d948:	0005303a 	rdctl	r2,status
  80d94c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d950:	e0fffe17 	ldw	r3,-8(fp)
  80d954:	00bfff84 	movi	r2,-2
  80d958:	1884703a 	and	r2,r3,r2
  80d95c:	1001703a 	wrctl	status,r2
  
  return context;
  80d960:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80d964:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80d968:	d0a00b17 	ldw	r2,-32724(gp)
  80d96c:	10c000c4 	addi	r3,r2,3
  80d970:	00bfff04 	movi	r2,-4
  80d974:	1884703a 	and	r2,r3,r2
  80d978:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80d97c:	d0e00b17 	ldw	r3,-32724(gp)
  80d980:	e0bfff17 	ldw	r2,-4(fp)
  80d984:	1887883a 	add	r3,r3,r2
  80d988:	00804034 	movhi	r2,256
  80d98c:	10800004 	addi	r2,r2,0
  80d990:	10c0062e 	bgeu	r2,r3,80d9ac <sbrk+0x74>
  80d994:	e0bffb17 	ldw	r2,-20(fp)
  80d998:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d99c:	e0bffa17 	ldw	r2,-24(fp)
  80d9a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80d9a4:	00bfffc4 	movi	r2,-1
  80d9a8:	00000b06 	br	80d9d8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80d9ac:	d0a00b17 	ldw	r2,-32724(gp)
  80d9b0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80d9b4:	d0e00b17 	ldw	r3,-32724(gp)
  80d9b8:	e0bfff17 	ldw	r2,-4(fp)
  80d9bc:	1885883a 	add	r2,r3,r2
  80d9c0:	d0a00b15 	stw	r2,-32724(gp)
  80d9c4:	e0bffb17 	ldw	r2,-20(fp)
  80d9c8:	e0bffc15 	stw	r2,-16(fp)
  80d9cc:	e0bffc17 	ldw	r2,-16(fp)
  80d9d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80d9d4:	e0bffd17 	ldw	r2,-12(fp)
} 
  80d9d8:	e037883a 	mov	sp,fp
  80d9dc:	df000017 	ldw	fp,0(sp)
  80d9e0:	dec00104 	addi	sp,sp,4
  80d9e4:	f800283a 	ret

0080d9e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d9e8:	defffe04 	addi	sp,sp,-8
  80d9ec:	dfc00115 	stw	ra,4(sp)
  80d9f0:	df000015 	stw	fp,0(sp)
  80d9f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d9f8:	d0a00a17 	ldw	r2,-32728(gp)
  80d9fc:	10000326 	beq	r2,zero,80da0c <alt_get_errno+0x24>
  80da00:	d0a00a17 	ldw	r2,-32728(gp)
  80da04:	103ee83a 	callr	r2
  80da08:	00000106 	br	80da10 <alt_get_errno+0x28>
  80da0c:	d0a6af04 	addi	r2,gp,-25924
}
  80da10:	e037883a 	mov	sp,fp
  80da14:	dfc00117 	ldw	ra,4(sp)
  80da18:	df000017 	ldw	fp,0(sp)
  80da1c:	dec00204 	addi	sp,sp,8
  80da20:	f800283a 	ret

0080da24 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  80da24:	defffc04 	addi	sp,sp,-16
  80da28:	dfc00315 	stw	ra,12(sp)
  80da2c:	df000215 	stw	fp,8(sp)
  80da30:	df000204 	addi	fp,sp,8
  80da34:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80da38:	d0a6b517 	ldw	r2,-25900(gp)
  clock_t ticks = alt_nticks(); 
  80da3c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80da40:	d0a6b417 	ldw	r2,-25904(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  80da44:	1000061e 	bne	r2,zero,80da60 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
  80da48:	080d9e80 	call	80d9e8 <alt_get_errno>
  80da4c:	1007883a 	mov	r3,r2
  80da50:	00801604 	movi	r2,88
  80da54:	18800015 	stw	r2,0(r3)
    return 0;
  80da58:	0005883a 	mov	r2,zero
  80da5c:	00000a06 	br	80da88 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  80da60:	e0bfff17 	ldw	r2,-4(fp)
  80da64:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  80da68:	e0bfff17 	ldw	r2,-4(fp)
  80da6c:	e0fffe17 	ldw	r3,-8(fp)
  80da70:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
  80da74:	e0bfff17 	ldw	r2,-4(fp)
  80da78:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  80da7c:	e0bfff17 	ldw	r2,-4(fp)
  80da80:	10000315 	stw	zero,12(r2)

  return ticks;
  80da84:	e0bffe17 	ldw	r2,-8(fp)
}
  80da88:	e037883a 	mov	sp,fp
  80da8c:	dfc00117 	ldw	ra,4(sp)
  80da90:	df000017 	ldw	fp,0(sp)
  80da94:	dec00204 	addi	sp,sp,8
  80da98:	f800283a 	ret

0080da9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80da9c:	defffe04 	addi	sp,sp,-8
  80daa0:	dfc00115 	stw	ra,4(sp)
  80daa4:	df000015 	stw	fp,0(sp)
  80daa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80daac:	d0a00a17 	ldw	r2,-32728(gp)
  80dab0:	10000326 	beq	r2,zero,80dac0 <alt_get_errno+0x24>
  80dab4:	d0a00a17 	ldw	r2,-32728(gp)
  80dab8:	103ee83a 	callr	r2
  80dabc:	00000106 	br	80dac4 <alt_get_errno+0x28>
  80dac0:	d0a6af04 	addi	r2,gp,-25924
}
  80dac4:	e037883a 	mov	sp,fp
  80dac8:	dfc00117 	ldw	ra,4(sp)
  80dacc:	df000017 	ldw	fp,0(sp)
  80dad0:	dec00204 	addi	sp,sp,8
  80dad4:	f800283a 	ret

0080dad8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80dad8:	defff904 	addi	sp,sp,-28
  80dadc:	dfc00615 	stw	ra,24(sp)
  80dae0:	df000515 	stw	fp,20(sp)
  80dae4:	df000504 	addi	fp,sp,20
  80dae8:	e13ffd15 	stw	r4,-12(fp)
  80daec:	e17ffe15 	stw	r5,-8(fp)
  80daf0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80daf4:	e0bffd17 	ldw	r2,-12(fp)
  80daf8:	10000616 	blt	r2,zero,80db14 <write+0x3c>
  80dafc:	e0bffd17 	ldw	r2,-12(fp)
  80db00:	10c00324 	muli	r3,r2,12
  80db04:	00802074 	movhi	r2,129
  80db08:	1081f904 	addi	r2,r2,2020
  80db0c:	1885883a 	add	r2,r3,r2
  80db10:	00000106 	br	80db18 <write+0x40>
  80db14:	0005883a 	mov	r2,zero
  80db18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80db1c:	e0bffb17 	ldw	r2,-20(fp)
  80db20:	10002126 	beq	r2,zero,80dba8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80db24:	e0bffb17 	ldw	r2,-20(fp)
  80db28:	10800217 	ldw	r2,8(r2)
  80db2c:	108000cc 	andi	r2,r2,3
  80db30:	10001826 	beq	r2,zero,80db94 <write+0xbc>
  80db34:	e0bffb17 	ldw	r2,-20(fp)
  80db38:	10800017 	ldw	r2,0(r2)
  80db3c:	10800617 	ldw	r2,24(r2)
  80db40:	10001426 	beq	r2,zero,80db94 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80db44:	e0bffb17 	ldw	r2,-20(fp)
  80db48:	10800017 	ldw	r2,0(r2)
  80db4c:	10800617 	ldw	r2,24(r2)
  80db50:	e0ffff17 	ldw	r3,-4(fp)
  80db54:	180d883a 	mov	r6,r3
  80db58:	e17ffe17 	ldw	r5,-8(fp)
  80db5c:	e13ffb17 	ldw	r4,-20(fp)
  80db60:	103ee83a 	callr	r2
  80db64:	e0bffc15 	stw	r2,-16(fp)
  80db68:	e0bffc17 	ldw	r2,-16(fp)
  80db6c:	1000070e 	bge	r2,zero,80db8c <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80db70:	080da9c0 	call	80da9c <alt_get_errno>
  80db74:	1007883a 	mov	r3,r2
  80db78:	e0bffc17 	ldw	r2,-16(fp)
  80db7c:	0085c83a 	sub	r2,zero,r2
  80db80:	18800015 	stw	r2,0(r3)
        return -1;
  80db84:	00bfffc4 	movi	r2,-1
  80db88:	00000c06 	br	80dbbc <write+0xe4>
      }
      return rval;
  80db8c:	e0bffc17 	ldw	r2,-16(fp)
  80db90:	00000a06 	br	80dbbc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80db94:	080da9c0 	call	80da9c <alt_get_errno>
  80db98:	1007883a 	mov	r3,r2
  80db9c:	00800344 	movi	r2,13
  80dba0:	18800015 	stw	r2,0(r3)
  80dba4:	00000406 	br	80dbb8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80dba8:	080da9c0 	call	80da9c <alt_get_errno>
  80dbac:	1007883a 	mov	r3,r2
  80dbb0:	00801444 	movi	r2,81
  80dbb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80dbb8:	00bfffc4 	movi	r2,-1
}
  80dbbc:	e037883a 	mov	sp,fp
  80dbc0:	dfc00117 	ldw	ra,4(sp)
  80dbc4:	df000017 	ldw	fp,0(sp)
  80dbc8:	dec00204 	addi	sp,sp,8
  80dbcc:	f800283a 	ret

0080dbd0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80dbd0:	defffd04 	addi	sp,sp,-12
  80dbd4:	dfc00215 	stw	ra,8(sp)
  80dbd8:	df000115 	stw	fp,4(sp)
  80dbdc:	df000104 	addi	fp,sp,4
  80dbe0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80dbe4:	d1600704 	addi	r5,gp,-32740
  80dbe8:	e13fff17 	ldw	r4,-4(fp)
  80dbec:	080e9ac0 	call	80e9ac <alt_dev_llist_insert>
}
  80dbf0:	e037883a 	mov	sp,fp
  80dbf4:	dfc00117 	ldw	ra,4(sp)
  80dbf8:	df000017 	ldw	fp,0(sp)
  80dbfc:	dec00204 	addi	sp,sp,8
  80dc00:	f800283a 	ret

0080dc04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80dc04:	defffd04 	addi	sp,sp,-12
  80dc08:	dfc00215 	stw	ra,8(sp)
  80dc0c:	df000115 	stw	fp,4(sp)
  80dc10:	df000104 	addi	fp,sp,4
  80dc14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80dc18:	080f31c0 	call	80f31c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80dc1c:	00800044 	movi	r2,1
  80dc20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80dc24:	0001883a 	nop
  80dc28:	e037883a 	mov	sp,fp
  80dc2c:	dfc00117 	ldw	ra,4(sp)
  80dc30:	df000017 	ldw	fp,0(sp)
  80dc34:	dec00204 	addi	sp,sp,8
  80dc38:	f800283a 	ret

0080dc3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80dc3c:	defffe04 	addi	sp,sp,-8
  80dc40:	dfc00115 	stw	ra,4(sp)
  80dc44:	df000015 	stw	fp,0(sp)
  80dc48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80dc4c:	01c0fa04 	movi	r7,1000
  80dc50:	01800044 	movi	r6,1
  80dc54:	000b883a 	mov	r5,zero
  80dc58:	01004034 	movhi	r4,256
  80dc5c:	21040004 	addi	r4,r4,4096
  80dc60:	080e7800 	call	80e780 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80dc64:	01800404 	movi	r6,16
  80dc68:	000b883a 	mov	r5,zero
  80dc6c:	01002074 	movhi	r4,129
  80dc70:	21026304 	addi	r4,r4,2444
  80dc74:	080de040 	call	80de04 <altera_avalon_jtag_uart_init>
  80dc78:	01002074 	movhi	r4,129
  80dc7c:	21025904 	addi	r4,r4,2404
  80dc80:	080dbd00 	call	80dbd0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  80dc84:	0001883a 	nop
}
  80dc88:	0001883a 	nop
  80dc8c:	e037883a 	mov	sp,fp
  80dc90:	dfc00117 	ldw	ra,4(sp)
  80dc94:	df000017 	ldw	fp,0(sp)
  80dc98:	dec00204 	addi	sp,sp,8
  80dc9c:	f800283a 	ret

0080dca0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80dca0:	defffa04 	addi	sp,sp,-24
  80dca4:	dfc00515 	stw	ra,20(sp)
  80dca8:	df000415 	stw	fp,16(sp)
  80dcac:	df000404 	addi	fp,sp,16
  80dcb0:	e13ffd15 	stw	r4,-12(fp)
  80dcb4:	e17ffe15 	stw	r5,-8(fp)
  80dcb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80dcbc:	e0bffd17 	ldw	r2,-12(fp)
  80dcc0:	10800017 	ldw	r2,0(r2)
  80dcc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80dcc8:	e0bffc17 	ldw	r2,-16(fp)
  80dccc:	10c00a04 	addi	r3,r2,40
  80dcd0:	e0bffd17 	ldw	r2,-12(fp)
  80dcd4:	10800217 	ldw	r2,8(r2)
  80dcd8:	100f883a 	mov	r7,r2
  80dcdc:	e1bfff17 	ldw	r6,-4(fp)
  80dce0:	e17ffe17 	ldw	r5,-8(fp)
  80dce4:	1809883a 	mov	r4,r3
  80dce8:	080e2c80 	call	80e2c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80dcec:	e037883a 	mov	sp,fp
  80dcf0:	dfc00117 	ldw	ra,4(sp)
  80dcf4:	df000017 	ldw	fp,0(sp)
  80dcf8:	dec00204 	addi	sp,sp,8
  80dcfc:	f800283a 	ret

0080dd00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80dd00:	defffa04 	addi	sp,sp,-24
  80dd04:	dfc00515 	stw	ra,20(sp)
  80dd08:	df000415 	stw	fp,16(sp)
  80dd0c:	df000404 	addi	fp,sp,16
  80dd10:	e13ffd15 	stw	r4,-12(fp)
  80dd14:	e17ffe15 	stw	r5,-8(fp)
  80dd18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80dd1c:	e0bffd17 	ldw	r2,-12(fp)
  80dd20:	10800017 	ldw	r2,0(r2)
  80dd24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80dd28:	e0bffc17 	ldw	r2,-16(fp)
  80dd2c:	10c00a04 	addi	r3,r2,40
  80dd30:	e0bffd17 	ldw	r2,-12(fp)
  80dd34:	10800217 	ldw	r2,8(r2)
  80dd38:	100f883a 	mov	r7,r2
  80dd3c:	e1bfff17 	ldw	r6,-4(fp)
  80dd40:	e17ffe17 	ldw	r5,-8(fp)
  80dd44:	1809883a 	mov	r4,r3
  80dd48:	080e4e40 	call	80e4e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80dd4c:	e037883a 	mov	sp,fp
  80dd50:	dfc00117 	ldw	ra,4(sp)
  80dd54:	df000017 	ldw	fp,0(sp)
  80dd58:	dec00204 	addi	sp,sp,8
  80dd5c:	f800283a 	ret

0080dd60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80dd60:	defffc04 	addi	sp,sp,-16
  80dd64:	dfc00315 	stw	ra,12(sp)
  80dd68:	df000215 	stw	fp,8(sp)
  80dd6c:	df000204 	addi	fp,sp,8
  80dd70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80dd74:	e0bfff17 	ldw	r2,-4(fp)
  80dd78:	10800017 	ldw	r2,0(r2)
  80dd7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80dd80:	e0bffe17 	ldw	r2,-8(fp)
  80dd84:	10c00a04 	addi	r3,r2,40
  80dd88:	e0bfff17 	ldw	r2,-4(fp)
  80dd8c:	10800217 	ldw	r2,8(r2)
  80dd90:	100b883a 	mov	r5,r2
  80dd94:	1809883a 	mov	r4,r3
  80dd98:	080e1700 	call	80e170 <altera_avalon_jtag_uart_close>
}
  80dd9c:	e037883a 	mov	sp,fp
  80dda0:	dfc00117 	ldw	ra,4(sp)
  80dda4:	df000017 	ldw	fp,0(sp)
  80dda8:	dec00204 	addi	sp,sp,8
  80ddac:	f800283a 	ret

0080ddb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80ddb0:	defffa04 	addi	sp,sp,-24
  80ddb4:	dfc00515 	stw	ra,20(sp)
  80ddb8:	df000415 	stw	fp,16(sp)
  80ddbc:	df000404 	addi	fp,sp,16
  80ddc0:	e13ffd15 	stw	r4,-12(fp)
  80ddc4:	e17ffe15 	stw	r5,-8(fp)
  80ddc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80ddcc:	e0bffd17 	ldw	r2,-12(fp)
  80ddd0:	10800017 	ldw	r2,0(r2)
  80ddd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80ddd8:	e0bffc17 	ldw	r2,-16(fp)
  80dddc:	10800a04 	addi	r2,r2,40
  80dde0:	e1bfff17 	ldw	r6,-4(fp)
  80dde4:	e17ffe17 	ldw	r5,-8(fp)
  80dde8:	1009883a 	mov	r4,r2
  80ddec:	080e1d80 	call	80e1d8 <altera_avalon_jtag_uart_ioctl>
}
  80ddf0:	e037883a 	mov	sp,fp
  80ddf4:	dfc00117 	ldw	ra,4(sp)
  80ddf8:	df000017 	ldw	fp,0(sp)
  80ddfc:	dec00204 	addi	sp,sp,8
  80de00:	f800283a 	ret

0080de04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80de04:	defffa04 	addi	sp,sp,-24
  80de08:	dfc00515 	stw	ra,20(sp)
  80de0c:	df000415 	stw	fp,16(sp)
  80de10:	df000404 	addi	fp,sp,16
  80de14:	e13ffd15 	stw	r4,-12(fp)
  80de18:	e17ffe15 	stw	r5,-8(fp)
  80de1c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80de20:	e0bffd17 	ldw	r2,-12(fp)
  80de24:	00c00044 	movi	r3,1
  80de28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80de2c:	e0bffd17 	ldw	r2,-12(fp)
  80de30:	10800017 	ldw	r2,0(r2)
  80de34:	10800104 	addi	r2,r2,4
  80de38:	1007883a 	mov	r3,r2
  80de3c:	e0bffd17 	ldw	r2,-12(fp)
  80de40:	10800817 	ldw	r2,32(r2)
  80de44:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80de48:	e0bffe17 	ldw	r2,-8(fp)
  80de4c:	e0ffff17 	ldw	r3,-4(fp)
  80de50:	d8000015 	stw	zero,0(sp)
  80de54:	e1fffd17 	ldw	r7,-12(fp)
  80de58:	01802074 	movhi	r6,129
  80de5c:	31b7b104 	addi	r6,r6,-8508
  80de60:	180b883a 	mov	r5,r3
  80de64:	1009883a 	mov	r4,r2
  80de68:	080eb440 	call	80eb44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80de6c:	e0bffd17 	ldw	r2,-12(fp)
  80de70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80de74:	e0bffd17 	ldw	r2,-12(fp)
  80de78:	10800204 	addi	r2,r2,8
  80de7c:	d0e6b417 	ldw	r3,-25904(gp)
  80de80:	e1fffd17 	ldw	r7,-12(fp)
  80de84:	01802074 	movhi	r6,129
  80de88:	31b83404 	addi	r6,r6,-7984
  80de8c:	180b883a 	mov	r5,r3
  80de90:	1009883a 	mov	r4,r2
  80de94:	080e7fc0 	call	80e7fc <alt_alarm_start>
  80de98:	1000040e 	bge	r2,zero,80deac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80de9c:	e0fffd17 	ldw	r3,-12(fp)
  80dea0:	00a00034 	movhi	r2,32768
  80dea4:	10bfffc4 	addi	r2,r2,-1
  80dea8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80deac:	0001883a 	nop
  80deb0:	e037883a 	mov	sp,fp
  80deb4:	dfc00117 	ldw	ra,4(sp)
  80deb8:	df000017 	ldw	fp,0(sp)
  80debc:	dec00204 	addi	sp,sp,8
  80dec0:	f800283a 	ret

0080dec4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80dec4:	defff804 	addi	sp,sp,-32
  80dec8:	df000715 	stw	fp,28(sp)
  80decc:	df000704 	addi	fp,sp,28
  80ded0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ded4:	e0bfff17 	ldw	r2,-4(fp)
  80ded8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80dedc:	e0bffb17 	ldw	r2,-20(fp)
  80dee0:	10800017 	ldw	r2,0(r2)
  80dee4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80dee8:	e0bffc17 	ldw	r2,-16(fp)
  80deec:	10800104 	addi	r2,r2,4
  80def0:	10800037 	ldwio	r2,0(r2)
  80def4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80def8:	e0bffd17 	ldw	r2,-12(fp)
  80defc:	1080c00c 	andi	r2,r2,768
  80df00:	10006d26 	beq	r2,zero,80e0b8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80df04:	e0bffd17 	ldw	r2,-12(fp)
  80df08:	1080400c 	andi	r2,r2,256
  80df0c:	10003526 	beq	r2,zero,80dfe4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80df10:	00800074 	movhi	r2,1
  80df14:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80df18:	e0bffb17 	ldw	r2,-20(fp)
  80df1c:	10800a17 	ldw	r2,40(r2)
  80df20:	10800044 	addi	r2,r2,1
  80df24:	1081ffcc 	andi	r2,r2,2047
  80df28:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80df2c:	e0bffb17 	ldw	r2,-20(fp)
  80df30:	10c00b17 	ldw	r3,44(r2)
  80df34:	e0bffe17 	ldw	r2,-8(fp)
  80df38:	18801526 	beq	r3,r2,80df90 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80df3c:	e0bffc17 	ldw	r2,-16(fp)
  80df40:	10800037 	ldwio	r2,0(r2)
  80df44:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80df48:	e0bff917 	ldw	r2,-28(fp)
  80df4c:	10a0000c 	andi	r2,r2,32768
  80df50:	10001126 	beq	r2,zero,80df98 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80df54:	e0bffb17 	ldw	r2,-20(fp)
  80df58:	10800a17 	ldw	r2,40(r2)
  80df5c:	e0fff917 	ldw	r3,-28(fp)
  80df60:	1809883a 	mov	r4,r3
  80df64:	e0fffb17 	ldw	r3,-20(fp)
  80df68:	1885883a 	add	r2,r3,r2
  80df6c:	10800e04 	addi	r2,r2,56
  80df70:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80df74:	e0bffb17 	ldw	r2,-20(fp)
  80df78:	10800a17 	ldw	r2,40(r2)
  80df7c:	10800044 	addi	r2,r2,1
  80df80:	10c1ffcc 	andi	r3,r2,2047
  80df84:	e0bffb17 	ldw	r2,-20(fp)
  80df88:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80df8c:	003fe206 	br	80df18 <__alt_data_end+0xff80df18>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80df90:	0001883a 	nop
  80df94:	00000106 	br	80df9c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80df98:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80df9c:	e0bff917 	ldw	r2,-28(fp)
  80dfa0:	10bfffec 	andhi	r2,r2,65535
  80dfa4:	10000f26 	beq	r2,zero,80dfe4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80dfa8:	e0bffb17 	ldw	r2,-20(fp)
  80dfac:	10c00817 	ldw	r3,32(r2)
  80dfb0:	00bfff84 	movi	r2,-2
  80dfb4:	1886703a 	and	r3,r3,r2
  80dfb8:	e0bffb17 	ldw	r2,-20(fp)
  80dfbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80dfc0:	e0bffc17 	ldw	r2,-16(fp)
  80dfc4:	10800104 	addi	r2,r2,4
  80dfc8:	1007883a 	mov	r3,r2
  80dfcc:	e0bffb17 	ldw	r2,-20(fp)
  80dfd0:	10800817 	ldw	r2,32(r2)
  80dfd4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80dfd8:	e0bffc17 	ldw	r2,-16(fp)
  80dfdc:	10800104 	addi	r2,r2,4
  80dfe0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80dfe4:	e0bffd17 	ldw	r2,-12(fp)
  80dfe8:	1080800c 	andi	r2,r2,512
  80dfec:	103fbe26 	beq	r2,zero,80dee8 <__alt_data_end+0xff80dee8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80dff0:	e0bffd17 	ldw	r2,-12(fp)
  80dff4:	1004d43a 	srli	r2,r2,16
  80dff8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80dffc:	00001406 	br	80e050 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80e000:	e0bffc17 	ldw	r2,-16(fp)
  80e004:	e0fffb17 	ldw	r3,-20(fp)
  80e008:	18c00d17 	ldw	r3,52(r3)
  80e00c:	e13ffb17 	ldw	r4,-20(fp)
  80e010:	20c7883a 	add	r3,r4,r3
  80e014:	18c20e04 	addi	r3,r3,2104
  80e018:	18c00003 	ldbu	r3,0(r3)
  80e01c:	18c03fcc 	andi	r3,r3,255
  80e020:	18c0201c 	xori	r3,r3,128
  80e024:	18ffe004 	addi	r3,r3,-128
  80e028:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e02c:	e0bffb17 	ldw	r2,-20(fp)
  80e030:	10800d17 	ldw	r2,52(r2)
  80e034:	10800044 	addi	r2,r2,1
  80e038:	10c1ffcc 	andi	r3,r2,2047
  80e03c:	e0bffb17 	ldw	r2,-20(fp)
  80e040:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80e044:	e0bffa17 	ldw	r2,-24(fp)
  80e048:	10bfffc4 	addi	r2,r2,-1
  80e04c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80e050:	e0bffa17 	ldw	r2,-24(fp)
  80e054:	10000526 	beq	r2,zero,80e06c <altera_avalon_jtag_uart_irq+0x1a8>
  80e058:	e0bffb17 	ldw	r2,-20(fp)
  80e05c:	10c00d17 	ldw	r3,52(r2)
  80e060:	e0bffb17 	ldw	r2,-20(fp)
  80e064:	10800c17 	ldw	r2,48(r2)
  80e068:	18bfe51e 	bne	r3,r2,80e000 <__alt_data_end+0xff80e000>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80e06c:	e0bffa17 	ldw	r2,-24(fp)
  80e070:	103f9d26 	beq	r2,zero,80dee8 <__alt_data_end+0xff80dee8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80e074:	e0bffb17 	ldw	r2,-20(fp)
  80e078:	10c00817 	ldw	r3,32(r2)
  80e07c:	00bfff44 	movi	r2,-3
  80e080:	1886703a 	and	r3,r3,r2
  80e084:	e0bffb17 	ldw	r2,-20(fp)
  80e088:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80e08c:	e0bffb17 	ldw	r2,-20(fp)
  80e090:	10800017 	ldw	r2,0(r2)
  80e094:	10800104 	addi	r2,r2,4
  80e098:	1007883a 	mov	r3,r2
  80e09c:	e0bffb17 	ldw	r2,-20(fp)
  80e0a0:	10800817 	ldw	r2,32(r2)
  80e0a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e0a8:	e0bffc17 	ldw	r2,-16(fp)
  80e0ac:	10800104 	addi	r2,r2,4
  80e0b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80e0b4:	003f8c06 	br	80dee8 <__alt_data_end+0xff80dee8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80e0b8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80e0bc:	0001883a 	nop
  80e0c0:	e037883a 	mov	sp,fp
  80e0c4:	df000017 	ldw	fp,0(sp)
  80e0c8:	dec00104 	addi	sp,sp,4
  80e0cc:	f800283a 	ret

0080e0d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80e0d0:	defff804 	addi	sp,sp,-32
  80e0d4:	df000715 	stw	fp,28(sp)
  80e0d8:	df000704 	addi	fp,sp,28
  80e0dc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80e0e0:	e0bffb17 	ldw	r2,-20(fp)
  80e0e4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80e0e8:	e0bff917 	ldw	r2,-28(fp)
  80e0ec:	10800017 	ldw	r2,0(r2)
  80e0f0:	10800104 	addi	r2,r2,4
  80e0f4:	10800037 	ldwio	r2,0(r2)
  80e0f8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80e0fc:	e0bffa17 	ldw	r2,-24(fp)
  80e100:	1081000c 	andi	r2,r2,1024
  80e104:	10000b26 	beq	r2,zero,80e134 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80e108:	e0bff917 	ldw	r2,-28(fp)
  80e10c:	10800017 	ldw	r2,0(r2)
  80e110:	10800104 	addi	r2,r2,4
  80e114:	1007883a 	mov	r3,r2
  80e118:	e0bff917 	ldw	r2,-28(fp)
  80e11c:	10800817 	ldw	r2,32(r2)
  80e120:	10810014 	ori	r2,r2,1024
  80e124:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80e128:	e0bff917 	ldw	r2,-28(fp)
  80e12c:	10000915 	stw	zero,36(r2)
  80e130:	00000a06 	br	80e15c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80e134:	e0bff917 	ldw	r2,-28(fp)
  80e138:	10c00917 	ldw	r3,36(r2)
  80e13c:	00a00034 	movhi	r2,32768
  80e140:	10bfff04 	addi	r2,r2,-4
  80e144:	10c00536 	bltu	r2,r3,80e15c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80e148:	e0bff917 	ldw	r2,-28(fp)
  80e14c:	10800917 	ldw	r2,36(r2)
  80e150:	10c00044 	addi	r3,r2,1
  80e154:	e0bff917 	ldw	r2,-28(fp)
  80e158:	10c00915 	stw	r3,36(r2)
  80e15c:	d0a6b417 	ldw	r2,-25904(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80e160:	e037883a 	mov	sp,fp
  80e164:	df000017 	ldw	fp,0(sp)
  80e168:	dec00104 	addi	sp,sp,4
  80e16c:	f800283a 	ret

0080e170 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80e170:	defffd04 	addi	sp,sp,-12
  80e174:	df000215 	stw	fp,8(sp)
  80e178:	df000204 	addi	fp,sp,8
  80e17c:	e13ffe15 	stw	r4,-8(fp)
  80e180:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80e184:	00000506 	br	80e19c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80e188:	e0bfff17 	ldw	r2,-4(fp)
  80e18c:	1090000c 	andi	r2,r2,16384
  80e190:	10000226 	beq	r2,zero,80e19c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80e194:	00bffd44 	movi	r2,-11
  80e198:	00000b06 	br	80e1c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80e19c:	e0bffe17 	ldw	r2,-8(fp)
  80e1a0:	10c00d17 	ldw	r3,52(r2)
  80e1a4:	e0bffe17 	ldw	r2,-8(fp)
  80e1a8:	10800c17 	ldw	r2,48(r2)
  80e1ac:	18800526 	beq	r3,r2,80e1c4 <altera_avalon_jtag_uart_close+0x54>
  80e1b0:	e0bffe17 	ldw	r2,-8(fp)
  80e1b4:	10c00917 	ldw	r3,36(r2)
  80e1b8:	e0bffe17 	ldw	r2,-8(fp)
  80e1bc:	10800117 	ldw	r2,4(r2)
  80e1c0:	18bff136 	bltu	r3,r2,80e188 <__alt_data_end+0xff80e188>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80e1c4:	0005883a 	mov	r2,zero
}
  80e1c8:	e037883a 	mov	sp,fp
  80e1cc:	df000017 	ldw	fp,0(sp)
  80e1d0:	dec00104 	addi	sp,sp,4
  80e1d4:	f800283a 	ret

0080e1d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80e1d8:	defffa04 	addi	sp,sp,-24
  80e1dc:	df000515 	stw	fp,20(sp)
  80e1e0:	df000504 	addi	fp,sp,20
  80e1e4:	e13ffd15 	stw	r4,-12(fp)
  80e1e8:	e17ffe15 	stw	r5,-8(fp)
  80e1ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80e1f0:	00bff9c4 	movi	r2,-25
  80e1f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80e1f8:	e0bffe17 	ldw	r2,-8(fp)
  80e1fc:	10da8060 	cmpeqi	r3,r2,27137
  80e200:	1800031e 	bne	r3,zero,80e210 <altera_avalon_jtag_uart_ioctl+0x38>
  80e204:	109a80a0 	cmpeqi	r2,r2,27138
  80e208:	1000181e 	bne	r2,zero,80e26c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80e20c:	00002906 	br	80e2b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80e210:	e0bffd17 	ldw	r2,-12(fp)
  80e214:	10c00117 	ldw	r3,4(r2)
  80e218:	00a00034 	movhi	r2,32768
  80e21c:	10bfffc4 	addi	r2,r2,-1
  80e220:	18802126 	beq	r3,r2,80e2a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80e224:	e0bfff17 	ldw	r2,-4(fp)
  80e228:	10800017 	ldw	r2,0(r2)
  80e22c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80e230:	e0bffc17 	ldw	r2,-16(fp)
  80e234:	10800090 	cmplti	r2,r2,2
  80e238:	1000061e 	bne	r2,zero,80e254 <altera_avalon_jtag_uart_ioctl+0x7c>
  80e23c:	e0fffc17 	ldw	r3,-16(fp)
  80e240:	00a00034 	movhi	r2,32768
  80e244:	10bfffc4 	addi	r2,r2,-1
  80e248:	18800226 	beq	r3,r2,80e254 <altera_avalon_jtag_uart_ioctl+0x7c>
  80e24c:	e0bffc17 	ldw	r2,-16(fp)
  80e250:	00000206 	br	80e25c <altera_avalon_jtag_uart_ioctl+0x84>
  80e254:	00a00034 	movhi	r2,32768
  80e258:	10bfff84 	addi	r2,r2,-2
  80e25c:	e0fffd17 	ldw	r3,-12(fp)
  80e260:	18800115 	stw	r2,4(r3)
      rc = 0;
  80e264:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80e268:	00000f06 	br	80e2a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80e26c:	e0bffd17 	ldw	r2,-12(fp)
  80e270:	10c00117 	ldw	r3,4(r2)
  80e274:	00a00034 	movhi	r2,32768
  80e278:	10bfffc4 	addi	r2,r2,-1
  80e27c:	18800c26 	beq	r3,r2,80e2b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80e280:	e0bffd17 	ldw	r2,-12(fp)
  80e284:	10c00917 	ldw	r3,36(r2)
  80e288:	e0bffd17 	ldw	r2,-12(fp)
  80e28c:	10800117 	ldw	r2,4(r2)
  80e290:	1885803a 	cmpltu	r2,r3,r2
  80e294:	10c03fcc 	andi	r3,r2,255
  80e298:	e0bfff17 	ldw	r2,-4(fp)
  80e29c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80e2a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80e2a4:	00000206 	br	80e2b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80e2a8:	0001883a 	nop
  80e2ac:	00000106 	br	80e2b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80e2b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80e2b4:	e0bffb17 	ldw	r2,-20(fp)
}
  80e2b8:	e037883a 	mov	sp,fp
  80e2bc:	df000017 	ldw	fp,0(sp)
  80e2c0:	dec00104 	addi	sp,sp,4
  80e2c4:	f800283a 	ret

0080e2c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80e2c8:	defff304 	addi	sp,sp,-52
  80e2cc:	dfc00c15 	stw	ra,48(sp)
  80e2d0:	df000b15 	stw	fp,44(sp)
  80e2d4:	df000b04 	addi	fp,sp,44
  80e2d8:	e13ffc15 	stw	r4,-16(fp)
  80e2dc:	e17ffd15 	stw	r5,-12(fp)
  80e2e0:	e1bffe15 	stw	r6,-8(fp)
  80e2e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80e2e8:	e0bffd17 	ldw	r2,-12(fp)
  80e2ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80e2f0:	00004706 	br	80e410 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80e2f4:	e0bffc17 	ldw	r2,-16(fp)
  80e2f8:	10800a17 	ldw	r2,40(r2)
  80e2fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80e300:	e0bffc17 	ldw	r2,-16(fp)
  80e304:	10800b17 	ldw	r2,44(r2)
  80e308:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80e30c:	e0fff717 	ldw	r3,-36(fp)
  80e310:	e0bff817 	ldw	r2,-32(fp)
  80e314:	18800536 	bltu	r3,r2,80e32c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80e318:	e0fff717 	ldw	r3,-36(fp)
  80e31c:	e0bff817 	ldw	r2,-32(fp)
  80e320:	1885c83a 	sub	r2,r3,r2
  80e324:	e0bff615 	stw	r2,-40(fp)
  80e328:	00000406 	br	80e33c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80e32c:	00c20004 	movi	r3,2048
  80e330:	e0bff817 	ldw	r2,-32(fp)
  80e334:	1885c83a 	sub	r2,r3,r2
  80e338:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80e33c:	e0bff617 	ldw	r2,-40(fp)
  80e340:	10001e26 	beq	r2,zero,80e3bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80e344:	e0fffe17 	ldw	r3,-8(fp)
  80e348:	e0bff617 	ldw	r2,-40(fp)
  80e34c:	1880022e 	bgeu	r3,r2,80e358 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80e350:	e0bffe17 	ldw	r2,-8(fp)
  80e354:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80e358:	e0bffc17 	ldw	r2,-16(fp)
  80e35c:	10c00e04 	addi	r3,r2,56
  80e360:	e0bff817 	ldw	r2,-32(fp)
  80e364:	1885883a 	add	r2,r3,r2
  80e368:	e1bff617 	ldw	r6,-40(fp)
  80e36c:	100b883a 	mov	r5,r2
  80e370:	e13ff517 	ldw	r4,-44(fp)
  80e374:	0808efc0 	call	808efc <memcpy>
      ptr   += n;
  80e378:	e0fff517 	ldw	r3,-44(fp)
  80e37c:	e0bff617 	ldw	r2,-40(fp)
  80e380:	1885883a 	add	r2,r3,r2
  80e384:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80e388:	e0fffe17 	ldw	r3,-8(fp)
  80e38c:	e0bff617 	ldw	r2,-40(fp)
  80e390:	1885c83a 	sub	r2,r3,r2
  80e394:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e398:	e0fff817 	ldw	r3,-32(fp)
  80e39c:	e0bff617 	ldw	r2,-40(fp)
  80e3a0:	1885883a 	add	r2,r3,r2
  80e3a4:	10c1ffcc 	andi	r3,r2,2047
  80e3a8:	e0bffc17 	ldw	r2,-16(fp)
  80e3ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80e3b0:	e0bffe17 	ldw	r2,-8(fp)
  80e3b4:	00bfcf16 	blt	zero,r2,80e2f4 <__alt_data_end+0xff80e2f4>
  80e3b8:	00000106 	br	80e3c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80e3bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80e3c0:	e0fff517 	ldw	r3,-44(fp)
  80e3c4:	e0bffd17 	ldw	r2,-12(fp)
  80e3c8:	1880141e 	bne	r3,r2,80e41c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80e3cc:	e0bfff17 	ldw	r2,-4(fp)
  80e3d0:	1090000c 	andi	r2,r2,16384
  80e3d4:	1000131e 	bne	r2,zero,80e424 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80e3d8:	0001883a 	nop
  80e3dc:	e0bffc17 	ldw	r2,-16(fp)
  80e3e0:	10c00a17 	ldw	r3,40(r2)
  80e3e4:	e0bff717 	ldw	r2,-36(fp)
  80e3e8:	1880051e 	bne	r3,r2,80e400 <altera_avalon_jtag_uart_read+0x138>
  80e3ec:	e0bffc17 	ldw	r2,-16(fp)
  80e3f0:	10c00917 	ldw	r3,36(r2)
  80e3f4:	e0bffc17 	ldw	r2,-16(fp)
  80e3f8:	10800117 	ldw	r2,4(r2)
  80e3fc:	18bff736 	bltu	r3,r2,80e3dc <__alt_data_end+0xff80e3dc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80e400:	e0bffc17 	ldw	r2,-16(fp)
  80e404:	10c00a17 	ldw	r3,40(r2)
  80e408:	e0bff717 	ldw	r2,-36(fp)
  80e40c:	18800726 	beq	r3,r2,80e42c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80e410:	e0bffe17 	ldw	r2,-8(fp)
  80e414:	00bfb716 	blt	zero,r2,80e2f4 <__alt_data_end+0xff80e2f4>
  80e418:	00000506 	br	80e430 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80e41c:	0001883a 	nop
  80e420:	00000306 	br	80e430 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80e424:	0001883a 	nop
  80e428:	00000106 	br	80e430 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80e42c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80e430:	e0fff517 	ldw	r3,-44(fp)
  80e434:	e0bffd17 	ldw	r2,-12(fp)
  80e438:	18801826 	beq	r3,r2,80e49c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e43c:	0005303a 	rdctl	r2,status
  80e440:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e444:	e0fffb17 	ldw	r3,-20(fp)
  80e448:	00bfff84 	movi	r2,-2
  80e44c:	1884703a 	and	r2,r3,r2
  80e450:	1001703a 	wrctl	status,r2
  
  return context;
  80e454:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80e458:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e45c:	e0bffc17 	ldw	r2,-16(fp)
  80e460:	10800817 	ldw	r2,32(r2)
  80e464:	10c00054 	ori	r3,r2,1
  80e468:	e0bffc17 	ldw	r2,-16(fp)
  80e46c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80e470:	e0bffc17 	ldw	r2,-16(fp)
  80e474:	10800017 	ldw	r2,0(r2)
  80e478:	10800104 	addi	r2,r2,4
  80e47c:	1007883a 	mov	r3,r2
  80e480:	e0bffc17 	ldw	r2,-16(fp)
  80e484:	10800817 	ldw	r2,32(r2)
  80e488:	18800035 	stwio	r2,0(r3)
  80e48c:	e0bffa17 	ldw	r2,-24(fp)
  80e490:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e494:	e0bff917 	ldw	r2,-28(fp)
  80e498:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80e49c:	e0fff517 	ldw	r3,-44(fp)
  80e4a0:	e0bffd17 	ldw	r2,-12(fp)
  80e4a4:	18800426 	beq	r3,r2,80e4b8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80e4a8:	e0fff517 	ldw	r3,-44(fp)
  80e4ac:	e0bffd17 	ldw	r2,-12(fp)
  80e4b0:	1885c83a 	sub	r2,r3,r2
  80e4b4:	00000606 	br	80e4d0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80e4b8:	e0bfff17 	ldw	r2,-4(fp)
  80e4bc:	1090000c 	andi	r2,r2,16384
  80e4c0:	10000226 	beq	r2,zero,80e4cc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80e4c4:	00bffd44 	movi	r2,-11
  80e4c8:	00000106 	br	80e4d0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80e4cc:	00bffec4 	movi	r2,-5
}
  80e4d0:	e037883a 	mov	sp,fp
  80e4d4:	dfc00117 	ldw	ra,4(sp)
  80e4d8:	df000017 	ldw	fp,0(sp)
  80e4dc:	dec00204 	addi	sp,sp,8
  80e4e0:	f800283a 	ret

0080e4e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80e4e4:	defff304 	addi	sp,sp,-52
  80e4e8:	dfc00c15 	stw	ra,48(sp)
  80e4ec:	df000b15 	stw	fp,44(sp)
  80e4f0:	df000b04 	addi	fp,sp,44
  80e4f4:	e13ffc15 	stw	r4,-16(fp)
  80e4f8:	e17ffd15 	stw	r5,-12(fp)
  80e4fc:	e1bffe15 	stw	r6,-8(fp)
  80e500:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80e504:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80e508:	e0bffd17 	ldw	r2,-12(fp)
  80e50c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80e510:	00003706 	br	80e5f0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80e514:	e0bffc17 	ldw	r2,-16(fp)
  80e518:	10800c17 	ldw	r2,48(r2)
  80e51c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80e520:	e0bffc17 	ldw	r2,-16(fp)
  80e524:	10800d17 	ldw	r2,52(r2)
  80e528:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80e52c:	e0fff917 	ldw	r3,-28(fp)
  80e530:	e0bff517 	ldw	r2,-44(fp)
  80e534:	1880062e 	bgeu	r3,r2,80e550 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80e538:	e0fff517 	ldw	r3,-44(fp)
  80e53c:	e0bff917 	ldw	r2,-28(fp)
  80e540:	1885c83a 	sub	r2,r3,r2
  80e544:	10bfffc4 	addi	r2,r2,-1
  80e548:	e0bff615 	stw	r2,-40(fp)
  80e54c:	00000b06 	br	80e57c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80e550:	e0bff517 	ldw	r2,-44(fp)
  80e554:	10000526 	beq	r2,zero,80e56c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80e558:	00c20004 	movi	r3,2048
  80e55c:	e0bff917 	ldw	r2,-28(fp)
  80e560:	1885c83a 	sub	r2,r3,r2
  80e564:	e0bff615 	stw	r2,-40(fp)
  80e568:	00000406 	br	80e57c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80e56c:	00c1ffc4 	movi	r3,2047
  80e570:	e0bff917 	ldw	r2,-28(fp)
  80e574:	1885c83a 	sub	r2,r3,r2
  80e578:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80e57c:	e0bff617 	ldw	r2,-40(fp)
  80e580:	10001e26 	beq	r2,zero,80e5fc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80e584:	e0fffe17 	ldw	r3,-8(fp)
  80e588:	e0bff617 	ldw	r2,-40(fp)
  80e58c:	1880022e 	bgeu	r3,r2,80e598 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80e590:	e0bffe17 	ldw	r2,-8(fp)
  80e594:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80e598:	e0bffc17 	ldw	r2,-16(fp)
  80e59c:	10c20e04 	addi	r3,r2,2104
  80e5a0:	e0bff917 	ldw	r2,-28(fp)
  80e5a4:	1885883a 	add	r2,r3,r2
  80e5a8:	e1bff617 	ldw	r6,-40(fp)
  80e5ac:	e17ffd17 	ldw	r5,-12(fp)
  80e5b0:	1009883a 	mov	r4,r2
  80e5b4:	0808efc0 	call	808efc <memcpy>
      ptr   += n;
  80e5b8:	e0fffd17 	ldw	r3,-12(fp)
  80e5bc:	e0bff617 	ldw	r2,-40(fp)
  80e5c0:	1885883a 	add	r2,r3,r2
  80e5c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80e5c8:	e0fffe17 	ldw	r3,-8(fp)
  80e5cc:	e0bff617 	ldw	r2,-40(fp)
  80e5d0:	1885c83a 	sub	r2,r3,r2
  80e5d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e5d8:	e0fff917 	ldw	r3,-28(fp)
  80e5dc:	e0bff617 	ldw	r2,-40(fp)
  80e5e0:	1885883a 	add	r2,r3,r2
  80e5e4:	10c1ffcc 	andi	r3,r2,2047
  80e5e8:	e0bffc17 	ldw	r2,-16(fp)
  80e5ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80e5f0:	e0bffe17 	ldw	r2,-8(fp)
  80e5f4:	00bfc716 	blt	zero,r2,80e514 <__alt_data_end+0xff80e514>
  80e5f8:	00000106 	br	80e600 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80e5fc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e600:	0005303a 	rdctl	r2,status
  80e604:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e608:	e0fffb17 	ldw	r3,-20(fp)
  80e60c:	00bfff84 	movi	r2,-2
  80e610:	1884703a 	and	r2,r3,r2
  80e614:	1001703a 	wrctl	status,r2
  
  return context;
  80e618:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80e61c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80e620:	e0bffc17 	ldw	r2,-16(fp)
  80e624:	10800817 	ldw	r2,32(r2)
  80e628:	10c00094 	ori	r3,r2,2
  80e62c:	e0bffc17 	ldw	r2,-16(fp)
  80e630:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80e634:	e0bffc17 	ldw	r2,-16(fp)
  80e638:	10800017 	ldw	r2,0(r2)
  80e63c:	10800104 	addi	r2,r2,4
  80e640:	1007883a 	mov	r3,r2
  80e644:	e0bffc17 	ldw	r2,-16(fp)
  80e648:	10800817 	ldw	r2,32(r2)
  80e64c:	18800035 	stwio	r2,0(r3)
  80e650:	e0bffa17 	ldw	r2,-24(fp)
  80e654:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e658:	e0bff817 	ldw	r2,-32(fp)
  80e65c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80e660:	e0bffe17 	ldw	r2,-8(fp)
  80e664:	0080100e 	bge	zero,r2,80e6a8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80e668:	e0bfff17 	ldw	r2,-4(fp)
  80e66c:	1090000c 	andi	r2,r2,16384
  80e670:	1000101e 	bne	r2,zero,80e6b4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80e674:	0001883a 	nop
  80e678:	e0bffc17 	ldw	r2,-16(fp)
  80e67c:	10c00d17 	ldw	r3,52(r2)
  80e680:	e0bff517 	ldw	r2,-44(fp)
  80e684:	1880051e 	bne	r3,r2,80e69c <altera_avalon_jtag_uart_write+0x1b8>
  80e688:	e0bffc17 	ldw	r2,-16(fp)
  80e68c:	10c00917 	ldw	r3,36(r2)
  80e690:	e0bffc17 	ldw	r2,-16(fp)
  80e694:	10800117 	ldw	r2,4(r2)
  80e698:	18bff736 	bltu	r3,r2,80e678 <__alt_data_end+0xff80e678>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80e69c:	e0bffc17 	ldw	r2,-16(fp)
  80e6a0:	10800917 	ldw	r2,36(r2)
  80e6a4:	1000051e 	bne	r2,zero,80e6bc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80e6a8:	e0bffe17 	ldw	r2,-8(fp)
  80e6ac:	00bfd016 	blt	zero,r2,80e5f0 <__alt_data_end+0xff80e5f0>
  80e6b0:	00000306 	br	80e6c0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80e6b4:	0001883a 	nop
  80e6b8:	00000106 	br	80e6c0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80e6bc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80e6c0:	e0fffd17 	ldw	r3,-12(fp)
  80e6c4:	e0bff717 	ldw	r2,-36(fp)
  80e6c8:	18800426 	beq	r3,r2,80e6dc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80e6cc:	e0fffd17 	ldw	r3,-12(fp)
  80e6d0:	e0bff717 	ldw	r2,-36(fp)
  80e6d4:	1885c83a 	sub	r2,r3,r2
  80e6d8:	00000606 	br	80e6f4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80e6dc:	e0bfff17 	ldw	r2,-4(fp)
  80e6e0:	1090000c 	andi	r2,r2,16384
  80e6e4:	10000226 	beq	r2,zero,80e6f0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80e6e8:	00bffd44 	movi	r2,-11
  80e6ec:	00000106 	br	80e6f4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80e6f0:	00bffec4 	movi	r2,-5
}
  80e6f4:	e037883a 	mov	sp,fp
  80e6f8:	dfc00117 	ldw	ra,4(sp)
  80e6fc:	df000017 	ldw	fp,0(sp)
  80e700:	dec00204 	addi	sp,sp,8
  80e704:	f800283a 	ret

0080e708 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80e708:	defffa04 	addi	sp,sp,-24
  80e70c:	dfc00515 	stw	ra,20(sp)
  80e710:	df000415 	stw	fp,16(sp)
  80e714:	df000404 	addi	fp,sp,16
  80e718:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80e71c:	0007883a 	mov	r3,zero
  80e720:	e0bfff17 	ldw	r2,-4(fp)
  80e724:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80e728:	e0bfff17 	ldw	r2,-4(fp)
  80e72c:	10800104 	addi	r2,r2,4
  80e730:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e734:	0005303a 	rdctl	r2,status
  80e738:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e73c:	e0fffd17 	ldw	r3,-12(fp)
  80e740:	00bfff84 	movi	r2,-2
  80e744:	1884703a 	and	r2,r3,r2
  80e748:	1001703a 	wrctl	status,r2
  
  return context;
  80e74c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80e750:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80e754:	080f2140 	call	80f214 <alt_tick>
  80e758:	e0bffc17 	ldw	r2,-16(fp)
  80e75c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e760:	e0bffe17 	ldw	r2,-8(fp)
  80e764:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80e768:	0001883a 	nop
  80e76c:	e037883a 	mov	sp,fp
  80e770:	dfc00117 	ldw	ra,4(sp)
  80e774:	df000017 	ldw	fp,0(sp)
  80e778:	dec00204 	addi	sp,sp,8
  80e77c:	f800283a 	ret

0080e780 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80e780:	defff804 	addi	sp,sp,-32
  80e784:	dfc00715 	stw	ra,28(sp)
  80e788:	df000615 	stw	fp,24(sp)
  80e78c:	df000604 	addi	fp,sp,24
  80e790:	e13ffc15 	stw	r4,-16(fp)
  80e794:	e17ffd15 	stw	r5,-12(fp)
  80e798:	e1bffe15 	stw	r6,-8(fp)
  80e79c:	e1ffff15 	stw	r7,-4(fp)
  80e7a0:	e0bfff17 	ldw	r2,-4(fp)
  80e7a4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80e7a8:	d0a6b417 	ldw	r2,-25904(gp)
  80e7ac:	1000021e 	bne	r2,zero,80e7b8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80e7b0:	e0bffb17 	ldw	r2,-20(fp)
  80e7b4:	d0a6b415 	stw	r2,-25904(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80e7b8:	e0bffc17 	ldw	r2,-16(fp)
  80e7bc:	10800104 	addi	r2,r2,4
  80e7c0:	00c001c4 	movi	r3,7
  80e7c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80e7c8:	d8000015 	stw	zero,0(sp)
  80e7cc:	e1fffc17 	ldw	r7,-16(fp)
  80e7d0:	01802074 	movhi	r6,129
  80e7d4:	31b9c204 	addi	r6,r6,-6392
  80e7d8:	e17ffe17 	ldw	r5,-8(fp)
  80e7dc:	e13ffd17 	ldw	r4,-12(fp)
  80e7e0:	080eb440 	call	80eb44 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80e7e4:	0001883a 	nop
  80e7e8:	e037883a 	mov	sp,fp
  80e7ec:	dfc00117 	ldw	ra,4(sp)
  80e7f0:	df000017 	ldw	fp,0(sp)
  80e7f4:	dec00204 	addi	sp,sp,8
  80e7f8:	f800283a 	ret

0080e7fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80e7fc:	defff504 	addi	sp,sp,-44
  80e800:	df000a15 	stw	fp,40(sp)
  80e804:	df000a04 	addi	fp,sp,40
  80e808:	e13ffc15 	stw	r4,-16(fp)
  80e80c:	e17ffd15 	stw	r5,-12(fp)
  80e810:	e1bffe15 	stw	r6,-8(fp)
  80e814:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80e818:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e81c:	d0a6b417 	ldw	r2,-25904(gp)
  
  if (alt_ticks_per_second ())
  80e820:	10003c26 	beq	r2,zero,80e914 <alt_alarm_start+0x118>
  {
    if (alarm)
  80e824:	e0bffc17 	ldw	r2,-16(fp)
  80e828:	10003826 	beq	r2,zero,80e90c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80e82c:	e0bffc17 	ldw	r2,-16(fp)
  80e830:	e0fffe17 	ldw	r3,-8(fp)
  80e834:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80e838:	e0bffc17 	ldw	r2,-16(fp)
  80e83c:	e0ffff17 	ldw	r3,-4(fp)
  80e840:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e844:	0005303a 	rdctl	r2,status
  80e848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e84c:	e0fff917 	ldw	r3,-28(fp)
  80e850:	00bfff84 	movi	r2,-2
  80e854:	1884703a 	and	r2,r3,r2
  80e858:	1001703a 	wrctl	status,r2
  
  return context;
  80e85c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80e860:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80e864:	d0a6b517 	ldw	r2,-25900(gp)
      
      current_nticks = alt_nticks();
  80e868:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80e86c:	e0fffd17 	ldw	r3,-12(fp)
  80e870:	e0bff617 	ldw	r2,-40(fp)
  80e874:	1885883a 	add	r2,r3,r2
  80e878:	10c00044 	addi	r3,r2,1
  80e87c:	e0bffc17 	ldw	r2,-16(fp)
  80e880:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80e884:	e0bffc17 	ldw	r2,-16(fp)
  80e888:	10c00217 	ldw	r3,8(r2)
  80e88c:	e0bff617 	ldw	r2,-40(fp)
  80e890:	1880042e 	bgeu	r3,r2,80e8a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80e894:	e0bffc17 	ldw	r2,-16(fp)
  80e898:	00c00044 	movi	r3,1
  80e89c:	10c00405 	stb	r3,16(r2)
  80e8a0:	00000206 	br	80e8ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80e8a4:	e0bffc17 	ldw	r2,-16(fp)
  80e8a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80e8ac:	e0bffc17 	ldw	r2,-16(fp)
  80e8b0:	d0e00d04 	addi	r3,gp,-32716
  80e8b4:	e0fffa15 	stw	r3,-24(fp)
  80e8b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80e8bc:	e0bffb17 	ldw	r2,-20(fp)
  80e8c0:	e0fffa17 	ldw	r3,-24(fp)
  80e8c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80e8c8:	e0bffa17 	ldw	r2,-24(fp)
  80e8cc:	10c00017 	ldw	r3,0(r2)
  80e8d0:	e0bffb17 	ldw	r2,-20(fp)
  80e8d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80e8d8:	e0bffa17 	ldw	r2,-24(fp)
  80e8dc:	10800017 	ldw	r2,0(r2)
  80e8e0:	e0fffb17 	ldw	r3,-20(fp)
  80e8e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80e8e8:	e0bffa17 	ldw	r2,-24(fp)
  80e8ec:	e0fffb17 	ldw	r3,-20(fp)
  80e8f0:	10c00015 	stw	r3,0(r2)
  80e8f4:	e0bff817 	ldw	r2,-32(fp)
  80e8f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e8fc:	e0bff717 	ldw	r2,-36(fp)
  80e900:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80e904:	0005883a 	mov	r2,zero
  80e908:	00000306 	br	80e918 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80e90c:	00bffa84 	movi	r2,-22
  80e910:	00000106 	br	80e918 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80e914:	00bfde84 	movi	r2,-134
  }
}
  80e918:	e037883a 	mov	sp,fp
  80e91c:	df000017 	ldw	fp,0(sp)
  80e920:	dec00104 	addi	sp,sp,4
  80e924:	f800283a 	ret

0080e928 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80e928:	defffe04 	addi	sp,sp,-8
  80e92c:	df000115 	stw	fp,4(sp)
  80e930:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80e934:	e03fff15 	stw	zero,-4(fp)
  80e938:	00000506 	br	80e950 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80e93c:	e0bfff17 	ldw	r2,-4(fp)
  80e940:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80e944:	e0bfff17 	ldw	r2,-4(fp)
  80e948:	10800804 	addi	r2,r2,32
  80e94c:	e0bfff15 	stw	r2,-4(fp)
  80e950:	e0bfff17 	ldw	r2,-4(fp)
  80e954:	00ffffd4 	movui	r3,65535
  80e958:	18bff82e 	bgeu	r3,r2,80e93c <__alt_data_end+0xff80e93c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80e95c:	0001883a 	nop
  80e960:	e037883a 	mov	sp,fp
  80e964:	df000017 	ldw	fp,0(sp)
  80e968:	dec00104 	addi	sp,sp,4
  80e96c:	f800283a 	ret

0080e970 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e970:	defffe04 	addi	sp,sp,-8
  80e974:	dfc00115 	stw	ra,4(sp)
  80e978:	df000015 	stw	fp,0(sp)
  80e97c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e980:	d0a00a17 	ldw	r2,-32728(gp)
  80e984:	10000326 	beq	r2,zero,80e994 <alt_get_errno+0x24>
  80e988:	d0a00a17 	ldw	r2,-32728(gp)
  80e98c:	103ee83a 	callr	r2
  80e990:	00000106 	br	80e998 <alt_get_errno+0x28>
  80e994:	d0a6af04 	addi	r2,gp,-25924
}
  80e998:	e037883a 	mov	sp,fp
  80e99c:	dfc00117 	ldw	ra,4(sp)
  80e9a0:	df000017 	ldw	fp,0(sp)
  80e9a4:	dec00204 	addi	sp,sp,8
  80e9a8:	f800283a 	ret

0080e9ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80e9ac:	defffa04 	addi	sp,sp,-24
  80e9b0:	dfc00515 	stw	ra,20(sp)
  80e9b4:	df000415 	stw	fp,16(sp)
  80e9b8:	df000404 	addi	fp,sp,16
  80e9bc:	e13ffe15 	stw	r4,-8(fp)
  80e9c0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80e9c4:	e0bffe17 	ldw	r2,-8(fp)
  80e9c8:	10000326 	beq	r2,zero,80e9d8 <alt_dev_llist_insert+0x2c>
  80e9cc:	e0bffe17 	ldw	r2,-8(fp)
  80e9d0:	10800217 	ldw	r2,8(r2)
  80e9d4:	1000061e 	bne	r2,zero,80e9f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80e9d8:	080e9700 	call	80e970 <alt_get_errno>
  80e9dc:	1007883a 	mov	r3,r2
  80e9e0:	00800584 	movi	r2,22
  80e9e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80e9e8:	00bffa84 	movi	r2,-22
  80e9ec:	00001306 	br	80ea3c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80e9f0:	e0bffe17 	ldw	r2,-8(fp)
  80e9f4:	e0ffff17 	ldw	r3,-4(fp)
  80e9f8:	e0fffc15 	stw	r3,-16(fp)
  80e9fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ea00:	e0bffd17 	ldw	r2,-12(fp)
  80ea04:	e0fffc17 	ldw	r3,-16(fp)
  80ea08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80ea0c:	e0bffc17 	ldw	r2,-16(fp)
  80ea10:	10c00017 	ldw	r3,0(r2)
  80ea14:	e0bffd17 	ldw	r2,-12(fp)
  80ea18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ea1c:	e0bffc17 	ldw	r2,-16(fp)
  80ea20:	10800017 	ldw	r2,0(r2)
  80ea24:	e0fffd17 	ldw	r3,-12(fp)
  80ea28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80ea2c:	e0bffc17 	ldw	r2,-16(fp)
  80ea30:	e0fffd17 	ldw	r3,-12(fp)
  80ea34:	10c00015 	stw	r3,0(r2)

  return 0;  
  80ea38:	0005883a 	mov	r2,zero
}
  80ea3c:	e037883a 	mov	sp,fp
  80ea40:	dfc00117 	ldw	ra,4(sp)
  80ea44:	df000017 	ldw	fp,0(sp)
  80ea48:	dec00204 	addi	sp,sp,8
  80ea4c:	f800283a 	ret

0080ea50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80ea50:	defffd04 	addi	sp,sp,-12
  80ea54:	dfc00215 	stw	ra,8(sp)
  80ea58:	df000115 	stw	fp,4(sp)
  80ea5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ea60:	00802074 	movhi	r2,129
  80ea64:	10bebb04 	addi	r2,r2,-1300
  80ea68:	e0bfff15 	stw	r2,-4(fp)
  80ea6c:	00000606 	br	80ea88 <_do_ctors+0x38>
        (*ctor) (); 
  80ea70:	e0bfff17 	ldw	r2,-4(fp)
  80ea74:	10800017 	ldw	r2,0(r2)
  80ea78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ea7c:	e0bfff17 	ldw	r2,-4(fp)
  80ea80:	10bfff04 	addi	r2,r2,-4
  80ea84:	e0bfff15 	stw	r2,-4(fp)
  80ea88:	e0ffff17 	ldw	r3,-4(fp)
  80ea8c:	00802074 	movhi	r2,129
  80ea90:	10bebc04 	addi	r2,r2,-1296
  80ea94:	18bff62e 	bgeu	r3,r2,80ea70 <__alt_data_end+0xff80ea70>
        (*ctor) (); 
}
  80ea98:	0001883a 	nop
  80ea9c:	e037883a 	mov	sp,fp
  80eaa0:	dfc00117 	ldw	ra,4(sp)
  80eaa4:	df000017 	ldw	fp,0(sp)
  80eaa8:	dec00204 	addi	sp,sp,8
  80eaac:	f800283a 	ret

0080eab0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80eab0:	defffd04 	addi	sp,sp,-12
  80eab4:	dfc00215 	stw	ra,8(sp)
  80eab8:	df000115 	stw	fp,4(sp)
  80eabc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80eac0:	00802074 	movhi	r2,129
  80eac4:	10bebb04 	addi	r2,r2,-1300
  80eac8:	e0bfff15 	stw	r2,-4(fp)
  80eacc:	00000606 	br	80eae8 <_do_dtors+0x38>
        (*dtor) (); 
  80ead0:	e0bfff17 	ldw	r2,-4(fp)
  80ead4:	10800017 	ldw	r2,0(r2)
  80ead8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80eadc:	e0bfff17 	ldw	r2,-4(fp)
  80eae0:	10bfff04 	addi	r2,r2,-4
  80eae4:	e0bfff15 	stw	r2,-4(fp)
  80eae8:	e0ffff17 	ldw	r3,-4(fp)
  80eaec:	00802074 	movhi	r2,129
  80eaf0:	10bebc04 	addi	r2,r2,-1296
  80eaf4:	18bff62e 	bgeu	r3,r2,80ead0 <__alt_data_end+0xff80ead0>
        (*dtor) (); 
}
  80eaf8:	0001883a 	nop
  80eafc:	e037883a 	mov	sp,fp
  80eb00:	dfc00117 	ldw	ra,4(sp)
  80eb04:	df000017 	ldw	fp,0(sp)
  80eb08:	dec00204 	addi	sp,sp,8
  80eb0c:	f800283a 	ret

0080eb10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80eb10:	defffe04 	addi	sp,sp,-8
  80eb14:	dfc00115 	stw	ra,4(sp)
  80eb18:	df000015 	stw	fp,0(sp)
  80eb1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80eb20:	01440004 	movi	r5,4096
  80eb24:	0009883a 	mov	r4,zero
  80eb28:	080f57c0 	call	80f57c <alt_icache_flush>
#endif
}
  80eb2c:	0001883a 	nop
  80eb30:	e037883a 	mov	sp,fp
  80eb34:	dfc00117 	ldw	ra,4(sp)
  80eb38:	df000017 	ldw	fp,0(sp)
  80eb3c:	dec00204 	addi	sp,sp,8
  80eb40:	f800283a 	ret

0080eb44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80eb44:	defff904 	addi	sp,sp,-28
  80eb48:	dfc00615 	stw	ra,24(sp)
  80eb4c:	df000515 	stw	fp,20(sp)
  80eb50:	df000504 	addi	fp,sp,20
  80eb54:	e13ffc15 	stw	r4,-16(fp)
  80eb58:	e17ffd15 	stw	r5,-12(fp)
  80eb5c:	e1bffe15 	stw	r6,-8(fp)
  80eb60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80eb64:	e0800217 	ldw	r2,8(fp)
  80eb68:	d8800015 	stw	r2,0(sp)
  80eb6c:	e1ffff17 	ldw	r7,-4(fp)
  80eb70:	e1bffe17 	ldw	r6,-8(fp)
  80eb74:	e17ffd17 	ldw	r5,-12(fp)
  80eb78:	e13ffc17 	ldw	r4,-16(fp)
  80eb7c:	080ecf40 	call	80ecf4 <alt_iic_isr_register>
}  
  80eb80:	e037883a 	mov	sp,fp
  80eb84:	dfc00117 	ldw	ra,4(sp)
  80eb88:	df000017 	ldw	fp,0(sp)
  80eb8c:	dec00204 	addi	sp,sp,8
  80eb90:	f800283a 	ret

0080eb94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80eb94:	defff904 	addi	sp,sp,-28
  80eb98:	df000615 	stw	fp,24(sp)
  80eb9c:	df000604 	addi	fp,sp,24
  80eba0:	e13ffe15 	stw	r4,-8(fp)
  80eba4:	e17fff15 	stw	r5,-4(fp)
  80eba8:	e0bfff17 	ldw	r2,-4(fp)
  80ebac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ebb0:	0005303a 	rdctl	r2,status
  80ebb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ebb8:	e0fffb17 	ldw	r3,-20(fp)
  80ebbc:	00bfff84 	movi	r2,-2
  80ebc0:	1884703a 	and	r2,r3,r2
  80ebc4:	1001703a 	wrctl	status,r2
  
  return context;
  80ebc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ebcc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80ebd0:	00c00044 	movi	r3,1
  80ebd4:	e0bffa17 	ldw	r2,-24(fp)
  80ebd8:	1884983a 	sll	r2,r3,r2
  80ebdc:	1007883a 	mov	r3,r2
  80ebe0:	d0a6b317 	ldw	r2,-25908(gp)
  80ebe4:	1884b03a 	or	r2,r3,r2
  80ebe8:	d0a6b315 	stw	r2,-25908(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ebec:	d0a6b317 	ldw	r2,-25908(gp)
  80ebf0:	100170fa 	wrctl	ienable,r2
  80ebf4:	e0bffc17 	ldw	r2,-16(fp)
  80ebf8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ebfc:	e0bffd17 	ldw	r2,-12(fp)
  80ec00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ec04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80ec08:	0001883a 	nop
}
  80ec0c:	e037883a 	mov	sp,fp
  80ec10:	df000017 	ldw	fp,0(sp)
  80ec14:	dec00104 	addi	sp,sp,4
  80ec18:	f800283a 	ret

0080ec1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80ec1c:	defff904 	addi	sp,sp,-28
  80ec20:	df000615 	stw	fp,24(sp)
  80ec24:	df000604 	addi	fp,sp,24
  80ec28:	e13ffe15 	stw	r4,-8(fp)
  80ec2c:	e17fff15 	stw	r5,-4(fp)
  80ec30:	e0bfff17 	ldw	r2,-4(fp)
  80ec34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec38:	0005303a 	rdctl	r2,status
  80ec3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec40:	e0fffb17 	ldw	r3,-20(fp)
  80ec44:	00bfff84 	movi	r2,-2
  80ec48:	1884703a 	and	r2,r3,r2
  80ec4c:	1001703a 	wrctl	status,r2
  
  return context;
  80ec50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ec54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80ec58:	00c00044 	movi	r3,1
  80ec5c:	e0bffa17 	ldw	r2,-24(fp)
  80ec60:	1884983a 	sll	r2,r3,r2
  80ec64:	0084303a 	nor	r2,zero,r2
  80ec68:	1007883a 	mov	r3,r2
  80ec6c:	d0a6b317 	ldw	r2,-25908(gp)
  80ec70:	1884703a 	and	r2,r3,r2
  80ec74:	d0a6b315 	stw	r2,-25908(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ec78:	d0a6b317 	ldw	r2,-25908(gp)
  80ec7c:	100170fa 	wrctl	ienable,r2
  80ec80:	e0bffc17 	ldw	r2,-16(fp)
  80ec84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ec88:	e0bffd17 	ldw	r2,-12(fp)
  80ec8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ec90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80ec94:	0001883a 	nop
}
  80ec98:	e037883a 	mov	sp,fp
  80ec9c:	df000017 	ldw	fp,0(sp)
  80eca0:	dec00104 	addi	sp,sp,4
  80eca4:	f800283a 	ret

0080eca8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80eca8:	defffc04 	addi	sp,sp,-16
  80ecac:	df000315 	stw	fp,12(sp)
  80ecb0:	df000304 	addi	fp,sp,12
  80ecb4:	e13ffe15 	stw	r4,-8(fp)
  80ecb8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80ecbc:	000530fa 	rdctl	r2,ienable
  80ecc0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80ecc4:	00c00044 	movi	r3,1
  80ecc8:	e0bfff17 	ldw	r2,-4(fp)
  80eccc:	1884983a 	sll	r2,r3,r2
  80ecd0:	1007883a 	mov	r3,r2
  80ecd4:	e0bffd17 	ldw	r2,-12(fp)
  80ecd8:	1884703a 	and	r2,r3,r2
  80ecdc:	1004c03a 	cmpne	r2,r2,zero
  80ece0:	10803fcc 	andi	r2,r2,255
}
  80ece4:	e037883a 	mov	sp,fp
  80ece8:	df000017 	ldw	fp,0(sp)
  80ecec:	dec00104 	addi	sp,sp,4
  80ecf0:	f800283a 	ret

0080ecf4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ecf4:	defff504 	addi	sp,sp,-44
  80ecf8:	dfc00a15 	stw	ra,40(sp)
  80ecfc:	df000915 	stw	fp,36(sp)
  80ed00:	df000904 	addi	fp,sp,36
  80ed04:	e13ffc15 	stw	r4,-16(fp)
  80ed08:	e17ffd15 	stw	r5,-12(fp)
  80ed0c:	e1bffe15 	stw	r6,-8(fp)
  80ed10:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80ed14:	00bffa84 	movi	r2,-22
  80ed18:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80ed1c:	e0bffd17 	ldw	r2,-12(fp)
  80ed20:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ed24:	e0bff817 	ldw	r2,-32(fp)
  80ed28:	10800808 	cmpgei	r2,r2,32
  80ed2c:	1000271e 	bne	r2,zero,80edcc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed30:	0005303a 	rdctl	r2,status
  80ed34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed38:	e0fffb17 	ldw	r3,-20(fp)
  80ed3c:	00bfff84 	movi	r2,-2
  80ed40:	1884703a 	and	r2,r3,r2
  80ed44:	1001703a 	wrctl	status,r2
  
  return context;
  80ed48:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80ed4c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80ed50:	008020b4 	movhi	r2,130
  80ed54:	10ad3204 	addi	r2,r2,-19256
  80ed58:	e0fff817 	ldw	r3,-32(fp)
  80ed5c:	180690fa 	slli	r3,r3,3
  80ed60:	10c5883a 	add	r2,r2,r3
  80ed64:	e0fffe17 	ldw	r3,-8(fp)
  80ed68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80ed6c:	008020b4 	movhi	r2,130
  80ed70:	10ad3204 	addi	r2,r2,-19256
  80ed74:	e0fff817 	ldw	r3,-32(fp)
  80ed78:	180690fa 	slli	r3,r3,3
  80ed7c:	10c5883a 	add	r2,r2,r3
  80ed80:	10800104 	addi	r2,r2,4
  80ed84:	e0ffff17 	ldw	r3,-4(fp)
  80ed88:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80ed8c:	e0bffe17 	ldw	r2,-8(fp)
  80ed90:	10000526 	beq	r2,zero,80eda8 <alt_iic_isr_register+0xb4>
  80ed94:	e0bff817 	ldw	r2,-32(fp)
  80ed98:	100b883a 	mov	r5,r2
  80ed9c:	e13ffc17 	ldw	r4,-16(fp)
  80eda0:	080eb940 	call	80eb94 <alt_ic_irq_enable>
  80eda4:	00000406 	br	80edb8 <alt_iic_isr_register+0xc4>
  80eda8:	e0bff817 	ldw	r2,-32(fp)
  80edac:	100b883a 	mov	r5,r2
  80edb0:	e13ffc17 	ldw	r4,-16(fp)
  80edb4:	080ec1c0 	call	80ec1c <alt_ic_irq_disable>
  80edb8:	e0bff715 	stw	r2,-36(fp)
  80edbc:	e0bffa17 	ldw	r2,-24(fp)
  80edc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80edc4:	e0bff917 	ldw	r2,-28(fp)
  80edc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80edcc:	e0bff717 	ldw	r2,-36(fp)
}
  80edd0:	e037883a 	mov	sp,fp
  80edd4:	dfc00117 	ldw	ra,4(sp)
  80edd8:	df000017 	ldw	fp,0(sp)
  80eddc:	dec00204 	addi	sp,sp,8
  80ede0:	f800283a 	ret

0080ede4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80ede4:	defff904 	addi	sp,sp,-28
  80ede8:	dfc00615 	stw	ra,24(sp)
  80edec:	df000515 	stw	fp,20(sp)
  80edf0:	df000504 	addi	fp,sp,20
  80edf4:	e13ffc15 	stw	r4,-16(fp)
  80edf8:	e17ffd15 	stw	r5,-12(fp)
  80edfc:	e1bffe15 	stw	r6,-8(fp)
  80ee00:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80ee04:	e1bfff17 	ldw	r6,-4(fp)
  80ee08:	e17ffe17 	ldw	r5,-8(fp)
  80ee0c:	e13ffd17 	ldw	r4,-12(fp)
  80ee10:	080f0240 	call	80f024 <open>
  80ee14:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80ee18:	e0bffb17 	ldw	r2,-20(fp)
  80ee1c:	10001c16 	blt	r2,zero,80ee90 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80ee20:	00802074 	movhi	r2,129
  80ee24:	1081f904 	addi	r2,r2,2020
  80ee28:	e0fffb17 	ldw	r3,-20(fp)
  80ee2c:	18c00324 	muli	r3,r3,12
  80ee30:	10c5883a 	add	r2,r2,r3
  80ee34:	10c00017 	ldw	r3,0(r2)
  80ee38:	e0bffc17 	ldw	r2,-16(fp)
  80ee3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80ee40:	00802074 	movhi	r2,129
  80ee44:	1081f904 	addi	r2,r2,2020
  80ee48:	e0fffb17 	ldw	r3,-20(fp)
  80ee4c:	18c00324 	muli	r3,r3,12
  80ee50:	10c5883a 	add	r2,r2,r3
  80ee54:	10800104 	addi	r2,r2,4
  80ee58:	10c00017 	ldw	r3,0(r2)
  80ee5c:	e0bffc17 	ldw	r2,-16(fp)
  80ee60:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80ee64:	00802074 	movhi	r2,129
  80ee68:	1081f904 	addi	r2,r2,2020
  80ee6c:	e0fffb17 	ldw	r3,-20(fp)
  80ee70:	18c00324 	muli	r3,r3,12
  80ee74:	10c5883a 	add	r2,r2,r3
  80ee78:	10800204 	addi	r2,r2,8
  80ee7c:	10c00017 	ldw	r3,0(r2)
  80ee80:	e0bffc17 	ldw	r2,-16(fp)
  80ee84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80ee88:	e13ffb17 	ldw	r4,-20(fp)
  80ee8c:	080d8d40 	call	80d8d4 <alt_release_fd>
  }
} 
  80ee90:	0001883a 	nop
  80ee94:	e037883a 	mov	sp,fp
  80ee98:	dfc00117 	ldw	ra,4(sp)
  80ee9c:	df000017 	ldw	fp,0(sp)
  80eea0:	dec00204 	addi	sp,sp,8
  80eea4:	f800283a 	ret

0080eea8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80eea8:	defffb04 	addi	sp,sp,-20
  80eeac:	dfc00415 	stw	ra,16(sp)
  80eeb0:	df000315 	stw	fp,12(sp)
  80eeb4:	df000304 	addi	fp,sp,12
  80eeb8:	e13ffd15 	stw	r4,-12(fp)
  80eebc:	e17ffe15 	stw	r5,-8(fp)
  80eec0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80eec4:	01c07fc4 	movi	r7,511
  80eec8:	01800044 	movi	r6,1
  80eecc:	e17ffd17 	ldw	r5,-12(fp)
  80eed0:	01002074 	movhi	r4,129
  80eed4:	2101fc04 	addi	r4,r4,2032
  80eed8:	080ede40 	call	80ede4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80eedc:	01c07fc4 	movi	r7,511
  80eee0:	000d883a 	mov	r6,zero
  80eee4:	e17ffe17 	ldw	r5,-8(fp)
  80eee8:	01002074 	movhi	r4,129
  80eeec:	2101f904 	addi	r4,r4,2020
  80eef0:	080ede40 	call	80ede4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80eef4:	01c07fc4 	movi	r7,511
  80eef8:	01800044 	movi	r6,1
  80eefc:	e17fff17 	ldw	r5,-4(fp)
  80ef00:	01002074 	movhi	r4,129
  80ef04:	2101ff04 	addi	r4,r4,2044
  80ef08:	080ede40 	call	80ede4 <alt_open_fd>
}  
  80ef0c:	0001883a 	nop
  80ef10:	e037883a 	mov	sp,fp
  80ef14:	dfc00117 	ldw	ra,4(sp)
  80ef18:	df000017 	ldw	fp,0(sp)
  80ef1c:	dec00204 	addi	sp,sp,8
  80ef20:	f800283a 	ret

0080ef24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ef24:	defffe04 	addi	sp,sp,-8
  80ef28:	dfc00115 	stw	ra,4(sp)
  80ef2c:	df000015 	stw	fp,0(sp)
  80ef30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ef34:	d0a00a17 	ldw	r2,-32728(gp)
  80ef38:	10000326 	beq	r2,zero,80ef48 <alt_get_errno+0x24>
  80ef3c:	d0a00a17 	ldw	r2,-32728(gp)
  80ef40:	103ee83a 	callr	r2
  80ef44:	00000106 	br	80ef4c <alt_get_errno+0x28>
  80ef48:	d0a6af04 	addi	r2,gp,-25924
}
  80ef4c:	e037883a 	mov	sp,fp
  80ef50:	dfc00117 	ldw	ra,4(sp)
  80ef54:	df000017 	ldw	fp,0(sp)
  80ef58:	dec00204 	addi	sp,sp,8
  80ef5c:	f800283a 	ret

0080ef60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80ef60:	defffd04 	addi	sp,sp,-12
  80ef64:	df000215 	stw	fp,8(sp)
  80ef68:	df000204 	addi	fp,sp,8
  80ef6c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80ef70:	e0bfff17 	ldw	r2,-4(fp)
  80ef74:	10800217 	ldw	r2,8(r2)
  80ef78:	10d00034 	orhi	r3,r2,16384
  80ef7c:	e0bfff17 	ldw	r2,-4(fp)
  80ef80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80ef84:	e03ffe15 	stw	zero,-8(fp)
  80ef88:	00001d06 	br	80f000 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80ef8c:	00802074 	movhi	r2,129
  80ef90:	1081f904 	addi	r2,r2,2020
  80ef94:	e0fffe17 	ldw	r3,-8(fp)
  80ef98:	18c00324 	muli	r3,r3,12
  80ef9c:	10c5883a 	add	r2,r2,r3
  80efa0:	10c00017 	ldw	r3,0(r2)
  80efa4:	e0bfff17 	ldw	r2,-4(fp)
  80efa8:	10800017 	ldw	r2,0(r2)
  80efac:	1880111e 	bne	r3,r2,80eff4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80efb0:	00802074 	movhi	r2,129
  80efb4:	1081f904 	addi	r2,r2,2020
  80efb8:	e0fffe17 	ldw	r3,-8(fp)
  80efbc:	18c00324 	muli	r3,r3,12
  80efc0:	10c5883a 	add	r2,r2,r3
  80efc4:	10800204 	addi	r2,r2,8
  80efc8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80efcc:	1000090e 	bge	r2,zero,80eff4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80efd0:	e0bffe17 	ldw	r2,-8(fp)
  80efd4:	10c00324 	muli	r3,r2,12
  80efd8:	00802074 	movhi	r2,129
  80efdc:	1081f904 	addi	r2,r2,2020
  80efe0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80efe4:	e0bfff17 	ldw	r2,-4(fp)
  80efe8:	18800226 	beq	r3,r2,80eff4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80efec:	00bffcc4 	movi	r2,-13
  80eff0:	00000806 	br	80f014 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80eff4:	e0bffe17 	ldw	r2,-8(fp)
  80eff8:	10800044 	addi	r2,r2,1
  80effc:	e0bffe15 	stw	r2,-8(fp)
  80f000:	d0a00917 	ldw	r2,-32732(gp)
  80f004:	1007883a 	mov	r3,r2
  80f008:	e0bffe17 	ldw	r2,-8(fp)
  80f00c:	18bfdf2e 	bgeu	r3,r2,80ef8c <__alt_data_end+0xff80ef8c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f010:	0005883a 	mov	r2,zero
}
  80f014:	e037883a 	mov	sp,fp
  80f018:	df000017 	ldw	fp,0(sp)
  80f01c:	dec00104 	addi	sp,sp,4
  80f020:	f800283a 	ret

0080f024 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f024:	defff604 	addi	sp,sp,-40
  80f028:	dfc00915 	stw	ra,36(sp)
  80f02c:	df000815 	stw	fp,32(sp)
  80f030:	df000804 	addi	fp,sp,32
  80f034:	e13ffd15 	stw	r4,-12(fp)
  80f038:	e17ffe15 	stw	r5,-8(fp)
  80f03c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f040:	00bfffc4 	movi	r2,-1
  80f044:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80f048:	00bffb44 	movi	r2,-19
  80f04c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80f050:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f054:	d1600704 	addi	r5,gp,-32740
  80f058:	e13ffd17 	ldw	r4,-12(fp)
  80f05c:	080f3400 	call	80f340 <alt_find_dev>
  80f060:	e0bff815 	stw	r2,-32(fp)
  80f064:	e0bff817 	ldw	r2,-32(fp)
  80f068:	1000051e 	bne	r2,zero,80f080 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f06c:	e13ffd17 	ldw	r4,-12(fp)
  80f070:	080f3d00 	call	80f3d0 <alt_find_file>
  80f074:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80f078:	00800044 	movi	r2,1
  80f07c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f080:	e0bff817 	ldw	r2,-32(fp)
  80f084:	10002926 	beq	r2,zero,80f12c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f088:	e13ff817 	ldw	r4,-32(fp)
  80f08c:	080f4d80 	call	80f4d8 <alt_get_fd>
  80f090:	e0bff915 	stw	r2,-28(fp)
  80f094:	e0bff917 	ldw	r2,-28(fp)
  80f098:	1000030e 	bge	r2,zero,80f0a8 <open+0x84>
    {
      status = index;
  80f09c:	e0bff917 	ldw	r2,-28(fp)
  80f0a0:	e0bffa15 	stw	r2,-24(fp)
  80f0a4:	00002306 	br	80f134 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f0a8:	e0bff917 	ldw	r2,-28(fp)
  80f0ac:	10c00324 	muli	r3,r2,12
  80f0b0:	00802074 	movhi	r2,129
  80f0b4:	1081f904 	addi	r2,r2,2020
  80f0b8:	1885883a 	add	r2,r3,r2
  80f0bc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f0c0:	e0fffe17 	ldw	r3,-8(fp)
  80f0c4:	00900034 	movhi	r2,16384
  80f0c8:	10bfffc4 	addi	r2,r2,-1
  80f0cc:	1886703a 	and	r3,r3,r2
  80f0d0:	e0bffc17 	ldw	r2,-16(fp)
  80f0d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f0d8:	e0bffb17 	ldw	r2,-20(fp)
  80f0dc:	1000051e 	bne	r2,zero,80f0f4 <open+0xd0>
  80f0e0:	e13ffc17 	ldw	r4,-16(fp)
  80f0e4:	080ef600 	call	80ef60 <alt_file_locked>
  80f0e8:	e0bffa15 	stw	r2,-24(fp)
  80f0ec:	e0bffa17 	ldw	r2,-24(fp)
  80f0f0:	10001016 	blt	r2,zero,80f134 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f0f4:	e0bff817 	ldw	r2,-32(fp)
  80f0f8:	10800317 	ldw	r2,12(r2)
  80f0fc:	10000826 	beq	r2,zero,80f120 <open+0xfc>
  80f100:	e0bff817 	ldw	r2,-32(fp)
  80f104:	10800317 	ldw	r2,12(r2)
  80f108:	e1ffff17 	ldw	r7,-4(fp)
  80f10c:	e1bffe17 	ldw	r6,-8(fp)
  80f110:	e17ffd17 	ldw	r5,-12(fp)
  80f114:	e13ffc17 	ldw	r4,-16(fp)
  80f118:	103ee83a 	callr	r2
  80f11c:	00000106 	br	80f124 <open+0x100>
  80f120:	0005883a 	mov	r2,zero
  80f124:	e0bffa15 	stw	r2,-24(fp)
  80f128:	00000206 	br	80f134 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f12c:	00bffb44 	movi	r2,-19
  80f130:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f134:	e0bffa17 	ldw	r2,-24(fp)
  80f138:	1000090e 	bge	r2,zero,80f160 <open+0x13c>
  {
    alt_release_fd (index);  
  80f13c:	e13ff917 	ldw	r4,-28(fp)
  80f140:	080d8d40 	call	80d8d4 <alt_release_fd>
    ALT_ERRNO = -status;
  80f144:	080ef240 	call	80ef24 <alt_get_errno>
  80f148:	1007883a 	mov	r3,r2
  80f14c:	e0bffa17 	ldw	r2,-24(fp)
  80f150:	0085c83a 	sub	r2,zero,r2
  80f154:	18800015 	stw	r2,0(r3)
    return -1;
  80f158:	00bfffc4 	movi	r2,-1
  80f15c:	00000106 	br	80f164 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80f160:	e0bff917 	ldw	r2,-28(fp)
}
  80f164:	e037883a 	mov	sp,fp
  80f168:	dfc00117 	ldw	ra,4(sp)
  80f16c:	df000017 	ldw	fp,0(sp)
  80f170:	dec00204 	addi	sp,sp,8
  80f174:	f800283a 	ret

0080f178 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80f178:	defffa04 	addi	sp,sp,-24
  80f17c:	df000515 	stw	fp,20(sp)
  80f180:	df000504 	addi	fp,sp,20
  80f184:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f188:	0005303a 	rdctl	r2,status
  80f18c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f190:	e0fffc17 	ldw	r3,-16(fp)
  80f194:	00bfff84 	movi	r2,-2
  80f198:	1884703a 	and	r2,r3,r2
  80f19c:	1001703a 	wrctl	status,r2
  
  return context;
  80f1a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80f1a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80f1a8:	e0bfff17 	ldw	r2,-4(fp)
  80f1ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80f1b0:	e0bffd17 	ldw	r2,-12(fp)
  80f1b4:	10800017 	ldw	r2,0(r2)
  80f1b8:	e0fffd17 	ldw	r3,-12(fp)
  80f1bc:	18c00117 	ldw	r3,4(r3)
  80f1c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80f1c4:	e0bffd17 	ldw	r2,-12(fp)
  80f1c8:	10800117 	ldw	r2,4(r2)
  80f1cc:	e0fffd17 	ldw	r3,-12(fp)
  80f1d0:	18c00017 	ldw	r3,0(r3)
  80f1d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80f1d8:	e0bffd17 	ldw	r2,-12(fp)
  80f1dc:	e0fffd17 	ldw	r3,-12(fp)
  80f1e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80f1e4:	e0bffd17 	ldw	r2,-12(fp)
  80f1e8:	e0fffd17 	ldw	r3,-12(fp)
  80f1ec:	10c00015 	stw	r3,0(r2)
  80f1f0:	e0bffb17 	ldw	r2,-20(fp)
  80f1f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f1f8:	e0bffe17 	ldw	r2,-8(fp)
  80f1fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80f200:	0001883a 	nop
  80f204:	e037883a 	mov	sp,fp
  80f208:	df000017 	ldw	fp,0(sp)
  80f20c:	dec00104 	addi	sp,sp,4
  80f210:	f800283a 	ret

0080f214 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80f214:	defffb04 	addi	sp,sp,-20
  80f218:	dfc00415 	stw	ra,16(sp)
  80f21c:	df000315 	stw	fp,12(sp)
  80f220:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80f224:	d0a00d17 	ldw	r2,-32716(gp)
  80f228:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80f22c:	d0a6b517 	ldw	r2,-25900(gp)
  80f230:	10800044 	addi	r2,r2,1
  80f234:	d0a6b515 	stw	r2,-25900(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80f238:	00002e06 	br	80f2f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80f23c:	e0bffd17 	ldw	r2,-12(fp)
  80f240:	10800017 	ldw	r2,0(r2)
  80f244:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80f248:	e0bffd17 	ldw	r2,-12(fp)
  80f24c:	10800403 	ldbu	r2,16(r2)
  80f250:	10803fcc 	andi	r2,r2,255
  80f254:	10000426 	beq	r2,zero,80f268 <alt_tick+0x54>
  80f258:	d0a6b517 	ldw	r2,-25900(gp)
  80f25c:	1000021e 	bne	r2,zero,80f268 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80f260:	e0bffd17 	ldw	r2,-12(fp)
  80f264:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80f268:	e0bffd17 	ldw	r2,-12(fp)
  80f26c:	10800217 	ldw	r2,8(r2)
  80f270:	d0e6b517 	ldw	r3,-25900(gp)
  80f274:	18801d36 	bltu	r3,r2,80f2ec <alt_tick+0xd8>
  80f278:	e0bffd17 	ldw	r2,-12(fp)
  80f27c:	10800403 	ldbu	r2,16(r2)
  80f280:	10803fcc 	andi	r2,r2,255
  80f284:	1000191e 	bne	r2,zero,80f2ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80f288:	e0bffd17 	ldw	r2,-12(fp)
  80f28c:	10800317 	ldw	r2,12(r2)
  80f290:	e0fffd17 	ldw	r3,-12(fp)
  80f294:	18c00517 	ldw	r3,20(r3)
  80f298:	1809883a 	mov	r4,r3
  80f29c:	103ee83a 	callr	r2
  80f2a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80f2a4:	e0bfff17 	ldw	r2,-4(fp)
  80f2a8:	1000031e 	bne	r2,zero,80f2b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80f2ac:	e13ffd17 	ldw	r4,-12(fp)
  80f2b0:	080f1780 	call	80f178 <alt_alarm_stop>
  80f2b4:	00000d06 	br	80f2ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80f2b8:	e0bffd17 	ldw	r2,-12(fp)
  80f2bc:	10c00217 	ldw	r3,8(r2)
  80f2c0:	e0bfff17 	ldw	r2,-4(fp)
  80f2c4:	1887883a 	add	r3,r3,r2
  80f2c8:	e0bffd17 	ldw	r2,-12(fp)
  80f2cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80f2d0:	e0bffd17 	ldw	r2,-12(fp)
  80f2d4:	10c00217 	ldw	r3,8(r2)
  80f2d8:	d0a6b517 	ldw	r2,-25900(gp)
  80f2dc:	1880032e 	bgeu	r3,r2,80f2ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80f2e0:	e0bffd17 	ldw	r2,-12(fp)
  80f2e4:	00c00044 	movi	r3,1
  80f2e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80f2ec:	e0bffe17 	ldw	r2,-8(fp)
  80f2f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80f2f4:	e0fffd17 	ldw	r3,-12(fp)
  80f2f8:	d0a00d04 	addi	r2,gp,-32716
  80f2fc:	18bfcf1e 	bne	r3,r2,80f23c <__alt_data_end+0xff80f23c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80f300:	0001883a 	nop
}
  80f304:	0001883a 	nop
  80f308:	e037883a 	mov	sp,fp
  80f30c:	dfc00117 	ldw	ra,4(sp)
  80f310:	df000017 	ldw	fp,0(sp)
  80f314:	dec00204 	addi	sp,sp,8
  80f318:	f800283a 	ret

0080f31c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80f31c:	deffff04 	addi	sp,sp,-4
  80f320:	df000015 	stw	fp,0(sp)
  80f324:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80f328:	000170fa 	wrctl	ienable,zero
}
  80f32c:	0001883a 	nop
  80f330:	e037883a 	mov	sp,fp
  80f334:	df000017 	ldw	fp,0(sp)
  80f338:	dec00104 	addi	sp,sp,4
  80f33c:	f800283a 	ret

0080f340 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80f340:	defffa04 	addi	sp,sp,-24
  80f344:	dfc00515 	stw	ra,20(sp)
  80f348:	df000415 	stw	fp,16(sp)
  80f34c:	df000404 	addi	fp,sp,16
  80f350:	e13ffe15 	stw	r4,-8(fp)
  80f354:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80f358:	e0bfff17 	ldw	r2,-4(fp)
  80f35c:	10800017 	ldw	r2,0(r2)
  80f360:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80f364:	e13ffe17 	ldw	r4,-8(fp)
  80f368:	08070680 	call	807068 <strlen>
  80f36c:	10800044 	addi	r2,r2,1
  80f370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f374:	00000d06 	br	80f3ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80f378:	e0bffc17 	ldw	r2,-16(fp)
  80f37c:	10800217 	ldw	r2,8(r2)
  80f380:	e0fffd17 	ldw	r3,-12(fp)
  80f384:	180d883a 	mov	r6,r3
  80f388:	e17ffe17 	ldw	r5,-8(fp)
  80f38c:	1009883a 	mov	r4,r2
  80f390:	080f7a80 	call	80f7a8 <memcmp>
  80f394:	1000021e 	bne	r2,zero,80f3a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80f398:	e0bffc17 	ldw	r2,-16(fp)
  80f39c:	00000706 	br	80f3bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80f3a0:	e0bffc17 	ldw	r2,-16(fp)
  80f3a4:	10800017 	ldw	r2,0(r2)
  80f3a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f3ac:	e0fffc17 	ldw	r3,-16(fp)
  80f3b0:	e0bfff17 	ldw	r2,-4(fp)
  80f3b4:	18bff01e 	bne	r3,r2,80f378 <__alt_data_end+0xff80f378>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80f3b8:	0005883a 	mov	r2,zero
}
  80f3bc:	e037883a 	mov	sp,fp
  80f3c0:	dfc00117 	ldw	ra,4(sp)
  80f3c4:	df000017 	ldw	fp,0(sp)
  80f3c8:	dec00204 	addi	sp,sp,8
  80f3cc:	f800283a 	ret

0080f3d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80f3d0:	defffb04 	addi	sp,sp,-20
  80f3d4:	dfc00415 	stw	ra,16(sp)
  80f3d8:	df000315 	stw	fp,12(sp)
  80f3dc:	df000304 	addi	fp,sp,12
  80f3e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80f3e4:	d0a00517 	ldw	r2,-32748(gp)
  80f3e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f3ec:	00003106 	br	80f4b4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80f3f0:	e0bffd17 	ldw	r2,-12(fp)
  80f3f4:	10800217 	ldw	r2,8(r2)
  80f3f8:	1009883a 	mov	r4,r2
  80f3fc:	08070680 	call	807068 <strlen>
  80f400:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80f404:	e0bffd17 	ldw	r2,-12(fp)
  80f408:	10c00217 	ldw	r3,8(r2)
  80f40c:	e0bffe17 	ldw	r2,-8(fp)
  80f410:	10bfffc4 	addi	r2,r2,-1
  80f414:	1885883a 	add	r2,r3,r2
  80f418:	10800003 	ldbu	r2,0(r2)
  80f41c:	10803fcc 	andi	r2,r2,255
  80f420:	1080201c 	xori	r2,r2,128
  80f424:	10bfe004 	addi	r2,r2,-128
  80f428:	10800bd8 	cmpnei	r2,r2,47
  80f42c:	1000031e 	bne	r2,zero,80f43c <alt_find_file+0x6c>
    {
      len -= 1;
  80f430:	e0bffe17 	ldw	r2,-8(fp)
  80f434:	10bfffc4 	addi	r2,r2,-1
  80f438:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80f43c:	e0bffe17 	ldw	r2,-8(fp)
  80f440:	e0ffff17 	ldw	r3,-4(fp)
  80f444:	1885883a 	add	r2,r3,r2
  80f448:	10800003 	ldbu	r2,0(r2)
  80f44c:	10803fcc 	andi	r2,r2,255
  80f450:	1080201c 	xori	r2,r2,128
  80f454:	10bfe004 	addi	r2,r2,-128
  80f458:	10800be0 	cmpeqi	r2,r2,47
  80f45c:	1000081e 	bne	r2,zero,80f480 <alt_find_file+0xb0>
  80f460:	e0bffe17 	ldw	r2,-8(fp)
  80f464:	e0ffff17 	ldw	r3,-4(fp)
  80f468:	1885883a 	add	r2,r3,r2
  80f46c:	10800003 	ldbu	r2,0(r2)
  80f470:	10803fcc 	andi	r2,r2,255
  80f474:	1080201c 	xori	r2,r2,128
  80f478:	10bfe004 	addi	r2,r2,-128
  80f47c:	10000a1e 	bne	r2,zero,80f4a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80f480:	e0bffd17 	ldw	r2,-12(fp)
  80f484:	10800217 	ldw	r2,8(r2)
  80f488:	e0fffe17 	ldw	r3,-8(fp)
  80f48c:	180d883a 	mov	r6,r3
  80f490:	e17fff17 	ldw	r5,-4(fp)
  80f494:	1009883a 	mov	r4,r2
  80f498:	080f7a80 	call	80f7a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80f49c:	1000021e 	bne	r2,zero,80f4a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80f4a0:	e0bffd17 	ldw	r2,-12(fp)
  80f4a4:	00000706 	br	80f4c4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80f4a8:	e0bffd17 	ldw	r2,-12(fp)
  80f4ac:	10800017 	ldw	r2,0(r2)
  80f4b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f4b4:	e0fffd17 	ldw	r3,-12(fp)
  80f4b8:	d0a00504 	addi	r2,gp,-32748
  80f4bc:	18bfcc1e 	bne	r3,r2,80f3f0 <__alt_data_end+0xff80f3f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80f4c0:	0005883a 	mov	r2,zero
}
  80f4c4:	e037883a 	mov	sp,fp
  80f4c8:	dfc00117 	ldw	ra,4(sp)
  80f4cc:	df000017 	ldw	fp,0(sp)
  80f4d0:	dec00204 	addi	sp,sp,8
  80f4d4:	f800283a 	ret

0080f4d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80f4d8:	defffc04 	addi	sp,sp,-16
  80f4dc:	df000315 	stw	fp,12(sp)
  80f4e0:	df000304 	addi	fp,sp,12
  80f4e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80f4e8:	00bffa04 	movi	r2,-24
  80f4ec:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f4f0:	e03ffd15 	stw	zero,-12(fp)
  80f4f4:	00001906 	br	80f55c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80f4f8:	00802074 	movhi	r2,129
  80f4fc:	1081f904 	addi	r2,r2,2020
  80f500:	e0fffd17 	ldw	r3,-12(fp)
  80f504:	18c00324 	muli	r3,r3,12
  80f508:	10c5883a 	add	r2,r2,r3
  80f50c:	10800017 	ldw	r2,0(r2)
  80f510:	10000f1e 	bne	r2,zero,80f550 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80f514:	00802074 	movhi	r2,129
  80f518:	1081f904 	addi	r2,r2,2020
  80f51c:	e0fffd17 	ldw	r3,-12(fp)
  80f520:	18c00324 	muli	r3,r3,12
  80f524:	10c5883a 	add	r2,r2,r3
  80f528:	e0ffff17 	ldw	r3,-4(fp)
  80f52c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80f530:	d0e00917 	ldw	r3,-32732(gp)
  80f534:	e0bffd17 	ldw	r2,-12(fp)
  80f538:	1880020e 	bge	r3,r2,80f544 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80f53c:	e0bffd17 	ldw	r2,-12(fp)
  80f540:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
  80f544:	e0bffd17 	ldw	r2,-12(fp)
  80f548:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80f54c:	00000606 	br	80f568 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f550:	e0bffd17 	ldw	r2,-12(fp)
  80f554:	10800044 	addi	r2,r2,1
  80f558:	e0bffd15 	stw	r2,-12(fp)
  80f55c:	e0bffd17 	ldw	r2,-12(fp)
  80f560:	10800810 	cmplti	r2,r2,32
  80f564:	103fe41e 	bne	r2,zero,80f4f8 <__alt_data_end+0xff80f4f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80f568:	e0bffe17 	ldw	r2,-8(fp)
}
  80f56c:	e037883a 	mov	sp,fp
  80f570:	df000017 	ldw	fp,0(sp)
  80f574:	dec00104 	addi	sp,sp,4
  80f578:	f800283a 	ret

0080f57c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80f57c:	defffb04 	addi	sp,sp,-20
  80f580:	df000415 	stw	fp,16(sp)
  80f584:	df000404 	addi	fp,sp,16
  80f588:	e13ffe15 	stw	r4,-8(fp)
  80f58c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80f590:	e0bfff17 	ldw	r2,-4(fp)
  80f594:	10840070 	cmpltui	r2,r2,4097
  80f598:	1000021e 	bne	r2,zero,80f5a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80f59c:	00840004 	movi	r2,4096
  80f5a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80f5a4:	e0fffe17 	ldw	r3,-8(fp)
  80f5a8:	e0bfff17 	ldw	r2,-4(fp)
  80f5ac:	1885883a 	add	r2,r3,r2
  80f5b0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f5b4:	e0bffe17 	ldw	r2,-8(fp)
  80f5b8:	e0bffc15 	stw	r2,-16(fp)
  80f5bc:	00000506 	br	80f5d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80f5c0:	e0bffc17 	ldw	r2,-16(fp)
  80f5c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f5c8:	e0bffc17 	ldw	r2,-16(fp)
  80f5cc:	10800804 	addi	r2,r2,32
  80f5d0:	e0bffc15 	stw	r2,-16(fp)
  80f5d4:	e0fffc17 	ldw	r3,-16(fp)
  80f5d8:	e0bffd17 	ldw	r2,-12(fp)
  80f5dc:	18bff836 	bltu	r3,r2,80f5c0 <__alt_data_end+0xff80f5c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80f5e0:	e0bffe17 	ldw	r2,-8(fp)
  80f5e4:	108007cc 	andi	r2,r2,31
  80f5e8:	10000226 	beq	r2,zero,80f5f4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80f5ec:	e0bffc17 	ldw	r2,-16(fp)
  80f5f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80f5f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80f5f8:	0001883a 	nop
  80f5fc:	e037883a 	mov	sp,fp
  80f600:	df000017 	ldw	fp,0(sp)
  80f604:	dec00104 	addi	sp,sp,4
  80f608:	f800283a 	ret

0080f60c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80f60c:	defffe04 	addi	sp,sp,-8
  80f610:	df000115 	stw	fp,4(sp)
  80f614:	df000104 	addi	fp,sp,4
  80f618:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80f61c:	e0bfff17 	ldw	r2,-4(fp)
  80f620:	10bffe84 	addi	r2,r2,-6
  80f624:	10c00428 	cmpgeui	r3,r2,16
  80f628:	18001a1e 	bne	r3,zero,80f694 <alt_exception_cause_generated_bad_addr+0x88>
  80f62c:	100690ba 	slli	r3,r2,2
  80f630:	00802074 	movhi	r2,129
  80f634:	10bd9104 	addi	r2,r2,-2492
  80f638:	1885883a 	add	r2,r3,r2
  80f63c:	10800017 	ldw	r2,0(r2)
  80f640:	1000683a 	jmp	r2
  80f644:	0080f684 	movi	r2,986
  80f648:	0080f684 	movi	r2,986
  80f64c:	0080f694 	movui	r2,986
  80f650:	0080f694 	movui	r2,986
  80f654:	0080f694 	movui	r2,986
  80f658:	0080f684 	movi	r2,986
  80f65c:	0080f68c 	andi	r2,zero,986
  80f660:	0080f694 	movui	r2,986
  80f664:	0080f684 	movi	r2,986
  80f668:	0080f684 	movi	r2,986
  80f66c:	0080f694 	movui	r2,986
  80f670:	0080f684 	movi	r2,986
  80f674:	0080f68c 	andi	r2,zero,986
  80f678:	0080f694 	movui	r2,986
  80f67c:	0080f694 	movui	r2,986
  80f680:	0080f684 	movi	r2,986
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80f684:	00800044 	movi	r2,1
  80f688:	00000306 	br	80f698 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80f68c:	0005883a 	mov	r2,zero
  80f690:	00000106 	br	80f698 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80f694:	0005883a 	mov	r2,zero
  }
}
  80f698:	e037883a 	mov	sp,fp
  80f69c:	df000017 	ldw	fp,0(sp)
  80f6a0:	dec00104 	addi	sp,sp,4
  80f6a4:	f800283a 	ret

0080f6a8 <atexit>:
  80f6a8:	200b883a 	mov	r5,r4
  80f6ac:	000f883a 	mov	r7,zero
  80f6b0:	000d883a 	mov	r6,zero
  80f6b4:	0009883a 	mov	r4,zero
  80f6b8:	080f8241 	jmpi	80f824 <__register_exitproc>

0080f6bc <exit>:
  80f6bc:	defffe04 	addi	sp,sp,-8
  80f6c0:	000b883a 	mov	r5,zero
  80f6c4:	dc000015 	stw	r16,0(sp)
  80f6c8:	dfc00115 	stw	ra,4(sp)
  80f6cc:	2021883a 	mov	r16,r4
  80f6d0:	080f93c0 	call	80f93c <__call_exitprocs>
  80f6d4:	00802074 	movhi	r2,129
  80f6d8:	10867204 	addi	r2,r2,6600
  80f6dc:	11000017 	ldw	r4,0(r2)
  80f6e0:	20800f17 	ldw	r2,60(r4)
  80f6e4:	10000126 	beq	r2,zero,80f6ec <exit+0x30>
  80f6e8:	103ee83a 	callr	r2
  80f6ec:	8009883a 	mov	r4,r16
  80f6f0:	080fabc0 	call	80fabc <_exit>

0080f6f4 <_fputs_r>:
  80f6f4:	defff804 	addi	sp,sp,-32
  80f6f8:	dc400615 	stw	r17,24(sp)
  80f6fc:	2023883a 	mov	r17,r4
  80f700:	2809883a 	mov	r4,r5
  80f704:	dc000515 	stw	r16,20(sp)
  80f708:	dfc00715 	stw	ra,28(sp)
  80f70c:	3021883a 	mov	r16,r6
  80f710:	d9400315 	stw	r5,12(sp)
  80f714:	08070680 	call	807068 <strlen>
  80f718:	d8800215 	stw	r2,8(sp)
  80f71c:	d8800415 	stw	r2,16(sp)
  80f720:	d8800304 	addi	r2,sp,12
  80f724:	d8800015 	stw	r2,0(sp)
  80f728:	00800044 	movi	r2,1
  80f72c:	d8800115 	stw	r2,4(sp)
  80f730:	88000226 	beq	r17,zero,80f73c <_fputs_r+0x48>
  80f734:	88800e17 	ldw	r2,56(r17)
  80f738:	10001226 	beq	r2,zero,80f784 <_fputs_r+0x90>
  80f73c:	8080030b 	ldhu	r2,12(r16)
  80f740:	10c8000c 	andi	r3,r2,8192
  80f744:	1800061e 	bne	r3,zero,80f760 <_fputs_r+0x6c>
  80f748:	81001917 	ldw	r4,100(r16)
  80f74c:	00f7ffc4 	movi	r3,-8193
  80f750:	10880014 	ori	r2,r2,8192
  80f754:	20c6703a 	and	r3,r4,r3
  80f758:	8080030d 	sth	r2,12(r16)
  80f75c:	80c01915 	stw	r3,100(r16)
  80f760:	d80d883a 	mov	r6,sp
  80f764:	800b883a 	mov	r5,r16
  80f768:	8809883a 	mov	r4,r17
  80f76c:	0807fc80 	call	807fc8 <__sfvwrite_r>
  80f770:	dfc00717 	ldw	ra,28(sp)
  80f774:	dc400617 	ldw	r17,24(sp)
  80f778:	dc000517 	ldw	r16,20(sp)
  80f77c:	dec00804 	addi	sp,sp,32
  80f780:	f800283a 	ret
  80f784:	8809883a 	mov	r4,r17
  80f788:	0807f780 	call	807f78 <__sinit>
  80f78c:	003feb06 	br	80f73c <__alt_data_end+0xff80f73c>

0080f790 <fputs>:
  80f790:	00802074 	movhi	r2,129
  80f794:	10867304 	addi	r2,r2,6604
  80f798:	280d883a 	mov	r6,r5
  80f79c:	200b883a 	mov	r5,r4
  80f7a0:	11000017 	ldw	r4,0(r2)
  80f7a4:	080f6f41 	jmpi	80f6f4 <_fputs_r>

0080f7a8 <memcmp>:
  80f7a8:	01c000c4 	movi	r7,3
  80f7ac:	3980192e 	bgeu	r7,r6,80f814 <memcmp+0x6c>
  80f7b0:	2144b03a 	or	r2,r4,r5
  80f7b4:	11c4703a 	and	r2,r2,r7
  80f7b8:	10000f26 	beq	r2,zero,80f7f8 <memcmp+0x50>
  80f7bc:	20800003 	ldbu	r2,0(r4)
  80f7c0:	28c00003 	ldbu	r3,0(r5)
  80f7c4:	10c0151e 	bne	r2,r3,80f81c <memcmp+0x74>
  80f7c8:	31bfff84 	addi	r6,r6,-2
  80f7cc:	01ffffc4 	movi	r7,-1
  80f7d0:	00000406 	br	80f7e4 <memcmp+0x3c>
  80f7d4:	20800003 	ldbu	r2,0(r4)
  80f7d8:	28c00003 	ldbu	r3,0(r5)
  80f7dc:	31bfffc4 	addi	r6,r6,-1
  80f7e0:	10c00e1e 	bne	r2,r3,80f81c <memcmp+0x74>
  80f7e4:	21000044 	addi	r4,r4,1
  80f7e8:	29400044 	addi	r5,r5,1
  80f7ec:	31fff91e 	bne	r6,r7,80f7d4 <__alt_data_end+0xff80f7d4>
  80f7f0:	0005883a 	mov	r2,zero
  80f7f4:	f800283a 	ret
  80f7f8:	20c00017 	ldw	r3,0(r4)
  80f7fc:	28800017 	ldw	r2,0(r5)
  80f800:	18bfee1e 	bne	r3,r2,80f7bc <__alt_data_end+0xff80f7bc>
  80f804:	31bfff04 	addi	r6,r6,-4
  80f808:	21000104 	addi	r4,r4,4
  80f80c:	29400104 	addi	r5,r5,4
  80f810:	39bff936 	bltu	r7,r6,80f7f8 <__alt_data_end+0xff80f7f8>
  80f814:	303fe91e 	bne	r6,zero,80f7bc <__alt_data_end+0xff80f7bc>
  80f818:	003ff506 	br	80f7f0 <__alt_data_end+0xff80f7f0>
  80f81c:	10c5c83a 	sub	r2,r2,r3
  80f820:	f800283a 	ret

0080f824 <__register_exitproc>:
  80f824:	defffa04 	addi	sp,sp,-24
  80f828:	dc000315 	stw	r16,12(sp)
  80f82c:	04002074 	movhi	r16,129
  80f830:	84067204 	addi	r16,r16,6600
  80f834:	80c00017 	ldw	r3,0(r16)
  80f838:	dc400415 	stw	r17,16(sp)
  80f83c:	dfc00515 	stw	ra,20(sp)
  80f840:	18805217 	ldw	r2,328(r3)
  80f844:	2023883a 	mov	r17,r4
  80f848:	10003726 	beq	r2,zero,80f928 <__register_exitproc+0x104>
  80f84c:	10c00117 	ldw	r3,4(r2)
  80f850:	010007c4 	movi	r4,31
  80f854:	20c00e16 	blt	r4,r3,80f890 <__register_exitproc+0x6c>
  80f858:	1a000044 	addi	r8,r3,1
  80f85c:	8800221e 	bne	r17,zero,80f8e8 <__register_exitproc+0xc4>
  80f860:	18c00084 	addi	r3,r3,2
  80f864:	18c7883a 	add	r3,r3,r3
  80f868:	18c7883a 	add	r3,r3,r3
  80f86c:	12000115 	stw	r8,4(r2)
  80f870:	10c7883a 	add	r3,r2,r3
  80f874:	19400015 	stw	r5,0(r3)
  80f878:	0005883a 	mov	r2,zero
  80f87c:	dfc00517 	ldw	ra,20(sp)
  80f880:	dc400417 	ldw	r17,16(sp)
  80f884:	dc000317 	ldw	r16,12(sp)
  80f888:	dec00604 	addi	sp,sp,24
  80f88c:	f800283a 	ret
  80f890:	00800034 	movhi	r2,0
  80f894:	10800004 	addi	r2,r2,0
  80f898:	10002626 	beq	r2,zero,80f934 <__register_exitproc+0x110>
  80f89c:	01006404 	movi	r4,400
  80f8a0:	d9400015 	stw	r5,0(sp)
  80f8a4:	d9800115 	stw	r6,4(sp)
  80f8a8:	d9c00215 	stw	r7,8(sp)
  80f8ac:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80f8b0:	d9400017 	ldw	r5,0(sp)
  80f8b4:	d9800117 	ldw	r6,4(sp)
  80f8b8:	d9c00217 	ldw	r7,8(sp)
  80f8bc:	10001d26 	beq	r2,zero,80f934 <__register_exitproc+0x110>
  80f8c0:	81000017 	ldw	r4,0(r16)
  80f8c4:	10000115 	stw	zero,4(r2)
  80f8c8:	02000044 	movi	r8,1
  80f8cc:	22405217 	ldw	r9,328(r4)
  80f8d0:	0007883a 	mov	r3,zero
  80f8d4:	12400015 	stw	r9,0(r2)
  80f8d8:	20805215 	stw	r2,328(r4)
  80f8dc:	10006215 	stw	zero,392(r2)
  80f8e0:	10006315 	stw	zero,396(r2)
  80f8e4:	883fde26 	beq	r17,zero,80f860 <__alt_data_end+0xff80f860>
  80f8e8:	18c9883a 	add	r4,r3,r3
  80f8ec:	2109883a 	add	r4,r4,r4
  80f8f0:	1109883a 	add	r4,r2,r4
  80f8f4:	21802215 	stw	r6,136(r4)
  80f8f8:	01800044 	movi	r6,1
  80f8fc:	12406217 	ldw	r9,392(r2)
  80f900:	30cc983a 	sll	r6,r6,r3
  80f904:	4992b03a 	or	r9,r9,r6
  80f908:	12406215 	stw	r9,392(r2)
  80f90c:	21c04215 	stw	r7,264(r4)
  80f910:	01000084 	movi	r4,2
  80f914:	893fd21e 	bne	r17,r4,80f860 <__alt_data_end+0xff80f860>
  80f918:	11006317 	ldw	r4,396(r2)
  80f91c:	218cb03a 	or	r6,r4,r6
  80f920:	11806315 	stw	r6,396(r2)
  80f924:	003fce06 	br	80f860 <__alt_data_end+0xff80f860>
  80f928:	18805304 	addi	r2,r3,332
  80f92c:	18805215 	stw	r2,328(r3)
  80f930:	003fc606 	br	80f84c <__alt_data_end+0xff80f84c>
  80f934:	00bfffc4 	movi	r2,-1
  80f938:	003fd006 	br	80f87c <__alt_data_end+0xff80f87c>

0080f93c <__call_exitprocs>:
  80f93c:	defff504 	addi	sp,sp,-44
  80f940:	df000915 	stw	fp,36(sp)
  80f944:	dd400615 	stw	r21,24(sp)
  80f948:	dc800315 	stw	r18,12(sp)
  80f94c:	dfc00a15 	stw	ra,40(sp)
  80f950:	ddc00815 	stw	r23,32(sp)
  80f954:	dd800715 	stw	r22,28(sp)
  80f958:	dd000515 	stw	r20,20(sp)
  80f95c:	dcc00415 	stw	r19,16(sp)
  80f960:	dc400215 	stw	r17,8(sp)
  80f964:	dc000115 	stw	r16,4(sp)
  80f968:	d9000015 	stw	r4,0(sp)
  80f96c:	2839883a 	mov	fp,r5
  80f970:	04800044 	movi	r18,1
  80f974:	057fffc4 	movi	r21,-1
  80f978:	00802074 	movhi	r2,129
  80f97c:	10867204 	addi	r2,r2,6600
  80f980:	12000017 	ldw	r8,0(r2)
  80f984:	45005217 	ldw	r20,328(r8)
  80f988:	44c05204 	addi	r19,r8,328
  80f98c:	a0001c26 	beq	r20,zero,80fa00 <__call_exitprocs+0xc4>
  80f990:	a0800117 	ldw	r2,4(r20)
  80f994:	15ffffc4 	addi	r23,r2,-1
  80f998:	b8000d16 	blt	r23,zero,80f9d0 <__call_exitprocs+0x94>
  80f99c:	14000044 	addi	r16,r2,1
  80f9a0:	8421883a 	add	r16,r16,r16
  80f9a4:	8421883a 	add	r16,r16,r16
  80f9a8:	84402004 	addi	r17,r16,128
  80f9ac:	a463883a 	add	r17,r20,r17
  80f9b0:	a421883a 	add	r16,r20,r16
  80f9b4:	e0001e26 	beq	fp,zero,80fa30 <__call_exitprocs+0xf4>
  80f9b8:	80804017 	ldw	r2,256(r16)
  80f9bc:	e0801c26 	beq	fp,r2,80fa30 <__call_exitprocs+0xf4>
  80f9c0:	bdffffc4 	addi	r23,r23,-1
  80f9c4:	843fff04 	addi	r16,r16,-4
  80f9c8:	8c7fff04 	addi	r17,r17,-4
  80f9cc:	bd7ff91e 	bne	r23,r21,80f9b4 <__alt_data_end+0xff80f9b4>
  80f9d0:	00800034 	movhi	r2,0
  80f9d4:	10800004 	addi	r2,r2,0
  80f9d8:	10000926 	beq	r2,zero,80fa00 <__call_exitprocs+0xc4>
  80f9dc:	a0800117 	ldw	r2,4(r20)
  80f9e0:	1000301e 	bne	r2,zero,80faa4 <__call_exitprocs+0x168>
  80f9e4:	a0800017 	ldw	r2,0(r20)
  80f9e8:	10003226 	beq	r2,zero,80fab4 <__call_exitprocs+0x178>
  80f9ec:	a009883a 	mov	r4,r20
  80f9f0:	98800015 	stw	r2,0(r19)
  80f9f4:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80f9f8:	9d000017 	ldw	r20,0(r19)
  80f9fc:	a03fe41e 	bne	r20,zero,80f990 <__alt_data_end+0xff80f990>
  80fa00:	dfc00a17 	ldw	ra,40(sp)
  80fa04:	df000917 	ldw	fp,36(sp)
  80fa08:	ddc00817 	ldw	r23,32(sp)
  80fa0c:	dd800717 	ldw	r22,28(sp)
  80fa10:	dd400617 	ldw	r21,24(sp)
  80fa14:	dd000517 	ldw	r20,20(sp)
  80fa18:	dcc00417 	ldw	r19,16(sp)
  80fa1c:	dc800317 	ldw	r18,12(sp)
  80fa20:	dc400217 	ldw	r17,8(sp)
  80fa24:	dc000117 	ldw	r16,4(sp)
  80fa28:	dec00b04 	addi	sp,sp,44
  80fa2c:	f800283a 	ret
  80fa30:	a0800117 	ldw	r2,4(r20)
  80fa34:	80c00017 	ldw	r3,0(r16)
  80fa38:	10bfffc4 	addi	r2,r2,-1
  80fa3c:	15c01426 	beq	r2,r23,80fa90 <__call_exitprocs+0x154>
  80fa40:	80000015 	stw	zero,0(r16)
  80fa44:	183fde26 	beq	r3,zero,80f9c0 <__alt_data_end+0xff80f9c0>
  80fa48:	95c8983a 	sll	r4,r18,r23
  80fa4c:	a0806217 	ldw	r2,392(r20)
  80fa50:	a5800117 	ldw	r22,4(r20)
  80fa54:	2084703a 	and	r2,r4,r2
  80fa58:	10000b26 	beq	r2,zero,80fa88 <__call_exitprocs+0x14c>
  80fa5c:	a0806317 	ldw	r2,396(r20)
  80fa60:	2088703a 	and	r4,r4,r2
  80fa64:	20000c1e 	bne	r4,zero,80fa98 <__call_exitprocs+0x15c>
  80fa68:	89400017 	ldw	r5,0(r17)
  80fa6c:	d9000017 	ldw	r4,0(sp)
  80fa70:	183ee83a 	callr	r3
  80fa74:	a0800117 	ldw	r2,4(r20)
  80fa78:	15bfbf1e 	bne	r2,r22,80f978 <__alt_data_end+0xff80f978>
  80fa7c:	98800017 	ldw	r2,0(r19)
  80fa80:	153fcf26 	beq	r2,r20,80f9c0 <__alt_data_end+0xff80f9c0>
  80fa84:	003fbc06 	br	80f978 <__alt_data_end+0xff80f978>
  80fa88:	183ee83a 	callr	r3
  80fa8c:	003ff906 	br	80fa74 <__alt_data_end+0xff80fa74>
  80fa90:	a5c00115 	stw	r23,4(r20)
  80fa94:	003feb06 	br	80fa44 <__alt_data_end+0xff80fa44>
  80fa98:	89000017 	ldw	r4,0(r17)
  80fa9c:	183ee83a 	callr	r3
  80faa0:	003ff406 	br	80fa74 <__alt_data_end+0xff80fa74>
  80faa4:	a0800017 	ldw	r2,0(r20)
  80faa8:	a027883a 	mov	r19,r20
  80faac:	1029883a 	mov	r20,r2
  80fab0:	003fb606 	br	80f98c <__alt_data_end+0xff80f98c>
  80fab4:	0005883a 	mov	r2,zero
  80fab8:	003ffb06 	br	80faa8 <__alt_data_end+0xff80faa8>

0080fabc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80fabc:	defffd04 	addi	sp,sp,-12
  80fac0:	df000215 	stw	fp,8(sp)
  80fac4:	df000204 	addi	fp,sp,8
  80fac8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80facc:	0001883a 	nop
  80fad0:	e0bfff17 	ldw	r2,-4(fp)
  80fad4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80fad8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80fadc:	10000226 	beq	r2,zero,80fae8 <_exit+0x2c>
    ALT_SIM_FAIL();
  80fae0:	002af070 	cmpltui	zero,zero,43969
  80fae4:	00000106 	br	80faec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80fae8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80faec:	003fff06 	br	80faec <__alt_data_end+0xff80faec>
