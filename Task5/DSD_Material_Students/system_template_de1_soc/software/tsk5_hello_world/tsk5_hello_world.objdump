
tsk5_hello_world.elf:     file format elf32-littlenios2
tsk5_hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00005744 memsz 0x00005744 flags r-x
    LOAD off    0x00006764 vaddr 0x00805764 paddr 0x008071d0 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008c3c vaddr 0x00808c3c paddr 0x00808c3c align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000555c  008001c0  008001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  0080571c  0080571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00805764  008071d0  00006764  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00808c3c  00808c3c  00008c3c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00808d8c  00808d8c  000081d0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000081d0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a08  00000000  00000000  000081f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016359  00000000  00000000  00008c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005f63  00000000  00000000  0001ef59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000067f9  00000000  00000000  00024ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001540  00000000  00000000  0002b6b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022cf  00000000  00000000  0002cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002eec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00033914  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000668  00000000  00000000  00033948  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000364ae  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000364b1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000364b4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000364b5  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000364b6  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000364ba  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000364be  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000364c2  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000364cb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000364d4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  000364dd  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000043  00000000  00000000  000364ef  2**0
                  CONTENTS, READONLY
 29 .jdi          00004f66  00000000  00000000  00036532  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00037560  00000000  00000000  0003b498  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001c0 l    d  .text	00000000 .text
0080571c l    d  .rodata	00000000 .rodata
00805764 l    d  .rwdata	00000000 .rwdata
00808c3c l    d  .bss	00000000 .bss
00808d8c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tsk5_hello_world_bsp//obj/HAL/src/crt0.o
00800208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00800094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
008003ac l     F .text	00000008 __fp_unlock
008003c0 l     F .text	0000019c __sinit.part.1
0080055c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00805764 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00803008 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00803114 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00803140 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080322c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080330c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008033f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
008035cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008071c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00803818 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080394c l     F .text	00000034 alt_dev_reg
00806138 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00803c40 l     F .text	0000020c altera_avalon_jtag_uart_irq
00803e4c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00804484 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008046ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00804b60 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00804ca0 l     F .text	0000003c alt_get_errno
00804cdc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00802e00 g     F .text	00000054 _isatty_r
00803508 g     F .text	0000007c alt_main
00800240 g     F .text	000000c0 _puts_r
00808c8c g     O .bss	00000100 alt_irq
00802b28 g     F .text	00000060 _lseek_r
008071d0 g       *ABS*	00000000 __flash_rwdata_start
00808d8c g       *ABS*	00000000 __alt_heap_start
008020dc g     F .text	0000005c __sseek
008006fc g     F .text	00000010 __sinit
00800564 g     F .text	00000068 __sfmoreglue
008035a8 g     F .text	00000024 __malloc_unlock
008017c8 g     F .text	0000015c memmove
008006e4 g     F .text	00000018 _cleanup
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802da4 g     F .text	0000005c _fstat_r
00808c48 g     O .bss	00000004 errno
00802058 g     F .text	00000008 __seofread
00808c50 g     O .bss	00000004 alt_argv
0080f198 g       *ABS*	00000000 _gp
00805fb8 g     O .rwdata	00000180 alt_fd_list
008050bc g     F .text	00000090 alt_find_dev
00801680 g     F .text	00000148 memcpy
008003b4 g     F .text	0000000c _cleanup_r
00804c24 g     F .text	0000007c alt_io_redirect
0080571c g       *ABS*	00000000 __DTOR_END__
00800300 g     F .text	00000014 puts
00804044 g     F .text	0000021c altera_avalon_jtag_uart_read
00802f4c g     F .text	00000064 .hidden __udivsi3
00803268 g     F .text	000000a4 isatty
008052f8 g     F .text	00000090 alt_icache_flush
00808c44 g     O .bss	00000004 __malloc_top_pad
0080074c g     F .text	000004bc __sfvwrite_r
00801fb0 g     F .text	00000054 _sbrk_r
00802d44 g     F .text	00000060 _read_r
008071b8 g     O .rwdata	00000004 alt_max_fd
00802348 g     F .text	000000f0 _fclose_r
008026c4 g     F .text	00000030 fflush
00808c40 g     O .bss	00000004 __malloc_max_sbrked_mem
00803434 g     F .text	000000d4 lseek
00807198 g     O .rwdata	00000004 _global_impure_ptr
00801a4c g     F .text	00000564 _realloc_r
00808d8c g       *ABS*	00000000 __bss_end
00804a70 g     F .text	000000f0 alt_iic_isr_register
00804f90 g     F .text	00000108 alt_tick
0080071c g     F .text	00000018 __fp_lock_all
00804a24 g     F .text	0000004c alt_ic_irq_enabled
00804ef4 g     F .text	0000009c alt_alarm_stop
00808c58 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000d4 alt_irq_handler
00805f90 g     O .rwdata	00000028 alt_dev_null
008046a4 g     F .text	00000048 alt_dcache_flush_all
008071d0 g       *ABS*	00000000 __ram_rwdata_end
008071b0 g     O .rwdata	00000008 alt_dev_list
00803854 g     F .text	000000f8 write
00805764 g       *ABS*	00000000 __ram_rodata_end
0080317c g     F .text	000000b0 fstat
00802fb0 g     F .text	00000058 .hidden __umodsi3
00808d8c g       *ABS*	00000000 end
00803b80 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080571c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008044fc g     F .text	0000007c alt_avalon_timer_sc_init
00804260 g     F .text	00000224 altera_avalon_jtag_uart_write
0080070c g     F .text	00000004 __sfp_lock_acquire
0080159c g     F .text	000000e4 memchr
00802818 g     F .text	00000310 _free_r
00805568 g     F .text	00000180 __call_exitprocs
008071a0 g     O .rwdata	00000004 __malloc_sbrk_base
008001c0 g     F .text	0000004c _start
00808c5c g     O .bss	00000004 _alt_tick_rate
00808c60 g     O .bss	00000004 _alt_nticks
00803608 g     F .text	000000fc read
008039b8 g     F .text	00000064 alt_sys_init
00805450 g     F .text	00000118 __register_exitproc
00803eec g     F .text	00000068 altera_avalon_jtag_uart_close
00805764 g       *ABS*	00000000 __ram_rwdata_start
0080571c g       *ABS*	00000000 __ram_rodata_start
00808c64 g     O .bss	00000028 __malloc_current_mallinfo
00803a1c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00805254 g     F .text	000000a4 alt_get_fd
008022f4 g     F .text	00000054 _close_r
008053d4 g     F .text	0000007c memcmp
00803adc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00808d8c g       *ABS*	00000000 __alt_stack_base
00803b2c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008021a0 g     F .text	00000154 __swsetup_r
008005cc g     F .text	00000118 __sfp
00805b88 g     O .rwdata	00000408 __malloc_av_
00800718 g     F .text	00000004 __sinit_lock_release
00802004 g     F .text	00000054 __sread
0080514c g     F .text	00000108 alt_find_file
00804728 g     F .text	000000a4 alt_dev_llist_insert
00803584 g     F .text	00000024 __malloc_lock
00803768 g     F .text	000000b0 sbrk
00802668 g     F .text	0000005c _fflush_r
00808c3c g       *ABS*	00000000 __bss_start
00801924 g     F .text	00000128 memset
0080020c g     F .text	00000034 main
00808c54 g     O .bss	00000004 alt_envp
00808c3c g     O .bss	00000004 __malloc_max_total_mem
00803a7c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00802138 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802438 g     F .text	00000014 fclose
00800d90 g     F .text	0000080c _malloc_r
008071bc g     O .rwdata	00000004 alt_errno
00800c08 g     F .text	000000c4 _fwalk
00802e54 g     F .text	00000084 .hidden __divsi3
008026f4 g     F .text	00000124 _malloc_trim_r
0080571c g       *ABS*	00000000 __CTOR_END__
0080571c g       *ABS*	00000000 __flash_rodata_start
0080571c g       *ABS*	00000000 __DTOR_LIST__
00803980 g     F .text	00000038 alt_irq_init
00803704 g     F .text	00000064 alt_release_fd
00805388 g     F .text	00000014 atexit
00802140 g     F .text	00000060 _write_r
0080719c g     O .rwdata	00000004 _impure_ptr
00808c4c g     O .bss	00000004 alt_argc
0080244c g     F .text	0000021c __sflush_r
0080482c g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00800734 g     F .text	00000018 __fp_unlock_all
008071a8 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008048c0 g     F .text	00000050 alt_ic_isr_register
008071d0 g       *ABS*	00000000 _edata
00808d8c g       *ABS*	00000000 _end
008001c0 g       *ABS*	00000000 __ram_exceptions_end
00803f54 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00804998 g     F .text	0000008c alt_ic_irq_disable
00802060 g     F .text	0000007c __swrite
008071a4 g     O .rwdata	00000004 __malloc_trim_threshold
00805098 g     F .text	00000024 altera_nios2_qsys_irq_init
0080539c g     F .text	00000038 exit
00800ccc g     F .text	000000c4 _fwalk_reent
00802ed8 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800710 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
008056e8 g     F .text	00000034 _exit
00804578 g     F .text	0000012c alt_alarm_start
00802b88 g     F .text	000001bc __smakebuf_r
00800314 g     F .text	00000098 strlen
00804da0 g     F .text	00000154 open
0080488c g     F .text	00000034 alt_icache_flush_all
008071c4 g     O .rwdata	00000004 alt_priority_mask
00804910 g     F .text	00000088 alt_ic_irq_enable
008071c8 g     O .rwdata	00000008 alt_alarm_list
008047cc g     F .text	00000060 _do_ctors
00803044 g     F .text	000000d0 close
00803374 g     F .text	00000084 alt_load
00800714 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08407014 	ori	at,at,448
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)

00800094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  8000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800100:	0005313a 	rdctl	r2,ipending
  800104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800114:	00800044 	movi	r2,1
  800118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	e0fffb17 	ldw	r3,-20(fp)
  800120:	e0bffc17 	ldw	r2,-16(fp)
  800124:	1884703a 	and	r2,r3,r2
  800128:	10001426 	beq	r2,zero,80017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	00802074 	movhi	r2,129
  800130:	10a32304 	addi	r2,r2,-29556
  800134:	e0fffd17 	ldw	r3,-12(fp)
  800138:	180690fa 	slli	r3,r3,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	10c00017 	ldw	r3,0(r2)
  800144:	00802074 	movhi	r2,129
  800148:	10a32304 	addi	r2,r2,-29556
  80014c:	e13ffd17 	ldw	r4,-12(fp)
  800150:	200890fa 	slli	r4,r4,3
  800154:	1105883a 	add	r2,r2,r4
  800158:	10800104 	addi	r2,r2,4
  80015c:	10800017 	ldw	r2,0(r2)
  800160:	1009883a 	mov	r4,r2
  800164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80016c:	0005313a 	rdctl	r2,ipending
  800170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	00000706 	br	800198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80017c:	e0bffc17 	ldw	r2,-16(fp)
  800180:	1085883a 	add	r2,r2,r2
  800184:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800188:	e0bffd17 	ldw	r2,-12(fp)
  80018c:	10800044 	addi	r2,r2,1
  800190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  800194:	003fe106 	br	80011c <__alt_data_end+0xff80011c>

    active = alt_irq_pending ();
  800198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  80019c:	e0bffb17 	ldw	r2,-20(fp)
  8001a0:	103fdb1e 	bne	r2,zero,800110 <__alt_data_end+0xff800110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001a4:	0001883a 	nop
}
  8001a8:	0001883a 	nop
  8001ac:	e037883a 	mov	sp,fp
  8001b0:	dfc00117 	ldw	ra,4(sp)
  8001b4:	df000017 	ldw	fp,0(sp)
  8001b8:	dec00204 	addi	sp,sp,8
  8001bc:	f800283a 	ret

Disassembly of section .text:

008001c0 <_start>:

#if NIOS2_DCACHE_SIZE > 0 && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
  8001c0:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_DCACHE_SIZE
#endif

0:
    initd 0(r2)
  8001c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  8001cc:	00bffd16 	blt	zero,r2,8001c4 <__alt_data_end+0xff8001c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001d0:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  8001d8:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  8001dc:	d6bc6614 	ori	gp,gp,61848
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001e0:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001e4:	10a30f14 	ori	r2,r2,35900

    movhi r3, %hi(__bss_end)
  8001e8:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001ec:	18e36314 	ori	r3,r3,36236

    beq r2, r3, 1f
  8001f0:	10c00326 	beq	r2,r3,800200 <_start+0x40>

0:
    stw zero, (r2)
  8001f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001fc:	10fffd36 	bltu	r2,r3,8001f4 <__alt_data_end+0xff8001f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800200:	08033740 	call	803374 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800204:	08035080 	call	803508 <alt_main>

00800208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800208:	003fff06 	br	800208 <__alt_data_end+0xff800208>

0080020c <main>:
 */

#include <stdio.h>

int main()
{
  80020c:	defffe04 	addi	sp,sp,-8
  800210:	dfc00115 	stw	ra,4(sp)
  800214:	df000015 	stw	fp,0(sp)
  800218:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
  80021c:	01002034 	movhi	r4,128
  800220:	2115c704 	addi	r4,r4,22300
  800224:	08003000 	call	800300 <puts>

  return 0;
  800228:	0005883a 	mov	r2,zero
}
  80022c:	e037883a 	mov	sp,fp
  800230:	dfc00117 	ldw	ra,4(sp)
  800234:	df000017 	ldw	fp,0(sp)
  800238:	dec00204 	addi	sp,sp,8
  80023c:	f800283a 	ret

00800240 <_puts_r>:
  800240:	defff604 	addi	sp,sp,-40
  800244:	dc000715 	stw	r16,28(sp)
  800248:	2021883a 	mov	r16,r4
  80024c:	2809883a 	mov	r4,r5
  800250:	dc400815 	stw	r17,32(sp)
  800254:	dfc00915 	stw	ra,36(sp)
  800258:	2823883a 	mov	r17,r5
  80025c:	08003140 	call	800314 <strlen>
  800260:	10c00044 	addi	r3,r2,1
  800264:	d8800115 	stw	r2,4(sp)
  800268:	00802034 	movhi	r2,128
  80026c:	1095cc04 	addi	r2,r2,22320
  800270:	d8800215 	stw	r2,8(sp)
  800274:	00800044 	movi	r2,1
  800278:	d8800315 	stw	r2,12(sp)
  80027c:	00800084 	movi	r2,2
  800280:	dc400015 	stw	r17,0(sp)
  800284:	d8c00615 	stw	r3,24(sp)
  800288:	dec00415 	stw	sp,16(sp)
  80028c:	d8800515 	stw	r2,20(sp)
  800290:	80000226 	beq	r16,zero,80029c <_puts_r+0x5c>
  800294:	80800e17 	ldw	r2,56(r16)
  800298:	10001426 	beq	r2,zero,8002ec <_puts_r+0xac>
  80029c:	81400217 	ldw	r5,8(r16)
  8002a0:	2880030b 	ldhu	r2,12(r5)
  8002a4:	10c8000c 	andi	r3,r2,8192
  8002a8:	1800061e 	bne	r3,zero,8002c4 <_puts_r+0x84>
  8002ac:	29001917 	ldw	r4,100(r5)
  8002b0:	00f7ffc4 	movi	r3,-8193
  8002b4:	10880014 	ori	r2,r2,8192
  8002b8:	20c6703a 	and	r3,r4,r3
  8002bc:	2880030d 	sth	r2,12(r5)
  8002c0:	28c01915 	stw	r3,100(r5)
  8002c4:	d9800404 	addi	r6,sp,16
  8002c8:	8009883a 	mov	r4,r16
  8002cc:	080074c0 	call	80074c <__sfvwrite_r>
  8002d0:	1000091e 	bne	r2,zero,8002f8 <_puts_r+0xb8>
  8002d4:	00800284 	movi	r2,10
  8002d8:	dfc00917 	ldw	ra,36(sp)
  8002dc:	dc400817 	ldw	r17,32(sp)
  8002e0:	dc000717 	ldw	r16,28(sp)
  8002e4:	dec00a04 	addi	sp,sp,40
  8002e8:	f800283a 	ret
  8002ec:	8009883a 	mov	r4,r16
  8002f0:	08006fc0 	call	8006fc <__sinit>
  8002f4:	003fe906 	br	80029c <__alt_data_end+0xff80029c>
  8002f8:	00bfffc4 	movi	r2,-1
  8002fc:	003ff606 	br	8002d8 <__alt_data_end+0xff8002d8>

00800300 <puts>:
  800300:	00802034 	movhi	r2,128
  800304:	109c6704 	addi	r2,r2,29084
  800308:	200b883a 	mov	r5,r4
  80030c:	11000017 	ldw	r4,0(r2)
  800310:	08002401 	jmpi	800240 <_puts_r>

00800314 <strlen>:
  800314:	208000cc 	andi	r2,r4,3
  800318:	10002026 	beq	r2,zero,80039c <strlen+0x88>
  80031c:	20800007 	ldb	r2,0(r4)
  800320:	10002026 	beq	r2,zero,8003a4 <strlen+0x90>
  800324:	2005883a 	mov	r2,r4
  800328:	00000206 	br	800334 <strlen+0x20>
  80032c:	10c00007 	ldb	r3,0(r2)
  800330:	18001826 	beq	r3,zero,800394 <strlen+0x80>
  800334:	10800044 	addi	r2,r2,1
  800338:	10c000cc 	andi	r3,r2,3
  80033c:	183ffb1e 	bne	r3,zero,80032c <__alt_data_end+0xff80032c>
  800340:	10c00017 	ldw	r3,0(r2)
  800344:	01ffbff4 	movhi	r7,65279
  800348:	39ffbfc4 	addi	r7,r7,-257
  80034c:	00ca303a 	nor	r5,zero,r3
  800350:	01a02074 	movhi	r6,32897
  800354:	19c7883a 	add	r3,r3,r7
  800358:	31a02004 	addi	r6,r6,-32640
  80035c:	1946703a 	and	r3,r3,r5
  800360:	1986703a 	and	r3,r3,r6
  800364:	1800091e 	bne	r3,zero,80038c <strlen+0x78>
  800368:	10800104 	addi	r2,r2,4
  80036c:	10c00017 	ldw	r3,0(r2)
  800370:	19cb883a 	add	r5,r3,r7
  800374:	00c6303a 	nor	r3,zero,r3
  800378:	28c6703a 	and	r3,r5,r3
  80037c:	1986703a 	and	r3,r3,r6
  800380:	183ff926 	beq	r3,zero,800368 <__alt_data_end+0xff800368>
  800384:	00000106 	br	80038c <strlen+0x78>
  800388:	10800044 	addi	r2,r2,1
  80038c:	10c00007 	ldb	r3,0(r2)
  800390:	183ffd1e 	bne	r3,zero,800388 <__alt_data_end+0xff800388>
  800394:	1105c83a 	sub	r2,r2,r4
  800398:	f800283a 	ret
  80039c:	2005883a 	mov	r2,r4
  8003a0:	003fe706 	br	800340 <__alt_data_end+0xff800340>
  8003a4:	0005883a 	mov	r2,zero
  8003a8:	f800283a 	ret

008003ac <__fp_unlock>:
  8003ac:	0005883a 	mov	r2,zero
  8003b0:	f800283a 	ret

008003b4 <_cleanup_r>:
  8003b4:	01402034 	movhi	r5,128
  8003b8:	2948d204 	addi	r5,r5,9032
  8003bc:	0800ccc1 	jmpi	800ccc <_fwalk_reent>

008003c0 <__sinit.part.1>:
  8003c0:	defff704 	addi	sp,sp,-36
  8003c4:	00c02034 	movhi	r3,128
  8003c8:	dfc00815 	stw	ra,32(sp)
  8003cc:	ddc00715 	stw	r23,28(sp)
  8003d0:	dd800615 	stw	r22,24(sp)
  8003d4:	dd400515 	stw	r21,20(sp)
  8003d8:	dd000415 	stw	r20,16(sp)
  8003dc:	dcc00315 	stw	r19,12(sp)
  8003e0:	dc800215 	stw	r18,8(sp)
  8003e4:	dc400115 	stw	r17,4(sp)
  8003e8:	dc000015 	stw	r16,0(sp)
  8003ec:	18c0ed04 	addi	r3,r3,948
  8003f0:	24000117 	ldw	r16,4(r4)
  8003f4:	20c00f15 	stw	r3,60(r4)
  8003f8:	2080bb04 	addi	r2,r4,748
  8003fc:	00c000c4 	movi	r3,3
  800400:	20c0b915 	stw	r3,740(r4)
  800404:	2080ba15 	stw	r2,744(r4)
  800408:	2000b815 	stw	zero,736(r4)
  80040c:	05c00204 	movi	r23,8
  800410:	00800104 	movi	r2,4
  800414:	2025883a 	mov	r18,r4
  800418:	b80d883a 	mov	r6,r23
  80041c:	81001704 	addi	r4,r16,92
  800420:	000b883a 	mov	r5,zero
  800424:	80000015 	stw	zero,0(r16)
  800428:	80000115 	stw	zero,4(r16)
  80042c:	80000215 	stw	zero,8(r16)
  800430:	8080030d 	sth	r2,12(r16)
  800434:	80001915 	stw	zero,100(r16)
  800438:	8000038d 	sth	zero,14(r16)
  80043c:	80000415 	stw	zero,16(r16)
  800440:	80000515 	stw	zero,20(r16)
  800444:	80000615 	stw	zero,24(r16)
  800448:	08019240 	call	801924 <memset>
  80044c:	05802034 	movhi	r22,128
  800450:	94400217 	ldw	r17,8(r18)
  800454:	05402034 	movhi	r21,128
  800458:	05002034 	movhi	r20,128
  80045c:	04c02034 	movhi	r19,128
  800460:	b5880104 	addi	r22,r22,8196
  800464:	ad481804 	addi	r21,r21,8288
  800468:	a5083704 	addi	r20,r20,8412
  80046c:	9cc84e04 	addi	r19,r19,8504
  800470:	85800815 	stw	r22,32(r16)
  800474:	85400915 	stw	r21,36(r16)
  800478:	85000a15 	stw	r20,40(r16)
  80047c:	84c00b15 	stw	r19,44(r16)
  800480:	84000715 	stw	r16,28(r16)
  800484:	00800284 	movi	r2,10
  800488:	8880030d 	sth	r2,12(r17)
  80048c:	00800044 	movi	r2,1
  800490:	b80d883a 	mov	r6,r23
  800494:	89001704 	addi	r4,r17,92
  800498:	000b883a 	mov	r5,zero
  80049c:	88000015 	stw	zero,0(r17)
  8004a0:	88000115 	stw	zero,4(r17)
  8004a4:	88000215 	stw	zero,8(r17)
  8004a8:	88001915 	stw	zero,100(r17)
  8004ac:	8880038d 	sth	r2,14(r17)
  8004b0:	88000415 	stw	zero,16(r17)
  8004b4:	88000515 	stw	zero,20(r17)
  8004b8:	88000615 	stw	zero,24(r17)
  8004bc:	08019240 	call	801924 <memset>
  8004c0:	94000317 	ldw	r16,12(r18)
  8004c4:	00800484 	movi	r2,18
  8004c8:	8c400715 	stw	r17,28(r17)
  8004cc:	8d800815 	stw	r22,32(r17)
  8004d0:	8d400915 	stw	r21,36(r17)
  8004d4:	8d000a15 	stw	r20,40(r17)
  8004d8:	8cc00b15 	stw	r19,44(r17)
  8004dc:	8080030d 	sth	r2,12(r16)
  8004e0:	00800084 	movi	r2,2
  8004e4:	80000015 	stw	zero,0(r16)
  8004e8:	80000115 	stw	zero,4(r16)
  8004ec:	80000215 	stw	zero,8(r16)
  8004f0:	80001915 	stw	zero,100(r16)
  8004f4:	8080038d 	sth	r2,14(r16)
  8004f8:	80000415 	stw	zero,16(r16)
  8004fc:	80000515 	stw	zero,20(r16)
  800500:	80000615 	stw	zero,24(r16)
  800504:	b80d883a 	mov	r6,r23
  800508:	000b883a 	mov	r5,zero
  80050c:	81001704 	addi	r4,r16,92
  800510:	08019240 	call	801924 <memset>
  800514:	00800044 	movi	r2,1
  800518:	84000715 	stw	r16,28(r16)
  80051c:	85800815 	stw	r22,32(r16)
  800520:	85400915 	stw	r21,36(r16)
  800524:	85000a15 	stw	r20,40(r16)
  800528:	84c00b15 	stw	r19,44(r16)
  80052c:	90800e15 	stw	r2,56(r18)
  800530:	dfc00817 	ldw	ra,32(sp)
  800534:	ddc00717 	ldw	r23,28(sp)
  800538:	dd800617 	ldw	r22,24(sp)
  80053c:	dd400517 	ldw	r21,20(sp)
  800540:	dd000417 	ldw	r20,16(sp)
  800544:	dcc00317 	ldw	r19,12(sp)
  800548:	dc800217 	ldw	r18,8(sp)
  80054c:	dc400117 	ldw	r17,4(sp)
  800550:	dc000017 	ldw	r16,0(sp)
  800554:	dec00904 	addi	sp,sp,36
  800558:	f800283a 	ret

0080055c <__fp_lock>:
  80055c:	0005883a 	mov	r2,zero
  800560:	f800283a 	ret

00800564 <__sfmoreglue>:
  800564:	defffc04 	addi	sp,sp,-16
  800568:	dc400115 	stw	r17,4(sp)
  80056c:	2c7fffc4 	addi	r17,r5,-1
  800570:	8c401a24 	muli	r17,r17,104
  800574:	dc800215 	stw	r18,8(sp)
  800578:	2825883a 	mov	r18,r5
  80057c:	89401d04 	addi	r5,r17,116
  800580:	dc000015 	stw	r16,0(sp)
  800584:	dfc00315 	stw	ra,12(sp)
  800588:	0800d900 	call	800d90 <_malloc_r>
  80058c:	1021883a 	mov	r16,r2
  800590:	10000726 	beq	r2,zero,8005b0 <__sfmoreglue+0x4c>
  800594:	11000304 	addi	r4,r2,12
  800598:	10000015 	stw	zero,0(r2)
  80059c:	14800115 	stw	r18,4(r2)
  8005a0:	11000215 	stw	r4,8(r2)
  8005a4:	89801a04 	addi	r6,r17,104
  8005a8:	000b883a 	mov	r5,zero
  8005ac:	08019240 	call	801924 <memset>
  8005b0:	8005883a 	mov	r2,r16
  8005b4:	dfc00317 	ldw	ra,12(sp)
  8005b8:	dc800217 	ldw	r18,8(sp)
  8005bc:	dc400117 	ldw	r17,4(sp)
  8005c0:	dc000017 	ldw	r16,0(sp)
  8005c4:	dec00404 	addi	sp,sp,16
  8005c8:	f800283a 	ret

008005cc <__sfp>:
  8005cc:	defffb04 	addi	sp,sp,-20
  8005d0:	dc000015 	stw	r16,0(sp)
  8005d4:	04002034 	movhi	r16,128
  8005d8:	841c6604 	addi	r16,r16,29080
  8005dc:	dcc00315 	stw	r19,12(sp)
  8005e0:	2027883a 	mov	r19,r4
  8005e4:	81000017 	ldw	r4,0(r16)
  8005e8:	dfc00415 	stw	ra,16(sp)
  8005ec:	dc800215 	stw	r18,8(sp)
  8005f0:	20800e17 	ldw	r2,56(r4)
  8005f4:	dc400115 	stw	r17,4(sp)
  8005f8:	1000021e 	bne	r2,zero,800604 <__sfp+0x38>
  8005fc:	08003c00 	call	8003c0 <__sinit.part.1>
  800600:	81000017 	ldw	r4,0(r16)
  800604:	2480b804 	addi	r18,r4,736
  800608:	047fffc4 	movi	r17,-1
  80060c:	91000117 	ldw	r4,4(r18)
  800610:	94000217 	ldw	r16,8(r18)
  800614:	213fffc4 	addi	r4,r4,-1
  800618:	20000a16 	blt	r4,zero,800644 <__sfp+0x78>
  80061c:	8080030f 	ldh	r2,12(r16)
  800620:	10000c26 	beq	r2,zero,800654 <__sfp+0x88>
  800624:	80c01d04 	addi	r3,r16,116
  800628:	00000206 	br	800634 <__sfp+0x68>
  80062c:	18bfe60f 	ldh	r2,-104(r3)
  800630:	10000826 	beq	r2,zero,800654 <__sfp+0x88>
  800634:	213fffc4 	addi	r4,r4,-1
  800638:	1c3ffd04 	addi	r16,r3,-12
  80063c:	18c01a04 	addi	r3,r3,104
  800640:	247ffa1e 	bne	r4,r17,80062c <__alt_data_end+0xff80062c>
  800644:	90800017 	ldw	r2,0(r18)
  800648:	10001d26 	beq	r2,zero,8006c0 <__sfp+0xf4>
  80064c:	1025883a 	mov	r18,r2
  800650:	003fee06 	br	80060c <__alt_data_end+0xff80060c>
  800654:	00bfffc4 	movi	r2,-1
  800658:	8080038d 	sth	r2,14(r16)
  80065c:	00800044 	movi	r2,1
  800660:	8080030d 	sth	r2,12(r16)
  800664:	80001915 	stw	zero,100(r16)
  800668:	80000015 	stw	zero,0(r16)
  80066c:	80000215 	stw	zero,8(r16)
  800670:	80000115 	stw	zero,4(r16)
  800674:	80000415 	stw	zero,16(r16)
  800678:	80000515 	stw	zero,20(r16)
  80067c:	80000615 	stw	zero,24(r16)
  800680:	01800204 	movi	r6,8
  800684:	000b883a 	mov	r5,zero
  800688:	81001704 	addi	r4,r16,92
  80068c:	08019240 	call	801924 <memset>
  800690:	8005883a 	mov	r2,r16
  800694:	80000c15 	stw	zero,48(r16)
  800698:	80000d15 	stw	zero,52(r16)
  80069c:	80001115 	stw	zero,68(r16)
  8006a0:	80001215 	stw	zero,72(r16)
  8006a4:	dfc00417 	ldw	ra,16(sp)
  8006a8:	dcc00317 	ldw	r19,12(sp)
  8006ac:	dc800217 	ldw	r18,8(sp)
  8006b0:	dc400117 	ldw	r17,4(sp)
  8006b4:	dc000017 	ldw	r16,0(sp)
  8006b8:	dec00504 	addi	sp,sp,20
  8006bc:	f800283a 	ret
  8006c0:	01400104 	movi	r5,4
  8006c4:	9809883a 	mov	r4,r19
  8006c8:	08005640 	call	800564 <__sfmoreglue>
  8006cc:	90800015 	stw	r2,0(r18)
  8006d0:	103fde1e 	bne	r2,zero,80064c <__alt_data_end+0xff80064c>
  8006d4:	00800304 	movi	r2,12
  8006d8:	98800015 	stw	r2,0(r19)
  8006dc:	0005883a 	mov	r2,zero
  8006e0:	003ff006 	br	8006a4 <__alt_data_end+0xff8006a4>

008006e4 <_cleanup>:
  8006e4:	00802034 	movhi	r2,128
  8006e8:	109c6604 	addi	r2,r2,29080
  8006ec:	11000017 	ldw	r4,0(r2)
  8006f0:	01402034 	movhi	r5,128
  8006f4:	2948d204 	addi	r5,r5,9032
  8006f8:	0800ccc1 	jmpi	800ccc <_fwalk_reent>

008006fc <__sinit>:
  8006fc:	20800e17 	ldw	r2,56(r4)
  800700:	10000126 	beq	r2,zero,800708 <__sinit+0xc>
  800704:	f800283a 	ret
  800708:	08003c01 	jmpi	8003c0 <__sinit.part.1>

0080070c <__sfp_lock_acquire>:
  80070c:	f800283a 	ret

00800710 <__sfp_lock_release>:
  800710:	f800283a 	ret

00800714 <__sinit_lock_acquire>:
  800714:	f800283a 	ret

00800718 <__sinit_lock_release>:
  800718:	f800283a 	ret

0080071c <__fp_lock_all>:
  80071c:	00802034 	movhi	r2,128
  800720:	109c6704 	addi	r2,r2,29084
  800724:	11000017 	ldw	r4,0(r2)
  800728:	01402034 	movhi	r5,128
  80072c:	29415704 	addi	r5,r5,1372
  800730:	0800c081 	jmpi	800c08 <_fwalk>

00800734 <__fp_unlock_all>:
  800734:	00802034 	movhi	r2,128
  800738:	109c6704 	addi	r2,r2,29084
  80073c:	11000017 	ldw	r4,0(r2)
  800740:	01402034 	movhi	r5,128
  800744:	2940eb04 	addi	r5,r5,940
  800748:	0800c081 	jmpi	800c08 <_fwalk>

0080074c <__sfvwrite_r>:
  80074c:	30800217 	ldw	r2,8(r6)
  800750:	10006726 	beq	r2,zero,8008f0 <__sfvwrite_r+0x1a4>
  800754:	28c0030b 	ldhu	r3,12(r5)
  800758:	defff404 	addi	sp,sp,-48
  80075c:	dd400715 	stw	r21,28(sp)
  800760:	dd000615 	stw	r20,24(sp)
  800764:	dc000215 	stw	r16,8(sp)
  800768:	dfc00b15 	stw	ra,44(sp)
  80076c:	df000a15 	stw	fp,40(sp)
  800770:	ddc00915 	stw	r23,36(sp)
  800774:	dd800815 	stw	r22,32(sp)
  800778:	dcc00515 	stw	r19,20(sp)
  80077c:	dc800415 	stw	r18,16(sp)
  800780:	dc400315 	stw	r17,12(sp)
  800784:	1880020c 	andi	r2,r3,8
  800788:	2821883a 	mov	r16,r5
  80078c:	202b883a 	mov	r21,r4
  800790:	3029883a 	mov	r20,r6
  800794:	10002726 	beq	r2,zero,800834 <__sfvwrite_r+0xe8>
  800798:	28800417 	ldw	r2,16(r5)
  80079c:	10002526 	beq	r2,zero,800834 <__sfvwrite_r+0xe8>
  8007a0:	1880008c 	andi	r2,r3,2
  8007a4:	a4400017 	ldw	r17,0(r20)
  8007a8:	10002a26 	beq	r2,zero,800854 <__sfvwrite_r+0x108>
  8007ac:	05a00034 	movhi	r22,32768
  8007b0:	0027883a 	mov	r19,zero
  8007b4:	0025883a 	mov	r18,zero
  8007b8:	b5bf0004 	addi	r22,r22,-1024
  8007bc:	980d883a 	mov	r6,r19
  8007c0:	a809883a 	mov	r4,r21
  8007c4:	90004626 	beq	r18,zero,8008e0 <__sfvwrite_r+0x194>
  8007c8:	900f883a 	mov	r7,r18
  8007cc:	b480022e 	bgeu	r22,r18,8007d8 <__sfvwrite_r+0x8c>
  8007d0:	01e00034 	movhi	r7,32768
  8007d4:	39ff0004 	addi	r7,r7,-1024
  8007d8:	80800917 	ldw	r2,36(r16)
  8007dc:	81400717 	ldw	r5,28(r16)
  8007e0:	103ee83a 	callr	r2
  8007e4:	0080570e 	bge	zero,r2,800944 <__sfvwrite_r+0x1f8>
  8007e8:	a0c00217 	ldw	r3,8(r20)
  8007ec:	98a7883a 	add	r19,r19,r2
  8007f0:	90a5c83a 	sub	r18,r18,r2
  8007f4:	1885c83a 	sub	r2,r3,r2
  8007f8:	a0800215 	stw	r2,8(r20)
  8007fc:	103fef1e 	bne	r2,zero,8007bc <__alt_data_end+0xff8007bc>
  800800:	0005883a 	mov	r2,zero
  800804:	dfc00b17 	ldw	ra,44(sp)
  800808:	df000a17 	ldw	fp,40(sp)
  80080c:	ddc00917 	ldw	r23,36(sp)
  800810:	dd800817 	ldw	r22,32(sp)
  800814:	dd400717 	ldw	r21,28(sp)
  800818:	dd000617 	ldw	r20,24(sp)
  80081c:	dcc00517 	ldw	r19,20(sp)
  800820:	dc800417 	ldw	r18,16(sp)
  800824:	dc400317 	ldw	r17,12(sp)
  800828:	dc000217 	ldw	r16,8(sp)
  80082c:	dec00c04 	addi	sp,sp,48
  800830:	f800283a 	ret
  800834:	800b883a 	mov	r5,r16
  800838:	a809883a 	mov	r4,r21
  80083c:	08021a00 	call	8021a0 <__swsetup_r>
  800840:	1000eb1e 	bne	r2,zero,800bf0 <__sfvwrite_r+0x4a4>
  800844:	80c0030b 	ldhu	r3,12(r16)
  800848:	a4400017 	ldw	r17,0(r20)
  80084c:	1880008c 	andi	r2,r3,2
  800850:	103fd61e 	bne	r2,zero,8007ac <__alt_data_end+0xff8007ac>
  800854:	1880004c 	andi	r2,r3,1
  800858:	10003f1e 	bne	r2,zero,800958 <__sfvwrite_r+0x20c>
  80085c:	0039883a 	mov	fp,zero
  800860:	0025883a 	mov	r18,zero
  800864:	90001a26 	beq	r18,zero,8008d0 <__sfvwrite_r+0x184>
  800868:	1880800c 	andi	r2,r3,512
  80086c:	84c00217 	ldw	r19,8(r16)
  800870:	10002126 	beq	r2,zero,8008f8 <__sfvwrite_r+0x1ac>
  800874:	982f883a 	mov	r23,r19
  800878:	94c09336 	bltu	r18,r19,800ac8 <__sfvwrite_r+0x37c>
  80087c:	1881200c 	andi	r2,r3,1152
  800880:	10009e1e 	bne	r2,zero,800afc <__sfvwrite_r+0x3b0>
  800884:	81000017 	ldw	r4,0(r16)
  800888:	b80d883a 	mov	r6,r23
  80088c:	e00b883a 	mov	r5,fp
  800890:	08017c80 	call	8017c8 <memmove>
  800894:	80c00217 	ldw	r3,8(r16)
  800898:	81000017 	ldw	r4,0(r16)
  80089c:	9005883a 	mov	r2,r18
  8008a0:	1ce7c83a 	sub	r19,r3,r19
  8008a4:	25cf883a 	add	r7,r4,r23
  8008a8:	84c00215 	stw	r19,8(r16)
  8008ac:	81c00015 	stw	r7,0(r16)
  8008b0:	a0c00217 	ldw	r3,8(r20)
  8008b4:	e0b9883a 	add	fp,fp,r2
  8008b8:	90a5c83a 	sub	r18,r18,r2
  8008bc:	18a7c83a 	sub	r19,r3,r2
  8008c0:	a4c00215 	stw	r19,8(r20)
  8008c4:	983fce26 	beq	r19,zero,800800 <__alt_data_end+0xff800800>
  8008c8:	80c0030b 	ldhu	r3,12(r16)
  8008cc:	903fe61e 	bne	r18,zero,800868 <__alt_data_end+0xff800868>
  8008d0:	8f000017 	ldw	fp,0(r17)
  8008d4:	8c800117 	ldw	r18,4(r17)
  8008d8:	8c400204 	addi	r17,r17,8
  8008dc:	003fe106 	br	800864 <__alt_data_end+0xff800864>
  8008e0:	8cc00017 	ldw	r19,0(r17)
  8008e4:	8c800117 	ldw	r18,4(r17)
  8008e8:	8c400204 	addi	r17,r17,8
  8008ec:	003fb306 	br	8007bc <__alt_data_end+0xff8007bc>
  8008f0:	0005883a 	mov	r2,zero
  8008f4:	f800283a 	ret
  8008f8:	81000017 	ldw	r4,0(r16)
  8008fc:	80800417 	ldw	r2,16(r16)
  800900:	11005736 	bltu	r2,r4,800a60 <__sfvwrite_r+0x314>
  800904:	85c00517 	ldw	r23,20(r16)
  800908:	95c05536 	bltu	r18,r23,800a60 <__sfvwrite_r+0x314>
  80090c:	00a00034 	movhi	r2,32768
  800910:	10bfffc4 	addi	r2,r2,-1
  800914:	9009883a 	mov	r4,r18
  800918:	1480012e 	bgeu	r2,r18,800920 <__sfvwrite_r+0x1d4>
  80091c:	1009883a 	mov	r4,r2
  800920:	b80b883a 	mov	r5,r23
  800924:	0802e540 	call	802e54 <__divsi3>
  800928:	15cf383a 	mul	r7,r2,r23
  80092c:	81400717 	ldw	r5,28(r16)
  800930:	80800917 	ldw	r2,36(r16)
  800934:	e00d883a 	mov	r6,fp
  800938:	a809883a 	mov	r4,r21
  80093c:	103ee83a 	callr	r2
  800940:	00bfdb16 	blt	zero,r2,8008b0 <__alt_data_end+0xff8008b0>
  800944:	8080030b 	ldhu	r2,12(r16)
  800948:	10801014 	ori	r2,r2,64
  80094c:	8080030d 	sth	r2,12(r16)
  800950:	00bfffc4 	movi	r2,-1
  800954:	003fab06 	br	800804 <__alt_data_end+0xff800804>
  800958:	0027883a 	mov	r19,zero
  80095c:	0011883a 	mov	r8,zero
  800960:	0039883a 	mov	fp,zero
  800964:	0025883a 	mov	r18,zero
  800968:	90001f26 	beq	r18,zero,8009e8 <__sfvwrite_r+0x29c>
  80096c:	40005a26 	beq	r8,zero,800ad8 <__sfvwrite_r+0x38c>
  800970:	982d883a 	mov	r22,r19
  800974:	94c0012e 	bgeu	r18,r19,80097c <__sfvwrite_r+0x230>
  800978:	902d883a 	mov	r22,r18
  80097c:	81000017 	ldw	r4,0(r16)
  800980:	80800417 	ldw	r2,16(r16)
  800984:	b02f883a 	mov	r23,r22
  800988:	81c00517 	ldw	r7,20(r16)
  80098c:	1100032e 	bgeu	r2,r4,80099c <__sfvwrite_r+0x250>
  800990:	80c00217 	ldw	r3,8(r16)
  800994:	38c7883a 	add	r3,r7,r3
  800998:	1d801816 	blt	r3,r22,8009fc <__sfvwrite_r+0x2b0>
  80099c:	b1c03e16 	blt	r22,r7,800a98 <__sfvwrite_r+0x34c>
  8009a0:	80800917 	ldw	r2,36(r16)
  8009a4:	81400717 	ldw	r5,28(r16)
  8009a8:	e00d883a 	mov	r6,fp
  8009ac:	da000115 	stw	r8,4(sp)
  8009b0:	a809883a 	mov	r4,r21
  8009b4:	103ee83a 	callr	r2
  8009b8:	102f883a 	mov	r23,r2
  8009bc:	da000117 	ldw	r8,4(sp)
  8009c0:	00bfe00e 	bge	zero,r2,800944 <__alt_data_end+0xff800944>
  8009c4:	9de7c83a 	sub	r19,r19,r23
  8009c8:	98001f26 	beq	r19,zero,800a48 <__sfvwrite_r+0x2fc>
  8009cc:	a0800217 	ldw	r2,8(r20)
  8009d0:	e5f9883a 	add	fp,fp,r23
  8009d4:	95e5c83a 	sub	r18,r18,r23
  8009d8:	15efc83a 	sub	r23,r2,r23
  8009dc:	a5c00215 	stw	r23,8(r20)
  8009e0:	b83f8726 	beq	r23,zero,800800 <__alt_data_end+0xff800800>
  8009e4:	903fe11e 	bne	r18,zero,80096c <__alt_data_end+0xff80096c>
  8009e8:	8f000017 	ldw	fp,0(r17)
  8009ec:	8c800117 	ldw	r18,4(r17)
  8009f0:	0011883a 	mov	r8,zero
  8009f4:	8c400204 	addi	r17,r17,8
  8009f8:	003fdb06 	br	800968 <__alt_data_end+0xff800968>
  8009fc:	180d883a 	mov	r6,r3
  800a00:	e00b883a 	mov	r5,fp
  800a04:	da000115 	stw	r8,4(sp)
  800a08:	d8c00015 	stw	r3,0(sp)
  800a0c:	08017c80 	call	8017c8 <memmove>
  800a10:	d8c00017 	ldw	r3,0(sp)
  800a14:	80800017 	ldw	r2,0(r16)
  800a18:	800b883a 	mov	r5,r16
  800a1c:	a809883a 	mov	r4,r21
  800a20:	10c5883a 	add	r2,r2,r3
  800a24:	80800015 	stw	r2,0(r16)
  800a28:	d8c00015 	stw	r3,0(sp)
  800a2c:	08026680 	call	802668 <_fflush_r>
  800a30:	d8c00017 	ldw	r3,0(sp)
  800a34:	da000117 	ldw	r8,4(sp)
  800a38:	103fc21e 	bne	r2,zero,800944 <__alt_data_end+0xff800944>
  800a3c:	182f883a 	mov	r23,r3
  800a40:	9de7c83a 	sub	r19,r19,r23
  800a44:	983fe11e 	bne	r19,zero,8009cc <__alt_data_end+0xff8009cc>
  800a48:	800b883a 	mov	r5,r16
  800a4c:	a809883a 	mov	r4,r21
  800a50:	08026680 	call	802668 <_fflush_r>
  800a54:	103fbb1e 	bne	r2,zero,800944 <__alt_data_end+0xff800944>
  800a58:	0011883a 	mov	r8,zero
  800a5c:	003fdb06 	br	8009cc <__alt_data_end+0xff8009cc>
  800a60:	94c0012e 	bgeu	r18,r19,800a68 <__sfvwrite_r+0x31c>
  800a64:	9027883a 	mov	r19,r18
  800a68:	980d883a 	mov	r6,r19
  800a6c:	e00b883a 	mov	r5,fp
  800a70:	08017c80 	call	8017c8 <memmove>
  800a74:	80800217 	ldw	r2,8(r16)
  800a78:	80c00017 	ldw	r3,0(r16)
  800a7c:	14c5c83a 	sub	r2,r2,r19
  800a80:	1cc7883a 	add	r3,r3,r19
  800a84:	80800215 	stw	r2,8(r16)
  800a88:	80c00015 	stw	r3,0(r16)
  800a8c:	10004326 	beq	r2,zero,800b9c <__sfvwrite_r+0x450>
  800a90:	9805883a 	mov	r2,r19
  800a94:	003f8606 	br	8008b0 <__alt_data_end+0xff8008b0>
  800a98:	b00d883a 	mov	r6,r22
  800a9c:	e00b883a 	mov	r5,fp
  800aa0:	da000115 	stw	r8,4(sp)
  800aa4:	08017c80 	call	8017c8 <memmove>
  800aa8:	80800217 	ldw	r2,8(r16)
  800aac:	80c00017 	ldw	r3,0(r16)
  800ab0:	da000117 	ldw	r8,4(sp)
  800ab4:	1585c83a 	sub	r2,r2,r22
  800ab8:	1dad883a 	add	r22,r3,r22
  800abc:	80800215 	stw	r2,8(r16)
  800ac0:	85800015 	stw	r22,0(r16)
  800ac4:	003fbf06 	br	8009c4 <__alt_data_end+0xff8009c4>
  800ac8:	81000017 	ldw	r4,0(r16)
  800acc:	9027883a 	mov	r19,r18
  800ad0:	902f883a 	mov	r23,r18
  800ad4:	003f6c06 	br	800888 <__alt_data_end+0xff800888>
  800ad8:	900d883a 	mov	r6,r18
  800adc:	01400284 	movi	r5,10
  800ae0:	e009883a 	mov	r4,fp
  800ae4:	080159c0 	call	80159c <memchr>
  800ae8:	10003e26 	beq	r2,zero,800be4 <__sfvwrite_r+0x498>
  800aec:	10800044 	addi	r2,r2,1
  800af0:	1727c83a 	sub	r19,r2,fp
  800af4:	02000044 	movi	r8,1
  800af8:	003f9d06 	br	800970 <__alt_data_end+0xff800970>
  800afc:	80800517 	ldw	r2,20(r16)
  800b00:	81400417 	ldw	r5,16(r16)
  800b04:	81c00017 	ldw	r7,0(r16)
  800b08:	10a7883a 	add	r19,r2,r2
  800b0c:	9885883a 	add	r2,r19,r2
  800b10:	1026d7fa 	srli	r19,r2,31
  800b14:	396dc83a 	sub	r22,r7,r5
  800b18:	b1000044 	addi	r4,r22,1
  800b1c:	9885883a 	add	r2,r19,r2
  800b20:	1027d07a 	srai	r19,r2,1
  800b24:	2485883a 	add	r2,r4,r18
  800b28:	980d883a 	mov	r6,r19
  800b2c:	9880022e 	bgeu	r19,r2,800b38 <__sfvwrite_r+0x3ec>
  800b30:	1027883a 	mov	r19,r2
  800b34:	100d883a 	mov	r6,r2
  800b38:	18c1000c 	andi	r3,r3,1024
  800b3c:	18001c26 	beq	r3,zero,800bb0 <__sfvwrite_r+0x464>
  800b40:	300b883a 	mov	r5,r6
  800b44:	a809883a 	mov	r4,r21
  800b48:	0800d900 	call	800d90 <_malloc_r>
  800b4c:	102f883a 	mov	r23,r2
  800b50:	10002926 	beq	r2,zero,800bf8 <__sfvwrite_r+0x4ac>
  800b54:	81400417 	ldw	r5,16(r16)
  800b58:	b00d883a 	mov	r6,r22
  800b5c:	1009883a 	mov	r4,r2
  800b60:	08016800 	call	801680 <memcpy>
  800b64:	8080030b 	ldhu	r2,12(r16)
  800b68:	00fedfc4 	movi	r3,-1153
  800b6c:	10c4703a 	and	r2,r2,r3
  800b70:	10802014 	ori	r2,r2,128
  800b74:	8080030d 	sth	r2,12(r16)
  800b78:	bd89883a 	add	r4,r23,r22
  800b7c:	9d8fc83a 	sub	r7,r19,r22
  800b80:	85c00415 	stw	r23,16(r16)
  800b84:	84c00515 	stw	r19,20(r16)
  800b88:	81000015 	stw	r4,0(r16)
  800b8c:	9027883a 	mov	r19,r18
  800b90:	81c00215 	stw	r7,8(r16)
  800b94:	902f883a 	mov	r23,r18
  800b98:	003f3b06 	br	800888 <__alt_data_end+0xff800888>
  800b9c:	800b883a 	mov	r5,r16
  800ba0:	a809883a 	mov	r4,r21
  800ba4:	08026680 	call	802668 <_fflush_r>
  800ba8:	103fb926 	beq	r2,zero,800a90 <__alt_data_end+0xff800a90>
  800bac:	003f6506 	br	800944 <__alt_data_end+0xff800944>
  800bb0:	a809883a 	mov	r4,r21
  800bb4:	0801a4c0 	call	801a4c <_realloc_r>
  800bb8:	102f883a 	mov	r23,r2
  800bbc:	103fee1e 	bne	r2,zero,800b78 <__alt_data_end+0xff800b78>
  800bc0:	81400417 	ldw	r5,16(r16)
  800bc4:	a809883a 	mov	r4,r21
  800bc8:	08028180 	call	802818 <_free_r>
  800bcc:	8080030b 	ldhu	r2,12(r16)
  800bd0:	00ffdfc4 	movi	r3,-129
  800bd4:	1884703a 	and	r2,r3,r2
  800bd8:	00c00304 	movi	r3,12
  800bdc:	a8c00015 	stw	r3,0(r21)
  800be0:	003f5906 	br	800948 <__alt_data_end+0xff800948>
  800be4:	94c00044 	addi	r19,r18,1
  800be8:	02000044 	movi	r8,1
  800bec:	003f6006 	br	800970 <__alt_data_end+0xff800970>
  800bf0:	00bfffc4 	movi	r2,-1
  800bf4:	003f0306 	br	800804 <__alt_data_end+0xff800804>
  800bf8:	00800304 	movi	r2,12
  800bfc:	a8800015 	stw	r2,0(r21)
  800c00:	8080030b 	ldhu	r2,12(r16)
  800c04:	003f5006 	br	800948 <__alt_data_end+0xff800948>

00800c08 <_fwalk>:
  800c08:	defff704 	addi	sp,sp,-36
  800c0c:	dd000415 	stw	r20,16(sp)
  800c10:	dfc00815 	stw	ra,32(sp)
  800c14:	ddc00715 	stw	r23,28(sp)
  800c18:	dd800615 	stw	r22,24(sp)
  800c1c:	dd400515 	stw	r21,20(sp)
  800c20:	dcc00315 	stw	r19,12(sp)
  800c24:	dc800215 	stw	r18,8(sp)
  800c28:	dc400115 	stw	r17,4(sp)
  800c2c:	dc000015 	stw	r16,0(sp)
  800c30:	2500b804 	addi	r20,r4,736
  800c34:	a0002326 	beq	r20,zero,800cc4 <_fwalk+0xbc>
  800c38:	282b883a 	mov	r21,r5
  800c3c:	002f883a 	mov	r23,zero
  800c40:	05800044 	movi	r22,1
  800c44:	04ffffc4 	movi	r19,-1
  800c48:	a4400117 	ldw	r17,4(r20)
  800c4c:	a4800217 	ldw	r18,8(r20)
  800c50:	8c7fffc4 	addi	r17,r17,-1
  800c54:	88000d16 	blt	r17,zero,800c8c <_fwalk+0x84>
  800c58:	94000304 	addi	r16,r18,12
  800c5c:	94800384 	addi	r18,r18,14
  800c60:	8080000b 	ldhu	r2,0(r16)
  800c64:	8c7fffc4 	addi	r17,r17,-1
  800c68:	813ffd04 	addi	r4,r16,-12
  800c6c:	b080042e 	bgeu	r22,r2,800c80 <_fwalk+0x78>
  800c70:	9080000f 	ldh	r2,0(r18)
  800c74:	14c00226 	beq	r2,r19,800c80 <_fwalk+0x78>
  800c78:	a83ee83a 	callr	r21
  800c7c:	b8aeb03a 	or	r23,r23,r2
  800c80:	84001a04 	addi	r16,r16,104
  800c84:	94801a04 	addi	r18,r18,104
  800c88:	8cfff51e 	bne	r17,r19,800c60 <__alt_data_end+0xff800c60>
  800c8c:	a5000017 	ldw	r20,0(r20)
  800c90:	a03fed1e 	bne	r20,zero,800c48 <__alt_data_end+0xff800c48>
  800c94:	b805883a 	mov	r2,r23
  800c98:	dfc00817 	ldw	ra,32(sp)
  800c9c:	ddc00717 	ldw	r23,28(sp)
  800ca0:	dd800617 	ldw	r22,24(sp)
  800ca4:	dd400517 	ldw	r21,20(sp)
  800ca8:	dd000417 	ldw	r20,16(sp)
  800cac:	dcc00317 	ldw	r19,12(sp)
  800cb0:	dc800217 	ldw	r18,8(sp)
  800cb4:	dc400117 	ldw	r17,4(sp)
  800cb8:	dc000017 	ldw	r16,0(sp)
  800cbc:	dec00904 	addi	sp,sp,36
  800cc0:	f800283a 	ret
  800cc4:	002f883a 	mov	r23,zero
  800cc8:	003ff206 	br	800c94 <__alt_data_end+0xff800c94>

00800ccc <_fwalk_reent>:
  800ccc:	defff704 	addi	sp,sp,-36
  800cd0:	dd000415 	stw	r20,16(sp)
  800cd4:	dfc00815 	stw	ra,32(sp)
  800cd8:	ddc00715 	stw	r23,28(sp)
  800cdc:	dd800615 	stw	r22,24(sp)
  800ce0:	dd400515 	stw	r21,20(sp)
  800ce4:	dcc00315 	stw	r19,12(sp)
  800ce8:	dc800215 	stw	r18,8(sp)
  800cec:	dc400115 	stw	r17,4(sp)
  800cf0:	dc000015 	stw	r16,0(sp)
  800cf4:	2500b804 	addi	r20,r4,736
  800cf8:	a0002326 	beq	r20,zero,800d88 <_fwalk_reent+0xbc>
  800cfc:	282b883a 	mov	r21,r5
  800d00:	2027883a 	mov	r19,r4
  800d04:	002f883a 	mov	r23,zero
  800d08:	05800044 	movi	r22,1
  800d0c:	04bfffc4 	movi	r18,-1
  800d10:	a4400117 	ldw	r17,4(r20)
  800d14:	a4000217 	ldw	r16,8(r20)
  800d18:	8c7fffc4 	addi	r17,r17,-1
  800d1c:	88000c16 	blt	r17,zero,800d50 <_fwalk_reent+0x84>
  800d20:	84000304 	addi	r16,r16,12
  800d24:	8080000b 	ldhu	r2,0(r16)
  800d28:	8c7fffc4 	addi	r17,r17,-1
  800d2c:	817ffd04 	addi	r5,r16,-12
  800d30:	b080052e 	bgeu	r22,r2,800d48 <_fwalk_reent+0x7c>
  800d34:	8080008f 	ldh	r2,2(r16)
  800d38:	9809883a 	mov	r4,r19
  800d3c:	14800226 	beq	r2,r18,800d48 <_fwalk_reent+0x7c>
  800d40:	a83ee83a 	callr	r21
  800d44:	b8aeb03a 	or	r23,r23,r2
  800d48:	84001a04 	addi	r16,r16,104
  800d4c:	8cbff51e 	bne	r17,r18,800d24 <__alt_data_end+0xff800d24>
  800d50:	a5000017 	ldw	r20,0(r20)
  800d54:	a03fee1e 	bne	r20,zero,800d10 <__alt_data_end+0xff800d10>
  800d58:	b805883a 	mov	r2,r23
  800d5c:	dfc00817 	ldw	ra,32(sp)
  800d60:	ddc00717 	ldw	r23,28(sp)
  800d64:	dd800617 	ldw	r22,24(sp)
  800d68:	dd400517 	ldw	r21,20(sp)
  800d6c:	dd000417 	ldw	r20,16(sp)
  800d70:	dcc00317 	ldw	r19,12(sp)
  800d74:	dc800217 	ldw	r18,8(sp)
  800d78:	dc400117 	ldw	r17,4(sp)
  800d7c:	dc000017 	ldw	r16,0(sp)
  800d80:	dec00904 	addi	sp,sp,36
  800d84:	f800283a 	ret
  800d88:	002f883a 	mov	r23,zero
  800d8c:	003ff206 	br	800d58 <__alt_data_end+0xff800d58>

00800d90 <_malloc_r>:
  800d90:	defff504 	addi	sp,sp,-44
  800d94:	dc800315 	stw	r18,12(sp)
  800d98:	dfc00a15 	stw	ra,40(sp)
  800d9c:	df000915 	stw	fp,36(sp)
  800da0:	ddc00815 	stw	r23,32(sp)
  800da4:	dd800715 	stw	r22,28(sp)
  800da8:	dd400615 	stw	r21,24(sp)
  800dac:	dd000515 	stw	r20,20(sp)
  800db0:	dcc00415 	stw	r19,16(sp)
  800db4:	dc400215 	stw	r17,8(sp)
  800db8:	dc000115 	stw	r16,4(sp)
  800dbc:	288002c4 	addi	r2,r5,11
  800dc0:	00c00584 	movi	r3,22
  800dc4:	2025883a 	mov	r18,r4
  800dc8:	18807f2e 	bgeu	r3,r2,800fc8 <_malloc_r+0x238>
  800dcc:	047ffe04 	movi	r17,-8
  800dd0:	1462703a 	and	r17,r2,r17
  800dd4:	8800a316 	blt	r17,zero,801064 <_malloc_r+0x2d4>
  800dd8:	8940a236 	bltu	r17,r5,801064 <_malloc_r+0x2d4>
  800ddc:	08035840 	call	803584 <__malloc_lock>
  800de0:	00807dc4 	movi	r2,503
  800de4:	1441e92e 	bgeu	r2,r17,80158c <_malloc_r+0x7fc>
  800de8:	8804d27a 	srli	r2,r17,9
  800dec:	1000a126 	beq	r2,zero,801074 <_malloc_r+0x2e4>
  800df0:	00c00104 	movi	r3,4
  800df4:	18811e36 	bltu	r3,r2,801270 <_malloc_r+0x4e0>
  800df8:	8804d1ba 	srli	r2,r17,6
  800dfc:	12000e44 	addi	r8,r2,57
  800e00:	11c00e04 	addi	r7,r2,56
  800e04:	4209883a 	add	r4,r8,r8
  800e08:	04c02034 	movhi	r19,128
  800e0c:	2109883a 	add	r4,r4,r4
  800e10:	9cd6e204 	addi	r19,r19,23432
  800e14:	2109883a 	add	r4,r4,r4
  800e18:	9909883a 	add	r4,r19,r4
  800e1c:	24000117 	ldw	r16,4(r4)
  800e20:	213ffe04 	addi	r4,r4,-8
  800e24:	24009726 	beq	r4,r16,801084 <_malloc_r+0x2f4>
  800e28:	80800117 	ldw	r2,4(r16)
  800e2c:	01bfff04 	movi	r6,-4
  800e30:	014003c4 	movi	r5,15
  800e34:	1184703a 	and	r2,r2,r6
  800e38:	1447c83a 	sub	r3,r2,r17
  800e3c:	28c00716 	blt	r5,r3,800e5c <_malloc_r+0xcc>
  800e40:	1800920e 	bge	r3,zero,80108c <_malloc_r+0x2fc>
  800e44:	84000317 	ldw	r16,12(r16)
  800e48:	24008e26 	beq	r4,r16,801084 <_malloc_r+0x2f4>
  800e4c:	80800117 	ldw	r2,4(r16)
  800e50:	1184703a 	and	r2,r2,r6
  800e54:	1447c83a 	sub	r3,r2,r17
  800e58:	28fff90e 	bge	r5,r3,800e40 <__alt_data_end+0xff800e40>
  800e5c:	3809883a 	mov	r4,r7
  800e60:	01802034 	movhi	r6,128
  800e64:	9c000417 	ldw	r16,16(r19)
  800e68:	3196e204 	addi	r6,r6,23432
  800e6c:	32000204 	addi	r8,r6,8
  800e70:	82013426 	beq	r16,r8,801344 <_malloc_r+0x5b4>
  800e74:	80c00117 	ldw	r3,4(r16)
  800e78:	00bfff04 	movi	r2,-4
  800e7c:	188e703a 	and	r7,r3,r2
  800e80:	3c45c83a 	sub	r2,r7,r17
  800e84:	00c003c4 	movi	r3,15
  800e88:	18811f16 	blt	r3,r2,801308 <_malloc_r+0x578>
  800e8c:	32000515 	stw	r8,20(r6)
  800e90:	32000415 	stw	r8,16(r6)
  800e94:	10007f0e 	bge	r2,zero,801094 <_malloc_r+0x304>
  800e98:	00807fc4 	movi	r2,511
  800e9c:	11c0fd36 	bltu	r2,r7,801294 <_malloc_r+0x504>
  800ea0:	3806d0fa 	srli	r3,r7,3
  800ea4:	01c00044 	movi	r7,1
  800ea8:	30800117 	ldw	r2,4(r6)
  800eac:	19400044 	addi	r5,r3,1
  800eb0:	294b883a 	add	r5,r5,r5
  800eb4:	1807d0ba 	srai	r3,r3,2
  800eb8:	294b883a 	add	r5,r5,r5
  800ebc:	294b883a 	add	r5,r5,r5
  800ec0:	298b883a 	add	r5,r5,r6
  800ec4:	38c6983a 	sll	r3,r7,r3
  800ec8:	29c00017 	ldw	r7,0(r5)
  800ecc:	2a7ffe04 	addi	r9,r5,-8
  800ed0:	1886b03a 	or	r3,r3,r2
  800ed4:	82400315 	stw	r9,12(r16)
  800ed8:	81c00215 	stw	r7,8(r16)
  800edc:	30c00115 	stw	r3,4(r6)
  800ee0:	2c000015 	stw	r16,0(r5)
  800ee4:	3c000315 	stw	r16,12(r7)
  800ee8:	2005d0ba 	srai	r2,r4,2
  800eec:	01400044 	movi	r5,1
  800ef0:	288a983a 	sll	r5,r5,r2
  800ef4:	19406f36 	bltu	r3,r5,8010b4 <_malloc_r+0x324>
  800ef8:	28c4703a 	and	r2,r5,r3
  800efc:	10000a1e 	bne	r2,zero,800f28 <_malloc_r+0x198>
  800f00:	00bfff04 	movi	r2,-4
  800f04:	294b883a 	add	r5,r5,r5
  800f08:	2088703a 	and	r4,r4,r2
  800f0c:	28c4703a 	and	r2,r5,r3
  800f10:	21000104 	addi	r4,r4,4
  800f14:	1000041e 	bne	r2,zero,800f28 <_malloc_r+0x198>
  800f18:	294b883a 	add	r5,r5,r5
  800f1c:	28c4703a 	and	r2,r5,r3
  800f20:	21000104 	addi	r4,r4,4
  800f24:	103ffc26 	beq	r2,zero,800f18 <__alt_data_end+0xff800f18>
  800f28:	02bfff04 	movi	r10,-4
  800f2c:	024003c4 	movi	r9,15
  800f30:	21800044 	addi	r6,r4,1
  800f34:	318d883a 	add	r6,r6,r6
  800f38:	318d883a 	add	r6,r6,r6
  800f3c:	318d883a 	add	r6,r6,r6
  800f40:	998d883a 	add	r6,r19,r6
  800f44:	333ffe04 	addi	r12,r6,-8
  800f48:	2017883a 	mov	r11,r4
  800f4c:	31800104 	addi	r6,r6,4
  800f50:	34000017 	ldw	r16,0(r6)
  800f54:	31fffd04 	addi	r7,r6,-12
  800f58:	81c0041e 	bne	r16,r7,800f6c <_malloc_r+0x1dc>
  800f5c:	0000fb06 	br	80134c <_malloc_r+0x5bc>
  800f60:	1801030e 	bge	r3,zero,801370 <_malloc_r+0x5e0>
  800f64:	84000317 	ldw	r16,12(r16)
  800f68:	81c0f826 	beq	r16,r7,80134c <_malloc_r+0x5bc>
  800f6c:	80800117 	ldw	r2,4(r16)
  800f70:	1284703a 	and	r2,r2,r10
  800f74:	1447c83a 	sub	r3,r2,r17
  800f78:	48fff90e 	bge	r9,r3,800f60 <__alt_data_end+0xff800f60>
  800f7c:	80800317 	ldw	r2,12(r16)
  800f80:	81000217 	ldw	r4,8(r16)
  800f84:	89400054 	ori	r5,r17,1
  800f88:	81400115 	stw	r5,4(r16)
  800f8c:	20800315 	stw	r2,12(r4)
  800f90:	11000215 	stw	r4,8(r2)
  800f94:	8463883a 	add	r17,r16,r17
  800f98:	9c400515 	stw	r17,20(r19)
  800f9c:	9c400415 	stw	r17,16(r19)
  800fa0:	18800054 	ori	r2,r3,1
  800fa4:	88800115 	stw	r2,4(r17)
  800fa8:	8a000315 	stw	r8,12(r17)
  800fac:	8a000215 	stw	r8,8(r17)
  800fb0:	88e3883a 	add	r17,r17,r3
  800fb4:	88c00015 	stw	r3,0(r17)
  800fb8:	9009883a 	mov	r4,r18
  800fbc:	08035a80 	call	8035a8 <__malloc_unlock>
  800fc0:	80800204 	addi	r2,r16,8
  800fc4:	00001b06 	br	801034 <_malloc_r+0x2a4>
  800fc8:	04400404 	movi	r17,16
  800fcc:	89402536 	bltu	r17,r5,801064 <_malloc_r+0x2d4>
  800fd0:	08035840 	call	803584 <__malloc_lock>
  800fd4:	00800184 	movi	r2,6
  800fd8:	01000084 	movi	r4,2
  800fdc:	04c02034 	movhi	r19,128
  800fe0:	1085883a 	add	r2,r2,r2
  800fe4:	9cd6e204 	addi	r19,r19,23432
  800fe8:	1085883a 	add	r2,r2,r2
  800fec:	9885883a 	add	r2,r19,r2
  800ff0:	14000117 	ldw	r16,4(r2)
  800ff4:	10fffe04 	addi	r3,r2,-8
  800ff8:	80c0d926 	beq	r16,r3,801360 <_malloc_r+0x5d0>
  800ffc:	80c00117 	ldw	r3,4(r16)
  801000:	81000317 	ldw	r4,12(r16)
  801004:	00bfff04 	movi	r2,-4
  801008:	1884703a 	and	r2,r3,r2
  80100c:	81400217 	ldw	r5,8(r16)
  801010:	8085883a 	add	r2,r16,r2
  801014:	10c00117 	ldw	r3,4(r2)
  801018:	29000315 	stw	r4,12(r5)
  80101c:	21400215 	stw	r5,8(r4)
  801020:	18c00054 	ori	r3,r3,1
  801024:	10c00115 	stw	r3,4(r2)
  801028:	9009883a 	mov	r4,r18
  80102c:	08035a80 	call	8035a8 <__malloc_unlock>
  801030:	80800204 	addi	r2,r16,8
  801034:	dfc00a17 	ldw	ra,40(sp)
  801038:	df000917 	ldw	fp,36(sp)
  80103c:	ddc00817 	ldw	r23,32(sp)
  801040:	dd800717 	ldw	r22,28(sp)
  801044:	dd400617 	ldw	r21,24(sp)
  801048:	dd000517 	ldw	r20,20(sp)
  80104c:	dcc00417 	ldw	r19,16(sp)
  801050:	dc800317 	ldw	r18,12(sp)
  801054:	dc400217 	ldw	r17,8(sp)
  801058:	dc000117 	ldw	r16,4(sp)
  80105c:	dec00b04 	addi	sp,sp,44
  801060:	f800283a 	ret
  801064:	00800304 	movi	r2,12
  801068:	90800015 	stw	r2,0(r18)
  80106c:	0005883a 	mov	r2,zero
  801070:	003ff006 	br	801034 <__alt_data_end+0xff801034>
  801074:	01002004 	movi	r4,128
  801078:	02001004 	movi	r8,64
  80107c:	01c00fc4 	movi	r7,63
  801080:	003f6106 	br	800e08 <__alt_data_end+0xff800e08>
  801084:	4009883a 	mov	r4,r8
  801088:	003f7506 	br	800e60 <__alt_data_end+0xff800e60>
  80108c:	81000317 	ldw	r4,12(r16)
  801090:	003fde06 	br	80100c <__alt_data_end+0xff80100c>
  801094:	81c5883a 	add	r2,r16,r7
  801098:	11400117 	ldw	r5,4(r2)
  80109c:	9009883a 	mov	r4,r18
  8010a0:	29400054 	ori	r5,r5,1
  8010a4:	11400115 	stw	r5,4(r2)
  8010a8:	08035a80 	call	8035a8 <__malloc_unlock>
  8010ac:	80800204 	addi	r2,r16,8
  8010b0:	003fe006 	br	801034 <__alt_data_end+0xff801034>
  8010b4:	9c000217 	ldw	r16,8(r19)
  8010b8:	00bfff04 	movi	r2,-4
  8010bc:	85800117 	ldw	r22,4(r16)
  8010c0:	b0ac703a 	and	r22,r22,r2
  8010c4:	b4400336 	bltu	r22,r17,8010d4 <_malloc_r+0x344>
  8010c8:	b445c83a 	sub	r2,r22,r17
  8010cc:	00c003c4 	movi	r3,15
  8010d0:	18805d16 	blt	r3,r2,801248 <_malloc_r+0x4b8>
  8010d4:	05c02034 	movhi	r23,128
  8010d8:	00802074 	movhi	r2,129
  8010dc:	10a31104 	addi	r2,r2,-29628
  8010e0:	bddc6804 	addi	r23,r23,29088
  8010e4:	15400017 	ldw	r21,0(r2)
  8010e8:	b8c00017 	ldw	r3,0(r23)
  8010ec:	00bfffc4 	movi	r2,-1
  8010f0:	858d883a 	add	r6,r16,r22
  8010f4:	8d6b883a 	add	r21,r17,r21
  8010f8:	1880ea26 	beq	r3,r2,8014a4 <_malloc_r+0x714>
  8010fc:	ad4403c4 	addi	r21,r21,4111
  801100:	00bc0004 	movi	r2,-4096
  801104:	a8aa703a 	and	r21,r21,r2
  801108:	a80b883a 	mov	r5,r21
  80110c:	9009883a 	mov	r4,r18
  801110:	d9800015 	stw	r6,0(sp)
  801114:	0801fb00 	call	801fb0 <_sbrk_r>
  801118:	1029883a 	mov	r20,r2
  80111c:	00bfffc4 	movi	r2,-1
  801120:	d9800017 	ldw	r6,0(sp)
  801124:	a080e826 	beq	r20,r2,8014c8 <_malloc_r+0x738>
  801128:	a180a636 	bltu	r20,r6,8013c4 <_malloc_r+0x634>
  80112c:	07002074 	movhi	fp,129
  801130:	e7231904 	addi	fp,fp,-29596
  801134:	e0800017 	ldw	r2,0(fp)
  801138:	a887883a 	add	r3,r21,r2
  80113c:	e0c00015 	stw	r3,0(fp)
  801140:	3500e626 	beq	r6,r20,8014dc <_malloc_r+0x74c>
  801144:	b9000017 	ldw	r4,0(r23)
  801148:	00bfffc4 	movi	r2,-1
  80114c:	2080ee26 	beq	r4,r2,801508 <_malloc_r+0x778>
  801150:	a185c83a 	sub	r2,r20,r6
  801154:	10c5883a 	add	r2,r2,r3
  801158:	e0800015 	stw	r2,0(fp)
  80115c:	a0c001cc 	andi	r3,r20,7
  801160:	1800bc26 	beq	r3,zero,801454 <_malloc_r+0x6c4>
  801164:	a0e9c83a 	sub	r20,r20,r3
  801168:	00840204 	movi	r2,4104
  80116c:	a5000204 	addi	r20,r20,8
  801170:	10c7c83a 	sub	r3,r2,r3
  801174:	a545883a 	add	r2,r20,r21
  801178:	1083ffcc 	andi	r2,r2,4095
  80117c:	18abc83a 	sub	r21,r3,r2
  801180:	a80b883a 	mov	r5,r21
  801184:	9009883a 	mov	r4,r18
  801188:	0801fb00 	call	801fb0 <_sbrk_r>
  80118c:	00ffffc4 	movi	r3,-1
  801190:	10c0e126 	beq	r2,r3,801518 <_malloc_r+0x788>
  801194:	1505c83a 	sub	r2,r2,r20
  801198:	1545883a 	add	r2,r2,r21
  80119c:	10800054 	ori	r2,r2,1
  8011a0:	e0c00017 	ldw	r3,0(fp)
  8011a4:	9d000215 	stw	r20,8(r19)
  8011a8:	a0800115 	stw	r2,4(r20)
  8011ac:	a8c7883a 	add	r3,r21,r3
  8011b0:	e0c00015 	stw	r3,0(fp)
  8011b4:	84c00e26 	beq	r16,r19,8011f0 <_malloc_r+0x460>
  8011b8:	018003c4 	movi	r6,15
  8011bc:	3580a72e 	bgeu	r6,r22,80145c <_malloc_r+0x6cc>
  8011c0:	81400117 	ldw	r5,4(r16)
  8011c4:	013ffe04 	movi	r4,-8
  8011c8:	b0bffd04 	addi	r2,r22,-12
  8011cc:	1104703a 	and	r2,r2,r4
  8011d0:	2900004c 	andi	r4,r5,1
  8011d4:	2088b03a 	or	r4,r4,r2
  8011d8:	81000115 	stw	r4,4(r16)
  8011dc:	01400144 	movi	r5,5
  8011e0:	8089883a 	add	r4,r16,r2
  8011e4:	21400115 	stw	r5,4(r4)
  8011e8:	21400215 	stw	r5,8(r4)
  8011ec:	3080cd36 	bltu	r6,r2,801524 <_malloc_r+0x794>
  8011f0:	00802074 	movhi	r2,129
  8011f4:	10a31004 	addi	r2,r2,-29632
  8011f8:	11000017 	ldw	r4,0(r2)
  8011fc:	20c0012e 	bgeu	r4,r3,801204 <_malloc_r+0x474>
  801200:	10c00015 	stw	r3,0(r2)
  801204:	00802074 	movhi	r2,129
  801208:	10a30f04 	addi	r2,r2,-29636
  80120c:	11000017 	ldw	r4,0(r2)
  801210:	9c000217 	ldw	r16,8(r19)
  801214:	20c0012e 	bgeu	r4,r3,80121c <_malloc_r+0x48c>
  801218:	10c00015 	stw	r3,0(r2)
  80121c:	80c00117 	ldw	r3,4(r16)
  801220:	00bfff04 	movi	r2,-4
  801224:	1886703a 	and	r3,r3,r2
  801228:	1c45c83a 	sub	r2,r3,r17
  80122c:	1c400236 	bltu	r3,r17,801238 <_malloc_r+0x4a8>
  801230:	00c003c4 	movi	r3,15
  801234:	18800416 	blt	r3,r2,801248 <_malloc_r+0x4b8>
  801238:	9009883a 	mov	r4,r18
  80123c:	08035a80 	call	8035a8 <__malloc_unlock>
  801240:	0005883a 	mov	r2,zero
  801244:	003f7b06 	br	801034 <__alt_data_end+0xff801034>
  801248:	88c00054 	ori	r3,r17,1
  80124c:	80c00115 	stw	r3,4(r16)
  801250:	8463883a 	add	r17,r16,r17
  801254:	10800054 	ori	r2,r2,1
  801258:	9c400215 	stw	r17,8(r19)
  80125c:	88800115 	stw	r2,4(r17)
  801260:	9009883a 	mov	r4,r18
  801264:	08035a80 	call	8035a8 <__malloc_unlock>
  801268:	80800204 	addi	r2,r16,8
  80126c:	003f7106 	br	801034 <__alt_data_end+0xff801034>
  801270:	00c00504 	movi	r3,20
  801274:	18804a2e 	bgeu	r3,r2,8013a0 <_malloc_r+0x610>
  801278:	00c01504 	movi	r3,84
  80127c:	18806e36 	bltu	r3,r2,801438 <_malloc_r+0x6a8>
  801280:	8804d33a 	srli	r2,r17,12
  801284:	12001bc4 	addi	r8,r2,111
  801288:	11c01b84 	addi	r7,r2,110
  80128c:	4209883a 	add	r4,r8,r8
  801290:	003edd06 	br	800e08 <__alt_data_end+0xff800e08>
  801294:	3804d27a 	srli	r2,r7,9
  801298:	00c00104 	movi	r3,4
  80129c:	1880442e 	bgeu	r3,r2,8013b0 <_malloc_r+0x620>
  8012a0:	00c00504 	movi	r3,20
  8012a4:	18808136 	bltu	r3,r2,8014ac <_malloc_r+0x71c>
  8012a8:	11401704 	addi	r5,r2,92
  8012ac:	10c016c4 	addi	r3,r2,91
  8012b0:	294b883a 	add	r5,r5,r5
  8012b4:	294b883a 	add	r5,r5,r5
  8012b8:	294b883a 	add	r5,r5,r5
  8012bc:	994b883a 	add	r5,r19,r5
  8012c0:	28800017 	ldw	r2,0(r5)
  8012c4:	01802034 	movhi	r6,128
  8012c8:	297ffe04 	addi	r5,r5,-8
  8012cc:	3196e204 	addi	r6,r6,23432
  8012d0:	28806526 	beq	r5,r2,801468 <_malloc_r+0x6d8>
  8012d4:	01bfff04 	movi	r6,-4
  8012d8:	10c00117 	ldw	r3,4(r2)
  8012dc:	1986703a 	and	r3,r3,r6
  8012e0:	38c0022e 	bgeu	r7,r3,8012ec <_malloc_r+0x55c>
  8012e4:	10800217 	ldw	r2,8(r2)
  8012e8:	28bffb1e 	bne	r5,r2,8012d8 <__alt_data_end+0xff8012d8>
  8012ec:	11400317 	ldw	r5,12(r2)
  8012f0:	98c00117 	ldw	r3,4(r19)
  8012f4:	81400315 	stw	r5,12(r16)
  8012f8:	80800215 	stw	r2,8(r16)
  8012fc:	2c000215 	stw	r16,8(r5)
  801300:	14000315 	stw	r16,12(r2)
  801304:	003ef806 	br	800ee8 <__alt_data_end+0xff800ee8>
  801308:	88c00054 	ori	r3,r17,1
  80130c:	80c00115 	stw	r3,4(r16)
  801310:	8463883a 	add	r17,r16,r17
  801314:	34400515 	stw	r17,20(r6)
  801318:	34400415 	stw	r17,16(r6)
  80131c:	10c00054 	ori	r3,r2,1
  801320:	8a000315 	stw	r8,12(r17)
  801324:	8a000215 	stw	r8,8(r17)
  801328:	88c00115 	stw	r3,4(r17)
  80132c:	88a3883a 	add	r17,r17,r2
  801330:	88800015 	stw	r2,0(r17)
  801334:	9009883a 	mov	r4,r18
  801338:	08035a80 	call	8035a8 <__malloc_unlock>
  80133c:	80800204 	addi	r2,r16,8
  801340:	003f3c06 	br	801034 <__alt_data_end+0xff801034>
  801344:	30c00117 	ldw	r3,4(r6)
  801348:	003ee706 	br	800ee8 <__alt_data_end+0xff800ee8>
  80134c:	5ac00044 	addi	r11,r11,1
  801350:	588000cc 	andi	r2,r11,3
  801354:	31800204 	addi	r6,r6,8
  801358:	103efd1e 	bne	r2,zero,800f50 <__alt_data_end+0xff800f50>
  80135c:	00002406 	br	8013f0 <_malloc_r+0x660>
  801360:	14000317 	ldw	r16,12(r2)
  801364:	143f251e 	bne	r2,r16,800ffc <__alt_data_end+0xff800ffc>
  801368:	21000084 	addi	r4,r4,2
  80136c:	003ebc06 	br	800e60 <__alt_data_end+0xff800e60>
  801370:	8085883a 	add	r2,r16,r2
  801374:	10c00117 	ldw	r3,4(r2)
  801378:	81000317 	ldw	r4,12(r16)
  80137c:	81400217 	ldw	r5,8(r16)
  801380:	18c00054 	ori	r3,r3,1
  801384:	10c00115 	stw	r3,4(r2)
  801388:	29000315 	stw	r4,12(r5)
  80138c:	21400215 	stw	r5,8(r4)
  801390:	9009883a 	mov	r4,r18
  801394:	08035a80 	call	8035a8 <__malloc_unlock>
  801398:	80800204 	addi	r2,r16,8
  80139c:	003f2506 	br	801034 <__alt_data_end+0xff801034>
  8013a0:	12001704 	addi	r8,r2,92
  8013a4:	11c016c4 	addi	r7,r2,91
  8013a8:	4209883a 	add	r4,r8,r8
  8013ac:	003e9606 	br	800e08 <__alt_data_end+0xff800e08>
  8013b0:	3804d1ba 	srli	r2,r7,6
  8013b4:	11400e44 	addi	r5,r2,57
  8013b8:	10c00e04 	addi	r3,r2,56
  8013bc:	294b883a 	add	r5,r5,r5
  8013c0:	003fbc06 	br	8012b4 <__alt_data_end+0xff8012b4>
  8013c4:	84ff5926 	beq	r16,r19,80112c <__alt_data_end+0xff80112c>
  8013c8:	00802034 	movhi	r2,128
  8013cc:	1096e204 	addi	r2,r2,23432
  8013d0:	14000217 	ldw	r16,8(r2)
  8013d4:	00bfff04 	movi	r2,-4
  8013d8:	80c00117 	ldw	r3,4(r16)
  8013dc:	1886703a 	and	r3,r3,r2
  8013e0:	003f9106 	br	801228 <__alt_data_end+0xff801228>
  8013e4:	60800217 	ldw	r2,8(r12)
  8013e8:	213fffc4 	addi	r4,r4,-1
  8013ec:	1300651e 	bne	r2,r12,801584 <_malloc_r+0x7f4>
  8013f0:	208000cc 	andi	r2,r4,3
  8013f4:	633ffe04 	addi	r12,r12,-8
  8013f8:	103ffa1e 	bne	r2,zero,8013e4 <__alt_data_end+0xff8013e4>
  8013fc:	98800117 	ldw	r2,4(r19)
  801400:	0146303a 	nor	r3,zero,r5
  801404:	1884703a 	and	r2,r3,r2
  801408:	98800115 	stw	r2,4(r19)
  80140c:	294b883a 	add	r5,r5,r5
  801410:	117f2836 	bltu	r2,r5,8010b4 <__alt_data_end+0xff8010b4>
  801414:	283f2726 	beq	r5,zero,8010b4 <__alt_data_end+0xff8010b4>
  801418:	2886703a 	and	r3,r5,r2
  80141c:	5809883a 	mov	r4,r11
  801420:	183ec31e 	bne	r3,zero,800f30 <__alt_data_end+0xff800f30>
  801424:	294b883a 	add	r5,r5,r5
  801428:	2886703a 	and	r3,r5,r2
  80142c:	21000104 	addi	r4,r4,4
  801430:	183ffc26 	beq	r3,zero,801424 <__alt_data_end+0xff801424>
  801434:	003ebe06 	br	800f30 <__alt_data_end+0xff800f30>
  801438:	00c05504 	movi	r3,340
  80143c:	18801236 	bltu	r3,r2,801488 <_malloc_r+0x6f8>
  801440:	8804d3fa 	srli	r2,r17,15
  801444:	12001e04 	addi	r8,r2,120
  801448:	11c01dc4 	addi	r7,r2,119
  80144c:	4209883a 	add	r4,r8,r8
  801450:	003e6d06 	br	800e08 <__alt_data_end+0xff800e08>
  801454:	00c40004 	movi	r3,4096
  801458:	003f4606 	br	801174 <__alt_data_end+0xff801174>
  80145c:	00800044 	movi	r2,1
  801460:	a0800115 	stw	r2,4(r20)
  801464:	003f7406 	br	801238 <__alt_data_end+0xff801238>
  801468:	1805d0ba 	srai	r2,r3,2
  80146c:	01c00044 	movi	r7,1
  801470:	30c00117 	ldw	r3,4(r6)
  801474:	388e983a 	sll	r7,r7,r2
  801478:	2805883a 	mov	r2,r5
  80147c:	38c6b03a 	or	r3,r7,r3
  801480:	30c00115 	stw	r3,4(r6)
  801484:	003f9b06 	br	8012f4 <__alt_data_end+0xff8012f4>
  801488:	00c15504 	movi	r3,1364
  80148c:	18801a36 	bltu	r3,r2,8014f8 <_malloc_r+0x768>
  801490:	8804d4ba 	srli	r2,r17,18
  801494:	12001f44 	addi	r8,r2,125
  801498:	11c01f04 	addi	r7,r2,124
  80149c:	4209883a 	add	r4,r8,r8
  8014a0:	003e5906 	br	800e08 <__alt_data_end+0xff800e08>
  8014a4:	ad400404 	addi	r21,r21,16
  8014a8:	003f1706 	br	801108 <__alt_data_end+0xff801108>
  8014ac:	00c01504 	movi	r3,84
  8014b0:	18802336 	bltu	r3,r2,801540 <_malloc_r+0x7b0>
  8014b4:	3804d33a 	srli	r2,r7,12
  8014b8:	11401bc4 	addi	r5,r2,111
  8014bc:	10c01b84 	addi	r3,r2,110
  8014c0:	294b883a 	add	r5,r5,r5
  8014c4:	003f7b06 	br	8012b4 <__alt_data_end+0xff8012b4>
  8014c8:	9c000217 	ldw	r16,8(r19)
  8014cc:	00bfff04 	movi	r2,-4
  8014d0:	80c00117 	ldw	r3,4(r16)
  8014d4:	1886703a 	and	r3,r3,r2
  8014d8:	003f5306 	br	801228 <__alt_data_end+0xff801228>
  8014dc:	3083ffcc 	andi	r2,r6,4095
  8014e0:	103f181e 	bne	r2,zero,801144 <__alt_data_end+0xff801144>
  8014e4:	99000217 	ldw	r4,8(r19)
  8014e8:	b545883a 	add	r2,r22,r21
  8014ec:	10800054 	ori	r2,r2,1
  8014f0:	20800115 	stw	r2,4(r4)
  8014f4:	003f3e06 	br	8011f0 <__alt_data_end+0xff8011f0>
  8014f8:	01003f84 	movi	r4,254
  8014fc:	02001fc4 	movi	r8,127
  801500:	01c01f84 	movi	r7,126
  801504:	003e4006 	br	800e08 <__alt_data_end+0xff800e08>
  801508:	00802034 	movhi	r2,128
  80150c:	109c6804 	addi	r2,r2,29088
  801510:	15000015 	stw	r20,0(r2)
  801514:	003f1106 	br	80115c <__alt_data_end+0xff80115c>
  801518:	00800044 	movi	r2,1
  80151c:	002b883a 	mov	r21,zero
  801520:	003f1f06 	br	8011a0 <__alt_data_end+0xff8011a0>
  801524:	81400204 	addi	r5,r16,8
  801528:	9009883a 	mov	r4,r18
  80152c:	08028180 	call	802818 <_free_r>
  801530:	00802074 	movhi	r2,129
  801534:	10a31904 	addi	r2,r2,-29596
  801538:	10c00017 	ldw	r3,0(r2)
  80153c:	003f2c06 	br	8011f0 <__alt_data_end+0xff8011f0>
  801540:	00c05504 	movi	r3,340
  801544:	18800536 	bltu	r3,r2,80155c <_malloc_r+0x7cc>
  801548:	3804d3fa 	srli	r2,r7,15
  80154c:	11401e04 	addi	r5,r2,120
  801550:	10c01dc4 	addi	r3,r2,119
  801554:	294b883a 	add	r5,r5,r5
  801558:	003f5606 	br	8012b4 <__alt_data_end+0xff8012b4>
  80155c:	00c15504 	movi	r3,1364
  801560:	18800536 	bltu	r3,r2,801578 <_malloc_r+0x7e8>
  801564:	3804d4ba 	srli	r2,r7,18
  801568:	11401f44 	addi	r5,r2,125
  80156c:	10c01f04 	addi	r3,r2,124
  801570:	294b883a 	add	r5,r5,r5
  801574:	003f4f06 	br	8012b4 <__alt_data_end+0xff8012b4>
  801578:	01403f84 	movi	r5,254
  80157c:	00c01f84 	movi	r3,126
  801580:	003f4c06 	br	8012b4 <__alt_data_end+0xff8012b4>
  801584:	98800117 	ldw	r2,4(r19)
  801588:	003fa006 	br	80140c <__alt_data_end+0xff80140c>
  80158c:	8808d0fa 	srli	r4,r17,3
  801590:	20800044 	addi	r2,r4,1
  801594:	1085883a 	add	r2,r2,r2
  801598:	003e9006 	br	800fdc <__alt_data_end+0xff800fdc>

0080159c <memchr>:
  80159c:	208000cc 	andi	r2,r4,3
  8015a0:	280f883a 	mov	r7,r5
  8015a4:	10003426 	beq	r2,zero,801678 <memchr+0xdc>
  8015a8:	30bfffc4 	addi	r2,r6,-1
  8015ac:	30001a26 	beq	r6,zero,801618 <memchr+0x7c>
  8015b0:	20c00003 	ldbu	r3,0(r4)
  8015b4:	29803fcc 	andi	r6,r5,255
  8015b8:	30c0051e 	bne	r6,r3,8015d0 <memchr+0x34>
  8015bc:	00001806 	br	801620 <memchr+0x84>
  8015c0:	10001526 	beq	r2,zero,801618 <memchr+0x7c>
  8015c4:	20c00003 	ldbu	r3,0(r4)
  8015c8:	10bfffc4 	addi	r2,r2,-1
  8015cc:	30c01426 	beq	r6,r3,801620 <memchr+0x84>
  8015d0:	21000044 	addi	r4,r4,1
  8015d4:	20c000cc 	andi	r3,r4,3
  8015d8:	183ff91e 	bne	r3,zero,8015c0 <__alt_data_end+0xff8015c0>
  8015dc:	020000c4 	movi	r8,3
  8015e0:	40801136 	bltu	r8,r2,801628 <memchr+0x8c>
  8015e4:	10000c26 	beq	r2,zero,801618 <memchr+0x7c>
  8015e8:	20c00003 	ldbu	r3,0(r4)
  8015ec:	29403fcc 	andi	r5,r5,255
  8015f0:	28c00b26 	beq	r5,r3,801620 <memchr+0x84>
  8015f4:	20c00044 	addi	r3,r4,1
  8015f8:	39803fcc 	andi	r6,r7,255
  8015fc:	2089883a 	add	r4,r4,r2
  801600:	00000306 	br	801610 <memchr+0x74>
  801604:	18c00044 	addi	r3,r3,1
  801608:	197fffc3 	ldbu	r5,-1(r3)
  80160c:	31400526 	beq	r6,r5,801624 <memchr+0x88>
  801610:	1805883a 	mov	r2,r3
  801614:	20fffb1e 	bne	r4,r3,801604 <__alt_data_end+0xff801604>
  801618:	0005883a 	mov	r2,zero
  80161c:	f800283a 	ret
  801620:	2005883a 	mov	r2,r4
  801624:	f800283a 	ret
  801628:	28c03fcc 	andi	r3,r5,255
  80162c:	1812923a 	slli	r9,r3,8
  801630:	02ffbff4 	movhi	r11,65279
  801634:	02a02074 	movhi	r10,32897
  801638:	48d2b03a 	or	r9,r9,r3
  80163c:	4806943a 	slli	r3,r9,16
  801640:	5affbfc4 	addi	r11,r11,-257
  801644:	52a02004 	addi	r10,r10,-32640
  801648:	48d2b03a 	or	r9,r9,r3
  80164c:	20c00017 	ldw	r3,0(r4)
  801650:	48c6f03a 	xor	r3,r9,r3
  801654:	1acd883a 	add	r6,r3,r11
  801658:	00c6303a 	nor	r3,zero,r3
  80165c:	30c6703a 	and	r3,r6,r3
  801660:	1a86703a 	and	r3,r3,r10
  801664:	183fe01e 	bne	r3,zero,8015e8 <__alt_data_end+0xff8015e8>
  801668:	10bfff04 	addi	r2,r2,-4
  80166c:	21000104 	addi	r4,r4,4
  801670:	40bff636 	bltu	r8,r2,80164c <__alt_data_end+0xff80164c>
  801674:	003fdb06 	br	8015e4 <__alt_data_end+0xff8015e4>
  801678:	3005883a 	mov	r2,r6
  80167c:	003fd706 	br	8015dc <__alt_data_end+0xff8015dc>

00801680 <memcpy>:
  801680:	defffd04 	addi	sp,sp,-12
  801684:	dfc00215 	stw	ra,8(sp)
  801688:	dc400115 	stw	r17,4(sp)
  80168c:	dc000015 	stw	r16,0(sp)
  801690:	00c003c4 	movi	r3,15
  801694:	2005883a 	mov	r2,r4
  801698:	1980452e 	bgeu	r3,r6,8017b0 <memcpy+0x130>
  80169c:	2906b03a 	or	r3,r5,r4
  8016a0:	18c000cc 	andi	r3,r3,3
  8016a4:	1800441e 	bne	r3,zero,8017b8 <memcpy+0x138>
  8016a8:	347ffc04 	addi	r17,r6,-16
  8016ac:	8822d13a 	srli	r17,r17,4
  8016b0:	28c00104 	addi	r3,r5,4
  8016b4:	23400104 	addi	r13,r4,4
  8016b8:	8820913a 	slli	r16,r17,4
  8016bc:	2b000204 	addi	r12,r5,8
  8016c0:	22c00204 	addi	r11,r4,8
  8016c4:	84000504 	addi	r16,r16,20
  8016c8:	2a800304 	addi	r10,r5,12
  8016cc:	22400304 	addi	r9,r4,12
  8016d0:	2c21883a 	add	r16,r5,r16
  8016d4:	2811883a 	mov	r8,r5
  8016d8:	200f883a 	mov	r7,r4
  8016dc:	41000017 	ldw	r4,0(r8)
  8016e0:	1fc00017 	ldw	ra,0(r3)
  8016e4:	63c00017 	ldw	r15,0(r12)
  8016e8:	39000015 	stw	r4,0(r7)
  8016ec:	53800017 	ldw	r14,0(r10)
  8016f0:	6fc00015 	stw	ra,0(r13)
  8016f4:	5bc00015 	stw	r15,0(r11)
  8016f8:	4b800015 	stw	r14,0(r9)
  8016fc:	18c00404 	addi	r3,r3,16
  801700:	39c00404 	addi	r7,r7,16
  801704:	42000404 	addi	r8,r8,16
  801708:	6b400404 	addi	r13,r13,16
  80170c:	63000404 	addi	r12,r12,16
  801710:	5ac00404 	addi	r11,r11,16
  801714:	52800404 	addi	r10,r10,16
  801718:	4a400404 	addi	r9,r9,16
  80171c:	1c3fef1e 	bne	r3,r16,8016dc <__alt_data_end+0xff8016dc>
  801720:	89c00044 	addi	r7,r17,1
  801724:	380e913a 	slli	r7,r7,4
  801728:	310003cc 	andi	r4,r6,15
  80172c:	02c000c4 	movi	r11,3
  801730:	11c7883a 	add	r3,r2,r7
  801734:	29cb883a 	add	r5,r5,r7
  801738:	5900212e 	bgeu	r11,r4,8017c0 <memcpy+0x140>
  80173c:	1813883a 	mov	r9,r3
  801740:	2811883a 	mov	r8,r5
  801744:	200f883a 	mov	r7,r4
  801748:	42800017 	ldw	r10,0(r8)
  80174c:	4a400104 	addi	r9,r9,4
  801750:	39ffff04 	addi	r7,r7,-4
  801754:	4abfff15 	stw	r10,-4(r9)
  801758:	42000104 	addi	r8,r8,4
  80175c:	59fffa36 	bltu	r11,r7,801748 <__alt_data_end+0xff801748>
  801760:	213fff04 	addi	r4,r4,-4
  801764:	2008d0ba 	srli	r4,r4,2
  801768:	318000cc 	andi	r6,r6,3
  80176c:	21000044 	addi	r4,r4,1
  801770:	2109883a 	add	r4,r4,r4
  801774:	2109883a 	add	r4,r4,r4
  801778:	1907883a 	add	r3,r3,r4
  80177c:	290b883a 	add	r5,r5,r4
  801780:	30000626 	beq	r6,zero,80179c <memcpy+0x11c>
  801784:	198d883a 	add	r6,r3,r6
  801788:	29c00003 	ldbu	r7,0(r5)
  80178c:	18c00044 	addi	r3,r3,1
  801790:	29400044 	addi	r5,r5,1
  801794:	19ffffc5 	stb	r7,-1(r3)
  801798:	19bffb1e 	bne	r3,r6,801788 <__alt_data_end+0xff801788>
  80179c:	dfc00217 	ldw	ra,8(sp)
  8017a0:	dc400117 	ldw	r17,4(sp)
  8017a4:	dc000017 	ldw	r16,0(sp)
  8017a8:	dec00304 	addi	sp,sp,12
  8017ac:	f800283a 	ret
  8017b0:	2007883a 	mov	r3,r4
  8017b4:	003ff206 	br	801780 <__alt_data_end+0xff801780>
  8017b8:	2007883a 	mov	r3,r4
  8017bc:	003ff106 	br	801784 <__alt_data_end+0xff801784>
  8017c0:	200d883a 	mov	r6,r4
  8017c4:	003fee06 	br	801780 <__alt_data_end+0xff801780>

008017c8 <memmove>:
  8017c8:	2005883a 	mov	r2,r4
  8017cc:	29000b2e 	bgeu	r5,r4,8017fc <memmove+0x34>
  8017d0:	298f883a 	add	r7,r5,r6
  8017d4:	21c0092e 	bgeu	r4,r7,8017fc <memmove+0x34>
  8017d8:	2187883a 	add	r3,r4,r6
  8017dc:	198bc83a 	sub	r5,r3,r6
  8017e0:	30004826 	beq	r6,zero,801904 <memmove+0x13c>
  8017e4:	39ffffc4 	addi	r7,r7,-1
  8017e8:	39000003 	ldbu	r4,0(r7)
  8017ec:	18ffffc4 	addi	r3,r3,-1
  8017f0:	19000005 	stb	r4,0(r3)
  8017f4:	28fffb1e 	bne	r5,r3,8017e4 <__alt_data_end+0xff8017e4>
  8017f8:	f800283a 	ret
  8017fc:	00c003c4 	movi	r3,15
  801800:	1980412e 	bgeu	r3,r6,801908 <memmove+0x140>
  801804:	2886b03a 	or	r3,r5,r2
  801808:	18c000cc 	andi	r3,r3,3
  80180c:	1800401e 	bne	r3,zero,801910 <memmove+0x148>
  801810:	33fffc04 	addi	r15,r6,-16
  801814:	781ed13a 	srli	r15,r15,4
  801818:	28c00104 	addi	r3,r5,4
  80181c:	13400104 	addi	r13,r2,4
  801820:	781c913a 	slli	r14,r15,4
  801824:	2b000204 	addi	r12,r5,8
  801828:	12c00204 	addi	r11,r2,8
  80182c:	73800504 	addi	r14,r14,20
  801830:	2a800304 	addi	r10,r5,12
  801834:	12400304 	addi	r9,r2,12
  801838:	2b9d883a 	add	r14,r5,r14
  80183c:	2811883a 	mov	r8,r5
  801840:	100f883a 	mov	r7,r2
  801844:	41000017 	ldw	r4,0(r8)
  801848:	39c00404 	addi	r7,r7,16
  80184c:	18c00404 	addi	r3,r3,16
  801850:	393ffc15 	stw	r4,-16(r7)
  801854:	193ffc17 	ldw	r4,-16(r3)
  801858:	6b400404 	addi	r13,r13,16
  80185c:	5ac00404 	addi	r11,r11,16
  801860:	693ffc15 	stw	r4,-16(r13)
  801864:	61000017 	ldw	r4,0(r12)
  801868:	4a400404 	addi	r9,r9,16
  80186c:	42000404 	addi	r8,r8,16
  801870:	593ffc15 	stw	r4,-16(r11)
  801874:	51000017 	ldw	r4,0(r10)
  801878:	63000404 	addi	r12,r12,16
  80187c:	52800404 	addi	r10,r10,16
  801880:	493ffc15 	stw	r4,-16(r9)
  801884:	1bbfef1e 	bne	r3,r14,801844 <__alt_data_end+0xff801844>
  801888:	79000044 	addi	r4,r15,1
  80188c:	2008913a 	slli	r4,r4,4
  801890:	328003cc 	andi	r10,r6,15
  801894:	02c000c4 	movi	r11,3
  801898:	1107883a 	add	r3,r2,r4
  80189c:	290b883a 	add	r5,r5,r4
  8018a0:	5a801e2e 	bgeu	r11,r10,80191c <memmove+0x154>
  8018a4:	1813883a 	mov	r9,r3
  8018a8:	2811883a 	mov	r8,r5
  8018ac:	500f883a 	mov	r7,r10
  8018b0:	41000017 	ldw	r4,0(r8)
  8018b4:	4a400104 	addi	r9,r9,4
  8018b8:	39ffff04 	addi	r7,r7,-4
  8018bc:	493fff15 	stw	r4,-4(r9)
  8018c0:	42000104 	addi	r8,r8,4
  8018c4:	59fffa36 	bltu	r11,r7,8018b0 <__alt_data_end+0xff8018b0>
  8018c8:	513fff04 	addi	r4,r10,-4
  8018cc:	2008d0ba 	srli	r4,r4,2
  8018d0:	318000cc 	andi	r6,r6,3
  8018d4:	21000044 	addi	r4,r4,1
  8018d8:	2109883a 	add	r4,r4,r4
  8018dc:	2109883a 	add	r4,r4,r4
  8018e0:	1907883a 	add	r3,r3,r4
  8018e4:	290b883a 	add	r5,r5,r4
  8018e8:	30000b26 	beq	r6,zero,801918 <memmove+0x150>
  8018ec:	198d883a 	add	r6,r3,r6
  8018f0:	29c00003 	ldbu	r7,0(r5)
  8018f4:	18c00044 	addi	r3,r3,1
  8018f8:	29400044 	addi	r5,r5,1
  8018fc:	19ffffc5 	stb	r7,-1(r3)
  801900:	19bffb1e 	bne	r3,r6,8018f0 <__alt_data_end+0xff8018f0>
  801904:	f800283a 	ret
  801908:	1007883a 	mov	r3,r2
  80190c:	003ff606 	br	8018e8 <__alt_data_end+0xff8018e8>
  801910:	1007883a 	mov	r3,r2
  801914:	003ff506 	br	8018ec <__alt_data_end+0xff8018ec>
  801918:	f800283a 	ret
  80191c:	500d883a 	mov	r6,r10
  801920:	003ff106 	br	8018e8 <__alt_data_end+0xff8018e8>

00801924 <memset>:
  801924:	20c000cc 	andi	r3,r4,3
  801928:	2005883a 	mov	r2,r4
  80192c:	18004426 	beq	r3,zero,801a40 <memset+0x11c>
  801930:	31ffffc4 	addi	r7,r6,-1
  801934:	30004026 	beq	r6,zero,801a38 <memset+0x114>
  801938:	2813883a 	mov	r9,r5
  80193c:	200d883a 	mov	r6,r4
  801940:	2007883a 	mov	r3,r4
  801944:	00000406 	br	801958 <memset+0x34>
  801948:	3a3fffc4 	addi	r8,r7,-1
  80194c:	31800044 	addi	r6,r6,1
  801950:	38003926 	beq	r7,zero,801a38 <memset+0x114>
  801954:	400f883a 	mov	r7,r8
  801958:	18c00044 	addi	r3,r3,1
  80195c:	32400005 	stb	r9,0(r6)
  801960:	1a0000cc 	andi	r8,r3,3
  801964:	403ff81e 	bne	r8,zero,801948 <__alt_data_end+0xff801948>
  801968:	010000c4 	movi	r4,3
  80196c:	21c02d2e 	bgeu	r4,r7,801a24 <memset+0x100>
  801970:	29003fcc 	andi	r4,r5,255
  801974:	200c923a 	slli	r6,r4,8
  801978:	3108b03a 	or	r4,r6,r4
  80197c:	200c943a 	slli	r6,r4,16
  801980:	218cb03a 	or	r6,r4,r6
  801984:	010003c4 	movi	r4,15
  801988:	21c0182e 	bgeu	r4,r7,8019ec <memset+0xc8>
  80198c:	3b3ffc04 	addi	r12,r7,-16
  801990:	6018d13a 	srli	r12,r12,4
  801994:	1a000104 	addi	r8,r3,4
  801998:	1ac00204 	addi	r11,r3,8
  80199c:	6008913a 	slli	r4,r12,4
  8019a0:	1a800304 	addi	r10,r3,12
  8019a4:	1813883a 	mov	r9,r3
  8019a8:	21000504 	addi	r4,r4,20
  8019ac:	1909883a 	add	r4,r3,r4
  8019b0:	49800015 	stw	r6,0(r9)
  8019b4:	41800015 	stw	r6,0(r8)
  8019b8:	59800015 	stw	r6,0(r11)
  8019bc:	51800015 	stw	r6,0(r10)
  8019c0:	42000404 	addi	r8,r8,16
  8019c4:	4a400404 	addi	r9,r9,16
  8019c8:	5ac00404 	addi	r11,r11,16
  8019cc:	52800404 	addi	r10,r10,16
  8019d0:	413ff71e 	bne	r8,r4,8019b0 <__alt_data_end+0xff8019b0>
  8019d4:	63000044 	addi	r12,r12,1
  8019d8:	6018913a 	slli	r12,r12,4
  8019dc:	39c003cc 	andi	r7,r7,15
  8019e0:	010000c4 	movi	r4,3
  8019e4:	1b07883a 	add	r3,r3,r12
  8019e8:	21c00e2e 	bgeu	r4,r7,801a24 <memset+0x100>
  8019ec:	1813883a 	mov	r9,r3
  8019f0:	3811883a 	mov	r8,r7
  8019f4:	010000c4 	movi	r4,3
  8019f8:	49800015 	stw	r6,0(r9)
  8019fc:	423fff04 	addi	r8,r8,-4
  801a00:	4a400104 	addi	r9,r9,4
  801a04:	223ffc36 	bltu	r4,r8,8019f8 <__alt_data_end+0xff8019f8>
  801a08:	393fff04 	addi	r4,r7,-4
  801a0c:	2008d0ba 	srli	r4,r4,2
  801a10:	39c000cc 	andi	r7,r7,3
  801a14:	21000044 	addi	r4,r4,1
  801a18:	2109883a 	add	r4,r4,r4
  801a1c:	2109883a 	add	r4,r4,r4
  801a20:	1907883a 	add	r3,r3,r4
  801a24:	38000526 	beq	r7,zero,801a3c <memset+0x118>
  801a28:	19cf883a 	add	r7,r3,r7
  801a2c:	19400005 	stb	r5,0(r3)
  801a30:	18c00044 	addi	r3,r3,1
  801a34:	38fffd1e 	bne	r7,r3,801a2c <__alt_data_end+0xff801a2c>
  801a38:	f800283a 	ret
  801a3c:	f800283a 	ret
  801a40:	2007883a 	mov	r3,r4
  801a44:	300f883a 	mov	r7,r6
  801a48:	003fc706 	br	801968 <__alt_data_end+0xff801968>

00801a4c <_realloc_r>:
  801a4c:	defff604 	addi	sp,sp,-40
  801a50:	dc800215 	stw	r18,8(sp)
  801a54:	dfc00915 	stw	ra,36(sp)
  801a58:	df000815 	stw	fp,32(sp)
  801a5c:	ddc00715 	stw	r23,28(sp)
  801a60:	dd800615 	stw	r22,24(sp)
  801a64:	dd400515 	stw	r21,20(sp)
  801a68:	dd000415 	stw	r20,16(sp)
  801a6c:	dcc00315 	stw	r19,12(sp)
  801a70:	dc400115 	stw	r17,4(sp)
  801a74:	dc000015 	stw	r16,0(sp)
  801a78:	3025883a 	mov	r18,r6
  801a7c:	2800b726 	beq	r5,zero,801d5c <_realloc_r+0x310>
  801a80:	282b883a 	mov	r21,r5
  801a84:	2029883a 	mov	r20,r4
  801a88:	08035840 	call	803584 <__malloc_lock>
  801a8c:	a8bfff17 	ldw	r2,-4(r21)
  801a90:	043fff04 	movi	r16,-4
  801a94:	90c002c4 	addi	r3,r18,11
  801a98:	01000584 	movi	r4,22
  801a9c:	acfffe04 	addi	r19,r21,-8
  801aa0:	1420703a 	and	r16,r2,r16
  801aa4:	20c0332e 	bgeu	r4,r3,801b74 <_realloc_r+0x128>
  801aa8:	047ffe04 	movi	r17,-8
  801aac:	1c62703a 	and	r17,r3,r17
  801ab0:	8807883a 	mov	r3,r17
  801ab4:	88005816 	blt	r17,zero,801c18 <_realloc_r+0x1cc>
  801ab8:	8c805736 	bltu	r17,r18,801c18 <_realloc_r+0x1cc>
  801abc:	80c0300e 	bge	r16,r3,801b80 <_realloc_r+0x134>
  801ac0:	07002034 	movhi	fp,128
  801ac4:	e716e204 	addi	fp,fp,23432
  801ac8:	e1c00217 	ldw	r7,8(fp)
  801acc:	9c09883a 	add	r4,r19,r16
  801ad0:	22000117 	ldw	r8,4(r4)
  801ad4:	21c06326 	beq	r4,r7,801c64 <_realloc_r+0x218>
  801ad8:	017fff84 	movi	r5,-2
  801adc:	414a703a 	and	r5,r8,r5
  801ae0:	214b883a 	add	r5,r4,r5
  801ae4:	29800117 	ldw	r6,4(r5)
  801ae8:	3180004c 	andi	r6,r6,1
  801aec:	30003f26 	beq	r6,zero,801bec <_realloc_r+0x1a0>
  801af0:	1080004c 	andi	r2,r2,1
  801af4:	10008326 	beq	r2,zero,801d04 <_realloc_r+0x2b8>
  801af8:	900b883a 	mov	r5,r18
  801afc:	a009883a 	mov	r4,r20
  801b00:	0800d900 	call	800d90 <_malloc_r>
  801b04:	1025883a 	mov	r18,r2
  801b08:	10011e26 	beq	r2,zero,801f84 <_realloc_r+0x538>
  801b0c:	a93fff17 	ldw	r4,-4(r21)
  801b10:	10fffe04 	addi	r3,r2,-8
  801b14:	00bfff84 	movi	r2,-2
  801b18:	2084703a 	and	r2,r4,r2
  801b1c:	9885883a 	add	r2,r19,r2
  801b20:	1880ee26 	beq	r3,r2,801edc <_realloc_r+0x490>
  801b24:	81bfff04 	addi	r6,r16,-4
  801b28:	00800904 	movi	r2,36
  801b2c:	1180b836 	bltu	r2,r6,801e10 <_realloc_r+0x3c4>
  801b30:	00c004c4 	movi	r3,19
  801b34:	19809636 	bltu	r3,r6,801d90 <_realloc_r+0x344>
  801b38:	9005883a 	mov	r2,r18
  801b3c:	a807883a 	mov	r3,r21
  801b40:	19000017 	ldw	r4,0(r3)
  801b44:	11000015 	stw	r4,0(r2)
  801b48:	19000117 	ldw	r4,4(r3)
  801b4c:	11000115 	stw	r4,4(r2)
  801b50:	18c00217 	ldw	r3,8(r3)
  801b54:	10c00215 	stw	r3,8(r2)
  801b58:	a80b883a 	mov	r5,r21
  801b5c:	a009883a 	mov	r4,r20
  801b60:	08028180 	call	802818 <_free_r>
  801b64:	a009883a 	mov	r4,r20
  801b68:	08035a80 	call	8035a8 <__malloc_unlock>
  801b6c:	9005883a 	mov	r2,r18
  801b70:	00001206 	br	801bbc <_realloc_r+0x170>
  801b74:	00c00404 	movi	r3,16
  801b78:	1823883a 	mov	r17,r3
  801b7c:	003fce06 	br	801ab8 <__alt_data_end+0xff801ab8>
  801b80:	a825883a 	mov	r18,r21
  801b84:	8445c83a 	sub	r2,r16,r17
  801b88:	00c003c4 	movi	r3,15
  801b8c:	18802636 	bltu	r3,r2,801c28 <_realloc_r+0x1dc>
  801b90:	99800117 	ldw	r6,4(r19)
  801b94:	9c07883a 	add	r3,r19,r16
  801b98:	3180004c 	andi	r6,r6,1
  801b9c:	3420b03a 	or	r16,r6,r16
  801ba0:	9c000115 	stw	r16,4(r19)
  801ba4:	18800117 	ldw	r2,4(r3)
  801ba8:	10800054 	ori	r2,r2,1
  801bac:	18800115 	stw	r2,4(r3)
  801bb0:	a009883a 	mov	r4,r20
  801bb4:	08035a80 	call	8035a8 <__malloc_unlock>
  801bb8:	9005883a 	mov	r2,r18
  801bbc:	dfc00917 	ldw	ra,36(sp)
  801bc0:	df000817 	ldw	fp,32(sp)
  801bc4:	ddc00717 	ldw	r23,28(sp)
  801bc8:	dd800617 	ldw	r22,24(sp)
  801bcc:	dd400517 	ldw	r21,20(sp)
  801bd0:	dd000417 	ldw	r20,16(sp)
  801bd4:	dcc00317 	ldw	r19,12(sp)
  801bd8:	dc800217 	ldw	r18,8(sp)
  801bdc:	dc400117 	ldw	r17,4(sp)
  801be0:	dc000017 	ldw	r16,0(sp)
  801be4:	dec00a04 	addi	sp,sp,40
  801be8:	f800283a 	ret
  801bec:	017fff04 	movi	r5,-4
  801bf0:	414a703a 	and	r5,r8,r5
  801bf4:	814d883a 	add	r6,r16,r5
  801bf8:	30c01f16 	blt	r6,r3,801c78 <_realloc_r+0x22c>
  801bfc:	20800317 	ldw	r2,12(r4)
  801c00:	20c00217 	ldw	r3,8(r4)
  801c04:	a825883a 	mov	r18,r21
  801c08:	3021883a 	mov	r16,r6
  801c0c:	18800315 	stw	r2,12(r3)
  801c10:	10c00215 	stw	r3,8(r2)
  801c14:	003fdb06 	br	801b84 <__alt_data_end+0xff801b84>
  801c18:	00800304 	movi	r2,12
  801c1c:	a0800015 	stw	r2,0(r20)
  801c20:	0005883a 	mov	r2,zero
  801c24:	003fe506 	br	801bbc <__alt_data_end+0xff801bbc>
  801c28:	98c00117 	ldw	r3,4(r19)
  801c2c:	9c4b883a 	add	r5,r19,r17
  801c30:	11000054 	ori	r4,r2,1
  801c34:	18c0004c 	andi	r3,r3,1
  801c38:	1c62b03a 	or	r17,r3,r17
  801c3c:	9c400115 	stw	r17,4(r19)
  801c40:	29000115 	stw	r4,4(r5)
  801c44:	2885883a 	add	r2,r5,r2
  801c48:	10c00117 	ldw	r3,4(r2)
  801c4c:	29400204 	addi	r5,r5,8
  801c50:	a009883a 	mov	r4,r20
  801c54:	18c00054 	ori	r3,r3,1
  801c58:	10c00115 	stw	r3,4(r2)
  801c5c:	08028180 	call	802818 <_free_r>
  801c60:	003fd306 	br	801bb0 <__alt_data_end+0xff801bb0>
  801c64:	017fff04 	movi	r5,-4
  801c68:	414a703a 	and	r5,r8,r5
  801c6c:	89800404 	addi	r6,r17,16
  801c70:	8151883a 	add	r8,r16,r5
  801c74:	4180590e 	bge	r8,r6,801ddc <_realloc_r+0x390>
  801c78:	1080004c 	andi	r2,r2,1
  801c7c:	103f9e1e 	bne	r2,zero,801af8 <__alt_data_end+0xff801af8>
  801c80:	adbffe17 	ldw	r22,-8(r21)
  801c84:	00bfff04 	movi	r2,-4
  801c88:	9dadc83a 	sub	r22,r19,r22
  801c8c:	b1800117 	ldw	r6,4(r22)
  801c90:	3084703a 	and	r2,r6,r2
  801c94:	20002026 	beq	r4,zero,801d18 <_realloc_r+0x2cc>
  801c98:	80af883a 	add	r23,r16,r2
  801c9c:	b96f883a 	add	r23,r23,r5
  801ca0:	21c05f26 	beq	r4,r7,801e20 <_realloc_r+0x3d4>
  801ca4:	b8c01c16 	blt	r23,r3,801d18 <_realloc_r+0x2cc>
  801ca8:	20800317 	ldw	r2,12(r4)
  801cac:	20c00217 	ldw	r3,8(r4)
  801cb0:	81bfff04 	addi	r6,r16,-4
  801cb4:	01000904 	movi	r4,36
  801cb8:	18800315 	stw	r2,12(r3)
  801cbc:	10c00215 	stw	r3,8(r2)
  801cc0:	b0c00217 	ldw	r3,8(r22)
  801cc4:	b0800317 	ldw	r2,12(r22)
  801cc8:	b4800204 	addi	r18,r22,8
  801ccc:	18800315 	stw	r2,12(r3)
  801cd0:	10c00215 	stw	r3,8(r2)
  801cd4:	21801b36 	bltu	r4,r6,801d44 <_realloc_r+0x2f8>
  801cd8:	008004c4 	movi	r2,19
  801cdc:	1180352e 	bgeu	r2,r6,801db4 <_realloc_r+0x368>
  801ce0:	a8800017 	ldw	r2,0(r21)
  801ce4:	b0800215 	stw	r2,8(r22)
  801ce8:	a8800117 	ldw	r2,4(r21)
  801cec:	b0800315 	stw	r2,12(r22)
  801cf0:	008006c4 	movi	r2,27
  801cf4:	11807f36 	bltu	r2,r6,801ef4 <_realloc_r+0x4a8>
  801cf8:	b0800404 	addi	r2,r22,16
  801cfc:	ad400204 	addi	r21,r21,8
  801d00:	00002d06 	br	801db8 <_realloc_r+0x36c>
  801d04:	adbffe17 	ldw	r22,-8(r21)
  801d08:	00bfff04 	movi	r2,-4
  801d0c:	9dadc83a 	sub	r22,r19,r22
  801d10:	b1000117 	ldw	r4,4(r22)
  801d14:	2084703a 	and	r2,r4,r2
  801d18:	b03f7726 	beq	r22,zero,801af8 <__alt_data_end+0xff801af8>
  801d1c:	80af883a 	add	r23,r16,r2
  801d20:	b8ff7516 	blt	r23,r3,801af8 <__alt_data_end+0xff801af8>
  801d24:	b0800317 	ldw	r2,12(r22)
  801d28:	b0c00217 	ldw	r3,8(r22)
  801d2c:	81bfff04 	addi	r6,r16,-4
  801d30:	01000904 	movi	r4,36
  801d34:	18800315 	stw	r2,12(r3)
  801d38:	10c00215 	stw	r3,8(r2)
  801d3c:	b4800204 	addi	r18,r22,8
  801d40:	21bfe52e 	bgeu	r4,r6,801cd8 <__alt_data_end+0xff801cd8>
  801d44:	a80b883a 	mov	r5,r21
  801d48:	9009883a 	mov	r4,r18
  801d4c:	08017c80 	call	8017c8 <memmove>
  801d50:	b821883a 	mov	r16,r23
  801d54:	b027883a 	mov	r19,r22
  801d58:	003f8a06 	br	801b84 <__alt_data_end+0xff801b84>
  801d5c:	300b883a 	mov	r5,r6
  801d60:	dfc00917 	ldw	ra,36(sp)
  801d64:	df000817 	ldw	fp,32(sp)
  801d68:	ddc00717 	ldw	r23,28(sp)
  801d6c:	dd800617 	ldw	r22,24(sp)
  801d70:	dd400517 	ldw	r21,20(sp)
  801d74:	dd000417 	ldw	r20,16(sp)
  801d78:	dcc00317 	ldw	r19,12(sp)
  801d7c:	dc800217 	ldw	r18,8(sp)
  801d80:	dc400117 	ldw	r17,4(sp)
  801d84:	dc000017 	ldw	r16,0(sp)
  801d88:	dec00a04 	addi	sp,sp,40
  801d8c:	0800d901 	jmpi	800d90 <_malloc_r>
  801d90:	a8c00017 	ldw	r3,0(r21)
  801d94:	90c00015 	stw	r3,0(r18)
  801d98:	a8c00117 	ldw	r3,4(r21)
  801d9c:	90c00115 	stw	r3,4(r18)
  801da0:	00c006c4 	movi	r3,27
  801da4:	19804536 	bltu	r3,r6,801ebc <_realloc_r+0x470>
  801da8:	90800204 	addi	r2,r18,8
  801dac:	a8c00204 	addi	r3,r21,8
  801db0:	003f6306 	br	801b40 <__alt_data_end+0xff801b40>
  801db4:	9005883a 	mov	r2,r18
  801db8:	a8c00017 	ldw	r3,0(r21)
  801dbc:	b821883a 	mov	r16,r23
  801dc0:	b027883a 	mov	r19,r22
  801dc4:	10c00015 	stw	r3,0(r2)
  801dc8:	a8c00117 	ldw	r3,4(r21)
  801dcc:	10c00115 	stw	r3,4(r2)
  801dd0:	a8c00217 	ldw	r3,8(r21)
  801dd4:	10c00215 	stw	r3,8(r2)
  801dd8:	003f6a06 	br	801b84 <__alt_data_end+0xff801b84>
  801ddc:	9c67883a 	add	r19,r19,r17
  801de0:	4445c83a 	sub	r2,r8,r17
  801de4:	e4c00215 	stw	r19,8(fp)
  801de8:	10800054 	ori	r2,r2,1
  801dec:	98800115 	stw	r2,4(r19)
  801df0:	a8bfff17 	ldw	r2,-4(r21)
  801df4:	a009883a 	mov	r4,r20
  801df8:	1080004c 	andi	r2,r2,1
  801dfc:	1462b03a 	or	r17,r2,r17
  801e00:	ac7fff15 	stw	r17,-4(r21)
  801e04:	08035a80 	call	8035a8 <__malloc_unlock>
  801e08:	a805883a 	mov	r2,r21
  801e0c:	003f6b06 	br	801bbc <__alt_data_end+0xff801bbc>
  801e10:	a80b883a 	mov	r5,r21
  801e14:	9009883a 	mov	r4,r18
  801e18:	08017c80 	call	8017c8 <memmove>
  801e1c:	003f4e06 	br	801b58 <__alt_data_end+0xff801b58>
  801e20:	89000404 	addi	r4,r17,16
  801e24:	b93fbc16 	blt	r23,r4,801d18 <__alt_data_end+0xff801d18>
  801e28:	b0800317 	ldw	r2,12(r22)
  801e2c:	b0c00217 	ldw	r3,8(r22)
  801e30:	81bfff04 	addi	r6,r16,-4
  801e34:	01000904 	movi	r4,36
  801e38:	18800315 	stw	r2,12(r3)
  801e3c:	10c00215 	stw	r3,8(r2)
  801e40:	b4800204 	addi	r18,r22,8
  801e44:	21804336 	bltu	r4,r6,801f54 <_realloc_r+0x508>
  801e48:	008004c4 	movi	r2,19
  801e4c:	11803f2e 	bgeu	r2,r6,801f4c <_realloc_r+0x500>
  801e50:	a8800017 	ldw	r2,0(r21)
  801e54:	b0800215 	stw	r2,8(r22)
  801e58:	a8800117 	ldw	r2,4(r21)
  801e5c:	b0800315 	stw	r2,12(r22)
  801e60:	008006c4 	movi	r2,27
  801e64:	11803f36 	bltu	r2,r6,801f64 <_realloc_r+0x518>
  801e68:	b0800404 	addi	r2,r22,16
  801e6c:	ad400204 	addi	r21,r21,8
  801e70:	a8c00017 	ldw	r3,0(r21)
  801e74:	10c00015 	stw	r3,0(r2)
  801e78:	a8c00117 	ldw	r3,4(r21)
  801e7c:	10c00115 	stw	r3,4(r2)
  801e80:	a8c00217 	ldw	r3,8(r21)
  801e84:	10c00215 	stw	r3,8(r2)
  801e88:	b447883a 	add	r3,r22,r17
  801e8c:	bc45c83a 	sub	r2,r23,r17
  801e90:	e0c00215 	stw	r3,8(fp)
  801e94:	10800054 	ori	r2,r2,1
  801e98:	18800115 	stw	r2,4(r3)
  801e9c:	b0800117 	ldw	r2,4(r22)
  801ea0:	a009883a 	mov	r4,r20
  801ea4:	1080004c 	andi	r2,r2,1
  801ea8:	1462b03a 	or	r17,r2,r17
  801eac:	b4400115 	stw	r17,4(r22)
  801eb0:	08035a80 	call	8035a8 <__malloc_unlock>
  801eb4:	9005883a 	mov	r2,r18
  801eb8:	003f4006 	br	801bbc <__alt_data_end+0xff801bbc>
  801ebc:	a8c00217 	ldw	r3,8(r21)
  801ec0:	90c00215 	stw	r3,8(r18)
  801ec4:	a8c00317 	ldw	r3,12(r21)
  801ec8:	90c00315 	stw	r3,12(r18)
  801ecc:	30801126 	beq	r6,r2,801f14 <_realloc_r+0x4c8>
  801ed0:	90800404 	addi	r2,r18,16
  801ed4:	a8c00404 	addi	r3,r21,16
  801ed8:	003f1906 	br	801b40 <__alt_data_end+0xff801b40>
  801edc:	90ffff17 	ldw	r3,-4(r18)
  801ee0:	00bfff04 	movi	r2,-4
  801ee4:	a825883a 	mov	r18,r21
  801ee8:	1884703a 	and	r2,r3,r2
  801eec:	80a1883a 	add	r16,r16,r2
  801ef0:	003f2406 	br	801b84 <__alt_data_end+0xff801b84>
  801ef4:	a8800217 	ldw	r2,8(r21)
  801ef8:	b0800415 	stw	r2,16(r22)
  801efc:	a8800317 	ldw	r2,12(r21)
  801f00:	b0800515 	stw	r2,20(r22)
  801f04:	31000a26 	beq	r6,r4,801f30 <_realloc_r+0x4e4>
  801f08:	b0800604 	addi	r2,r22,24
  801f0c:	ad400404 	addi	r21,r21,16
  801f10:	003fa906 	br	801db8 <__alt_data_end+0xff801db8>
  801f14:	a9000417 	ldw	r4,16(r21)
  801f18:	90800604 	addi	r2,r18,24
  801f1c:	a8c00604 	addi	r3,r21,24
  801f20:	91000415 	stw	r4,16(r18)
  801f24:	a9000517 	ldw	r4,20(r21)
  801f28:	91000515 	stw	r4,20(r18)
  801f2c:	003f0406 	br	801b40 <__alt_data_end+0xff801b40>
  801f30:	a8c00417 	ldw	r3,16(r21)
  801f34:	ad400604 	addi	r21,r21,24
  801f38:	b0800804 	addi	r2,r22,32
  801f3c:	b0c00615 	stw	r3,24(r22)
  801f40:	a8ffff17 	ldw	r3,-4(r21)
  801f44:	b0c00715 	stw	r3,28(r22)
  801f48:	003f9b06 	br	801db8 <__alt_data_end+0xff801db8>
  801f4c:	9005883a 	mov	r2,r18
  801f50:	003fc706 	br	801e70 <__alt_data_end+0xff801e70>
  801f54:	a80b883a 	mov	r5,r21
  801f58:	9009883a 	mov	r4,r18
  801f5c:	08017c80 	call	8017c8 <memmove>
  801f60:	003fc906 	br	801e88 <__alt_data_end+0xff801e88>
  801f64:	a8800217 	ldw	r2,8(r21)
  801f68:	b0800415 	stw	r2,16(r22)
  801f6c:	a8800317 	ldw	r2,12(r21)
  801f70:	b0800515 	stw	r2,20(r22)
  801f74:	31000726 	beq	r6,r4,801f94 <_realloc_r+0x548>
  801f78:	b0800604 	addi	r2,r22,24
  801f7c:	ad400404 	addi	r21,r21,16
  801f80:	003fbb06 	br	801e70 <__alt_data_end+0xff801e70>
  801f84:	a009883a 	mov	r4,r20
  801f88:	08035a80 	call	8035a8 <__malloc_unlock>
  801f8c:	0005883a 	mov	r2,zero
  801f90:	003f0a06 	br	801bbc <__alt_data_end+0xff801bbc>
  801f94:	a8c00417 	ldw	r3,16(r21)
  801f98:	ad400604 	addi	r21,r21,24
  801f9c:	b0800804 	addi	r2,r22,32
  801fa0:	b0c00615 	stw	r3,24(r22)
  801fa4:	a8ffff17 	ldw	r3,-4(r21)
  801fa8:	b0c00715 	stw	r3,28(r22)
  801fac:	003fb006 	br	801e70 <__alt_data_end+0xff801e70>

00801fb0 <_sbrk_r>:
  801fb0:	defffd04 	addi	sp,sp,-12
  801fb4:	dc000015 	stw	r16,0(sp)
  801fb8:	04002074 	movhi	r16,129
  801fbc:	dc400115 	stw	r17,4(sp)
  801fc0:	84231204 	addi	r16,r16,-29624
  801fc4:	2023883a 	mov	r17,r4
  801fc8:	2809883a 	mov	r4,r5
  801fcc:	dfc00215 	stw	ra,8(sp)
  801fd0:	80000015 	stw	zero,0(r16)
  801fd4:	08037680 	call	803768 <sbrk>
  801fd8:	00ffffc4 	movi	r3,-1
  801fdc:	10c00526 	beq	r2,r3,801ff4 <_sbrk_r+0x44>
  801fe0:	dfc00217 	ldw	ra,8(sp)
  801fe4:	dc400117 	ldw	r17,4(sp)
  801fe8:	dc000017 	ldw	r16,0(sp)
  801fec:	dec00304 	addi	sp,sp,12
  801ff0:	f800283a 	ret
  801ff4:	80c00017 	ldw	r3,0(r16)
  801ff8:	183ff926 	beq	r3,zero,801fe0 <__alt_data_end+0xff801fe0>
  801ffc:	88c00015 	stw	r3,0(r17)
  802000:	003ff706 	br	801fe0 <__alt_data_end+0xff801fe0>

00802004 <__sread>:
  802004:	defffe04 	addi	sp,sp,-8
  802008:	dc000015 	stw	r16,0(sp)
  80200c:	2821883a 	mov	r16,r5
  802010:	2940038f 	ldh	r5,14(r5)
  802014:	dfc00115 	stw	ra,4(sp)
  802018:	0802d440 	call	802d44 <_read_r>
  80201c:	10000716 	blt	r2,zero,80203c <__sread+0x38>
  802020:	80c01417 	ldw	r3,80(r16)
  802024:	1887883a 	add	r3,r3,r2
  802028:	80c01415 	stw	r3,80(r16)
  80202c:	dfc00117 	ldw	ra,4(sp)
  802030:	dc000017 	ldw	r16,0(sp)
  802034:	dec00204 	addi	sp,sp,8
  802038:	f800283a 	ret
  80203c:	80c0030b 	ldhu	r3,12(r16)
  802040:	18fbffcc 	andi	r3,r3,61439
  802044:	80c0030d 	sth	r3,12(r16)
  802048:	dfc00117 	ldw	ra,4(sp)
  80204c:	dc000017 	ldw	r16,0(sp)
  802050:	dec00204 	addi	sp,sp,8
  802054:	f800283a 	ret

00802058 <__seofread>:
  802058:	0005883a 	mov	r2,zero
  80205c:	f800283a 	ret

00802060 <__swrite>:
  802060:	2880030b 	ldhu	r2,12(r5)
  802064:	defffb04 	addi	sp,sp,-20
  802068:	dcc00315 	stw	r19,12(sp)
  80206c:	dc800215 	stw	r18,8(sp)
  802070:	dc400115 	stw	r17,4(sp)
  802074:	dc000015 	stw	r16,0(sp)
  802078:	dfc00415 	stw	ra,16(sp)
  80207c:	10c0400c 	andi	r3,r2,256
  802080:	2821883a 	mov	r16,r5
  802084:	2023883a 	mov	r17,r4
  802088:	3025883a 	mov	r18,r6
  80208c:	3827883a 	mov	r19,r7
  802090:	18000526 	beq	r3,zero,8020a8 <__swrite+0x48>
  802094:	2940038f 	ldh	r5,14(r5)
  802098:	01c00084 	movi	r7,2
  80209c:	000d883a 	mov	r6,zero
  8020a0:	0802b280 	call	802b28 <_lseek_r>
  8020a4:	8080030b 	ldhu	r2,12(r16)
  8020a8:	8140038f 	ldh	r5,14(r16)
  8020ac:	10bbffcc 	andi	r2,r2,61439
  8020b0:	980f883a 	mov	r7,r19
  8020b4:	900d883a 	mov	r6,r18
  8020b8:	8809883a 	mov	r4,r17
  8020bc:	8080030d 	sth	r2,12(r16)
  8020c0:	dfc00417 	ldw	ra,16(sp)
  8020c4:	dcc00317 	ldw	r19,12(sp)
  8020c8:	dc800217 	ldw	r18,8(sp)
  8020cc:	dc400117 	ldw	r17,4(sp)
  8020d0:	dc000017 	ldw	r16,0(sp)
  8020d4:	dec00504 	addi	sp,sp,20
  8020d8:	08021401 	jmpi	802140 <_write_r>

008020dc <__sseek>:
  8020dc:	defffe04 	addi	sp,sp,-8
  8020e0:	dc000015 	stw	r16,0(sp)
  8020e4:	2821883a 	mov	r16,r5
  8020e8:	2940038f 	ldh	r5,14(r5)
  8020ec:	dfc00115 	stw	ra,4(sp)
  8020f0:	0802b280 	call	802b28 <_lseek_r>
  8020f4:	00ffffc4 	movi	r3,-1
  8020f8:	10c00826 	beq	r2,r3,80211c <__sseek+0x40>
  8020fc:	80c0030b 	ldhu	r3,12(r16)
  802100:	80801415 	stw	r2,80(r16)
  802104:	18c40014 	ori	r3,r3,4096
  802108:	80c0030d 	sth	r3,12(r16)
  80210c:	dfc00117 	ldw	ra,4(sp)
  802110:	dc000017 	ldw	r16,0(sp)
  802114:	dec00204 	addi	sp,sp,8
  802118:	f800283a 	ret
  80211c:	80c0030b 	ldhu	r3,12(r16)
  802120:	18fbffcc 	andi	r3,r3,61439
  802124:	80c0030d 	sth	r3,12(r16)
  802128:	dfc00117 	ldw	ra,4(sp)
  80212c:	dc000017 	ldw	r16,0(sp)
  802130:	dec00204 	addi	sp,sp,8
  802134:	f800283a 	ret

00802138 <__sclose>:
  802138:	2940038f 	ldh	r5,14(r5)
  80213c:	08022f41 	jmpi	8022f4 <_close_r>

00802140 <_write_r>:
  802140:	defffd04 	addi	sp,sp,-12
  802144:	2805883a 	mov	r2,r5
  802148:	dc000015 	stw	r16,0(sp)
  80214c:	04002074 	movhi	r16,129
  802150:	dc400115 	stw	r17,4(sp)
  802154:	300b883a 	mov	r5,r6
  802158:	84231204 	addi	r16,r16,-29624
  80215c:	2023883a 	mov	r17,r4
  802160:	380d883a 	mov	r6,r7
  802164:	1009883a 	mov	r4,r2
  802168:	dfc00215 	stw	ra,8(sp)
  80216c:	80000015 	stw	zero,0(r16)
  802170:	08038540 	call	803854 <write>
  802174:	00ffffc4 	movi	r3,-1
  802178:	10c00526 	beq	r2,r3,802190 <_write_r+0x50>
  80217c:	dfc00217 	ldw	ra,8(sp)
  802180:	dc400117 	ldw	r17,4(sp)
  802184:	dc000017 	ldw	r16,0(sp)
  802188:	dec00304 	addi	sp,sp,12
  80218c:	f800283a 	ret
  802190:	80c00017 	ldw	r3,0(r16)
  802194:	183ff926 	beq	r3,zero,80217c <__alt_data_end+0xff80217c>
  802198:	88c00015 	stw	r3,0(r17)
  80219c:	003ff706 	br	80217c <__alt_data_end+0xff80217c>

008021a0 <__swsetup_r>:
  8021a0:	00802034 	movhi	r2,128
  8021a4:	defffd04 	addi	sp,sp,-12
  8021a8:	109c6704 	addi	r2,r2,29084
  8021ac:	dc400115 	stw	r17,4(sp)
  8021b0:	2023883a 	mov	r17,r4
  8021b4:	11000017 	ldw	r4,0(r2)
  8021b8:	dc000015 	stw	r16,0(sp)
  8021bc:	dfc00215 	stw	ra,8(sp)
  8021c0:	2821883a 	mov	r16,r5
  8021c4:	20000226 	beq	r4,zero,8021d0 <__swsetup_r+0x30>
  8021c8:	20800e17 	ldw	r2,56(r4)
  8021cc:	10003126 	beq	r2,zero,802294 <__swsetup_r+0xf4>
  8021d0:	8080030b 	ldhu	r2,12(r16)
  8021d4:	10c0020c 	andi	r3,r2,8
  8021d8:	1009883a 	mov	r4,r2
  8021dc:	18000f26 	beq	r3,zero,80221c <__swsetup_r+0x7c>
  8021e0:	80c00417 	ldw	r3,16(r16)
  8021e4:	18001526 	beq	r3,zero,80223c <__swsetup_r+0x9c>
  8021e8:	1100004c 	andi	r4,r2,1
  8021ec:	20001c1e 	bne	r4,zero,802260 <__swsetup_r+0xc0>
  8021f0:	1080008c 	andi	r2,r2,2
  8021f4:	1000291e 	bne	r2,zero,80229c <__swsetup_r+0xfc>
  8021f8:	80800517 	ldw	r2,20(r16)
  8021fc:	80800215 	stw	r2,8(r16)
  802200:	18001c26 	beq	r3,zero,802274 <__swsetup_r+0xd4>
  802204:	0005883a 	mov	r2,zero
  802208:	dfc00217 	ldw	ra,8(sp)
  80220c:	dc400117 	ldw	r17,4(sp)
  802210:	dc000017 	ldw	r16,0(sp)
  802214:	dec00304 	addi	sp,sp,12
  802218:	f800283a 	ret
  80221c:	2080040c 	andi	r2,r4,16
  802220:	10002e26 	beq	r2,zero,8022dc <__swsetup_r+0x13c>
  802224:	2080010c 	andi	r2,r4,4
  802228:	10001e1e 	bne	r2,zero,8022a4 <__swsetup_r+0x104>
  80222c:	80c00417 	ldw	r3,16(r16)
  802230:	20800214 	ori	r2,r4,8
  802234:	8080030d 	sth	r2,12(r16)
  802238:	183feb1e 	bne	r3,zero,8021e8 <__alt_data_end+0xff8021e8>
  80223c:	1100a00c 	andi	r4,r2,640
  802240:	01408004 	movi	r5,512
  802244:	217fe826 	beq	r4,r5,8021e8 <__alt_data_end+0xff8021e8>
  802248:	800b883a 	mov	r5,r16
  80224c:	8809883a 	mov	r4,r17
  802250:	0802b880 	call	802b88 <__smakebuf_r>
  802254:	8080030b 	ldhu	r2,12(r16)
  802258:	80c00417 	ldw	r3,16(r16)
  80225c:	003fe206 	br	8021e8 <__alt_data_end+0xff8021e8>
  802260:	80800517 	ldw	r2,20(r16)
  802264:	80000215 	stw	zero,8(r16)
  802268:	0085c83a 	sub	r2,zero,r2
  80226c:	80800615 	stw	r2,24(r16)
  802270:	183fe41e 	bne	r3,zero,802204 <__alt_data_end+0xff802204>
  802274:	80c0030b 	ldhu	r3,12(r16)
  802278:	0005883a 	mov	r2,zero
  80227c:	1900200c 	andi	r4,r3,128
  802280:	203fe126 	beq	r4,zero,802208 <__alt_data_end+0xff802208>
  802284:	18c01014 	ori	r3,r3,64
  802288:	80c0030d 	sth	r3,12(r16)
  80228c:	00bfffc4 	movi	r2,-1
  802290:	003fdd06 	br	802208 <__alt_data_end+0xff802208>
  802294:	08006fc0 	call	8006fc <__sinit>
  802298:	003fcd06 	br	8021d0 <__alt_data_end+0xff8021d0>
  80229c:	0005883a 	mov	r2,zero
  8022a0:	003fd606 	br	8021fc <__alt_data_end+0xff8021fc>
  8022a4:	81400c17 	ldw	r5,48(r16)
  8022a8:	28000626 	beq	r5,zero,8022c4 <__swsetup_r+0x124>
  8022ac:	80801004 	addi	r2,r16,64
  8022b0:	28800326 	beq	r5,r2,8022c0 <__swsetup_r+0x120>
  8022b4:	8809883a 	mov	r4,r17
  8022b8:	08028180 	call	802818 <_free_r>
  8022bc:	8100030b 	ldhu	r4,12(r16)
  8022c0:	80000c15 	stw	zero,48(r16)
  8022c4:	80c00417 	ldw	r3,16(r16)
  8022c8:	00bff6c4 	movi	r2,-37
  8022cc:	1108703a 	and	r4,r2,r4
  8022d0:	80000115 	stw	zero,4(r16)
  8022d4:	80c00015 	stw	r3,0(r16)
  8022d8:	003fd506 	br	802230 <__alt_data_end+0xff802230>
  8022dc:	00800244 	movi	r2,9
  8022e0:	88800015 	stw	r2,0(r17)
  8022e4:	20801014 	ori	r2,r4,64
  8022e8:	8080030d 	sth	r2,12(r16)
  8022ec:	00bfffc4 	movi	r2,-1
  8022f0:	003fc506 	br	802208 <__alt_data_end+0xff802208>

008022f4 <_close_r>:
  8022f4:	defffd04 	addi	sp,sp,-12
  8022f8:	dc000015 	stw	r16,0(sp)
  8022fc:	04002074 	movhi	r16,129
  802300:	dc400115 	stw	r17,4(sp)
  802304:	84231204 	addi	r16,r16,-29624
  802308:	2023883a 	mov	r17,r4
  80230c:	2809883a 	mov	r4,r5
  802310:	dfc00215 	stw	ra,8(sp)
  802314:	80000015 	stw	zero,0(r16)
  802318:	08030440 	call	803044 <close>
  80231c:	00ffffc4 	movi	r3,-1
  802320:	10c00526 	beq	r2,r3,802338 <_close_r+0x44>
  802324:	dfc00217 	ldw	ra,8(sp)
  802328:	dc400117 	ldw	r17,4(sp)
  80232c:	dc000017 	ldw	r16,0(sp)
  802330:	dec00304 	addi	sp,sp,12
  802334:	f800283a 	ret
  802338:	80c00017 	ldw	r3,0(r16)
  80233c:	183ff926 	beq	r3,zero,802324 <__alt_data_end+0xff802324>
  802340:	88c00015 	stw	r3,0(r17)
  802344:	003ff706 	br	802324 <__alt_data_end+0xff802324>

00802348 <_fclose_r>:
  802348:	28003926 	beq	r5,zero,802430 <_fclose_r+0xe8>
  80234c:	defffc04 	addi	sp,sp,-16
  802350:	dc400115 	stw	r17,4(sp)
  802354:	dc000015 	stw	r16,0(sp)
  802358:	dfc00315 	stw	ra,12(sp)
  80235c:	dc800215 	stw	r18,8(sp)
  802360:	2023883a 	mov	r17,r4
  802364:	2821883a 	mov	r16,r5
  802368:	20000226 	beq	r4,zero,802374 <_fclose_r+0x2c>
  80236c:	20800e17 	ldw	r2,56(r4)
  802370:	10002726 	beq	r2,zero,802410 <_fclose_r+0xc8>
  802374:	8080030f 	ldh	r2,12(r16)
  802378:	1000071e 	bne	r2,zero,802398 <_fclose_r+0x50>
  80237c:	0005883a 	mov	r2,zero
  802380:	dfc00317 	ldw	ra,12(sp)
  802384:	dc800217 	ldw	r18,8(sp)
  802388:	dc400117 	ldw	r17,4(sp)
  80238c:	dc000017 	ldw	r16,0(sp)
  802390:	dec00404 	addi	sp,sp,16
  802394:	f800283a 	ret
  802398:	800b883a 	mov	r5,r16
  80239c:	8809883a 	mov	r4,r17
  8023a0:	080244c0 	call	80244c <__sflush_r>
  8023a4:	1025883a 	mov	r18,r2
  8023a8:	80800b17 	ldw	r2,44(r16)
  8023ac:	10000426 	beq	r2,zero,8023c0 <_fclose_r+0x78>
  8023b0:	81400717 	ldw	r5,28(r16)
  8023b4:	8809883a 	mov	r4,r17
  8023b8:	103ee83a 	callr	r2
  8023bc:	10001616 	blt	r2,zero,802418 <_fclose_r+0xd0>
  8023c0:	8080030b 	ldhu	r2,12(r16)
  8023c4:	1080200c 	andi	r2,r2,128
  8023c8:	1000151e 	bne	r2,zero,802420 <_fclose_r+0xd8>
  8023cc:	81400c17 	ldw	r5,48(r16)
  8023d0:	28000526 	beq	r5,zero,8023e8 <_fclose_r+0xa0>
  8023d4:	80801004 	addi	r2,r16,64
  8023d8:	28800226 	beq	r5,r2,8023e4 <_fclose_r+0x9c>
  8023dc:	8809883a 	mov	r4,r17
  8023e0:	08028180 	call	802818 <_free_r>
  8023e4:	80000c15 	stw	zero,48(r16)
  8023e8:	81401117 	ldw	r5,68(r16)
  8023ec:	28000326 	beq	r5,zero,8023fc <_fclose_r+0xb4>
  8023f0:	8809883a 	mov	r4,r17
  8023f4:	08028180 	call	802818 <_free_r>
  8023f8:	80001115 	stw	zero,68(r16)
  8023fc:	080070c0 	call	80070c <__sfp_lock_acquire>
  802400:	8000030d 	sth	zero,12(r16)
  802404:	08007100 	call	800710 <__sfp_lock_release>
  802408:	9005883a 	mov	r2,r18
  80240c:	003fdc06 	br	802380 <__alt_data_end+0xff802380>
  802410:	08006fc0 	call	8006fc <__sinit>
  802414:	003fd706 	br	802374 <__alt_data_end+0xff802374>
  802418:	04bfffc4 	movi	r18,-1
  80241c:	003fe806 	br	8023c0 <__alt_data_end+0xff8023c0>
  802420:	81400417 	ldw	r5,16(r16)
  802424:	8809883a 	mov	r4,r17
  802428:	08028180 	call	802818 <_free_r>
  80242c:	003fe706 	br	8023cc <__alt_data_end+0xff8023cc>
  802430:	0005883a 	mov	r2,zero
  802434:	f800283a 	ret

00802438 <fclose>:
  802438:	00802034 	movhi	r2,128
  80243c:	109c6704 	addi	r2,r2,29084
  802440:	200b883a 	mov	r5,r4
  802444:	11000017 	ldw	r4,0(r2)
  802448:	08023481 	jmpi	802348 <_fclose_r>

0080244c <__sflush_r>:
  80244c:	2880030b 	ldhu	r2,12(r5)
  802450:	defffb04 	addi	sp,sp,-20
  802454:	dcc00315 	stw	r19,12(sp)
  802458:	dc400115 	stw	r17,4(sp)
  80245c:	dfc00415 	stw	ra,16(sp)
  802460:	dc800215 	stw	r18,8(sp)
  802464:	dc000015 	stw	r16,0(sp)
  802468:	10c0020c 	andi	r3,r2,8
  80246c:	2823883a 	mov	r17,r5
  802470:	2027883a 	mov	r19,r4
  802474:	1800311e 	bne	r3,zero,80253c <__sflush_r+0xf0>
  802478:	28c00117 	ldw	r3,4(r5)
  80247c:	10820014 	ori	r2,r2,2048
  802480:	2880030d 	sth	r2,12(r5)
  802484:	00c04b0e 	bge	zero,r3,8025b4 <__sflush_r+0x168>
  802488:	8a000a17 	ldw	r8,40(r17)
  80248c:	40002326 	beq	r8,zero,80251c <__sflush_r+0xd0>
  802490:	9c000017 	ldw	r16,0(r19)
  802494:	10c4000c 	andi	r3,r2,4096
  802498:	98000015 	stw	zero,0(r19)
  80249c:	18004826 	beq	r3,zero,8025c0 <__sflush_r+0x174>
  8024a0:	89801417 	ldw	r6,80(r17)
  8024a4:	10c0010c 	andi	r3,r2,4
  8024a8:	18000626 	beq	r3,zero,8024c4 <__sflush_r+0x78>
  8024ac:	88c00117 	ldw	r3,4(r17)
  8024b0:	88800c17 	ldw	r2,48(r17)
  8024b4:	30cdc83a 	sub	r6,r6,r3
  8024b8:	10000226 	beq	r2,zero,8024c4 <__sflush_r+0x78>
  8024bc:	88800f17 	ldw	r2,60(r17)
  8024c0:	308dc83a 	sub	r6,r6,r2
  8024c4:	89400717 	ldw	r5,28(r17)
  8024c8:	000f883a 	mov	r7,zero
  8024cc:	9809883a 	mov	r4,r19
  8024d0:	403ee83a 	callr	r8
  8024d4:	00ffffc4 	movi	r3,-1
  8024d8:	10c04426 	beq	r2,r3,8025ec <__sflush_r+0x1a0>
  8024dc:	88c0030b 	ldhu	r3,12(r17)
  8024e0:	89000417 	ldw	r4,16(r17)
  8024e4:	88000115 	stw	zero,4(r17)
  8024e8:	197dffcc 	andi	r5,r3,63487
  8024ec:	8940030d 	sth	r5,12(r17)
  8024f0:	89000015 	stw	r4,0(r17)
  8024f4:	18c4000c 	andi	r3,r3,4096
  8024f8:	18002c1e 	bne	r3,zero,8025ac <__sflush_r+0x160>
  8024fc:	89400c17 	ldw	r5,48(r17)
  802500:	9c000015 	stw	r16,0(r19)
  802504:	28000526 	beq	r5,zero,80251c <__sflush_r+0xd0>
  802508:	88801004 	addi	r2,r17,64
  80250c:	28800226 	beq	r5,r2,802518 <__sflush_r+0xcc>
  802510:	9809883a 	mov	r4,r19
  802514:	08028180 	call	802818 <_free_r>
  802518:	88000c15 	stw	zero,48(r17)
  80251c:	0005883a 	mov	r2,zero
  802520:	dfc00417 	ldw	ra,16(sp)
  802524:	dcc00317 	ldw	r19,12(sp)
  802528:	dc800217 	ldw	r18,8(sp)
  80252c:	dc400117 	ldw	r17,4(sp)
  802530:	dc000017 	ldw	r16,0(sp)
  802534:	dec00504 	addi	sp,sp,20
  802538:	f800283a 	ret
  80253c:	2c800417 	ldw	r18,16(r5)
  802540:	903ff626 	beq	r18,zero,80251c <__alt_data_end+0xff80251c>
  802544:	2c000017 	ldw	r16,0(r5)
  802548:	108000cc 	andi	r2,r2,3
  80254c:	2c800015 	stw	r18,0(r5)
  802550:	84a1c83a 	sub	r16,r16,r18
  802554:	1000131e 	bne	r2,zero,8025a4 <__sflush_r+0x158>
  802558:	28800517 	ldw	r2,20(r5)
  80255c:	88800215 	stw	r2,8(r17)
  802560:	04000316 	blt	zero,r16,802570 <__sflush_r+0x124>
  802564:	003fed06 	br	80251c <__alt_data_end+0xff80251c>
  802568:	90a5883a 	add	r18,r18,r2
  80256c:	043feb0e 	bge	zero,r16,80251c <__alt_data_end+0xff80251c>
  802570:	88800917 	ldw	r2,36(r17)
  802574:	89400717 	ldw	r5,28(r17)
  802578:	800f883a 	mov	r7,r16
  80257c:	900d883a 	mov	r6,r18
  802580:	9809883a 	mov	r4,r19
  802584:	103ee83a 	callr	r2
  802588:	80a1c83a 	sub	r16,r16,r2
  80258c:	00bff616 	blt	zero,r2,802568 <__alt_data_end+0xff802568>
  802590:	88c0030b 	ldhu	r3,12(r17)
  802594:	00bfffc4 	movi	r2,-1
  802598:	18c01014 	ori	r3,r3,64
  80259c:	88c0030d 	sth	r3,12(r17)
  8025a0:	003fdf06 	br	802520 <__alt_data_end+0xff802520>
  8025a4:	0005883a 	mov	r2,zero
  8025a8:	003fec06 	br	80255c <__alt_data_end+0xff80255c>
  8025ac:	88801415 	stw	r2,80(r17)
  8025b0:	003fd206 	br	8024fc <__alt_data_end+0xff8024fc>
  8025b4:	28c00f17 	ldw	r3,60(r5)
  8025b8:	00ffb316 	blt	zero,r3,802488 <__alt_data_end+0xff802488>
  8025bc:	003fd706 	br	80251c <__alt_data_end+0xff80251c>
  8025c0:	89400717 	ldw	r5,28(r17)
  8025c4:	000d883a 	mov	r6,zero
  8025c8:	01c00044 	movi	r7,1
  8025cc:	9809883a 	mov	r4,r19
  8025d0:	403ee83a 	callr	r8
  8025d4:	100d883a 	mov	r6,r2
  8025d8:	00bfffc4 	movi	r2,-1
  8025dc:	30801426 	beq	r6,r2,802630 <__sflush_r+0x1e4>
  8025e0:	8880030b 	ldhu	r2,12(r17)
  8025e4:	8a000a17 	ldw	r8,40(r17)
  8025e8:	003fae06 	br	8024a4 <__alt_data_end+0xff8024a4>
  8025ec:	98c00017 	ldw	r3,0(r19)
  8025f0:	183fba26 	beq	r3,zero,8024dc <__alt_data_end+0xff8024dc>
  8025f4:	01000744 	movi	r4,29
  8025f8:	19000626 	beq	r3,r4,802614 <__sflush_r+0x1c8>
  8025fc:	01000584 	movi	r4,22
  802600:	19000426 	beq	r3,r4,802614 <__sflush_r+0x1c8>
  802604:	88c0030b 	ldhu	r3,12(r17)
  802608:	18c01014 	ori	r3,r3,64
  80260c:	88c0030d 	sth	r3,12(r17)
  802610:	003fc306 	br	802520 <__alt_data_end+0xff802520>
  802614:	8880030b 	ldhu	r2,12(r17)
  802618:	88c00417 	ldw	r3,16(r17)
  80261c:	88000115 	stw	zero,4(r17)
  802620:	10bdffcc 	andi	r2,r2,63487
  802624:	8880030d 	sth	r2,12(r17)
  802628:	88c00015 	stw	r3,0(r17)
  80262c:	003fb306 	br	8024fc <__alt_data_end+0xff8024fc>
  802630:	98800017 	ldw	r2,0(r19)
  802634:	103fea26 	beq	r2,zero,8025e0 <__alt_data_end+0xff8025e0>
  802638:	00c00744 	movi	r3,29
  80263c:	10c00226 	beq	r2,r3,802648 <__sflush_r+0x1fc>
  802640:	00c00584 	movi	r3,22
  802644:	10c0031e 	bne	r2,r3,802654 <__sflush_r+0x208>
  802648:	9c000015 	stw	r16,0(r19)
  80264c:	0005883a 	mov	r2,zero
  802650:	003fb306 	br	802520 <__alt_data_end+0xff802520>
  802654:	88c0030b 	ldhu	r3,12(r17)
  802658:	3005883a 	mov	r2,r6
  80265c:	18c01014 	ori	r3,r3,64
  802660:	88c0030d 	sth	r3,12(r17)
  802664:	003fae06 	br	802520 <__alt_data_end+0xff802520>

00802668 <_fflush_r>:
  802668:	defffd04 	addi	sp,sp,-12
  80266c:	dc000115 	stw	r16,4(sp)
  802670:	dfc00215 	stw	ra,8(sp)
  802674:	2021883a 	mov	r16,r4
  802678:	20000226 	beq	r4,zero,802684 <_fflush_r+0x1c>
  80267c:	20800e17 	ldw	r2,56(r4)
  802680:	10000c26 	beq	r2,zero,8026b4 <_fflush_r+0x4c>
  802684:	2880030f 	ldh	r2,12(r5)
  802688:	1000051e 	bne	r2,zero,8026a0 <_fflush_r+0x38>
  80268c:	0005883a 	mov	r2,zero
  802690:	dfc00217 	ldw	ra,8(sp)
  802694:	dc000117 	ldw	r16,4(sp)
  802698:	dec00304 	addi	sp,sp,12
  80269c:	f800283a 	ret
  8026a0:	8009883a 	mov	r4,r16
  8026a4:	dfc00217 	ldw	ra,8(sp)
  8026a8:	dc000117 	ldw	r16,4(sp)
  8026ac:	dec00304 	addi	sp,sp,12
  8026b0:	080244c1 	jmpi	80244c <__sflush_r>
  8026b4:	d9400015 	stw	r5,0(sp)
  8026b8:	08006fc0 	call	8006fc <__sinit>
  8026bc:	d9400017 	ldw	r5,0(sp)
  8026c0:	003ff006 	br	802684 <__alt_data_end+0xff802684>

008026c4 <fflush>:
  8026c4:	20000526 	beq	r4,zero,8026dc <fflush+0x18>
  8026c8:	00802034 	movhi	r2,128
  8026cc:	109c6704 	addi	r2,r2,29084
  8026d0:	200b883a 	mov	r5,r4
  8026d4:	11000017 	ldw	r4,0(r2)
  8026d8:	08026681 	jmpi	802668 <_fflush_r>
  8026dc:	00802034 	movhi	r2,128
  8026e0:	109c6604 	addi	r2,r2,29080
  8026e4:	11000017 	ldw	r4,0(r2)
  8026e8:	01402034 	movhi	r5,128
  8026ec:	29499a04 	addi	r5,r5,9832
  8026f0:	0800ccc1 	jmpi	800ccc <_fwalk_reent>

008026f4 <_malloc_trim_r>:
  8026f4:	defffb04 	addi	sp,sp,-20
  8026f8:	dcc00315 	stw	r19,12(sp)
  8026fc:	04c02034 	movhi	r19,128
  802700:	dc800215 	stw	r18,8(sp)
  802704:	dc400115 	stw	r17,4(sp)
  802708:	dc000015 	stw	r16,0(sp)
  80270c:	dfc00415 	stw	ra,16(sp)
  802710:	2821883a 	mov	r16,r5
  802714:	9cd6e204 	addi	r19,r19,23432
  802718:	2025883a 	mov	r18,r4
  80271c:	08035840 	call	803584 <__malloc_lock>
  802720:	98800217 	ldw	r2,8(r19)
  802724:	14400117 	ldw	r17,4(r2)
  802728:	00bfff04 	movi	r2,-4
  80272c:	88a2703a 	and	r17,r17,r2
  802730:	8c21c83a 	sub	r16,r17,r16
  802734:	8403fbc4 	addi	r16,r16,4079
  802738:	8020d33a 	srli	r16,r16,12
  80273c:	0083ffc4 	movi	r2,4095
  802740:	843fffc4 	addi	r16,r16,-1
  802744:	8020933a 	slli	r16,r16,12
  802748:	1400060e 	bge	r2,r16,802764 <_malloc_trim_r+0x70>
  80274c:	000b883a 	mov	r5,zero
  802750:	9009883a 	mov	r4,r18
  802754:	0801fb00 	call	801fb0 <_sbrk_r>
  802758:	98c00217 	ldw	r3,8(r19)
  80275c:	1c47883a 	add	r3,r3,r17
  802760:	10c00a26 	beq	r2,r3,80278c <_malloc_trim_r+0x98>
  802764:	9009883a 	mov	r4,r18
  802768:	08035a80 	call	8035a8 <__malloc_unlock>
  80276c:	0005883a 	mov	r2,zero
  802770:	dfc00417 	ldw	ra,16(sp)
  802774:	dcc00317 	ldw	r19,12(sp)
  802778:	dc800217 	ldw	r18,8(sp)
  80277c:	dc400117 	ldw	r17,4(sp)
  802780:	dc000017 	ldw	r16,0(sp)
  802784:	dec00504 	addi	sp,sp,20
  802788:	f800283a 	ret
  80278c:	040bc83a 	sub	r5,zero,r16
  802790:	9009883a 	mov	r4,r18
  802794:	0801fb00 	call	801fb0 <_sbrk_r>
  802798:	00ffffc4 	movi	r3,-1
  80279c:	10c00d26 	beq	r2,r3,8027d4 <_malloc_trim_r+0xe0>
  8027a0:	00c02074 	movhi	r3,129
  8027a4:	18e31904 	addi	r3,r3,-29596
  8027a8:	18800017 	ldw	r2,0(r3)
  8027ac:	99000217 	ldw	r4,8(r19)
  8027b0:	8c23c83a 	sub	r17,r17,r16
  8027b4:	8c400054 	ori	r17,r17,1
  8027b8:	1421c83a 	sub	r16,r2,r16
  8027bc:	24400115 	stw	r17,4(r4)
  8027c0:	9009883a 	mov	r4,r18
  8027c4:	1c000015 	stw	r16,0(r3)
  8027c8:	08035a80 	call	8035a8 <__malloc_unlock>
  8027cc:	00800044 	movi	r2,1
  8027d0:	003fe706 	br	802770 <__alt_data_end+0xff802770>
  8027d4:	000b883a 	mov	r5,zero
  8027d8:	9009883a 	mov	r4,r18
  8027dc:	0801fb00 	call	801fb0 <_sbrk_r>
  8027e0:	99000217 	ldw	r4,8(r19)
  8027e4:	014003c4 	movi	r5,15
  8027e8:	1107c83a 	sub	r3,r2,r4
  8027ec:	28ffdd0e 	bge	r5,r3,802764 <__alt_data_end+0xff802764>
  8027f0:	01402034 	movhi	r5,128
  8027f4:	295c6804 	addi	r5,r5,29088
  8027f8:	29400017 	ldw	r5,0(r5)
  8027fc:	18c00054 	ori	r3,r3,1
  802800:	20c00115 	stw	r3,4(r4)
  802804:	00c02074 	movhi	r3,129
  802808:	1145c83a 	sub	r2,r2,r5
  80280c:	18e31904 	addi	r3,r3,-29596
  802810:	18800015 	stw	r2,0(r3)
  802814:	003fd306 	br	802764 <__alt_data_end+0xff802764>

00802818 <_free_r>:
  802818:	28004126 	beq	r5,zero,802920 <_free_r+0x108>
  80281c:	defffd04 	addi	sp,sp,-12
  802820:	dc400115 	stw	r17,4(sp)
  802824:	dc000015 	stw	r16,0(sp)
  802828:	2023883a 	mov	r17,r4
  80282c:	2821883a 	mov	r16,r5
  802830:	dfc00215 	stw	ra,8(sp)
  802834:	08035840 	call	803584 <__malloc_lock>
  802838:	81ffff17 	ldw	r7,-4(r16)
  80283c:	00bfff84 	movi	r2,-2
  802840:	01002034 	movhi	r4,128
  802844:	81bffe04 	addi	r6,r16,-8
  802848:	3884703a 	and	r2,r7,r2
  80284c:	2116e204 	addi	r4,r4,23432
  802850:	308b883a 	add	r5,r6,r2
  802854:	2a400117 	ldw	r9,4(r5)
  802858:	22000217 	ldw	r8,8(r4)
  80285c:	00ffff04 	movi	r3,-4
  802860:	48c6703a 	and	r3,r9,r3
  802864:	2a005726 	beq	r5,r8,8029c4 <_free_r+0x1ac>
  802868:	28c00115 	stw	r3,4(r5)
  80286c:	39c0004c 	andi	r7,r7,1
  802870:	3800091e 	bne	r7,zero,802898 <_free_r+0x80>
  802874:	823ffe17 	ldw	r8,-8(r16)
  802878:	22400204 	addi	r9,r4,8
  80287c:	320dc83a 	sub	r6,r6,r8
  802880:	31c00217 	ldw	r7,8(r6)
  802884:	1205883a 	add	r2,r2,r8
  802888:	3a406526 	beq	r7,r9,802a20 <_free_r+0x208>
  80288c:	32000317 	ldw	r8,12(r6)
  802890:	3a000315 	stw	r8,12(r7)
  802894:	41c00215 	stw	r7,8(r8)
  802898:	28cf883a 	add	r7,r5,r3
  80289c:	39c00117 	ldw	r7,4(r7)
  8028a0:	39c0004c 	andi	r7,r7,1
  8028a4:	38003a26 	beq	r7,zero,802990 <_free_r+0x178>
  8028a8:	10c00054 	ori	r3,r2,1
  8028ac:	30c00115 	stw	r3,4(r6)
  8028b0:	3087883a 	add	r3,r6,r2
  8028b4:	18800015 	stw	r2,0(r3)
  8028b8:	00c07fc4 	movi	r3,511
  8028bc:	18801936 	bltu	r3,r2,802924 <_free_r+0x10c>
  8028c0:	1004d0fa 	srli	r2,r2,3
  8028c4:	01c00044 	movi	r7,1
  8028c8:	21400117 	ldw	r5,4(r4)
  8028cc:	10c00044 	addi	r3,r2,1
  8028d0:	18c7883a 	add	r3,r3,r3
  8028d4:	1005d0ba 	srai	r2,r2,2
  8028d8:	18c7883a 	add	r3,r3,r3
  8028dc:	18c7883a 	add	r3,r3,r3
  8028e0:	1907883a 	add	r3,r3,r4
  8028e4:	3884983a 	sll	r2,r7,r2
  8028e8:	19c00017 	ldw	r7,0(r3)
  8028ec:	1a3ffe04 	addi	r8,r3,-8
  8028f0:	1144b03a 	or	r2,r2,r5
  8028f4:	32000315 	stw	r8,12(r6)
  8028f8:	31c00215 	stw	r7,8(r6)
  8028fc:	20800115 	stw	r2,4(r4)
  802900:	19800015 	stw	r6,0(r3)
  802904:	39800315 	stw	r6,12(r7)
  802908:	8809883a 	mov	r4,r17
  80290c:	dfc00217 	ldw	ra,8(sp)
  802910:	dc400117 	ldw	r17,4(sp)
  802914:	dc000017 	ldw	r16,0(sp)
  802918:	dec00304 	addi	sp,sp,12
  80291c:	08035a81 	jmpi	8035a8 <__malloc_unlock>
  802920:	f800283a 	ret
  802924:	100ad27a 	srli	r5,r2,9
  802928:	00c00104 	movi	r3,4
  80292c:	19404a36 	bltu	r3,r5,802a58 <_free_r+0x240>
  802930:	100ad1ba 	srli	r5,r2,6
  802934:	28c00e44 	addi	r3,r5,57
  802938:	18c7883a 	add	r3,r3,r3
  80293c:	29400e04 	addi	r5,r5,56
  802940:	18c7883a 	add	r3,r3,r3
  802944:	18c7883a 	add	r3,r3,r3
  802948:	1909883a 	add	r4,r3,r4
  80294c:	20c00017 	ldw	r3,0(r4)
  802950:	01c02034 	movhi	r7,128
  802954:	213ffe04 	addi	r4,r4,-8
  802958:	39d6e204 	addi	r7,r7,23432
  80295c:	20c04426 	beq	r4,r3,802a70 <_free_r+0x258>
  802960:	01ffff04 	movi	r7,-4
  802964:	19400117 	ldw	r5,4(r3)
  802968:	29ca703a 	and	r5,r5,r7
  80296c:	1140022e 	bgeu	r2,r5,802978 <_free_r+0x160>
  802970:	18c00217 	ldw	r3,8(r3)
  802974:	20fffb1e 	bne	r4,r3,802964 <__alt_data_end+0xff802964>
  802978:	19000317 	ldw	r4,12(r3)
  80297c:	31000315 	stw	r4,12(r6)
  802980:	30c00215 	stw	r3,8(r6)
  802984:	21800215 	stw	r6,8(r4)
  802988:	19800315 	stw	r6,12(r3)
  80298c:	003fde06 	br	802908 <__alt_data_end+0xff802908>
  802990:	29c00217 	ldw	r7,8(r5)
  802994:	10c5883a 	add	r2,r2,r3
  802998:	00c02034 	movhi	r3,128
  80299c:	18d6e404 	addi	r3,r3,23440
  8029a0:	38c03b26 	beq	r7,r3,802a90 <_free_r+0x278>
  8029a4:	2a000317 	ldw	r8,12(r5)
  8029a8:	11400054 	ori	r5,r2,1
  8029ac:	3087883a 	add	r3,r6,r2
  8029b0:	3a000315 	stw	r8,12(r7)
  8029b4:	41c00215 	stw	r7,8(r8)
  8029b8:	31400115 	stw	r5,4(r6)
  8029bc:	18800015 	stw	r2,0(r3)
  8029c0:	003fbd06 	br	8028b8 <__alt_data_end+0xff8028b8>
  8029c4:	39c0004c 	andi	r7,r7,1
  8029c8:	10c5883a 	add	r2,r2,r3
  8029cc:	3800071e 	bne	r7,zero,8029ec <_free_r+0x1d4>
  8029d0:	81fffe17 	ldw	r7,-8(r16)
  8029d4:	31cdc83a 	sub	r6,r6,r7
  8029d8:	30c00317 	ldw	r3,12(r6)
  8029dc:	31400217 	ldw	r5,8(r6)
  8029e0:	11c5883a 	add	r2,r2,r7
  8029e4:	28c00315 	stw	r3,12(r5)
  8029e8:	19400215 	stw	r5,8(r3)
  8029ec:	10c00054 	ori	r3,r2,1
  8029f0:	30c00115 	stw	r3,4(r6)
  8029f4:	00c02034 	movhi	r3,128
  8029f8:	18dc6904 	addi	r3,r3,29092
  8029fc:	18c00017 	ldw	r3,0(r3)
  802a00:	21800215 	stw	r6,8(r4)
  802a04:	10ffc036 	bltu	r2,r3,802908 <__alt_data_end+0xff802908>
  802a08:	00802074 	movhi	r2,129
  802a0c:	10a31104 	addi	r2,r2,-29628
  802a10:	11400017 	ldw	r5,0(r2)
  802a14:	8809883a 	mov	r4,r17
  802a18:	08026f40 	call	8026f4 <_malloc_trim_r>
  802a1c:	003fba06 	br	802908 <__alt_data_end+0xff802908>
  802a20:	28c9883a 	add	r4,r5,r3
  802a24:	21000117 	ldw	r4,4(r4)
  802a28:	2100004c 	andi	r4,r4,1
  802a2c:	2000391e 	bne	r4,zero,802b14 <_free_r+0x2fc>
  802a30:	29c00217 	ldw	r7,8(r5)
  802a34:	29000317 	ldw	r4,12(r5)
  802a38:	1885883a 	add	r2,r3,r2
  802a3c:	10c00054 	ori	r3,r2,1
  802a40:	39000315 	stw	r4,12(r7)
  802a44:	21c00215 	stw	r7,8(r4)
  802a48:	30c00115 	stw	r3,4(r6)
  802a4c:	308d883a 	add	r6,r6,r2
  802a50:	30800015 	stw	r2,0(r6)
  802a54:	003fac06 	br	802908 <__alt_data_end+0xff802908>
  802a58:	00c00504 	movi	r3,20
  802a5c:	19401536 	bltu	r3,r5,802ab4 <_free_r+0x29c>
  802a60:	28c01704 	addi	r3,r5,92
  802a64:	18c7883a 	add	r3,r3,r3
  802a68:	294016c4 	addi	r5,r5,91
  802a6c:	003fb406 	br	802940 <__alt_data_end+0xff802940>
  802a70:	280bd0ba 	srai	r5,r5,2
  802a74:	00c00044 	movi	r3,1
  802a78:	38800117 	ldw	r2,4(r7)
  802a7c:	194a983a 	sll	r5,r3,r5
  802a80:	2007883a 	mov	r3,r4
  802a84:	2884b03a 	or	r2,r5,r2
  802a88:	38800115 	stw	r2,4(r7)
  802a8c:	003fbb06 	br	80297c <__alt_data_end+0xff80297c>
  802a90:	21800515 	stw	r6,20(r4)
  802a94:	21800415 	stw	r6,16(r4)
  802a98:	10c00054 	ori	r3,r2,1
  802a9c:	31c00315 	stw	r7,12(r6)
  802aa0:	31c00215 	stw	r7,8(r6)
  802aa4:	30c00115 	stw	r3,4(r6)
  802aa8:	308d883a 	add	r6,r6,r2
  802aac:	30800015 	stw	r2,0(r6)
  802ab0:	003f9506 	br	802908 <__alt_data_end+0xff802908>
  802ab4:	00c01504 	movi	r3,84
  802ab8:	19400536 	bltu	r3,r5,802ad0 <_free_r+0x2b8>
  802abc:	100ad33a 	srli	r5,r2,12
  802ac0:	28c01bc4 	addi	r3,r5,111
  802ac4:	18c7883a 	add	r3,r3,r3
  802ac8:	29401b84 	addi	r5,r5,110
  802acc:	003f9c06 	br	802940 <__alt_data_end+0xff802940>
  802ad0:	00c05504 	movi	r3,340
  802ad4:	19400536 	bltu	r3,r5,802aec <_free_r+0x2d4>
  802ad8:	100ad3fa 	srli	r5,r2,15
  802adc:	28c01e04 	addi	r3,r5,120
  802ae0:	18c7883a 	add	r3,r3,r3
  802ae4:	29401dc4 	addi	r5,r5,119
  802ae8:	003f9506 	br	802940 <__alt_data_end+0xff802940>
  802aec:	00c15504 	movi	r3,1364
  802af0:	19400536 	bltu	r3,r5,802b08 <_free_r+0x2f0>
  802af4:	100ad4ba 	srli	r5,r2,18
  802af8:	28c01f44 	addi	r3,r5,125
  802afc:	18c7883a 	add	r3,r3,r3
  802b00:	29401f04 	addi	r5,r5,124
  802b04:	003f8e06 	br	802940 <__alt_data_end+0xff802940>
  802b08:	00c03f84 	movi	r3,254
  802b0c:	01401f84 	movi	r5,126
  802b10:	003f8b06 	br	802940 <__alt_data_end+0xff802940>
  802b14:	10c00054 	ori	r3,r2,1
  802b18:	30c00115 	stw	r3,4(r6)
  802b1c:	308d883a 	add	r6,r6,r2
  802b20:	30800015 	stw	r2,0(r6)
  802b24:	003f7806 	br	802908 <__alt_data_end+0xff802908>

00802b28 <_lseek_r>:
  802b28:	defffd04 	addi	sp,sp,-12
  802b2c:	2805883a 	mov	r2,r5
  802b30:	dc000015 	stw	r16,0(sp)
  802b34:	04002074 	movhi	r16,129
  802b38:	dc400115 	stw	r17,4(sp)
  802b3c:	300b883a 	mov	r5,r6
  802b40:	84231204 	addi	r16,r16,-29624
  802b44:	2023883a 	mov	r17,r4
  802b48:	380d883a 	mov	r6,r7
  802b4c:	1009883a 	mov	r4,r2
  802b50:	dfc00215 	stw	ra,8(sp)
  802b54:	80000015 	stw	zero,0(r16)
  802b58:	08034340 	call	803434 <lseek>
  802b5c:	00ffffc4 	movi	r3,-1
  802b60:	10c00526 	beq	r2,r3,802b78 <_lseek_r+0x50>
  802b64:	dfc00217 	ldw	ra,8(sp)
  802b68:	dc400117 	ldw	r17,4(sp)
  802b6c:	dc000017 	ldw	r16,0(sp)
  802b70:	dec00304 	addi	sp,sp,12
  802b74:	f800283a 	ret
  802b78:	80c00017 	ldw	r3,0(r16)
  802b7c:	183ff926 	beq	r3,zero,802b64 <__alt_data_end+0xff802b64>
  802b80:	88c00015 	stw	r3,0(r17)
  802b84:	003ff706 	br	802b64 <__alt_data_end+0xff802b64>

00802b88 <__smakebuf_r>:
  802b88:	2880030b 	ldhu	r2,12(r5)
  802b8c:	10c0008c 	andi	r3,r2,2
  802b90:	1800411e 	bne	r3,zero,802c98 <__smakebuf_r+0x110>
  802b94:	deffec04 	addi	sp,sp,-80
  802b98:	dc000f15 	stw	r16,60(sp)
  802b9c:	2821883a 	mov	r16,r5
  802ba0:	2940038f 	ldh	r5,14(r5)
  802ba4:	dc401015 	stw	r17,64(sp)
  802ba8:	dfc01315 	stw	ra,76(sp)
  802bac:	dcc01215 	stw	r19,72(sp)
  802bb0:	dc801115 	stw	r18,68(sp)
  802bb4:	2023883a 	mov	r17,r4
  802bb8:	28001c16 	blt	r5,zero,802c2c <__smakebuf_r+0xa4>
  802bbc:	d80d883a 	mov	r6,sp
  802bc0:	0802da40 	call	802da4 <_fstat_r>
  802bc4:	10001816 	blt	r2,zero,802c28 <__smakebuf_r+0xa0>
  802bc8:	d8800117 	ldw	r2,4(sp)
  802bcc:	00e00014 	movui	r3,32768
  802bd0:	10bc000c 	andi	r2,r2,61440
  802bd4:	14c80020 	cmpeqi	r19,r2,8192
  802bd8:	10c03726 	beq	r2,r3,802cb8 <__smakebuf_r+0x130>
  802bdc:	80c0030b 	ldhu	r3,12(r16)
  802be0:	18c20014 	ori	r3,r3,2048
  802be4:	80c0030d 	sth	r3,12(r16)
  802be8:	00c80004 	movi	r3,8192
  802bec:	10c0521e 	bne	r2,r3,802d38 <__smakebuf_r+0x1b0>
  802bf0:	8140038f 	ldh	r5,14(r16)
  802bf4:	8809883a 	mov	r4,r17
  802bf8:	0802e000 	call	802e00 <_isatty_r>
  802bfc:	10004c26 	beq	r2,zero,802d30 <__smakebuf_r+0x1a8>
  802c00:	8080030b 	ldhu	r2,12(r16)
  802c04:	80c010c4 	addi	r3,r16,67
  802c08:	80c00015 	stw	r3,0(r16)
  802c0c:	10800054 	ori	r2,r2,1
  802c10:	8080030d 	sth	r2,12(r16)
  802c14:	00800044 	movi	r2,1
  802c18:	80c00415 	stw	r3,16(r16)
  802c1c:	80800515 	stw	r2,20(r16)
  802c20:	04810004 	movi	r18,1024
  802c24:	00000706 	br	802c44 <__smakebuf_r+0xbc>
  802c28:	8080030b 	ldhu	r2,12(r16)
  802c2c:	10c0200c 	andi	r3,r2,128
  802c30:	18001f1e 	bne	r3,zero,802cb0 <__smakebuf_r+0x128>
  802c34:	04810004 	movi	r18,1024
  802c38:	10820014 	ori	r2,r2,2048
  802c3c:	8080030d 	sth	r2,12(r16)
  802c40:	0027883a 	mov	r19,zero
  802c44:	900b883a 	mov	r5,r18
  802c48:	8809883a 	mov	r4,r17
  802c4c:	0800d900 	call	800d90 <_malloc_r>
  802c50:	10002c26 	beq	r2,zero,802d04 <__smakebuf_r+0x17c>
  802c54:	80c0030b 	ldhu	r3,12(r16)
  802c58:	01002034 	movhi	r4,128
  802c5c:	2100ed04 	addi	r4,r4,948
  802c60:	89000f15 	stw	r4,60(r17)
  802c64:	18c02014 	ori	r3,r3,128
  802c68:	80c0030d 	sth	r3,12(r16)
  802c6c:	80800015 	stw	r2,0(r16)
  802c70:	80800415 	stw	r2,16(r16)
  802c74:	84800515 	stw	r18,20(r16)
  802c78:	98001a1e 	bne	r19,zero,802ce4 <__smakebuf_r+0x15c>
  802c7c:	dfc01317 	ldw	ra,76(sp)
  802c80:	dcc01217 	ldw	r19,72(sp)
  802c84:	dc801117 	ldw	r18,68(sp)
  802c88:	dc401017 	ldw	r17,64(sp)
  802c8c:	dc000f17 	ldw	r16,60(sp)
  802c90:	dec01404 	addi	sp,sp,80
  802c94:	f800283a 	ret
  802c98:	288010c4 	addi	r2,r5,67
  802c9c:	28800015 	stw	r2,0(r5)
  802ca0:	28800415 	stw	r2,16(r5)
  802ca4:	00800044 	movi	r2,1
  802ca8:	28800515 	stw	r2,20(r5)
  802cac:	f800283a 	ret
  802cb0:	04801004 	movi	r18,64
  802cb4:	003fe006 	br	802c38 <__alt_data_end+0xff802c38>
  802cb8:	81000a17 	ldw	r4,40(r16)
  802cbc:	00c02034 	movhi	r3,128
  802cc0:	18c83704 	addi	r3,r3,8412
  802cc4:	20ffc51e 	bne	r4,r3,802bdc <__alt_data_end+0xff802bdc>
  802cc8:	8080030b 	ldhu	r2,12(r16)
  802ccc:	04810004 	movi	r18,1024
  802cd0:	84801315 	stw	r18,76(r16)
  802cd4:	1484b03a 	or	r2,r2,r18
  802cd8:	8080030d 	sth	r2,12(r16)
  802cdc:	0027883a 	mov	r19,zero
  802ce0:	003fd806 	br	802c44 <__alt_data_end+0xff802c44>
  802ce4:	8140038f 	ldh	r5,14(r16)
  802ce8:	8809883a 	mov	r4,r17
  802cec:	0802e000 	call	802e00 <_isatty_r>
  802cf0:	103fe226 	beq	r2,zero,802c7c <__alt_data_end+0xff802c7c>
  802cf4:	8080030b 	ldhu	r2,12(r16)
  802cf8:	10800054 	ori	r2,r2,1
  802cfc:	8080030d 	sth	r2,12(r16)
  802d00:	003fde06 	br	802c7c <__alt_data_end+0xff802c7c>
  802d04:	8080030b 	ldhu	r2,12(r16)
  802d08:	10c0800c 	andi	r3,r2,512
  802d0c:	183fdb1e 	bne	r3,zero,802c7c <__alt_data_end+0xff802c7c>
  802d10:	10800094 	ori	r2,r2,2
  802d14:	80c010c4 	addi	r3,r16,67
  802d18:	8080030d 	sth	r2,12(r16)
  802d1c:	00800044 	movi	r2,1
  802d20:	80c00015 	stw	r3,0(r16)
  802d24:	80c00415 	stw	r3,16(r16)
  802d28:	80800515 	stw	r2,20(r16)
  802d2c:	003fd306 	br	802c7c <__alt_data_end+0xff802c7c>
  802d30:	04810004 	movi	r18,1024
  802d34:	003fc306 	br	802c44 <__alt_data_end+0xff802c44>
  802d38:	0027883a 	mov	r19,zero
  802d3c:	04810004 	movi	r18,1024
  802d40:	003fc006 	br	802c44 <__alt_data_end+0xff802c44>

00802d44 <_read_r>:
  802d44:	defffd04 	addi	sp,sp,-12
  802d48:	2805883a 	mov	r2,r5
  802d4c:	dc000015 	stw	r16,0(sp)
  802d50:	04002074 	movhi	r16,129
  802d54:	dc400115 	stw	r17,4(sp)
  802d58:	300b883a 	mov	r5,r6
  802d5c:	84231204 	addi	r16,r16,-29624
  802d60:	2023883a 	mov	r17,r4
  802d64:	380d883a 	mov	r6,r7
  802d68:	1009883a 	mov	r4,r2
  802d6c:	dfc00215 	stw	ra,8(sp)
  802d70:	80000015 	stw	zero,0(r16)
  802d74:	08036080 	call	803608 <read>
  802d78:	00ffffc4 	movi	r3,-1
  802d7c:	10c00526 	beq	r2,r3,802d94 <_read_r+0x50>
  802d80:	dfc00217 	ldw	ra,8(sp)
  802d84:	dc400117 	ldw	r17,4(sp)
  802d88:	dc000017 	ldw	r16,0(sp)
  802d8c:	dec00304 	addi	sp,sp,12
  802d90:	f800283a 	ret
  802d94:	80c00017 	ldw	r3,0(r16)
  802d98:	183ff926 	beq	r3,zero,802d80 <__alt_data_end+0xff802d80>
  802d9c:	88c00015 	stw	r3,0(r17)
  802da0:	003ff706 	br	802d80 <__alt_data_end+0xff802d80>

00802da4 <_fstat_r>:
  802da4:	defffd04 	addi	sp,sp,-12
  802da8:	2805883a 	mov	r2,r5
  802dac:	dc000015 	stw	r16,0(sp)
  802db0:	04002074 	movhi	r16,129
  802db4:	dc400115 	stw	r17,4(sp)
  802db8:	84231204 	addi	r16,r16,-29624
  802dbc:	2023883a 	mov	r17,r4
  802dc0:	300b883a 	mov	r5,r6
  802dc4:	1009883a 	mov	r4,r2
  802dc8:	dfc00215 	stw	ra,8(sp)
  802dcc:	80000015 	stw	zero,0(r16)
  802dd0:	080317c0 	call	80317c <fstat>
  802dd4:	00ffffc4 	movi	r3,-1
  802dd8:	10c00526 	beq	r2,r3,802df0 <_fstat_r+0x4c>
  802ddc:	dfc00217 	ldw	ra,8(sp)
  802de0:	dc400117 	ldw	r17,4(sp)
  802de4:	dc000017 	ldw	r16,0(sp)
  802de8:	dec00304 	addi	sp,sp,12
  802dec:	f800283a 	ret
  802df0:	80c00017 	ldw	r3,0(r16)
  802df4:	183ff926 	beq	r3,zero,802ddc <__alt_data_end+0xff802ddc>
  802df8:	88c00015 	stw	r3,0(r17)
  802dfc:	003ff706 	br	802ddc <__alt_data_end+0xff802ddc>

00802e00 <_isatty_r>:
  802e00:	defffd04 	addi	sp,sp,-12
  802e04:	dc000015 	stw	r16,0(sp)
  802e08:	04002074 	movhi	r16,129
  802e0c:	dc400115 	stw	r17,4(sp)
  802e10:	84231204 	addi	r16,r16,-29624
  802e14:	2023883a 	mov	r17,r4
  802e18:	2809883a 	mov	r4,r5
  802e1c:	dfc00215 	stw	ra,8(sp)
  802e20:	80000015 	stw	zero,0(r16)
  802e24:	08032680 	call	803268 <isatty>
  802e28:	00ffffc4 	movi	r3,-1
  802e2c:	10c00526 	beq	r2,r3,802e44 <_isatty_r+0x44>
  802e30:	dfc00217 	ldw	ra,8(sp)
  802e34:	dc400117 	ldw	r17,4(sp)
  802e38:	dc000017 	ldw	r16,0(sp)
  802e3c:	dec00304 	addi	sp,sp,12
  802e40:	f800283a 	ret
  802e44:	80c00017 	ldw	r3,0(r16)
  802e48:	183ff926 	beq	r3,zero,802e30 <__alt_data_end+0xff802e30>
  802e4c:	88c00015 	stw	r3,0(r17)
  802e50:	003ff706 	br	802e30 <__alt_data_end+0xff802e30>

00802e54 <__divsi3>:
  802e54:	20001b16 	blt	r4,zero,802ec4 <__divsi3+0x70>
  802e58:	000f883a 	mov	r7,zero
  802e5c:	28001616 	blt	r5,zero,802eb8 <__divsi3+0x64>
  802e60:	200d883a 	mov	r6,r4
  802e64:	29001a2e 	bgeu	r5,r4,802ed0 <__divsi3+0x7c>
  802e68:	00800804 	movi	r2,32
  802e6c:	00c00044 	movi	r3,1
  802e70:	00000106 	br	802e78 <__divsi3+0x24>
  802e74:	10000d26 	beq	r2,zero,802eac <__divsi3+0x58>
  802e78:	294b883a 	add	r5,r5,r5
  802e7c:	10bfffc4 	addi	r2,r2,-1
  802e80:	18c7883a 	add	r3,r3,r3
  802e84:	293ffb36 	bltu	r5,r4,802e74 <__alt_data_end+0xff802e74>
  802e88:	0005883a 	mov	r2,zero
  802e8c:	18000726 	beq	r3,zero,802eac <__divsi3+0x58>
  802e90:	0005883a 	mov	r2,zero
  802e94:	31400236 	bltu	r6,r5,802ea0 <__divsi3+0x4c>
  802e98:	314dc83a 	sub	r6,r6,r5
  802e9c:	10c4b03a 	or	r2,r2,r3
  802ea0:	1806d07a 	srli	r3,r3,1
  802ea4:	280ad07a 	srli	r5,r5,1
  802ea8:	183ffa1e 	bne	r3,zero,802e94 <__alt_data_end+0xff802e94>
  802eac:	38000126 	beq	r7,zero,802eb4 <__divsi3+0x60>
  802eb0:	0085c83a 	sub	r2,zero,r2
  802eb4:	f800283a 	ret
  802eb8:	014bc83a 	sub	r5,zero,r5
  802ebc:	39c0005c 	xori	r7,r7,1
  802ec0:	003fe706 	br	802e60 <__alt_data_end+0xff802e60>
  802ec4:	0109c83a 	sub	r4,zero,r4
  802ec8:	01c00044 	movi	r7,1
  802ecc:	003fe306 	br	802e5c <__alt_data_end+0xff802e5c>
  802ed0:	00c00044 	movi	r3,1
  802ed4:	003fee06 	br	802e90 <__alt_data_end+0xff802e90>

00802ed8 <__modsi3>:
  802ed8:	20001716 	blt	r4,zero,802f38 <__modsi3+0x60>
  802edc:	000f883a 	mov	r7,zero
  802ee0:	2005883a 	mov	r2,r4
  802ee4:	28001216 	blt	r5,zero,802f30 <__modsi3+0x58>
  802ee8:	2900162e 	bgeu	r5,r4,802f44 <__modsi3+0x6c>
  802eec:	01800804 	movi	r6,32
  802ef0:	00c00044 	movi	r3,1
  802ef4:	00000106 	br	802efc <__modsi3+0x24>
  802ef8:	30000a26 	beq	r6,zero,802f24 <__modsi3+0x4c>
  802efc:	294b883a 	add	r5,r5,r5
  802f00:	31bfffc4 	addi	r6,r6,-1
  802f04:	18c7883a 	add	r3,r3,r3
  802f08:	293ffb36 	bltu	r5,r4,802ef8 <__alt_data_end+0xff802ef8>
  802f0c:	18000526 	beq	r3,zero,802f24 <__modsi3+0x4c>
  802f10:	1806d07a 	srli	r3,r3,1
  802f14:	11400136 	bltu	r2,r5,802f1c <__modsi3+0x44>
  802f18:	1145c83a 	sub	r2,r2,r5
  802f1c:	280ad07a 	srli	r5,r5,1
  802f20:	183ffb1e 	bne	r3,zero,802f10 <__alt_data_end+0xff802f10>
  802f24:	38000126 	beq	r7,zero,802f2c <__modsi3+0x54>
  802f28:	0085c83a 	sub	r2,zero,r2
  802f2c:	f800283a 	ret
  802f30:	014bc83a 	sub	r5,zero,r5
  802f34:	003fec06 	br	802ee8 <__alt_data_end+0xff802ee8>
  802f38:	0109c83a 	sub	r4,zero,r4
  802f3c:	01c00044 	movi	r7,1
  802f40:	003fe706 	br	802ee0 <__alt_data_end+0xff802ee0>
  802f44:	00c00044 	movi	r3,1
  802f48:	003ff106 	br	802f10 <__alt_data_end+0xff802f10>

00802f4c <__udivsi3>:
  802f4c:	200d883a 	mov	r6,r4
  802f50:	2900152e 	bgeu	r5,r4,802fa8 <__udivsi3+0x5c>
  802f54:	28001416 	blt	r5,zero,802fa8 <__udivsi3+0x5c>
  802f58:	00800804 	movi	r2,32
  802f5c:	00c00044 	movi	r3,1
  802f60:	00000206 	br	802f6c <__udivsi3+0x20>
  802f64:	10000e26 	beq	r2,zero,802fa0 <__udivsi3+0x54>
  802f68:	28000516 	blt	r5,zero,802f80 <__udivsi3+0x34>
  802f6c:	294b883a 	add	r5,r5,r5
  802f70:	10bfffc4 	addi	r2,r2,-1
  802f74:	18c7883a 	add	r3,r3,r3
  802f78:	293ffa36 	bltu	r5,r4,802f64 <__alt_data_end+0xff802f64>
  802f7c:	18000826 	beq	r3,zero,802fa0 <__udivsi3+0x54>
  802f80:	0005883a 	mov	r2,zero
  802f84:	31400236 	bltu	r6,r5,802f90 <__udivsi3+0x44>
  802f88:	314dc83a 	sub	r6,r6,r5
  802f8c:	10c4b03a 	or	r2,r2,r3
  802f90:	1806d07a 	srli	r3,r3,1
  802f94:	280ad07a 	srli	r5,r5,1
  802f98:	183ffa1e 	bne	r3,zero,802f84 <__alt_data_end+0xff802f84>
  802f9c:	f800283a 	ret
  802fa0:	0005883a 	mov	r2,zero
  802fa4:	f800283a 	ret
  802fa8:	00c00044 	movi	r3,1
  802fac:	003ff406 	br	802f80 <__alt_data_end+0xff802f80>

00802fb0 <__umodsi3>:
  802fb0:	2005883a 	mov	r2,r4
  802fb4:	2900122e 	bgeu	r5,r4,803000 <__umodsi3+0x50>
  802fb8:	28001116 	blt	r5,zero,803000 <__umodsi3+0x50>
  802fbc:	01800804 	movi	r6,32
  802fc0:	00c00044 	movi	r3,1
  802fc4:	00000206 	br	802fd0 <__umodsi3+0x20>
  802fc8:	30000c26 	beq	r6,zero,802ffc <__umodsi3+0x4c>
  802fcc:	28000516 	blt	r5,zero,802fe4 <__umodsi3+0x34>
  802fd0:	294b883a 	add	r5,r5,r5
  802fd4:	31bfffc4 	addi	r6,r6,-1
  802fd8:	18c7883a 	add	r3,r3,r3
  802fdc:	293ffa36 	bltu	r5,r4,802fc8 <__alt_data_end+0xff802fc8>
  802fe0:	18000626 	beq	r3,zero,802ffc <__umodsi3+0x4c>
  802fe4:	1806d07a 	srli	r3,r3,1
  802fe8:	11400136 	bltu	r2,r5,802ff0 <__umodsi3+0x40>
  802fec:	1145c83a 	sub	r2,r2,r5
  802ff0:	280ad07a 	srli	r5,r5,1
  802ff4:	183ffb1e 	bne	r3,zero,802fe4 <__alt_data_end+0xff802fe4>
  802ff8:	f800283a 	ret
  802ffc:	f800283a 	ret
  803000:	00c00044 	movi	r3,1
  803004:	003ff706 	br	802fe4 <__alt_data_end+0xff802fe4>

00803008 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803008:	defffe04 	addi	sp,sp,-8
  80300c:	dfc00115 	stw	ra,4(sp)
  803010:	df000015 	stw	fp,0(sp)
  803014:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803018:	d0a00917 	ldw	r2,-32732(gp)
  80301c:	10000326 	beq	r2,zero,80302c <alt_get_errno+0x24>
  803020:	d0a00917 	ldw	r2,-32732(gp)
  803024:	103ee83a 	callr	r2
  803028:	00000106 	br	803030 <alt_get_errno+0x28>
  80302c:	d0a6ac04 	addi	r2,gp,-25936
}
  803030:	e037883a 	mov	sp,fp
  803034:	dfc00117 	ldw	ra,4(sp)
  803038:	df000017 	ldw	fp,0(sp)
  80303c:	dec00204 	addi	sp,sp,8
  803040:	f800283a 	ret

00803044 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  803044:	defffb04 	addi	sp,sp,-20
  803048:	dfc00415 	stw	ra,16(sp)
  80304c:	df000315 	stw	fp,12(sp)
  803050:	df000304 	addi	fp,sp,12
  803054:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  803058:	e0bfff17 	ldw	r2,-4(fp)
  80305c:	10000616 	blt	r2,zero,803078 <close+0x34>
  803060:	e0bfff17 	ldw	r2,-4(fp)
  803064:	10c00324 	muli	r3,r2,12
  803068:	00802034 	movhi	r2,128
  80306c:	1097ee04 	addi	r2,r2,24504
  803070:	1885883a 	add	r2,r3,r2
  803074:	00000106 	br	80307c <close+0x38>
  803078:	0005883a 	mov	r2,zero
  80307c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  803080:	e0bffd17 	ldw	r2,-12(fp)
  803084:	10001926 	beq	r2,zero,8030ec <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  803088:	e0bffd17 	ldw	r2,-12(fp)
  80308c:	10800017 	ldw	r2,0(r2)
  803090:	10800417 	ldw	r2,16(r2)
  803094:	10000626 	beq	r2,zero,8030b0 <close+0x6c>
  803098:	e0bffd17 	ldw	r2,-12(fp)
  80309c:	10800017 	ldw	r2,0(r2)
  8030a0:	10800417 	ldw	r2,16(r2)
  8030a4:	e13ffd17 	ldw	r4,-12(fp)
  8030a8:	103ee83a 	callr	r2
  8030ac:	00000106 	br	8030b4 <close+0x70>
  8030b0:	0005883a 	mov	r2,zero
  8030b4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8030b8:	e13fff17 	ldw	r4,-4(fp)
  8030bc:	08037040 	call	803704 <alt_release_fd>
    if (rval < 0)
  8030c0:	e0bffe17 	ldw	r2,-8(fp)
  8030c4:	1000070e 	bge	r2,zero,8030e4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  8030c8:	08030080 	call	803008 <alt_get_errno>
  8030cc:	1007883a 	mov	r3,r2
  8030d0:	e0bffe17 	ldw	r2,-8(fp)
  8030d4:	0085c83a 	sub	r2,zero,r2
  8030d8:	18800015 	stw	r2,0(r3)
      return -1;
  8030dc:	00bfffc4 	movi	r2,-1
  8030e0:	00000706 	br	803100 <close+0xbc>
    }
    return 0;
  8030e4:	0005883a 	mov	r2,zero
  8030e8:	00000506 	br	803100 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8030ec:	08030080 	call	803008 <alt_get_errno>
  8030f0:	1007883a 	mov	r3,r2
  8030f4:	00801444 	movi	r2,81
  8030f8:	18800015 	stw	r2,0(r3)
    return -1;
  8030fc:	00bfffc4 	movi	r2,-1
  }
}
  803100:	e037883a 	mov	sp,fp
  803104:	dfc00117 	ldw	ra,4(sp)
  803108:	df000017 	ldw	fp,0(sp)
  80310c:	dec00204 	addi	sp,sp,8
  803110:	f800283a 	ret

00803114 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803114:	defffc04 	addi	sp,sp,-16
  803118:	df000315 	stw	fp,12(sp)
  80311c:	df000304 	addi	fp,sp,12
  803120:	e13ffd15 	stw	r4,-12(fp)
  803124:	e17ffe15 	stw	r5,-8(fp)
  803128:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80312c:	e0bfff17 	ldw	r2,-4(fp)
}
  803130:	e037883a 	mov	sp,fp
  803134:	df000017 	ldw	fp,0(sp)
  803138:	dec00104 	addi	sp,sp,4
  80313c:	f800283a 	ret

00803140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803140:	defffe04 	addi	sp,sp,-8
  803144:	dfc00115 	stw	ra,4(sp)
  803148:	df000015 	stw	fp,0(sp)
  80314c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803150:	d0a00917 	ldw	r2,-32732(gp)
  803154:	10000326 	beq	r2,zero,803164 <alt_get_errno+0x24>
  803158:	d0a00917 	ldw	r2,-32732(gp)
  80315c:	103ee83a 	callr	r2
  803160:	00000106 	br	803168 <alt_get_errno+0x28>
  803164:	d0a6ac04 	addi	r2,gp,-25936
}
  803168:	e037883a 	mov	sp,fp
  80316c:	dfc00117 	ldw	ra,4(sp)
  803170:	df000017 	ldw	fp,0(sp)
  803174:	dec00204 	addi	sp,sp,8
  803178:	f800283a 	ret

0080317c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80317c:	defffb04 	addi	sp,sp,-20
  803180:	dfc00415 	stw	ra,16(sp)
  803184:	df000315 	stw	fp,12(sp)
  803188:	df000304 	addi	fp,sp,12
  80318c:	e13ffe15 	stw	r4,-8(fp)
  803190:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803194:	e0bffe17 	ldw	r2,-8(fp)
  803198:	10000616 	blt	r2,zero,8031b4 <fstat+0x38>
  80319c:	e0bffe17 	ldw	r2,-8(fp)
  8031a0:	10c00324 	muli	r3,r2,12
  8031a4:	00802034 	movhi	r2,128
  8031a8:	1097ee04 	addi	r2,r2,24504
  8031ac:	1885883a 	add	r2,r3,r2
  8031b0:	00000106 	br	8031b8 <fstat+0x3c>
  8031b4:	0005883a 	mov	r2,zero
  8031b8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8031bc:	e0bffd17 	ldw	r2,-12(fp)
  8031c0:	10001026 	beq	r2,zero,803204 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8031c4:	e0bffd17 	ldw	r2,-12(fp)
  8031c8:	10800017 	ldw	r2,0(r2)
  8031cc:	10800817 	ldw	r2,32(r2)
  8031d0:	10000726 	beq	r2,zero,8031f0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  8031d4:	e0bffd17 	ldw	r2,-12(fp)
  8031d8:	10800017 	ldw	r2,0(r2)
  8031dc:	10800817 	ldw	r2,32(r2)
  8031e0:	e17fff17 	ldw	r5,-4(fp)
  8031e4:	e13ffd17 	ldw	r4,-12(fp)
  8031e8:	103ee83a 	callr	r2
  8031ec:	00000a06 	br	803218 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8031f0:	e0bfff17 	ldw	r2,-4(fp)
  8031f4:	00c80004 	movi	r3,8192
  8031f8:	10c00115 	stw	r3,4(r2)
      return 0;
  8031fc:	0005883a 	mov	r2,zero
  803200:	00000506 	br	803218 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803204:	08031400 	call	803140 <alt_get_errno>
  803208:	1007883a 	mov	r3,r2
  80320c:	00801444 	movi	r2,81
  803210:	18800015 	stw	r2,0(r3)
    return -1;
  803214:	00bfffc4 	movi	r2,-1
  }
}
  803218:	e037883a 	mov	sp,fp
  80321c:	dfc00117 	ldw	ra,4(sp)
  803220:	df000017 	ldw	fp,0(sp)
  803224:	dec00204 	addi	sp,sp,8
  803228:	f800283a 	ret

0080322c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80322c:	defffe04 	addi	sp,sp,-8
  803230:	dfc00115 	stw	ra,4(sp)
  803234:	df000015 	stw	fp,0(sp)
  803238:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80323c:	d0a00917 	ldw	r2,-32732(gp)
  803240:	10000326 	beq	r2,zero,803250 <alt_get_errno+0x24>
  803244:	d0a00917 	ldw	r2,-32732(gp)
  803248:	103ee83a 	callr	r2
  80324c:	00000106 	br	803254 <alt_get_errno+0x28>
  803250:	d0a6ac04 	addi	r2,gp,-25936
}
  803254:	e037883a 	mov	sp,fp
  803258:	dfc00117 	ldw	ra,4(sp)
  80325c:	df000017 	ldw	fp,0(sp)
  803260:	dec00204 	addi	sp,sp,8
  803264:	f800283a 	ret

00803268 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  803268:	deffed04 	addi	sp,sp,-76
  80326c:	dfc01215 	stw	ra,72(sp)
  803270:	df001115 	stw	fp,68(sp)
  803274:	df001104 	addi	fp,sp,68
  803278:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80327c:	e0bfff17 	ldw	r2,-4(fp)
  803280:	10000616 	blt	r2,zero,80329c <isatty+0x34>
  803284:	e0bfff17 	ldw	r2,-4(fp)
  803288:	10c00324 	muli	r3,r2,12
  80328c:	00802034 	movhi	r2,128
  803290:	1097ee04 	addi	r2,r2,24504
  803294:	1885883a 	add	r2,r3,r2
  803298:	00000106 	br	8032a0 <isatty+0x38>
  80329c:	0005883a 	mov	r2,zero
  8032a0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8032a4:	e0bfef17 	ldw	r2,-68(fp)
  8032a8:	10000e26 	beq	r2,zero,8032e4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8032ac:	e0bfef17 	ldw	r2,-68(fp)
  8032b0:	10800017 	ldw	r2,0(r2)
  8032b4:	10800817 	ldw	r2,32(r2)
  8032b8:	1000021e 	bne	r2,zero,8032c4 <isatty+0x5c>
    {
      return 1;
  8032bc:	00800044 	movi	r2,1
  8032c0:	00000d06 	br	8032f8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8032c4:	e0bff004 	addi	r2,fp,-64
  8032c8:	100b883a 	mov	r5,r2
  8032cc:	e13fff17 	ldw	r4,-4(fp)
  8032d0:	080317c0 	call	80317c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8032d4:	e0bff117 	ldw	r2,-60(fp)
  8032d8:	10880020 	cmpeqi	r2,r2,8192
  8032dc:	10803fcc 	andi	r2,r2,255
  8032e0:	00000506 	br	8032f8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8032e4:	080322c0 	call	80322c <alt_get_errno>
  8032e8:	1007883a 	mov	r3,r2
  8032ec:	00801444 	movi	r2,81
  8032f0:	18800015 	stw	r2,0(r3)
    return 0;
  8032f4:	0005883a 	mov	r2,zero
  }
}
  8032f8:	e037883a 	mov	sp,fp
  8032fc:	dfc00117 	ldw	ra,4(sp)
  803300:	df000017 	ldw	fp,0(sp)
  803304:	dec00204 	addi	sp,sp,8
  803308:	f800283a 	ret

0080330c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80330c:	defffc04 	addi	sp,sp,-16
  803310:	df000315 	stw	fp,12(sp)
  803314:	df000304 	addi	fp,sp,12
  803318:	e13ffd15 	stw	r4,-12(fp)
  80331c:	e17ffe15 	stw	r5,-8(fp)
  803320:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  803324:	e0fffe17 	ldw	r3,-8(fp)
  803328:	e0bffd17 	ldw	r2,-12(fp)
  80332c:	18800c26 	beq	r3,r2,803360 <alt_load_section+0x54>
  {
    while( to != end )
  803330:	00000806 	br	803354 <alt_load_section+0x48>
    {
      *to++ = *from++;
  803334:	e0bffe17 	ldw	r2,-8(fp)
  803338:	10c00104 	addi	r3,r2,4
  80333c:	e0fffe15 	stw	r3,-8(fp)
  803340:	e0fffd17 	ldw	r3,-12(fp)
  803344:	19000104 	addi	r4,r3,4
  803348:	e13ffd15 	stw	r4,-12(fp)
  80334c:	18c00017 	ldw	r3,0(r3)
  803350:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  803354:	e0fffe17 	ldw	r3,-8(fp)
  803358:	e0bfff17 	ldw	r2,-4(fp)
  80335c:	18bff51e 	bne	r3,r2,803334 <__alt_data_end+0xff803334>
    {
      *to++ = *from++;
    }
  }
}
  803360:	0001883a 	nop
  803364:	e037883a 	mov	sp,fp
  803368:	df000017 	ldw	fp,0(sp)
  80336c:	dec00104 	addi	sp,sp,4
  803370:	f800283a 	ret

00803374 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  803374:	defffe04 	addi	sp,sp,-8
  803378:	dfc00115 	stw	ra,4(sp)
  80337c:	df000015 	stw	fp,0(sp)
  803380:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  803384:	01802034 	movhi	r6,128
  803388:	319c7404 	addi	r6,r6,29136
  80338c:	01402034 	movhi	r5,128
  803390:	2955d904 	addi	r5,r5,22372
  803394:	01002034 	movhi	r4,128
  803398:	211c7404 	addi	r4,r4,29136
  80339c:	080330c0 	call	80330c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8033a0:	01802034 	movhi	r6,128
  8033a4:	31807004 	addi	r6,r6,448
  8033a8:	01402034 	movhi	r5,128
  8033ac:	29400804 	addi	r5,r5,32
  8033b0:	01002034 	movhi	r4,128
  8033b4:	21000804 	addi	r4,r4,32
  8033b8:	080330c0 	call	80330c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8033bc:	01802034 	movhi	r6,128
  8033c0:	3195d904 	addi	r6,r6,22372
  8033c4:	01402034 	movhi	r5,128
  8033c8:	2955c704 	addi	r5,r5,22300
  8033cc:	01002034 	movhi	r4,128
  8033d0:	2115c704 	addi	r4,r4,22300
  8033d4:	080330c0 	call	80330c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8033d8:	08046a40 	call	8046a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8033dc:	080488c0 	call	80488c <alt_icache_flush_all>
}
  8033e0:	0001883a 	nop
  8033e4:	e037883a 	mov	sp,fp
  8033e8:	dfc00117 	ldw	ra,4(sp)
  8033ec:	df000017 	ldw	fp,0(sp)
  8033f0:	dec00204 	addi	sp,sp,8
  8033f4:	f800283a 	ret

008033f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8033f8:	defffe04 	addi	sp,sp,-8
  8033fc:	dfc00115 	stw	ra,4(sp)
  803400:	df000015 	stw	fp,0(sp)
  803404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803408:	d0a00917 	ldw	r2,-32732(gp)
  80340c:	10000326 	beq	r2,zero,80341c <alt_get_errno+0x24>
  803410:	d0a00917 	ldw	r2,-32732(gp)
  803414:	103ee83a 	callr	r2
  803418:	00000106 	br	803420 <alt_get_errno+0x28>
  80341c:	d0a6ac04 	addi	r2,gp,-25936
}
  803420:	e037883a 	mov	sp,fp
  803424:	dfc00117 	ldw	ra,4(sp)
  803428:	df000017 	ldw	fp,0(sp)
  80342c:	dec00204 	addi	sp,sp,8
  803430:	f800283a 	ret

00803434 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  803434:	defff904 	addi	sp,sp,-28
  803438:	dfc00615 	stw	ra,24(sp)
  80343c:	df000515 	stw	fp,20(sp)
  803440:	df000504 	addi	fp,sp,20
  803444:	e13ffd15 	stw	r4,-12(fp)
  803448:	e17ffe15 	stw	r5,-8(fp)
  80344c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  803450:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803454:	e0bffd17 	ldw	r2,-12(fp)
  803458:	10000616 	blt	r2,zero,803474 <lseek+0x40>
  80345c:	e0bffd17 	ldw	r2,-12(fp)
  803460:	10c00324 	muli	r3,r2,12
  803464:	00802034 	movhi	r2,128
  803468:	1097ee04 	addi	r2,r2,24504
  80346c:	1885883a 	add	r2,r3,r2
  803470:	00000106 	br	803478 <lseek+0x44>
  803474:	0005883a 	mov	r2,zero
  803478:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80347c:	e0bffc17 	ldw	r2,-16(fp)
  803480:	10001026 	beq	r2,zero,8034c4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803484:	e0bffc17 	ldw	r2,-16(fp)
  803488:	10800017 	ldw	r2,0(r2)
  80348c:	10800717 	ldw	r2,28(r2)
  803490:	10000926 	beq	r2,zero,8034b8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803494:	e0bffc17 	ldw	r2,-16(fp)
  803498:	10800017 	ldw	r2,0(r2)
  80349c:	10800717 	ldw	r2,28(r2)
  8034a0:	e1bfff17 	ldw	r6,-4(fp)
  8034a4:	e17ffe17 	ldw	r5,-8(fp)
  8034a8:	e13ffc17 	ldw	r4,-16(fp)
  8034ac:	103ee83a 	callr	r2
  8034b0:	e0bffb15 	stw	r2,-20(fp)
  8034b4:	00000506 	br	8034cc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8034b8:	00bfde84 	movi	r2,-134
  8034bc:	e0bffb15 	stw	r2,-20(fp)
  8034c0:	00000206 	br	8034cc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  8034c4:	00bfebc4 	movi	r2,-81
  8034c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  8034cc:	e0bffb17 	ldw	r2,-20(fp)
  8034d0:	1000070e 	bge	r2,zero,8034f0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  8034d4:	08033f80 	call	8033f8 <alt_get_errno>
  8034d8:	1007883a 	mov	r3,r2
  8034dc:	e0bffb17 	ldw	r2,-20(fp)
  8034e0:	0085c83a 	sub	r2,zero,r2
  8034e4:	18800015 	stw	r2,0(r3)
    rc = -1;
  8034e8:	00bfffc4 	movi	r2,-1
  8034ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  8034f0:	e0bffb17 	ldw	r2,-20(fp)
}
  8034f4:	e037883a 	mov	sp,fp
  8034f8:	dfc00117 	ldw	ra,4(sp)
  8034fc:	df000017 	ldw	fp,0(sp)
  803500:	dec00204 	addi	sp,sp,8
  803504:	f800283a 	ret

00803508 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803508:	defffd04 	addi	sp,sp,-12
  80350c:	dfc00215 	stw	ra,8(sp)
  803510:	df000115 	stw	fp,4(sp)
  803514:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803518:	0009883a 	mov	r4,zero
  80351c:	08039800 	call	803980 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  803520:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  803524:	08039b80 	call	8039b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803528:	01802034 	movhi	r6,128
  80352c:	3195d104 	addi	r6,r6,22340
  803530:	01402034 	movhi	r5,128
  803534:	2955d104 	addi	r5,r5,22340
  803538:	01002034 	movhi	r4,128
  80353c:	2115d104 	addi	r4,r4,22340
  803540:	0804c240 	call	804c24 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  803544:	08047cc0 	call	8047cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803548:	01002034 	movhi	r4,128
  80354c:	21120b04 	addi	r4,r4,18476
  803550:	08053880 	call	805388 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  803554:	d0a6ad17 	ldw	r2,-25932(gp)
  803558:	d0e6ae17 	ldw	r3,-25928(gp)
  80355c:	d126af17 	ldw	r4,-25924(gp)
  803560:	200d883a 	mov	r6,r4
  803564:	180b883a 	mov	r5,r3
  803568:	1009883a 	mov	r4,r2
  80356c:	080020c0 	call	80020c <main>
  803570:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  803574:	01000044 	movi	r4,1
  803578:	08030440 	call	803044 <close>
  exit (result);
  80357c:	e13fff17 	ldw	r4,-4(fp)
  803580:	080539c0 	call	80539c <exit>

00803584 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  803584:	defffe04 	addi	sp,sp,-8
  803588:	df000115 	stw	fp,4(sp)
  80358c:	df000104 	addi	fp,sp,4
  803590:	e13fff15 	stw	r4,-4(fp)
}
  803594:	0001883a 	nop
  803598:	e037883a 	mov	sp,fp
  80359c:	df000017 	ldw	fp,0(sp)
  8035a0:	dec00104 	addi	sp,sp,4
  8035a4:	f800283a 	ret

008035a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8035a8:	defffe04 	addi	sp,sp,-8
  8035ac:	df000115 	stw	fp,4(sp)
  8035b0:	df000104 	addi	fp,sp,4
  8035b4:	e13fff15 	stw	r4,-4(fp)
}
  8035b8:	0001883a 	nop
  8035bc:	e037883a 	mov	sp,fp
  8035c0:	df000017 	ldw	fp,0(sp)
  8035c4:	dec00104 	addi	sp,sp,4
  8035c8:	f800283a 	ret

008035cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8035cc:	defffe04 	addi	sp,sp,-8
  8035d0:	dfc00115 	stw	ra,4(sp)
  8035d4:	df000015 	stw	fp,0(sp)
  8035d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8035dc:	d0a00917 	ldw	r2,-32732(gp)
  8035e0:	10000326 	beq	r2,zero,8035f0 <alt_get_errno+0x24>
  8035e4:	d0a00917 	ldw	r2,-32732(gp)
  8035e8:	103ee83a 	callr	r2
  8035ec:	00000106 	br	8035f4 <alt_get_errno+0x28>
  8035f0:	d0a6ac04 	addi	r2,gp,-25936
}
  8035f4:	e037883a 	mov	sp,fp
  8035f8:	dfc00117 	ldw	ra,4(sp)
  8035fc:	df000017 	ldw	fp,0(sp)
  803600:	dec00204 	addi	sp,sp,8
  803604:	f800283a 	ret

00803608 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  803608:	defff904 	addi	sp,sp,-28
  80360c:	dfc00615 	stw	ra,24(sp)
  803610:	df000515 	stw	fp,20(sp)
  803614:	df000504 	addi	fp,sp,20
  803618:	e13ffd15 	stw	r4,-12(fp)
  80361c:	e17ffe15 	stw	r5,-8(fp)
  803620:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803624:	e0bffd17 	ldw	r2,-12(fp)
  803628:	10000616 	blt	r2,zero,803644 <read+0x3c>
  80362c:	e0bffd17 	ldw	r2,-12(fp)
  803630:	10c00324 	muli	r3,r2,12
  803634:	00802034 	movhi	r2,128
  803638:	1097ee04 	addi	r2,r2,24504
  80363c:	1885883a 	add	r2,r3,r2
  803640:	00000106 	br	803648 <read+0x40>
  803644:	0005883a 	mov	r2,zero
  803648:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80364c:	e0bffb17 	ldw	r2,-20(fp)
  803650:	10002226 	beq	r2,zero,8036dc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803654:	e0bffb17 	ldw	r2,-20(fp)
  803658:	10800217 	ldw	r2,8(r2)
  80365c:	108000cc 	andi	r2,r2,3
  803660:	10800060 	cmpeqi	r2,r2,1
  803664:	1000181e 	bne	r2,zero,8036c8 <read+0xc0>
        (fd->dev->read))
  803668:	e0bffb17 	ldw	r2,-20(fp)
  80366c:	10800017 	ldw	r2,0(r2)
  803670:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803674:	10001426 	beq	r2,zero,8036c8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  803678:	e0bffb17 	ldw	r2,-20(fp)
  80367c:	10800017 	ldw	r2,0(r2)
  803680:	10800517 	ldw	r2,20(r2)
  803684:	e0ffff17 	ldw	r3,-4(fp)
  803688:	180d883a 	mov	r6,r3
  80368c:	e17ffe17 	ldw	r5,-8(fp)
  803690:	e13ffb17 	ldw	r4,-20(fp)
  803694:	103ee83a 	callr	r2
  803698:	e0bffc15 	stw	r2,-16(fp)
  80369c:	e0bffc17 	ldw	r2,-16(fp)
  8036a0:	1000070e 	bge	r2,zero,8036c0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  8036a4:	08035cc0 	call	8035cc <alt_get_errno>
  8036a8:	1007883a 	mov	r3,r2
  8036ac:	e0bffc17 	ldw	r2,-16(fp)
  8036b0:	0085c83a 	sub	r2,zero,r2
  8036b4:	18800015 	stw	r2,0(r3)
          return -1;
  8036b8:	00bfffc4 	movi	r2,-1
  8036bc:	00000c06 	br	8036f0 <read+0xe8>
        }
        return rval;
  8036c0:	e0bffc17 	ldw	r2,-16(fp)
  8036c4:	00000a06 	br	8036f0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8036c8:	08035cc0 	call	8035cc <alt_get_errno>
  8036cc:	1007883a 	mov	r3,r2
  8036d0:	00800344 	movi	r2,13
  8036d4:	18800015 	stw	r2,0(r3)
  8036d8:	00000406 	br	8036ec <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8036dc:	08035cc0 	call	8035cc <alt_get_errno>
  8036e0:	1007883a 	mov	r3,r2
  8036e4:	00801444 	movi	r2,81
  8036e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8036ec:	00bfffc4 	movi	r2,-1
}
  8036f0:	e037883a 	mov	sp,fp
  8036f4:	dfc00117 	ldw	ra,4(sp)
  8036f8:	df000017 	ldw	fp,0(sp)
  8036fc:	dec00204 	addi	sp,sp,8
  803700:	f800283a 	ret

00803704 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803704:	defffe04 	addi	sp,sp,-8
  803708:	df000115 	stw	fp,4(sp)
  80370c:	df000104 	addi	fp,sp,4
  803710:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803714:	e0bfff17 	ldw	r2,-4(fp)
  803718:	108000d0 	cmplti	r2,r2,3
  80371c:	10000d1e 	bne	r2,zero,803754 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803720:	00802034 	movhi	r2,128
  803724:	1097ee04 	addi	r2,r2,24504
  803728:	e0ffff17 	ldw	r3,-4(fp)
  80372c:	18c00324 	muli	r3,r3,12
  803730:	10c5883a 	add	r2,r2,r3
  803734:	10800204 	addi	r2,r2,8
  803738:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80373c:	00802034 	movhi	r2,128
  803740:	1097ee04 	addi	r2,r2,24504
  803744:	e0ffff17 	ldw	r3,-4(fp)
  803748:	18c00324 	muli	r3,r3,12
  80374c:	10c5883a 	add	r2,r2,r3
  803750:	10000015 	stw	zero,0(r2)
  }
}
  803754:	0001883a 	nop
  803758:	e037883a 	mov	sp,fp
  80375c:	df000017 	ldw	fp,0(sp)
  803760:	dec00104 	addi	sp,sp,4
  803764:	f800283a 	ret

00803768 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  803768:	defff904 	addi	sp,sp,-28
  80376c:	df000615 	stw	fp,24(sp)
  803770:	df000604 	addi	fp,sp,24
  803774:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803778:	0005303a 	rdctl	r2,status
  80377c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803780:	e0fffe17 	ldw	r3,-8(fp)
  803784:	00bfff84 	movi	r2,-2
  803788:	1884703a 	and	r2,r3,r2
  80378c:	1001703a 	wrctl	status,r2
  
  return context;
  803790:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803794:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803798:	d0a00a17 	ldw	r2,-32728(gp)
  80379c:	10c000c4 	addi	r3,r2,3
  8037a0:	00bfff04 	movi	r2,-4
  8037a4:	1884703a 	and	r2,r3,r2
  8037a8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8037ac:	d0e00a17 	ldw	r3,-32728(gp)
  8037b0:	e0bfff17 	ldw	r2,-4(fp)
  8037b4:	1887883a 	add	r3,r3,r2
  8037b8:	00804034 	movhi	r2,256
  8037bc:	10800004 	addi	r2,r2,0
  8037c0:	10c0062e 	bgeu	r2,r3,8037dc <sbrk+0x74>
  8037c4:	e0bffb17 	ldw	r2,-20(fp)
  8037c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8037cc:	e0bffa17 	ldw	r2,-24(fp)
  8037d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8037d4:	00bfffc4 	movi	r2,-1
  8037d8:	00000b06 	br	803808 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  8037dc:	d0a00a17 	ldw	r2,-32728(gp)
  8037e0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  8037e4:	d0e00a17 	ldw	r3,-32728(gp)
  8037e8:	e0bfff17 	ldw	r2,-4(fp)
  8037ec:	1885883a 	add	r2,r3,r2
  8037f0:	d0a00a15 	stw	r2,-32728(gp)
  8037f4:	e0bffb17 	ldw	r2,-20(fp)
  8037f8:	e0bffc15 	stw	r2,-16(fp)
  8037fc:	e0bffc17 	ldw	r2,-16(fp)
  803800:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  803804:	e0bffd17 	ldw	r2,-12(fp)
} 
  803808:	e037883a 	mov	sp,fp
  80380c:	df000017 	ldw	fp,0(sp)
  803810:	dec00104 	addi	sp,sp,4
  803814:	f800283a 	ret

00803818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803818:	defffe04 	addi	sp,sp,-8
  80381c:	dfc00115 	stw	ra,4(sp)
  803820:	df000015 	stw	fp,0(sp)
  803824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803828:	d0a00917 	ldw	r2,-32732(gp)
  80382c:	10000326 	beq	r2,zero,80383c <alt_get_errno+0x24>
  803830:	d0a00917 	ldw	r2,-32732(gp)
  803834:	103ee83a 	callr	r2
  803838:	00000106 	br	803840 <alt_get_errno+0x28>
  80383c:	d0a6ac04 	addi	r2,gp,-25936
}
  803840:	e037883a 	mov	sp,fp
  803844:	dfc00117 	ldw	ra,4(sp)
  803848:	df000017 	ldw	fp,0(sp)
  80384c:	dec00204 	addi	sp,sp,8
  803850:	f800283a 	ret

00803854 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803854:	defff904 	addi	sp,sp,-28
  803858:	dfc00615 	stw	ra,24(sp)
  80385c:	df000515 	stw	fp,20(sp)
  803860:	df000504 	addi	fp,sp,20
  803864:	e13ffd15 	stw	r4,-12(fp)
  803868:	e17ffe15 	stw	r5,-8(fp)
  80386c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803870:	e0bffd17 	ldw	r2,-12(fp)
  803874:	10000616 	blt	r2,zero,803890 <write+0x3c>
  803878:	e0bffd17 	ldw	r2,-12(fp)
  80387c:	10c00324 	muli	r3,r2,12
  803880:	00802034 	movhi	r2,128
  803884:	1097ee04 	addi	r2,r2,24504
  803888:	1885883a 	add	r2,r3,r2
  80388c:	00000106 	br	803894 <write+0x40>
  803890:	0005883a 	mov	r2,zero
  803894:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  803898:	e0bffb17 	ldw	r2,-20(fp)
  80389c:	10002126 	beq	r2,zero,803924 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8038a0:	e0bffb17 	ldw	r2,-20(fp)
  8038a4:	10800217 	ldw	r2,8(r2)
  8038a8:	108000cc 	andi	r2,r2,3
  8038ac:	10001826 	beq	r2,zero,803910 <write+0xbc>
  8038b0:	e0bffb17 	ldw	r2,-20(fp)
  8038b4:	10800017 	ldw	r2,0(r2)
  8038b8:	10800617 	ldw	r2,24(r2)
  8038bc:	10001426 	beq	r2,zero,803910 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8038c0:	e0bffb17 	ldw	r2,-20(fp)
  8038c4:	10800017 	ldw	r2,0(r2)
  8038c8:	10800617 	ldw	r2,24(r2)
  8038cc:	e0ffff17 	ldw	r3,-4(fp)
  8038d0:	180d883a 	mov	r6,r3
  8038d4:	e17ffe17 	ldw	r5,-8(fp)
  8038d8:	e13ffb17 	ldw	r4,-20(fp)
  8038dc:	103ee83a 	callr	r2
  8038e0:	e0bffc15 	stw	r2,-16(fp)
  8038e4:	e0bffc17 	ldw	r2,-16(fp)
  8038e8:	1000070e 	bge	r2,zero,803908 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8038ec:	08038180 	call	803818 <alt_get_errno>
  8038f0:	1007883a 	mov	r3,r2
  8038f4:	e0bffc17 	ldw	r2,-16(fp)
  8038f8:	0085c83a 	sub	r2,zero,r2
  8038fc:	18800015 	stw	r2,0(r3)
        return -1;
  803900:	00bfffc4 	movi	r2,-1
  803904:	00000c06 	br	803938 <write+0xe4>
      }
      return rval;
  803908:	e0bffc17 	ldw	r2,-16(fp)
  80390c:	00000a06 	br	803938 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  803910:	08038180 	call	803818 <alt_get_errno>
  803914:	1007883a 	mov	r3,r2
  803918:	00800344 	movi	r2,13
  80391c:	18800015 	stw	r2,0(r3)
  803920:	00000406 	br	803934 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  803924:	08038180 	call	803818 <alt_get_errno>
  803928:	1007883a 	mov	r3,r2
  80392c:	00801444 	movi	r2,81
  803930:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803934:	00bfffc4 	movi	r2,-1
}
  803938:	e037883a 	mov	sp,fp
  80393c:	dfc00117 	ldw	ra,4(sp)
  803940:	df000017 	ldw	fp,0(sp)
  803944:	dec00204 	addi	sp,sp,8
  803948:	f800283a 	ret

0080394c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80394c:	defffd04 	addi	sp,sp,-12
  803950:	dfc00215 	stw	ra,8(sp)
  803954:	df000115 	stw	fp,4(sp)
  803958:	df000104 	addi	fp,sp,4
  80395c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  803960:	d1600604 	addi	r5,gp,-32744
  803964:	e13fff17 	ldw	r4,-4(fp)
  803968:	08047280 	call	804728 <alt_dev_llist_insert>
}
  80396c:	e037883a 	mov	sp,fp
  803970:	dfc00117 	ldw	ra,4(sp)
  803974:	df000017 	ldw	fp,0(sp)
  803978:	dec00204 	addi	sp,sp,8
  80397c:	f800283a 	ret

00803980 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  803980:	defffd04 	addi	sp,sp,-12
  803984:	dfc00215 	stw	ra,8(sp)
  803988:	df000115 	stw	fp,4(sp)
  80398c:	df000104 	addi	fp,sp,4
  803990:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  803994:	08050980 	call	805098 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  803998:	00800044 	movi	r2,1
  80399c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8039a0:	0001883a 	nop
  8039a4:	e037883a 	mov	sp,fp
  8039a8:	dfc00117 	ldw	ra,4(sp)
  8039ac:	df000017 	ldw	fp,0(sp)
  8039b0:	dec00204 	addi	sp,sp,8
  8039b4:	f800283a 	ret

008039b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8039b8:	defffe04 	addi	sp,sp,-8
  8039bc:	dfc00115 	stw	ra,4(sp)
  8039c0:	df000015 	stw	fp,0(sp)
  8039c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  8039c8:	01c0fa04 	movi	r7,1000
  8039cc:	01800044 	movi	r6,1
  8039d0:	000b883a 	mov	r5,zero
  8039d4:	01004034 	movhi	r4,256
  8039d8:	21040004 	addi	r4,r4,4096
  8039dc:	08044fc0 	call	8044fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8039e0:	01800404 	movi	r6,16
  8039e4:	000b883a 	mov	r5,zero
  8039e8:	01002034 	movhi	r4,128
  8039ec:	21185804 	addi	r4,r4,24928
  8039f0:	0803b800 	call	803b80 <altera_avalon_jtag_uart_init>
  8039f4:	01002034 	movhi	r4,128
  8039f8:	21184e04 	addi	r4,r4,24888
  8039fc:	080394c0 	call	80394c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  803a00:	0001883a 	nop
}
  803a04:	0001883a 	nop
  803a08:	e037883a 	mov	sp,fp
  803a0c:	dfc00117 	ldw	ra,4(sp)
  803a10:	df000017 	ldw	fp,0(sp)
  803a14:	dec00204 	addi	sp,sp,8
  803a18:	f800283a 	ret

00803a1c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  803a1c:	defffa04 	addi	sp,sp,-24
  803a20:	dfc00515 	stw	ra,20(sp)
  803a24:	df000415 	stw	fp,16(sp)
  803a28:	df000404 	addi	fp,sp,16
  803a2c:	e13ffd15 	stw	r4,-12(fp)
  803a30:	e17ffe15 	stw	r5,-8(fp)
  803a34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803a38:	e0bffd17 	ldw	r2,-12(fp)
  803a3c:	10800017 	ldw	r2,0(r2)
  803a40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  803a44:	e0bffc17 	ldw	r2,-16(fp)
  803a48:	10c00a04 	addi	r3,r2,40
  803a4c:	e0bffd17 	ldw	r2,-12(fp)
  803a50:	10800217 	ldw	r2,8(r2)
  803a54:	100f883a 	mov	r7,r2
  803a58:	e1bfff17 	ldw	r6,-4(fp)
  803a5c:	e17ffe17 	ldw	r5,-8(fp)
  803a60:	1809883a 	mov	r4,r3
  803a64:	08040440 	call	804044 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  803a68:	e037883a 	mov	sp,fp
  803a6c:	dfc00117 	ldw	ra,4(sp)
  803a70:	df000017 	ldw	fp,0(sp)
  803a74:	dec00204 	addi	sp,sp,8
  803a78:	f800283a 	ret

00803a7c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  803a7c:	defffa04 	addi	sp,sp,-24
  803a80:	dfc00515 	stw	ra,20(sp)
  803a84:	df000415 	stw	fp,16(sp)
  803a88:	df000404 	addi	fp,sp,16
  803a8c:	e13ffd15 	stw	r4,-12(fp)
  803a90:	e17ffe15 	stw	r5,-8(fp)
  803a94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803a98:	e0bffd17 	ldw	r2,-12(fp)
  803a9c:	10800017 	ldw	r2,0(r2)
  803aa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  803aa4:	e0bffc17 	ldw	r2,-16(fp)
  803aa8:	10c00a04 	addi	r3,r2,40
  803aac:	e0bffd17 	ldw	r2,-12(fp)
  803ab0:	10800217 	ldw	r2,8(r2)
  803ab4:	100f883a 	mov	r7,r2
  803ab8:	e1bfff17 	ldw	r6,-4(fp)
  803abc:	e17ffe17 	ldw	r5,-8(fp)
  803ac0:	1809883a 	mov	r4,r3
  803ac4:	08042600 	call	804260 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  803ac8:	e037883a 	mov	sp,fp
  803acc:	dfc00117 	ldw	ra,4(sp)
  803ad0:	df000017 	ldw	fp,0(sp)
  803ad4:	dec00204 	addi	sp,sp,8
  803ad8:	f800283a 	ret

00803adc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  803adc:	defffc04 	addi	sp,sp,-16
  803ae0:	dfc00315 	stw	ra,12(sp)
  803ae4:	df000215 	stw	fp,8(sp)
  803ae8:	df000204 	addi	fp,sp,8
  803aec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803af0:	e0bfff17 	ldw	r2,-4(fp)
  803af4:	10800017 	ldw	r2,0(r2)
  803af8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  803afc:	e0bffe17 	ldw	r2,-8(fp)
  803b00:	10c00a04 	addi	r3,r2,40
  803b04:	e0bfff17 	ldw	r2,-4(fp)
  803b08:	10800217 	ldw	r2,8(r2)
  803b0c:	100b883a 	mov	r5,r2
  803b10:	1809883a 	mov	r4,r3
  803b14:	0803eec0 	call	803eec <altera_avalon_jtag_uart_close>
}
  803b18:	e037883a 	mov	sp,fp
  803b1c:	dfc00117 	ldw	ra,4(sp)
  803b20:	df000017 	ldw	fp,0(sp)
  803b24:	dec00204 	addi	sp,sp,8
  803b28:	f800283a 	ret

00803b2c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  803b2c:	defffa04 	addi	sp,sp,-24
  803b30:	dfc00515 	stw	ra,20(sp)
  803b34:	df000415 	stw	fp,16(sp)
  803b38:	df000404 	addi	fp,sp,16
  803b3c:	e13ffd15 	stw	r4,-12(fp)
  803b40:	e17ffe15 	stw	r5,-8(fp)
  803b44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  803b48:	e0bffd17 	ldw	r2,-12(fp)
  803b4c:	10800017 	ldw	r2,0(r2)
  803b50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  803b54:	e0bffc17 	ldw	r2,-16(fp)
  803b58:	10800a04 	addi	r2,r2,40
  803b5c:	e1bfff17 	ldw	r6,-4(fp)
  803b60:	e17ffe17 	ldw	r5,-8(fp)
  803b64:	1009883a 	mov	r4,r2
  803b68:	0803f540 	call	803f54 <altera_avalon_jtag_uart_ioctl>
}
  803b6c:	e037883a 	mov	sp,fp
  803b70:	dfc00117 	ldw	ra,4(sp)
  803b74:	df000017 	ldw	fp,0(sp)
  803b78:	dec00204 	addi	sp,sp,8
  803b7c:	f800283a 	ret

00803b80 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  803b80:	defffa04 	addi	sp,sp,-24
  803b84:	dfc00515 	stw	ra,20(sp)
  803b88:	df000415 	stw	fp,16(sp)
  803b8c:	df000404 	addi	fp,sp,16
  803b90:	e13ffd15 	stw	r4,-12(fp)
  803b94:	e17ffe15 	stw	r5,-8(fp)
  803b98:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803b9c:	e0bffd17 	ldw	r2,-12(fp)
  803ba0:	00c00044 	movi	r3,1
  803ba4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  803ba8:	e0bffd17 	ldw	r2,-12(fp)
  803bac:	10800017 	ldw	r2,0(r2)
  803bb0:	10800104 	addi	r2,r2,4
  803bb4:	1007883a 	mov	r3,r2
  803bb8:	e0bffd17 	ldw	r2,-12(fp)
  803bbc:	10800817 	ldw	r2,32(r2)
  803bc0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  803bc4:	e0bffe17 	ldw	r2,-8(fp)
  803bc8:	e0ffff17 	ldw	r3,-4(fp)
  803bcc:	d8000015 	stw	zero,0(sp)
  803bd0:	e1fffd17 	ldw	r7,-12(fp)
  803bd4:	01802034 	movhi	r6,128
  803bd8:	318f1004 	addi	r6,r6,15424
  803bdc:	180b883a 	mov	r5,r3
  803be0:	1009883a 	mov	r4,r2
  803be4:	08048c00 	call	8048c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  803be8:	e0bffd17 	ldw	r2,-12(fp)
  803bec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  803bf0:	e0bffd17 	ldw	r2,-12(fp)
  803bf4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  803bf8:	d0e6b117 	ldw	r3,-25916(gp)
  803bfc:	e1fffd17 	ldw	r7,-12(fp)
  803c00:	01802034 	movhi	r6,128
  803c04:	318f9304 	addi	r6,r6,15948
  803c08:	180b883a 	mov	r5,r3
  803c0c:	1009883a 	mov	r4,r2
  803c10:	08045780 	call	804578 <alt_alarm_start>
  803c14:	1000040e 	bge	r2,zero,803c28 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  803c18:	e0fffd17 	ldw	r3,-12(fp)
  803c1c:	00a00034 	movhi	r2,32768
  803c20:	10bfffc4 	addi	r2,r2,-1
  803c24:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  803c28:	0001883a 	nop
  803c2c:	e037883a 	mov	sp,fp
  803c30:	dfc00117 	ldw	ra,4(sp)
  803c34:	df000017 	ldw	fp,0(sp)
  803c38:	dec00204 	addi	sp,sp,8
  803c3c:	f800283a 	ret

00803c40 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  803c40:	defff804 	addi	sp,sp,-32
  803c44:	df000715 	stw	fp,28(sp)
  803c48:	df000704 	addi	fp,sp,28
  803c4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  803c50:	e0bfff17 	ldw	r2,-4(fp)
  803c54:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  803c58:	e0bffb17 	ldw	r2,-20(fp)
  803c5c:	10800017 	ldw	r2,0(r2)
  803c60:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803c64:	e0bffc17 	ldw	r2,-16(fp)
  803c68:	10800104 	addi	r2,r2,4
  803c6c:	10800037 	ldwio	r2,0(r2)
  803c70:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  803c74:	e0bffd17 	ldw	r2,-12(fp)
  803c78:	1080c00c 	andi	r2,r2,768
  803c7c:	10006d26 	beq	r2,zero,803e34 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  803c80:	e0bffd17 	ldw	r2,-12(fp)
  803c84:	1080400c 	andi	r2,r2,256
  803c88:	10003526 	beq	r2,zero,803d60 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  803c8c:	00800074 	movhi	r2,1
  803c90:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803c94:	e0bffb17 	ldw	r2,-20(fp)
  803c98:	10800a17 	ldw	r2,40(r2)
  803c9c:	10800044 	addi	r2,r2,1
  803ca0:	1081ffcc 	andi	r2,r2,2047
  803ca4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  803ca8:	e0bffb17 	ldw	r2,-20(fp)
  803cac:	10c00b17 	ldw	r3,44(r2)
  803cb0:	e0bffe17 	ldw	r2,-8(fp)
  803cb4:	18801526 	beq	r3,r2,803d0c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  803cb8:	e0bffc17 	ldw	r2,-16(fp)
  803cbc:	10800037 	ldwio	r2,0(r2)
  803cc0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  803cc4:	e0bff917 	ldw	r2,-28(fp)
  803cc8:	10a0000c 	andi	r2,r2,32768
  803ccc:	10001126 	beq	r2,zero,803d14 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  803cd0:	e0bffb17 	ldw	r2,-20(fp)
  803cd4:	10800a17 	ldw	r2,40(r2)
  803cd8:	e0fff917 	ldw	r3,-28(fp)
  803cdc:	1809883a 	mov	r4,r3
  803ce0:	e0fffb17 	ldw	r3,-20(fp)
  803ce4:	1885883a 	add	r2,r3,r2
  803ce8:	10800e04 	addi	r2,r2,56
  803cec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803cf0:	e0bffb17 	ldw	r2,-20(fp)
  803cf4:	10800a17 	ldw	r2,40(r2)
  803cf8:	10800044 	addi	r2,r2,1
  803cfc:	10c1ffcc 	andi	r3,r2,2047
  803d00:	e0bffb17 	ldw	r2,-20(fp)
  803d04:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  803d08:	003fe206 	br	803c94 <__alt_data_end+0xff803c94>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  803d0c:	0001883a 	nop
  803d10:	00000106 	br	803d18 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  803d14:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  803d18:	e0bff917 	ldw	r2,-28(fp)
  803d1c:	10bfffec 	andhi	r2,r2,65535
  803d20:	10000f26 	beq	r2,zero,803d60 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803d24:	e0bffb17 	ldw	r2,-20(fp)
  803d28:	10c00817 	ldw	r3,32(r2)
  803d2c:	00bfff84 	movi	r2,-2
  803d30:	1886703a 	and	r3,r3,r2
  803d34:	e0bffb17 	ldw	r2,-20(fp)
  803d38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  803d3c:	e0bffc17 	ldw	r2,-16(fp)
  803d40:	10800104 	addi	r2,r2,4
  803d44:	1007883a 	mov	r3,r2
  803d48:	e0bffb17 	ldw	r2,-20(fp)
  803d4c:	10800817 	ldw	r2,32(r2)
  803d50:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803d54:	e0bffc17 	ldw	r2,-16(fp)
  803d58:	10800104 	addi	r2,r2,4
  803d5c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  803d60:	e0bffd17 	ldw	r2,-12(fp)
  803d64:	1080800c 	andi	r2,r2,512
  803d68:	103fbe26 	beq	r2,zero,803c64 <__alt_data_end+0xff803c64>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  803d6c:	e0bffd17 	ldw	r2,-12(fp)
  803d70:	1004d43a 	srli	r2,r2,16
  803d74:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  803d78:	00001406 	br	803dcc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  803d7c:	e0bffc17 	ldw	r2,-16(fp)
  803d80:	e0fffb17 	ldw	r3,-20(fp)
  803d84:	18c00d17 	ldw	r3,52(r3)
  803d88:	e13ffb17 	ldw	r4,-20(fp)
  803d8c:	20c7883a 	add	r3,r4,r3
  803d90:	18c20e04 	addi	r3,r3,2104
  803d94:	18c00003 	ldbu	r3,0(r3)
  803d98:	18c03fcc 	andi	r3,r3,255
  803d9c:	18c0201c 	xori	r3,r3,128
  803da0:	18ffe004 	addi	r3,r3,-128
  803da4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803da8:	e0bffb17 	ldw	r2,-20(fp)
  803dac:	10800d17 	ldw	r2,52(r2)
  803db0:	10800044 	addi	r2,r2,1
  803db4:	10c1ffcc 	andi	r3,r2,2047
  803db8:	e0bffb17 	ldw	r2,-20(fp)
  803dbc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  803dc0:	e0bffa17 	ldw	r2,-24(fp)
  803dc4:	10bfffc4 	addi	r2,r2,-1
  803dc8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  803dcc:	e0bffa17 	ldw	r2,-24(fp)
  803dd0:	10000526 	beq	r2,zero,803de8 <altera_avalon_jtag_uart_irq+0x1a8>
  803dd4:	e0bffb17 	ldw	r2,-20(fp)
  803dd8:	10c00d17 	ldw	r3,52(r2)
  803ddc:	e0bffb17 	ldw	r2,-20(fp)
  803de0:	10800c17 	ldw	r2,48(r2)
  803de4:	18bfe51e 	bne	r3,r2,803d7c <__alt_data_end+0xff803d7c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  803de8:	e0bffa17 	ldw	r2,-24(fp)
  803dec:	103f9d26 	beq	r2,zero,803c64 <__alt_data_end+0xff803c64>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  803df0:	e0bffb17 	ldw	r2,-20(fp)
  803df4:	10c00817 	ldw	r3,32(r2)
  803df8:	00bfff44 	movi	r2,-3
  803dfc:	1886703a 	and	r3,r3,r2
  803e00:	e0bffb17 	ldw	r2,-20(fp)
  803e04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  803e08:	e0bffb17 	ldw	r2,-20(fp)
  803e0c:	10800017 	ldw	r2,0(r2)
  803e10:	10800104 	addi	r2,r2,4
  803e14:	1007883a 	mov	r3,r2
  803e18:	e0bffb17 	ldw	r2,-20(fp)
  803e1c:	10800817 	ldw	r2,32(r2)
  803e20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803e24:	e0bffc17 	ldw	r2,-16(fp)
  803e28:	10800104 	addi	r2,r2,4
  803e2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  803e30:	003f8c06 	br	803c64 <__alt_data_end+0xff803c64>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  803e34:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  803e38:	0001883a 	nop
  803e3c:	e037883a 	mov	sp,fp
  803e40:	df000017 	ldw	fp,0(sp)
  803e44:	dec00104 	addi	sp,sp,4
  803e48:	f800283a 	ret

00803e4c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  803e4c:	defff804 	addi	sp,sp,-32
  803e50:	df000715 	stw	fp,28(sp)
  803e54:	df000704 	addi	fp,sp,28
  803e58:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  803e5c:	e0bffb17 	ldw	r2,-20(fp)
  803e60:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  803e64:	e0bff917 	ldw	r2,-28(fp)
  803e68:	10800017 	ldw	r2,0(r2)
  803e6c:	10800104 	addi	r2,r2,4
  803e70:	10800037 	ldwio	r2,0(r2)
  803e74:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  803e78:	e0bffa17 	ldw	r2,-24(fp)
  803e7c:	1081000c 	andi	r2,r2,1024
  803e80:	10000b26 	beq	r2,zero,803eb0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  803e84:	e0bff917 	ldw	r2,-28(fp)
  803e88:	10800017 	ldw	r2,0(r2)
  803e8c:	10800104 	addi	r2,r2,4
  803e90:	1007883a 	mov	r3,r2
  803e94:	e0bff917 	ldw	r2,-28(fp)
  803e98:	10800817 	ldw	r2,32(r2)
  803e9c:	10810014 	ori	r2,r2,1024
  803ea0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  803ea4:	e0bff917 	ldw	r2,-28(fp)
  803ea8:	10000915 	stw	zero,36(r2)
  803eac:	00000a06 	br	803ed8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  803eb0:	e0bff917 	ldw	r2,-28(fp)
  803eb4:	10c00917 	ldw	r3,36(r2)
  803eb8:	00a00034 	movhi	r2,32768
  803ebc:	10bfff04 	addi	r2,r2,-4
  803ec0:	10c00536 	bltu	r2,r3,803ed8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  803ec4:	e0bff917 	ldw	r2,-28(fp)
  803ec8:	10800917 	ldw	r2,36(r2)
  803ecc:	10c00044 	addi	r3,r2,1
  803ed0:	e0bff917 	ldw	r2,-28(fp)
  803ed4:	10c00915 	stw	r3,36(r2)
  803ed8:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  803edc:	e037883a 	mov	sp,fp
  803ee0:	df000017 	ldw	fp,0(sp)
  803ee4:	dec00104 	addi	sp,sp,4
  803ee8:	f800283a 	ret

00803eec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  803eec:	defffd04 	addi	sp,sp,-12
  803ef0:	df000215 	stw	fp,8(sp)
  803ef4:	df000204 	addi	fp,sp,8
  803ef8:	e13ffe15 	stw	r4,-8(fp)
  803efc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  803f00:	00000506 	br	803f18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  803f04:	e0bfff17 	ldw	r2,-4(fp)
  803f08:	1090000c 	andi	r2,r2,16384
  803f0c:	10000226 	beq	r2,zero,803f18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  803f10:	00bffd44 	movi	r2,-11
  803f14:	00000b06 	br	803f44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  803f18:	e0bffe17 	ldw	r2,-8(fp)
  803f1c:	10c00d17 	ldw	r3,52(r2)
  803f20:	e0bffe17 	ldw	r2,-8(fp)
  803f24:	10800c17 	ldw	r2,48(r2)
  803f28:	18800526 	beq	r3,r2,803f40 <altera_avalon_jtag_uart_close+0x54>
  803f2c:	e0bffe17 	ldw	r2,-8(fp)
  803f30:	10c00917 	ldw	r3,36(r2)
  803f34:	e0bffe17 	ldw	r2,-8(fp)
  803f38:	10800117 	ldw	r2,4(r2)
  803f3c:	18bff136 	bltu	r3,r2,803f04 <__alt_data_end+0xff803f04>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  803f40:	0005883a 	mov	r2,zero
}
  803f44:	e037883a 	mov	sp,fp
  803f48:	df000017 	ldw	fp,0(sp)
  803f4c:	dec00104 	addi	sp,sp,4
  803f50:	f800283a 	ret

00803f54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  803f54:	defffa04 	addi	sp,sp,-24
  803f58:	df000515 	stw	fp,20(sp)
  803f5c:	df000504 	addi	fp,sp,20
  803f60:	e13ffd15 	stw	r4,-12(fp)
  803f64:	e17ffe15 	stw	r5,-8(fp)
  803f68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  803f6c:	00bff9c4 	movi	r2,-25
  803f70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  803f74:	e0bffe17 	ldw	r2,-8(fp)
  803f78:	10da8060 	cmpeqi	r3,r2,27137
  803f7c:	1800031e 	bne	r3,zero,803f8c <altera_avalon_jtag_uart_ioctl+0x38>
  803f80:	109a80a0 	cmpeqi	r2,r2,27138
  803f84:	1000181e 	bne	r2,zero,803fe8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  803f88:	00002906 	br	804030 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  803f8c:	e0bffd17 	ldw	r2,-12(fp)
  803f90:	10c00117 	ldw	r3,4(r2)
  803f94:	00a00034 	movhi	r2,32768
  803f98:	10bfffc4 	addi	r2,r2,-1
  803f9c:	18802126 	beq	r3,r2,804024 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  803fa0:	e0bfff17 	ldw	r2,-4(fp)
  803fa4:	10800017 	ldw	r2,0(r2)
  803fa8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  803fac:	e0bffc17 	ldw	r2,-16(fp)
  803fb0:	10800090 	cmplti	r2,r2,2
  803fb4:	1000061e 	bne	r2,zero,803fd0 <altera_avalon_jtag_uart_ioctl+0x7c>
  803fb8:	e0fffc17 	ldw	r3,-16(fp)
  803fbc:	00a00034 	movhi	r2,32768
  803fc0:	10bfffc4 	addi	r2,r2,-1
  803fc4:	18800226 	beq	r3,r2,803fd0 <altera_avalon_jtag_uart_ioctl+0x7c>
  803fc8:	e0bffc17 	ldw	r2,-16(fp)
  803fcc:	00000206 	br	803fd8 <altera_avalon_jtag_uart_ioctl+0x84>
  803fd0:	00a00034 	movhi	r2,32768
  803fd4:	10bfff84 	addi	r2,r2,-2
  803fd8:	e0fffd17 	ldw	r3,-12(fp)
  803fdc:	18800115 	stw	r2,4(r3)
      rc = 0;
  803fe0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  803fe4:	00000f06 	br	804024 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  803fe8:	e0bffd17 	ldw	r2,-12(fp)
  803fec:	10c00117 	ldw	r3,4(r2)
  803ff0:	00a00034 	movhi	r2,32768
  803ff4:	10bfffc4 	addi	r2,r2,-1
  803ff8:	18800c26 	beq	r3,r2,80402c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  803ffc:	e0bffd17 	ldw	r2,-12(fp)
  804000:	10c00917 	ldw	r3,36(r2)
  804004:	e0bffd17 	ldw	r2,-12(fp)
  804008:	10800117 	ldw	r2,4(r2)
  80400c:	1885803a 	cmpltu	r2,r3,r2
  804010:	10c03fcc 	andi	r3,r2,255
  804014:	e0bfff17 	ldw	r2,-4(fp)
  804018:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80401c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  804020:	00000206 	br	80402c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  804024:	0001883a 	nop
  804028:	00000106 	br	804030 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80402c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  804030:	e0bffb17 	ldw	r2,-20(fp)
}
  804034:	e037883a 	mov	sp,fp
  804038:	df000017 	ldw	fp,0(sp)
  80403c:	dec00104 	addi	sp,sp,4
  804040:	f800283a 	ret

00804044 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  804044:	defff304 	addi	sp,sp,-52
  804048:	dfc00c15 	stw	ra,48(sp)
  80404c:	df000b15 	stw	fp,44(sp)
  804050:	df000b04 	addi	fp,sp,44
  804054:	e13ffc15 	stw	r4,-16(fp)
  804058:	e17ffd15 	stw	r5,-12(fp)
  80405c:	e1bffe15 	stw	r6,-8(fp)
  804060:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  804064:	e0bffd17 	ldw	r2,-12(fp)
  804068:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80406c:	00004706 	br	80418c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  804070:	e0bffc17 	ldw	r2,-16(fp)
  804074:	10800a17 	ldw	r2,40(r2)
  804078:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80407c:	e0bffc17 	ldw	r2,-16(fp)
  804080:	10800b17 	ldw	r2,44(r2)
  804084:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  804088:	e0fff717 	ldw	r3,-36(fp)
  80408c:	e0bff817 	ldw	r2,-32(fp)
  804090:	18800536 	bltu	r3,r2,8040a8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  804094:	e0fff717 	ldw	r3,-36(fp)
  804098:	e0bff817 	ldw	r2,-32(fp)
  80409c:	1885c83a 	sub	r2,r3,r2
  8040a0:	e0bff615 	stw	r2,-40(fp)
  8040a4:	00000406 	br	8040b8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8040a8:	00c20004 	movi	r3,2048
  8040ac:	e0bff817 	ldw	r2,-32(fp)
  8040b0:	1885c83a 	sub	r2,r3,r2
  8040b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8040b8:	e0bff617 	ldw	r2,-40(fp)
  8040bc:	10001e26 	beq	r2,zero,804138 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8040c0:	e0fffe17 	ldw	r3,-8(fp)
  8040c4:	e0bff617 	ldw	r2,-40(fp)
  8040c8:	1880022e 	bgeu	r3,r2,8040d4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8040cc:	e0bffe17 	ldw	r2,-8(fp)
  8040d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8040d4:	e0bffc17 	ldw	r2,-16(fp)
  8040d8:	10c00e04 	addi	r3,r2,56
  8040dc:	e0bff817 	ldw	r2,-32(fp)
  8040e0:	1885883a 	add	r2,r3,r2
  8040e4:	e1bff617 	ldw	r6,-40(fp)
  8040e8:	100b883a 	mov	r5,r2
  8040ec:	e13ff517 	ldw	r4,-44(fp)
  8040f0:	08016800 	call	801680 <memcpy>
      ptr   += n;
  8040f4:	e0fff517 	ldw	r3,-44(fp)
  8040f8:	e0bff617 	ldw	r2,-40(fp)
  8040fc:	1885883a 	add	r2,r3,r2
  804100:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  804104:	e0fffe17 	ldw	r3,-8(fp)
  804108:	e0bff617 	ldw	r2,-40(fp)
  80410c:	1885c83a 	sub	r2,r3,r2
  804110:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804114:	e0fff817 	ldw	r3,-32(fp)
  804118:	e0bff617 	ldw	r2,-40(fp)
  80411c:	1885883a 	add	r2,r3,r2
  804120:	10c1ffcc 	andi	r3,r2,2047
  804124:	e0bffc17 	ldw	r2,-16(fp)
  804128:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80412c:	e0bffe17 	ldw	r2,-8(fp)
  804130:	00bfcf16 	blt	zero,r2,804070 <__alt_data_end+0xff804070>
  804134:	00000106 	br	80413c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  804138:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80413c:	e0fff517 	ldw	r3,-44(fp)
  804140:	e0bffd17 	ldw	r2,-12(fp)
  804144:	1880141e 	bne	r3,r2,804198 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  804148:	e0bfff17 	ldw	r2,-4(fp)
  80414c:	1090000c 	andi	r2,r2,16384
  804150:	1000131e 	bne	r2,zero,8041a0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  804154:	0001883a 	nop
  804158:	e0bffc17 	ldw	r2,-16(fp)
  80415c:	10c00a17 	ldw	r3,40(r2)
  804160:	e0bff717 	ldw	r2,-36(fp)
  804164:	1880051e 	bne	r3,r2,80417c <altera_avalon_jtag_uart_read+0x138>
  804168:	e0bffc17 	ldw	r2,-16(fp)
  80416c:	10c00917 	ldw	r3,36(r2)
  804170:	e0bffc17 	ldw	r2,-16(fp)
  804174:	10800117 	ldw	r2,4(r2)
  804178:	18bff736 	bltu	r3,r2,804158 <__alt_data_end+0xff804158>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80417c:	e0bffc17 	ldw	r2,-16(fp)
  804180:	10c00a17 	ldw	r3,40(r2)
  804184:	e0bff717 	ldw	r2,-36(fp)
  804188:	18800726 	beq	r3,r2,8041a8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80418c:	e0bffe17 	ldw	r2,-8(fp)
  804190:	00bfb716 	blt	zero,r2,804070 <__alt_data_end+0xff804070>
  804194:	00000506 	br	8041ac <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  804198:	0001883a 	nop
  80419c:	00000306 	br	8041ac <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8041a0:	0001883a 	nop
  8041a4:	00000106 	br	8041ac <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8041a8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8041ac:	e0fff517 	ldw	r3,-44(fp)
  8041b0:	e0bffd17 	ldw	r2,-12(fp)
  8041b4:	18801826 	beq	r3,r2,804218 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8041b8:	0005303a 	rdctl	r2,status
  8041bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8041c0:	e0fffb17 	ldw	r3,-20(fp)
  8041c4:	00bfff84 	movi	r2,-2
  8041c8:	1884703a 	and	r2,r3,r2
  8041cc:	1001703a 	wrctl	status,r2
  
  return context;
  8041d0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8041d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8041d8:	e0bffc17 	ldw	r2,-16(fp)
  8041dc:	10800817 	ldw	r2,32(r2)
  8041e0:	10c00054 	ori	r3,r2,1
  8041e4:	e0bffc17 	ldw	r2,-16(fp)
  8041e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8041ec:	e0bffc17 	ldw	r2,-16(fp)
  8041f0:	10800017 	ldw	r2,0(r2)
  8041f4:	10800104 	addi	r2,r2,4
  8041f8:	1007883a 	mov	r3,r2
  8041fc:	e0bffc17 	ldw	r2,-16(fp)
  804200:	10800817 	ldw	r2,32(r2)
  804204:	18800035 	stwio	r2,0(r3)
  804208:	e0bffa17 	ldw	r2,-24(fp)
  80420c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804210:	e0bff917 	ldw	r2,-28(fp)
  804214:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  804218:	e0fff517 	ldw	r3,-44(fp)
  80421c:	e0bffd17 	ldw	r2,-12(fp)
  804220:	18800426 	beq	r3,r2,804234 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  804224:	e0fff517 	ldw	r3,-44(fp)
  804228:	e0bffd17 	ldw	r2,-12(fp)
  80422c:	1885c83a 	sub	r2,r3,r2
  804230:	00000606 	br	80424c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  804234:	e0bfff17 	ldw	r2,-4(fp)
  804238:	1090000c 	andi	r2,r2,16384
  80423c:	10000226 	beq	r2,zero,804248 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  804240:	00bffd44 	movi	r2,-11
  804244:	00000106 	br	80424c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  804248:	00bffec4 	movi	r2,-5
}
  80424c:	e037883a 	mov	sp,fp
  804250:	dfc00117 	ldw	ra,4(sp)
  804254:	df000017 	ldw	fp,0(sp)
  804258:	dec00204 	addi	sp,sp,8
  80425c:	f800283a 	ret

00804260 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  804260:	defff304 	addi	sp,sp,-52
  804264:	dfc00c15 	stw	ra,48(sp)
  804268:	df000b15 	stw	fp,44(sp)
  80426c:	df000b04 	addi	fp,sp,44
  804270:	e13ffc15 	stw	r4,-16(fp)
  804274:	e17ffd15 	stw	r5,-12(fp)
  804278:	e1bffe15 	stw	r6,-8(fp)
  80427c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  804280:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  804284:	e0bffd17 	ldw	r2,-12(fp)
  804288:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80428c:	00003706 	br	80436c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  804290:	e0bffc17 	ldw	r2,-16(fp)
  804294:	10800c17 	ldw	r2,48(r2)
  804298:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80429c:	e0bffc17 	ldw	r2,-16(fp)
  8042a0:	10800d17 	ldw	r2,52(r2)
  8042a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8042a8:	e0fff917 	ldw	r3,-28(fp)
  8042ac:	e0bff517 	ldw	r2,-44(fp)
  8042b0:	1880062e 	bgeu	r3,r2,8042cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8042b4:	e0fff517 	ldw	r3,-44(fp)
  8042b8:	e0bff917 	ldw	r2,-28(fp)
  8042bc:	1885c83a 	sub	r2,r3,r2
  8042c0:	10bfffc4 	addi	r2,r2,-1
  8042c4:	e0bff615 	stw	r2,-40(fp)
  8042c8:	00000b06 	br	8042f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8042cc:	e0bff517 	ldw	r2,-44(fp)
  8042d0:	10000526 	beq	r2,zero,8042e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8042d4:	00c20004 	movi	r3,2048
  8042d8:	e0bff917 	ldw	r2,-28(fp)
  8042dc:	1885c83a 	sub	r2,r3,r2
  8042e0:	e0bff615 	stw	r2,-40(fp)
  8042e4:	00000406 	br	8042f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8042e8:	00c1ffc4 	movi	r3,2047
  8042ec:	e0bff917 	ldw	r2,-28(fp)
  8042f0:	1885c83a 	sub	r2,r3,r2
  8042f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8042f8:	e0bff617 	ldw	r2,-40(fp)
  8042fc:	10001e26 	beq	r2,zero,804378 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  804300:	e0fffe17 	ldw	r3,-8(fp)
  804304:	e0bff617 	ldw	r2,-40(fp)
  804308:	1880022e 	bgeu	r3,r2,804314 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80430c:	e0bffe17 	ldw	r2,-8(fp)
  804310:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  804314:	e0bffc17 	ldw	r2,-16(fp)
  804318:	10c20e04 	addi	r3,r2,2104
  80431c:	e0bff917 	ldw	r2,-28(fp)
  804320:	1885883a 	add	r2,r3,r2
  804324:	e1bff617 	ldw	r6,-40(fp)
  804328:	e17ffd17 	ldw	r5,-12(fp)
  80432c:	1009883a 	mov	r4,r2
  804330:	08016800 	call	801680 <memcpy>
      ptr   += n;
  804334:	e0fffd17 	ldw	r3,-12(fp)
  804338:	e0bff617 	ldw	r2,-40(fp)
  80433c:	1885883a 	add	r2,r3,r2
  804340:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  804344:	e0fffe17 	ldw	r3,-8(fp)
  804348:	e0bff617 	ldw	r2,-40(fp)
  80434c:	1885c83a 	sub	r2,r3,r2
  804350:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804354:	e0fff917 	ldw	r3,-28(fp)
  804358:	e0bff617 	ldw	r2,-40(fp)
  80435c:	1885883a 	add	r2,r3,r2
  804360:	10c1ffcc 	andi	r3,r2,2047
  804364:	e0bffc17 	ldw	r2,-16(fp)
  804368:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80436c:	e0bffe17 	ldw	r2,-8(fp)
  804370:	00bfc716 	blt	zero,r2,804290 <__alt_data_end+0xff804290>
  804374:	00000106 	br	80437c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  804378:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80437c:	0005303a 	rdctl	r2,status
  804380:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804384:	e0fffb17 	ldw	r3,-20(fp)
  804388:	00bfff84 	movi	r2,-2
  80438c:	1884703a 	and	r2,r3,r2
  804390:	1001703a 	wrctl	status,r2
  
  return context;
  804394:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  804398:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80439c:	e0bffc17 	ldw	r2,-16(fp)
  8043a0:	10800817 	ldw	r2,32(r2)
  8043a4:	10c00094 	ori	r3,r2,2
  8043a8:	e0bffc17 	ldw	r2,-16(fp)
  8043ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8043b0:	e0bffc17 	ldw	r2,-16(fp)
  8043b4:	10800017 	ldw	r2,0(r2)
  8043b8:	10800104 	addi	r2,r2,4
  8043bc:	1007883a 	mov	r3,r2
  8043c0:	e0bffc17 	ldw	r2,-16(fp)
  8043c4:	10800817 	ldw	r2,32(r2)
  8043c8:	18800035 	stwio	r2,0(r3)
  8043cc:	e0bffa17 	ldw	r2,-24(fp)
  8043d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8043d4:	e0bff817 	ldw	r2,-32(fp)
  8043d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8043dc:	e0bffe17 	ldw	r2,-8(fp)
  8043e0:	0080100e 	bge	zero,r2,804424 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8043e4:	e0bfff17 	ldw	r2,-4(fp)
  8043e8:	1090000c 	andi	r2,r2,16384
  8043ec:	1000101e 	bne	r2,zero,804430 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8043f0:	0001883a 	nop
  8043f4:	e0bffc17 	ldw	r2,-16(fp)
  8043f8:	10c00d17 	ldw	r3,52(r2)
  8043fc:	e0bff517 	ldw	r2,-44(fp)
  804400:	1880051e 	bne	r3,r2,804418 <altera_avalon_jtag_uart_write+0x1b8>
  804404:	e0bffc17 	ldw	r2,-16(fp)
  804408:	10c00917 	ldw	r3,36(r2)
  80440c:	e0bffc17 	ldw	r2,-16(fp)
  804410:	10800117 	ldw	r2,4(r2)
  804414:	18bff736 	bltu	r3,r2,8043f4 <__alt_data_end+0xff8043f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  804418:	e0bffc17 	ldw	r2,-16(fp)
  80441c:	10800917 	ldw	r2,36(r2)
  804420:	1000051e 	bne	r2,zero,804438 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  804424:	e0bffe17 	ldw	r2,-8(fp)
  804428:	00bfd016 	blt	zero,r2,80436c <__alt_data_end+0xff80436c>
  80442c:	00000306 	br	80443c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  804430:	0001883a 	nop
  804434:	00000106 	br	80443c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  804438:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80443c:	e0fffd17 	ldw	r3,-12(fp)
  804440:	e0bff717 	ldw	r2,-36(fp)
  804444:	18800426 	beq	r3,r2,804458 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  804448:	e0fffd17 	ldw	r3,-12(fp)
  80444c:	e0bff717 	ldw	r2,-36(fp)
  804450:	1885c83a 	sub	r2,r3,r2
  804454:	00000606 	br	804470 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  804458:	e0bfff17 	ldw	r2,-4(fp)
  80445c:	1090000c 	andi	r2,r2,16384
  804460:	10000226 	beq	r2,zero,80446c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  804464:	00bffd44 	movi	r2,-11
  804468:	00000106 	br	804470 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80446c:	00bffec4 	movi	r2,-5
}
  804470:	e037883a 	mov	sp,fp
  804474:	dfc00117 	ldw	ra,4(sp)
  804478:	df000017 	ldw	fp,0(sp)
  80447c:	dec00204 	addi	sp,sp,8
  804480:	f800283a 	ret

00804484 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  804484:	defffa04 	addi	sp,sp,-24
  804488:	dfc00515 	stw	ra,20(sp)
  80448c:	df000415 	stw	fp,16(sp)
  804490:	df000404 	addi	fp,sp,16
  804494:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  804498:	0007883a 	mov	r3,zero
  80449c:	e0bfff17 	ldw	r2,-4(fp)
  8044a0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8044a4:	e0bfff17 	ldw	r2,-4(fp)
  8044a8:	10800104 	addi	r2,r2,4
  8044ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8044b0:	0005303a 	rdctl	r2,status
  8044b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8044b8:	e0fffd17 	ldw	r3,-12(fp)
  8044bc:	00bfff84 	movi	r2,-2
  8044c0:	1884703a 	and	r2,r3,r2
  8044c4:	1001703a 	wrctl	status,r2
  
  return context;
  8044c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8044cc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8044d0:	0804f900 	call	804f90 <alt_tick>
  8044d4:	e0bffc17 	ldw	r2,-16(fp)
  8044d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8044dc:	e0bffe17 	ldw	r2,-8(fp)
  8044e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8044e4:	0001883a 	nop
  8044e8:	e037883a 	mov	sp,fp
  8044ec:	dfc00117 	ldw	ra,4(sp)
  8044f0:	df000017 	ldw	fp,0(sp)
  8044f4:	dec00204 	addi	sp,sp,8
  8044f8:	f800283a 	ret

008044fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8044fc:	defff804 	addi	sp,sp,-32
  804500:	dfc00715 	stw	ra,28(sp)
  804504:	df000615 	stw	fp,24(sp)
  804508:	df000604 	addi	fp,sp,24
  80450c:	e13ffc15 	stw	r4,-16(fp)
  804510:	e17ffd15 	stw	r5,-12(fp)
  804514:	e1bffe15 	stw	r6,-8(fp)
  804518:	e1ffff15 	stw	r7,-4(fp)
  80451c:	e0bfff17 	ldw	r2,-4(fp)
  804520:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  804524:	d0a6b117 	ldw	r2,-25916(gp)
  804528:	1000021e 	bne	r2,zero,804534 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80452c:	e0bffb17 	ldw	r2,-20(fp)
  804530:	d0a6b115 	stw	r2,-25916(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  804534:	e0bffc17 	ldw	r2,-16(fp)
  804538:	10800104 	addi	r2,r2,4
  80453c:	00c001c4 	movi	r3,7
  804540:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  804544:	d8000015 	stw	zero,0(sp)
  804548:	e1fffc17 	ldw	r7,-16(fp)
  80454c:	01802034 	movhi	r6,128
  804550:	31912104 	addi	r6,r6,17540
  804554:	e17ffe17 	ldw	r5,-8(fp)
  804558:	e13ffd17 	ldw	r4,-12(fp)
  80455c:	08048c00 	call	8048c0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  804560:	0001883a 	nop
  804564:	e037883a 	mov	sp,fp
  804568:	dfc00117 	ldw	ra,4(sp)
  80456c:	df000017 	ldw	fp,0(sp)
  804570:	dec00204 	addi	sp,sp,8
  804574:	f800283a 	ret

00804578 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  804578:	defff504 	addi	sp,sp,-44
  80457c:	df000a15 	stw	fp,40(sp)
  804580:	df000a04 	addi	fp,sp,40
  804584:	e13ffc15 	stw	r4,-16(fp)
  804588:	e17ffd15 	stw	r5,-12(fp)
  80458c:	e1bffe15 	stw	r6,-8(fp)
  804590:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  804594:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804598:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
  80459c:	10003c26 	beq	r2,zero,804690 <alt_alarm_start+0x118>
  {
    if (alarm)
  8045a0:	e0bffc17 	ldw	r2,-16(fp)
  8045a4:	10003826 	beq	r2,zero,804688 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  8045a8:	e0bffc17 	ldw	r2,-16(fp)
  8045ac:	e0fffe17 	ldw	r3,-8(fp)
  8045b0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  8045b4:	e0bffc17 	ldw	r2,-16(fp)
  8045b8:	e0ffff17 	ldw	r3,-4(fp)
  8045bc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8045c0:	0005303a 	rdctl	r2,status
  8045c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8045c8:	e0fff917 	ldw	r3,-28(fp)
  8045cc:	00bfff84 	movi	r2,-2
  8045d0:	1884703a 	and	r2,r3,r2
  8045d4:	1001703a 	wrctl	status,r2
  
  return context;
  8045d8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  8045dc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8045e0:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
  8045e4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8045e8:	e0fffd17 	ldw	r3,-12(fp)
  8045ec:	e0bff617 	ldw	r2,-40(fp)
  8045f0:	1885883a 	add	r2,r3,r2
  8045f4:	10c00044 	addi	r3,r2,1
  8045f8:	e0bffc17 	ldw	r2,-16(fp)
  8045fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  804600:	e0bffc17 	ldw	r2,-16(fp)
  804604:	10c00217 	ldw	r3,8(r2)
  804608:	e0bff617 	ldw	r2,-40(fp)
  80460c:	1880042e 	bgeu	r3,r2,804620 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  804610:	e0bffc17 	ldw	r2,-16(fp)
  804614:	00c00044 	movi	r3,1
  804618:	10c00405 	stb	r3,16(r2)
  80461c:	00000206 	br	804628 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  804620:	e0bffc17 	ldw	r2,-16(fp)
  804624:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  804628:	e0bffc17 	ldw	r2,-16(fp)
  80462c:	d0e00c04 	addi	r3,gp,-32720
  804630:	e0fffa15 	stw	r3,-24(fp)
  804634:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804638:	e0bffb17 	ldw	r2,-20(fp)
  80463c:	e0fffa17 	ldw	r3,-24(fp)
  804640:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  804644:	e0bffa17 	ldw	r2,-24(fp)
  804648:	10c00017 	ldw	r3,0(r2)
  80464c:	e0bffb17 	ldw	r2,-20(fp)
  804650:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  804654:	e0bffa17 	ldw	r2,-24(fp)
  804658:	10800017 	ldw	r2,0(r2)
  80465c:	e0fffb17 	ldw	r3,-20(fp)
  804660:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  804664:	e0bffa17 	ldw	r2,-24(fp)
  804668:	e0fffb17 	ldw	r3,-20(fp)
  80466c:	10c00015 	stw	r3,0(r2)
  804670:	e0bff817 	ldw	r2,-32(fp)
  804674:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804678:	e0bff717 	ldw	r2,-36(fp)
  80467c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  804680:	0005883a 	mov	r2,zero
  804684:	00000306 	br	804694 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  804688:	00bffa84 	movi	r2,-22
  80468c:	00000106 	br	804694 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  804690:	00bfde84 	movi	r2,-134
  }
}
  804694:	e037883a 	mov	sp,fp
  804698:	df000017 	ldw	fp,0(sp)
  80469c:	dec00104 	addi	sp,sp,4
  8046a0:	f800283a 	ret

008046a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8046a4:	defffe04 	addi	sp,sp,-8
  8046a8:	df000115 	stw	fp,4(sp)
  8046ac:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8046b0:	e03fff15 	stw	zero,-4(fp)
  8046b4:	00000506 	br	8046cc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8046b8:	e0bfff17 	ldw	r2,-4(fp)
  8046bc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8046c0:	e0bfff17 	ldw	r2,-4(fp)
  8046c4:	10800804 	addi	r2,r2,32
  8046c8:	e0bfff15 	stw	r2,-4(fp)
  8046cc:	e0bfff17 	ldw	r2,-4(fp)
  8046d0:	00ffffd4 	movui	r3,65535
  8046d4:	18bff82e 	bgeu	r3,r2,8046b8 <__alt_data_end+0xff8046b8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8046d8:	0001883a 	nop
  8046dc:	e037883a 	mov	sp,fp
  8046e0:	df000017 	ldw	fp,0(sp)
  8046e4:	dec00104 	addi	sp,sp,4
  8046e8:	f800283a 	ret

008046ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8046ec:	defffe04 	addi	sp,sp,-8
  8046f0:	dfc00115 	stw	ra,4(sp)
  8046f4:	df000015 	stw	fp,0(sp)
  8046f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8046fc:	d0a00917 	ldw	r2,-32732(gp)
  804700:	10000326 	beq	r2,zero,804710 <alt_get_errno+0x24>
  804704:	d0a00917 	ldw	r2,-32732(gp)
  804708:	103ee83a 	callr	r2
  80470c:	00000106 	br	804714 <alt_get_errno+0x28>
  804710:	d0a6ac04 	addi	r2,gp,-25936
}
  804714:	e037883a 	mov	sp,fp
  804718:	dfc00117 	ldw	ra,4(sp)
  80471c:	df000017 	ldw	fp,0(sp)
  804720:	dec00204 	addi	sp,sp,8
  804724:	f800283a 	ret

00804728 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  804728:	defffa04 	addi	sp,sp,-24
  80472c:	dfc00515 	stw	ra,20(sp)
  804730:	df000415 	stw	fp,16(sp)
  804734:	df000404 	addi	fp,sp,16
  804738:	e13ffe15 	stw	r4,-8(fp)
  80473c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  804740:	e0bffe17 	ldw	r2,-8(fp)
  804744:	10000326 	beq	r2,zero,804754 <alt_dev_llist_insert+0x2c>
  804748:	e0bffe17 	ldw	r2,-8(fp)
  80474c:	10800217 	ldw	r2,8(r2)
  804750:	1000061e 	bne	r2,zero,80476c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  804754:	08046ec0 	call	8046ec <alt_get_errno>
  804758:	1007883a 	mov	r3,r2
  80475c:	00800584 	movi	r2,22
  804760:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  804764:	00bffa84 	movi	r2,-22
  804768:	00001306 	br	8047b8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80476c:	e0bffe17 	ldw	r2,-8(fp)
  804770:	e0ffff17 	ldw	r3,-4(fp)
  804774:	e0fffc15 	stw	r3,-16(fp)
  804778:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80477c:	e0bffd17 	ldw	r2,-12(fp)
  804780:	e0fffc17 	ldw	r3,-16(fp)
  804784:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  804788:	e0bffc17 	ldw	r2,-16(fp)
  80478c:	10c00017 	ldw	r3,0(r2)
  804790:	e0bffd17 	ldw	r2,-12(fp)
  804794:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  804798:	e0bffc17 	ldw	r2,-16(fp)
  80479c:	10800017 	ldw	r2,0(r2)
  8047a0:	e0fffd17 	ldw	r3,-12(fp)
  8047a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8047a8:	e0bffc17 	ldw	r2,-16(fp)
  8047ac:	e0fffd17 	ldw	r3,-12(fp)
  8047b0:	10c00015 	stw	r3,0(r2)

  return 0;  
  8047b4:	0005883a 	mov	r2,zero
}
  8047b8:	e037883a 	mov	sp,fp
  8047bc:	dfc00117 	ldw	ra,4(sp)
  8047c0:	df000017 	ldw	fp,0(sp)
  8047c4:	dec00204 	addi	sp,sp,8
  8047c8:	f800283a 	ret

008047cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8047cc:	defffd04 	addi	sp,sp,-12
  8047d0:	dfc00215 	stw	ra,8(sp)
  8047d4:	df000115 	stw	fp,4(sp)
  8047d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8047dc:	00802034 	movhi	r2,128
  8047e0:	1095c604 	addi	r2,r2,22296
  8047e4:	e0bfff15 	stw	r2,-4(fp)
  8047e8:	00000606 	br	804804 <_do_ctors+0x38>
        (*ctor) (); 
  8047ec:	e0bfff17 	ldw	r2,-4(fp)
  8047f0:	10800017 	ldw	r2,0(r2)
  8047f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8047f8:	e0bfff17 	ldw	r2,-4(fp)
  8047fc:	10bfff04 	addi	r2,r2,-4
  804800:	e0bfff15 	stw	r2,-4(fp)
  804804:	e0ffff17 	ldw	r3,-4(fp)
  804808:	00802034 	movhi	r2,128
  80480c:	1095c704 	addi	r2,r2,22300
  804810:	18bff62e 	bgeu	r3,r2,8047ec <__alt_data_end+0xff8047ec>
        (*ctor) (); 
}
  804814:	0001883a 	nop
  804818:	e037883a 	mov	sp,fp
  80481c:	dfc00117 	ldw	ra,4(sp)
  804820:	df000017 	ldw	fp,0(sp)
  804824:	dec00204 	addi	sp,sp,8
  804828:	f800283a 	ret

0080482c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80482c:	defffd04 	addi	sp,sp,-12
  804830:	dfc00215 	stw	ra,8(sp)
  804834:	df000115 	stw	fp,4(sp)
  804838:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80483c:	00802034 	movhi	r2,128
  804840:	1095c604 	addi	r2,r2,22296
  804844:	e0bfff15 	stw	r2,-4(fp)
  804848:	00000606 	br	804864 <_do_dtors+0x38>
        (*dtor) (); 
  80484c:	e0bfff17 	ldw	r2,-4(fp)
  804850:	10800017 	ldw	r2,0(r2)
  804854:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  804858:	e0bfff17 	ldw	r2,-4(fp)
  80485c:	10bfff04 	addi	r2,r2,-4
  804860:	e0bfff15 	stw	r2,-4(fp)
  804864:	e0ffff17 	ldw	r3,-4(fp)
  804868:	00802034 	movhi	r2,128
  80486c:	1095c704 	addi	r2,r2,22300
  804870:	18bff62e 	bgeu	r3,r2,80484c <__alt_data_end+0xff80484c>
        (*dtor) (); 
}
  804874:	0001883a 	nop
  804878:	e037883a 	mov	sp,fp
  80487c:	dfc00117 	ldw	ra,4(sp)
  804880:	df000017 	ldw	fp,0(sp)
  804884:	dec00204 	addi	sp,sp,8
  804888:	f800283a 	ret

0080488c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80488c:	defffe04 	addi	sp,sp,-8
  804890:	dfc00115 	stw	ra,4(sp)
  804894:	df000015 	stw	fp,0(sp)
  804898:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80489c:	01420004 	movi	r5,2048
  8048a0:	0009883a 	mov	r4,zero
  8048a4:	08052f80 	call	8052f8 <alt_icache_flush>
#endif
}
  8048a8:	0001883a 	nop
  8048ac:	e037883a 	mov	sp,fp
  8048b0:	dfc00117 	ldw	ra,4(sp)
  8048b4:	df000017 	ldw	fp,0(sp)
  8048b8:	dec00204 	addi	sp,sp,8
  8048bc:	f800283a 	ret

008048c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8048c0:	defff904 	addi	sp,sp,-28
  8048c4:	dfc00615 	stw	ra,24(sp)
  8048c8:	df000515 	stw	fp,20(sp)
  8048cc:	df000504 	addi	fp,sp,20
  8048d0:	e13ffc15 	stw	r4,-16(fp)
  8048d4:	e17ffd15 	stw	r5,-12(fp)
  8048d8:	e1bffe15 	stw	r6,-8(fp)
  8048dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8048e0:	e0800217 	ldw	r2,8(fp)
  8048e4:	d8800015 	stw	r2,0(sp)
  8048e8:	e1ffff17 	ldw	r7,-4(fp)
  8048ec:	e1bffe17 	ldw	r6,-8(fp)
  8048f0:	e17ffd17 	ldw	r5,-12(fp)
  8048f4:	e13ffc17 	ldw	r4,-16(fp)
  8048f8:	0804a700 	call	804a70 <alt_iic_isr_register>
}  
  8048fc:	e037883a 	mov	sp,fp
  804900:	dfc00117 	ldw	ra,4(sp)
  804904:	df000017 	ldw	fp,0(sp)
  804908:	dec00204 	addi	sp,sp,8
  80490c:	f800283a 	ret

00804910 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  804910:	defff904 	addi	sp,sp,-28
  804914:	df000615 	stw	fp,24(sp)
  804918:	df000604 	addi	fp,sp,24
  80491c:	e13ffe15 	stw	r4,-8(fp)
  804920:	e17fff15 	stw	r5,-4(fp)
  804924:	e0bfff17 	ldw	r2,-4(fp)
  804928:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80492c:	0005303a 	rdctl	r2,status
  804930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804934:	e0fffb17 	ldw	r3,-20(fp)
  804938:	00bfff84 	movi	r2,-2
  80493c:	1884703a 	and	r2,r3,r2
  804940:	1001703a 	wrctl	status,r2
  
  return context;
  804944:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  804948:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80494c:	00c00044 	movi	r3,1
  804950:	e0bffa17 	ldw	r2,-24(fp)
  804954:	1884983a 	sll	r2,r3,r2
  804958:	1007883a 	mov	r3,r2
  80495c:	d0a6b017 	ldw	r2,-25920(gp)
  804960:	1884b03a 	or	r2,r3,r2
  804964:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  804968:	d0a6b017 	ldw	r2,-25920(gp)
  80496c:	100170fa 	wrctl	ienable,r2
  804970:	e0bffc17 	ldw	r2,-16(fp)
  804974:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804978:	e0bffd17 	ldw	r2,-12(fp)
  80497c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  804980:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  804984:	0001883a 	nop
}
  804988:	e037883a 	mov	sp,fp
  80498c:	df000017 	ldw	fp,0(sp)
  804990:	dec00104 	addi	sp,sp,4
  804994:	f800283a 	ret

00804998 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  804998:	defff904 	addi	sp,sp,-28
  80499c:	df000615 	stw	fp,24(sp)
  8049a0:	df000604 	addi	fp,sp,24
  8049a4:	e13ffe15 	stw	r4,-8(fp)
  8049a8:	e17fff15 	stw	r5,-4(fp)
  8049ac:	e0bfff17 	ldw	r2,-4(fp)
  8049b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8049b4:	0005303a 	rdctl	r2,status
  8049b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8049bc:	e0fffb17 	ldw	r3,-20(fp)
  8049c0:	00bfff84 	movi	r2,-2
  8049c4:	1884703a 	and	r2,r3,r2
  8049c8:	1001703a 	wrctl	status,r2
  
  return context;
  8049cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8049d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  8049d4:	00c00044 	movi	r3,1
  8049d8:	e0bffa17 	ldw	r2,-24(fp)
  8049dc:	1884983a 	sll	r2,r3,r2
  8049e0:	0084303a 	nor	r2,zero,r2
  8049e4:	1007883a 	mov	r3,r2
  8049e8:	d0a6b017 	ldw	r2,-25920(gp)
  8049ec:	1884703a 	and	r2,r3,r2
  8049f0:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8049f4:	d0a6b017 	ldw	r2,-25920(gp)
  8049f8:	100170fa 	wrctl	ienable,r2
  8049fc:	e0bffc17 	ldw	r2,-16(fp)
  804a00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804a04:	e0bffd17 	ldw	r2,-12(fp)
  804a08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  804a0c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  804a10:	0001883a 	nop
}
  804a14:	e037883a 	mov	sp,fp
  804a18:	df000017 	ldw	fp,0(sp)
  804a1c:	dec00104 	addi	sp,sp,4
  804a20:	f800283a 	ret

00804a24 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  804a24:	defffc04 	addi	sp,sp,-16
  804a28:	df000315 	stw	fp,12(sp)
  804a2c:	df000304 	addi	fp,sp,12
  804a30:	e13ffe15 	stw	r4,-8(fp)
  804a34:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  804a38:	000530fa 	rdctl	r2,ienable
  804a3c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  804a40:	00c00044 	movi	r3,1
  804a44:	e0bfff17 	ldw	r2,-4(fp)
  804a48:	1884983a 	sll	r2,r3,r2
  804a4c:	1007883a 	mov	r3,r2
  804a50:	e0bffd17 	ldw	r2,-12(fp)
  804a54:	1884703a 	and	r2,r3,r2
  804a58:	1004c03a 	cmpne	r2,r2,zero
  804a5c:	10803fcc 	andi	r2,r2,255
}
  804a60:	e037883a 	mov	sp,fp
  804a64:	df000017 	ldw	fp,0(sp)
  804a68:	dec00104 	addi	sp,sp,4
  804a6c:	f800283a 	ret

00804a70 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  804a70:	defff504 	addi	sp,sp,-44
  804a74:	dfc00a15 	stw	ra,40(sp)
  804a78:	df000915 	stw	fp,36(sp)
  804a7c:	df000904 	addi	fp,sp,36
  804a80:	e13ffc15 	stw	r4,-16(fp)
  804a84:	e17ffd15 	stw	r5,-12(fp)
  804a88:	e1bffe15 	stw	r6,-8(fp)
  804a8c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  804a90:	00bffa84 	movi	r2,-22
  804a94:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  804a98:	e0bffd17 	ldw	r2,-12(fp)
  804a9c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  804aa0:	e0bff817 	ldw	r2,-32(fp)
  804aa4:	10800808 	cmpgei	r2,r2,32
  804aa8:	1000271e 	bne	r2,zero,804b48 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804aac:	0005303a 	rdctl	r2,status
  804ab0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804ab4:	e0fffb17 	ldw	r3,-20(fp)
  804ab8:	00bfff84 	movi	r2,-2
  804abc:	1884703a 	and	r2,r3,r2
  804ac0:	1001703a 	wrctl	status,r2
  
  return context;
  804ac4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  804ac8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  804acc:	00802074 	movhi	r2,129
  804ad0:	10a32304 	addi	r2,r2,-29556
  804ad4:	e0fff817 	ldw	r3,-32(fp)
  804ad8:	180690fa 	slli	r3,r3,3
  804adc:	10c5883a 	add	r2,r2,r3
  804ae0:	e0fffe17 	ldw	r3,-8(fp)
  804ae4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  804ae8:	00802074 	movhi	r2,129
  804aec:	10a32304 	addi	r2,r2,-29556
  804af0:	e0fff817 	ldw	r3,-32(fp)
  804af4:	180690fa 	slli	r3,r3,3
  804af8:	10c5883a 	add	r2,r2,r3
  804afc:	10800104 	addi	r2,r2,4
  804b00:	e0ffff17 	ldw	r3,-4(fp)
  804b04:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  804b08:	e0bffe17 	ldw	r2,-8(fp)
  804b0c:	10000526 	beq	r2,zero,804b24 <alt_iic_isr_register+0xb4>
  804b10:	e0bff817 	ldw	r2,-32(fp)
  804b14:	100b883a 	mov	r5,r2
  804b18:	e13ffc17 	ldw	r4,-16(fp)
  804b1c:	08049100 	call	804910 <alt_ic_irq_enable>
  804b20:	00000406 	br	804b34 <alt_iic_isr_register+0xc4>
  804b24:	e0bff817 	ldw	r2,-32(fp)
  804b28:	100b883a 	mov	r5,r2
  804b2c:	e13ffc17 	ldw	r4,-16(fp)
  804b30:	08049980 	call	804998 <alt_ic_irq_disable>
  804b34:	e0bff715 	stw	r2,-36(fp)
  804b38:	e0bffa17 	ldw	r2,-24(fp)
  804b3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804b40:	e0bff917 	ldw	r2,-28(fp)
  804b44:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  804b48:	e0bff717 	ldw	r2,-36(fp)
}
  804b4c:	e037883a 	mov	sp,fp
  804b50:	dfc00117 	ldw	ra,4(sp)
  804b54:	df000017 	ldw	fp,0(sp)
  804b58:	dec00204 	addi	sp,sp,8
  804b5c:	f800283a 	ret

00804b60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  804b60:	defff904 	addi	sp,sp,-28
  804b64:	dfc00615 	stw	ra,24(sp)
  804b68:	df000515 	stw	fp,20(sp)
  804b6c:	df000504 	addi	fp,sp,20
  804b70:	e13ffc15 	stw	r4,-16(fp)
  804b74:	e17ffd15 	stw	r5,-12(fp)
  804b78:	e1bffe15 	stw	r6,-8(fp)
  804b7c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  804b80:	e1bfff17 	ldw	r6,-4(fp)
  804b84:	e17ffe17 	ldw	r5,-8(fp)
  804b88:	e13ffd17 	ldw	r4,-12(fp)
  804b8c:	0804da00 	call	804da0 <open>
  804b90:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  804b94:	e0bffb17 	ldw	r2,-20(fp)
  804b98:	10001c16 	blt	r2,zero,804c0c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  804b9c:	00802034 	movhi	r2,128
  804ba0:	1097ee04 	addi	r2,r2,24504
  804ba4:	e0fffb17 	ldw	r3,-20(fp)
  804ba8:	18c00324 	muli	r3,r3,12
  804bac:	10c5883a 	add	r2,r2,r3
  804bb0:	10c00017 	ldw	r3,0(r2)
  804bb4:	e0bffc17 	ldw	r2,-16(fp)
  804bb8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  804bbc:	00802034 	movhi	r2,128
  804bc0:	1097ee04 	addi	r2,r2,24504
  804bc4:	e0fffb17 	ldw	r3,-20(fp)
  804bc8:	18c00324 	muli	r3,r3,12
  804bcc:	10c5883a 	add	r2,r2,r3
  804bd0:	10800104 	addi	r2,r2,4
  804bd4:	10c00017 	ldw	r3,0(r2)
  804bd8:	e0bffc17 	ldw	r2,-16(fp)
  804bdc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  804be0:	00802034 	movhi	r2,128
  804be4:	1097ee04 	addi	r2,r2,24504
  804be8:	e0fffb17 	ldw	r3,-20(fp)
  804bec:	18c00324 	muli	r3,r3,12
  804bf0:	10c5883a 	add	r2,r2,r3
  804bf4:	10800204 	addi	r2,r2,8
  804bf8:	10c00017 	ldw	r3,0(r2)
  804bfc:	e0bffc17 	ldw	r2,-16(fp)
  804c00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  804c04:	e13ffb17 	ldw	r4,-20(fp)
  804c08:	08037040 	call	803704 <alt_release_fd>
  }
} 
  804c0c:	0001883a 	nop
  804c10:	e037883a 	mov	sp,fp
  804c14:	dfc00117 	ldw	ra,4(sp)
  804c18:	df000017 	ldw	fp,0(sp)
  804c1c:	dec00204 	addi	sp,sp,8
  804c20:	f800283a 	ret

00804c24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  804c24:	defffb04 	addi	sp,sp,-20
  804c28:	dfc00415 	stw	ra,16(sp)
  804c2c:	df000315 	stw	fp,12(sp)
  804c30:	df000304 	addi	fp,sp,12
  804c34:	e13ffd15 	stw	r4,-12(fp)
  804c38:	e17ffe15 	stw	r5,-8(fp)
  804c3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  804c40:	01c07fc4 	movi	r7,511
  804c44:	01800044 	movi	r6,1
  804c48:	e17ffd17 	ldw	r5,-12(fp)
  804c4c:	01002034 	movhi	r4,128
  804c50:	2117f104 	addi	r4,r4,24516
  804c54:	0804b600 	call	804b60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  804c58:	01c07fc4 	movi	r7,511
  804c5c:	000d883a 	mov	r6,zero
  804c60:	e17ffe17 	ldw	r5,-8(fp)
  804c64:	01002034 	movhi	r4,128
  804c68:	2117ee04 	addi	r4,r4,24504
  804c6c:	0804b600 	call	804b60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  804c70:	01c07fc4 	movi	r7,511
  804c74:	01800044 	movi	r6,1
  804c78:	e17fff17 	ldw	r5,-4(fp)
  804c7c:	01002034 	movhi	r4,128
  804c80:	2117f404 	addi	r4,r4,24528
  804c84:	0804b600 	call	804b60 <alt_open_fd>
}  
  804c88:	0001883a 	nop
  804c8c:	e037883a 	mov	sp,fp
  804c90:	dfc00117 	ldw	ra,4(sp)
  804c94:	df000017 	ldw	fp,0(sp)
  804c98:	dec00204 	addi	sp,sp,8
  804c9c:	f800283a 	ret

00804ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804ca0:	defffe04 	addi	sp,sp,-8
  804ca4:	dfc00115 	stw	ra,4(sp)
  804ca8:	df000015 	stw	fp,0(sp)
  804cac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804cb0:	d0a00917 	ldw	r2,-32732(gp)
  804cb4:	10000326 	beq	r2,zero,804cc4 <alt_get_errno+0x24>
  804cb8:	d0a00917 	ldw	r2,-32732(gp)
  804cbc:	103ee83a 	callr	r2
  804cc0:	00000106 	br	804cc8 <alt_get_errno+0x28>
  804cc4:	d0a6ac04 	addi	r2,gp,-25936
}
  804cc8:	e037883a 	mov	sp,fp
  804ccc:	dfc00117 	ldw	ra,4(sp)
  804cd0:	df000017 	ldw	fp,0(sp)
  804cd4:	dec00204 	addi	sp,sp,8
  804cd8:	f800283a 	ret

00804cdc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  804cdc:	defffd04 	addi	sp,sp,-12
  804ce0:	df000215 	stw	fp,8(sp)
  804ce4:	df000204 	addi	fp,sp,8
  804ce8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  804cec:	e0bfff17 	ldw	r2,-4(fp)
  804cf0:	10800217 	ldw	r2,8(r2)
  804cf4:	10d00034 	orhi	r3,r2,16384
  804cf8:	e0bfff17 	ldw	r2,-4(fp)
  804cfc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804d00:	e03ffe15 	stw	zero,-8(fp)
  804d04:	00001d06 	br	804d7c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804d08:	00802034 	movhi	r2,128
  804d0c:	1097ee04 	addi	r2,r2,24504
  804d10:	e0fffe17 	ldw	r3,-8(fp)
  804d14:	18c00324 	muli	r3,r3,12
  804d18:	10c5883a 	add	r2,r2,r3
  804d1c:	10c00017 	ldw	r3,0(r2)
  804d20:	e0bfff17 	ldw	r2,-4(fp)
  804d24:	10800017 	ldw	r2,0(r2)
  804d28:	1880111e 	bne	r3,r2,804d70 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  804d2c:	00802034 	movhi	r2,128
  804d30:	1097ee04 	addi	r2,r2,24504
  804d34:	e0fffe17 	ldw	r3,-8(fp)
  804d38:	18c00324 	muli	r3,r3,12
  804d3c:	10c5883a 	add	r2,r2,r3
  804d40:	10800204 	addi	r2,r2,8
  804d44:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804d48:	1000090e 	bge	r2,zero,804d70 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  804d4c:	e0bffe17 	ldw	r2,-8(fp)
  804d50:	10c00324 	muli	r3,r2,12
  804d54:	00802034 	movhi	r2,128
  804d58:	1097ee04 	addi	r2,r2,24504
  804d5c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  804d60:	e0bfff17 	ldw	r2,-4(fp)
  804d64:	18800226 	beq	r3,r2,804d70 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  804d68:	00bffcc4 	movi	r2,-13
  804d6c:	00000806 	br	804d90 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804d70:	e0bffe17 	ldw	r2,-8(fp)
  804d74:	10800044 	addi	r2,r2,1
  804d78:	e0bffe15 	stw	r2,-8(fp)
  804d7c:	d0a00817 	ldw	r2,-32736(gp)
  804d80:	1007883a 	mov	r3,r2
  804d84:	e0bffe17 	ldw	r2,-8(fp)
  804d88:	18bfdf2e 	bgeu	r3,r2,804d08 <__alt_data_end+0xff804d08>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  804d8c:	0005883a 	mov	r2,zero
}
  804d90:	e037883a 	mov	sp,fp
  804d94:	df000017 	ldw	fp,0(sp)
  804d98:	dec00104 	addi	sp,sp,4
  804d9c:	f800283a 	ret

00804da0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  804da0:	defff604 	addi	sp,sp,-40
  804da4:	dfc00915 	stw	ra,36(sp)
  804da8:	df000815 	stw	fp,32(sp)
  804dac:	df000804 	addi	fp,sp,32
  804db0:	e13ffd15 	stw	r4,-12(fp)
  804db4:	e17ffe15 	stw	r5,-8(fp)
  804db8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  804dbc:	00bfffc4 	movi	r2,-1
  804dc0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  804dc4:	00bffb44 	movi	r2,-19
  804dc8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  804dcc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  804dd0:	d1600604 	addi	r5,gp,-32744
  804dd4:	e13ffd17 	ldw	r4,-12(fp)
  804dd8:	08050bc0 	call	8050bc <alt_find_dev>
  804ddc:	e0bff815 	stw	r2,-32(fp)
  804de0:	e0bff817 	ldw	r2,-32(fp)
  804de4:	1000051e 	bne	r2,zero,804dfc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  804de8:	e13ffd17 	ldw	r4,-12(fp)
  804dec:	080514c0 	call	80514c <alt_find_file>
  804df0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  804df4:	00800044 	movi	r2,1
  804df8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  804dfc:	e0bff817 	ldw	r2,-32(fp)
  804e00:	10002926 	beq	r2,zero,804ea8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  804e04:	e13ff817 	ldw	r4,-32(fp)
  804e08:	08052540 	call	805254 <alt_get_fd>
  804e0c:	e0bff915 	stw	r2,-28(fp)
  804e10:	e0bff917 	ldw	r2,-28(fp)
  804e14:	1000030e 	bge	r2,zero,804e24 <open+0x84>
    {
      status = index;
  804e18:	e0bff917 	ldw	r2,-28(fp)
  804e1c:	e0bffa15 	stw	r2,-24(fp)
  804e20:	00002306 	br	804eb0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  804e24:	e0bff917 	ldw	r2,-28(fp)
  804e28:	10c00324 	muli	r3,r2,12
  804e2c:	00802034 	movhi	r2,128
  804e30:	1097ee04 	addi	r2,r2,24504
  804e34:	1885883a 	add	r2,r3,r2
  804e38:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  804e3c:	e0fffe17 	ldw	r3,-8(fp)
  804e40:	00900034 	movhi	r2,16384
  804e44:	10bfffc4 	addi	r2,r2,-1
  804e48:	1886703a 	and	r3,r3,r2
  804e4c:	e0bffc17 	ldw	r2,-16(fp)
  804e50:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  804e54:	e0bffb17 	ldw	r2,-20(fp)
  804e58:	1000051e 	bne	r2,zero,804e70 <open+0xd0>
  804e5c:	e13ffc17 	ldw	r4,-16(fp)
  804e60:	0804cdc0 	call	804cdc <alt_file_locked>
  804e64:	e0bffa15 	stw	r2,-24(fp)
  804e68:	e0bffa17 	ldw	r2,-24(fp)
  804e6c:	10001016 	blt	r2,zero,804eb0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  804e70:	e0bff817 	ldw	r2,-32(fp)
  804e74:	10800317 	ldw	r2,12(r2)
  804e78:	10000826 	beq	r2,zero,804e9c <open+0xfc>
  804e7c:	e0bff817 	ldw	r2,-32(fp)
  804e80:	10800317 	ldw	r2,12(r2)
  804e84:	e1ffff17 	ldw	r7,-4(fp)
  804e88:	e1bffe17 	ldw	r6,-8(fp)
  804e8c:	e17ffd17 	ldw	r5,-12(fp)
  804e90:	e13ffc17 	ldw	r4,-16(fp)
  804e94:	103ee83a 	callr	r2
  804e98:	00000106 	br	804ea0 <open+0x100>
  804e9c:	0005883a 	mov	r2,zero
  804ea0:	e0bffa15 	stw	r2,-24(fp)
  804ea4:	00000206 	br	804eb0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  804ea8:	00bffb44 	movi	r2,-19
  804eac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  804eb0:	e0bffa17 	ldw	r2,-24(fp)
  804eb4:	1000090e 	bge	r2,zero,804edc <open+0x13c>
  {
    alt_release_fd (index);  
  804eb8:	e13ff917 	ldw	r4,-28(fp)
  804ebc:	08037040 	call	803704 <alt_release_fd>
    ALT_ERRNO = -status;
  804ec0:	0804ca00 	call	804ca0 <alt_get_errno>
  804ec4:	1007883a 	mov	r3,r2
  804ec8:	e0bffa17 	ldw	r2,-24(fp)
  804ecc:	0085c83a 	sub	r2,zero,r2
  804ed0:	18800015 	stw	r2,0(r3)
    return -1;
  804ed4:	00bfffc4 	movi	r2,-1
  804ed8:	00000106 	br	804ee0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  804edc:	e0bff917 	ldw	r2,-28(fp)
}
  804ee0:	e037883a 	mov	sp,fp
  804ee4:	dfc00117 	ldw	ra,4(sp)
  804ee8:	df000017 	ldw	fp,0(sp)
  804eec:	dec00204 	addi	sp,sp,8
  804ef0:	f800283a 	ret

00804ef4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  804ef4:	defffa04 	addi	sp,sp,-24
  804ef8:	df000515 	stw	fp,20(sp)
  804efc:	df000504 	addi	fp,sp,20
  804f00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804f04:	0005303a 	rdctl	r2,status
  804f08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804f0c:	e0fffc17 	ldw	r3,-16(fp)
  804f10:	00bfff84 	movi	r2,-2
  804f14:	1884703a 	and	r2,r3,r2
  804f18:	1001703a 	wrctl	status,r2
  
  return context;
  804f1c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  804f20:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  804f24:	e0bfff17 	ldw	r2,-4(fp)
  804f28:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  804f2c:	e0bffd17 	ldw	r2,-12(fp)
  804f30:	10800017 	ldw	r2,0(r2)
  804f34:	e0fffd17 	ldw	r3,-12(fp)
  804f38:	18c00117 	ldw	r3,4(r3)
  804f3c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  804f40:	e0bffd17 	ldw	r2,-12(fp)
  804f44:	10800117 	ldw	r2,4(r2)
  804f48:	e0fffd17 	ldw	r3,-12(fp)
  804f4c:	18c00017 	ldw	r3,0(r3)
  804f50:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  804f54:	e0bffd17 	ldw	r2,-12(fp)
  804f58:	e0fffd17 	ldw	r3,-12(fp)
  804f5c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  804f60:	e0bffd17 	ldw	r2,-12(fp)
  804f64:	e0fffd17 	ldw	r3,-12(fp)
  804f68:	10c00015 	stw	r3,0(r2)
  804f6c:	e0bffb17 	ldw	r2,-20(fp)
  804f70:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804f74:	e0bffe17 	ldw	r2,-8(fp)
  804f78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  804f7c:	0001883a 	nop
  804f80:	e037883a 	mov	sp,fp
  804f84:	df000017 	ldw	fp,0(sp)
  804f88:	dec00104 	addi	sp,sp,4
  804f8c:	f800283a 	ret

00804f90 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  804f90:	defffb04 	addi	sp,sp,-20
  804f94:	dfc00415 	stw	ra,16(sp)
  804f98:	df000315 	stw	fp,12(sp)
  804f9c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  804fa0:	d0a00c17 	ldw	r2,-32720(gp)
  804fa4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  804fa8:	d0a6b217 	ldw	r2,-25912(gp)
  804fac:	10800044 	addi	r2,r2,1
  804fb0:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  804fb4:	00002e06 	br	805070 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  804fb8:	e0bffd17 	ldw	r2,-12(fp)
  804fbc:	10800017 	ldw	r2,0(r2)
  804fc0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  804fc4:	e0bffd17 	ldw	r2,-12(fp)
  804fc8:	10800403 	ldbu	r2,16(r2)
  804fcc:	10803fcc 	andi	r2,r2,255
  804fd0:	10000426 	beq	r2,zero,804fe4 <alt_tick+0x54>
  804fd4:	d0a6b217 	ldw	r2,-25912(gp)
  804fd8:	1000021e 	bne	r2,zero,804fe4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  804fdc:	e0bffd17 	ldw	r2,-12(fp)
  804fe0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  804fe4:	e0bffd17 	ldw	r2,-12(fp)
  804fe8:	10800217 	ldw	r2,8(r2)
  804fec:	d0e6b217 	ldw	r3,-25912(gp)
  804ff0:	18801d36 	bltu	r3,r2,805068 <alt_tick+0xd8>
  804ff4:	e0bffd17 	ldw	r2,-12(fp)
  804ff8:	10800403 	ldbu	r2,16(r2)
  804ffc:	10803fcc 	andi	r2,r2,255
  805000:	1000191e 	bne	r2,zero,805068 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  805004:	e0bffd17 	ldw	r2,-12(fp)
  805008:	10800317 	ldw	r2,12(r2)
  80500c:	e0fffd17 	ldw	r3,-12(fp)
  805010:	18c00517 	ldw	r3,20(r3)
  805014:	1809883a 	mov	r4,r3
  805018:	103ee83a 	callr	r2
  80501c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  805020:	e0bfff17 	ldw	r2,-4(fp)
  805024:	1000031e 	bne	r2,zero,805034 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  805028:	e13ffd17 	ldw	r4,-12(fp)
  80502c:	0804ef40 	call	804ef4 <alt_alarm_stop>
  805030:	00000d06 	br	805068 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  805034:	e0bffd17 	ldw	r2,-12(fp)
  805038:	10c00217 	ldw	r3,8(r2)
  80503c:	e0bfff17 	ldw	r2,-4(fp)
  805040:	1887883a 	add	r3,r3,r2
  805044:	e0bffd17 	ldw	r2,-12(fp)
  805048:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80504c:	e0bffd17 	ldw	r2,-12(fp)
  805050:	10c00217 	ldw	r3,8(r2)
  805054:	d0a6b217 	ldw	r2,-25912(gp)
  805058:	1880032e 	bgeu	r3,r2,805068 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80505c:	e0bffd17 	ldw	r2,-12(fp)
  805060:	00c00044 	movi	r3,1
  805064:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  805068:	e0bffe17 	ldw	r2,-8(fp)
  80506c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805070:	e0fffd17 	ldw	r3,-12(fp)
  805074:	d0a00c04 	addi	r2,gp,-32720
  805078:	18bfcf1e 	bne	r3,r2,804fb8 <__alt_data_end+0xff804fb8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80507c:	0001883a 	nop
}
  805080:	0001883a 	nop
  805084:	e037883a 	mov	sp,fp
  805088:	dfc00117 	ldw	ra,4(sp)
  80508c:	df000017 	ldw	fp,0(sp)
  805090:	dec00204 	addi	sp,sp,8
  805094:	f800283a 	ret

00805098 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  805098:	deffff04 	addi	sp,sp,-4
  80509c:	df000015 	stw	fp,0(sp)
  8050a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8050a4:	000170fa 	wrctl	ienable,zero
}
  8050a8:	0001883a 	nop
  8050ac:	e037883a 	mov	sp,fp
  8050b0:	df000017 	ldw	fp,0(sp)
  8050b4:	dec00104 	addi	sp,sp,4
  8050b8:	f800283a 	ret

008050bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8050bc:	defffa04 	addi	sp,sp,-24
  8050c0:	dfc00515 	stw	ra,20(sp)
  8050c4:	df000415 	stw	fp,16(sp)
  8050c8:	df000404 	addi	fp,sp,16
  8050cc:	e13ffe15 	stw	r4,-8(fp)
  8050d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8050d4:	e0bfff17 	ldw	r2,-4(fp)
  8050d8:	10800017 	ldw	r2,0(r2)
  8050dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8050e0:	e13ffe17 	ldw	r4,-8(fp)
  8050e4:	08003140 	call	800314 <strlen>
  8050e8:	10800044 	addi	r2,r2,1
  8050ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8050f0:	00000d06 	br	805128 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8050f4:	e0bffc17 	ldw	r2,-16(fp)
  8050f8:	10800217 	ldw	r2,8(r2)
  8050fc:	e0fffd17 	ldw	r3,-12(fp)
  805100:	180d883a 	mov	r6,r3
  805104:	e17ffe17 	ldw	r5,-8(fp)
  805108:	1009883a 	mov	r4,r2
  80510c:	08053d40 	call	8053d4 <memcmp>
  805110:	1000021e 	bne	r2,zero,80511c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  805114:	e0bffc17 	ldw	r2,-16(fp)
  805118:	00000706 	br	805138 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80511c:	e0bffc17 	ldw	r2,-16(fp)
  805120:	10800017 	ldw	r2,0(r2)
  805124:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  805128:	e0fffc17 	ldw	r3,-16(fp)
  80512c:	e0bfff17 	ldw	r2,-4(fp)
  805130:	18bff01e 	bne	r3,r2,8050f4 <__alt_data_end+0xff8050f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  805134:	0005883a 	mov	r2,zero
}
  805138:	e037883a 	mov	sp,fp
  80513c:	dfc00117 	ldw	ra,4(sp)
  805140:	df000017 	ldw	fp,0(sp)
  805144:	dec00204 	addi	sp,sp,8
  805148:	f800283a 	ret

0080514c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80514c:	defffb04 	addi	sp,sp,-20
  805150:	dfc00415 	stw	ra,16(sp)
  805154:	df000315 	stw	fp,12(sp)
  805158:	df000304 	addi	fp,sp,12
  80515c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  805160:	d0a00417 	ldw	r2,-32752(gp)
  805164:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  805168:	00003106 	br	805230 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80516c:	e0bffd17 	ldw	r2,-12(fp)
  805170:	10800217 	ldw	r2,8(r2)
  805174:	1009883a 	mov	r4,r2
  805178:	08003140 	call	800314 <strlen>
  80517c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  805180:	e0bffd17 	ldw	r2,-12(fp)
  805184:	10c00217 	ldw	r3,8(r2)
  805188:	e0bffe17 	ldw	r2,-8(fp)
  80518c:	10bfffc4 	addi	r2,r2,-1
  805190:	1885883a 	add	r2,r3,r2
  805194:	10800003 	ldbu	r2,0(r2)
  805198:	10803fcc 	andi	r2,r2,255
  80519c:	1080201c 	xori	r2,r2,128
  8051a0:	10bfe004 	addi	r2,r2,-128
  8051a4:	10800bd8 	cmpnei	r2,r2,47
  8051a8:	1000031e 	bne	r2,zero,8051b8 <alt_find_file+0x6c>
    {
      len -= 1;
  8051ac:	e0bffe17 	ldw	r2,-8(fp)
  8051b0:	10bfffc4 	addi	r2,r2,-1
  8051b4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8051b8:	e0bffe17 	ldw	r2,-8(fp)
  8051bc:	e0ffff17 	ldw	r3,-4(fp)
  8051c0:	1885883a 	add	r2,r3,r2
  8051c4:	10800003 	ldbu	r2,0(r2)
  8051c8:	10803fcc 	andi	r2,r2,255
  8051cc:	1080201c 	xori	r2,r2,128
  8051d0:	10bfe004 	addi	r2,r2,-128
  8051d4:	10800be0 	cmpeqi	r2,r2,47
  8051d8:	1000081e 	bne	r2,zero,8051fc <alt_find_file+0xb0>
  8051dc:	e0bffe17 	ldw	r2,-8(fp)
  8051e0:	e0ffff17 	ldw	r3,-4(fp)
  8051e4:	1885883a 	add	r2,r3,r2
  8051e8:	10800003 	ldbu	r2,0(r2)
  8051ec:	10803fcc 	andi	r2,r2,255
  8051f0:	1080201c 	xori	r2,r2,128
  8051f4:	10bfe004 	addi	r2,r2,-128
  8051f8:	10000a1e 	bne	r2,zero,805224 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8051fc:	e0bffd17 	ldw	r2,-12(fp)
  805200:	10800217 	ldw	r2,8(r2)
  805204:	e0fffe17 	ldw	r3,-8(fp)
  805208:	180d883a 	mov	r6,r3
  80520c:	e17fff17 	ldw	r5,-4(fp)
  805210:	1009883a 	mov	r4,r2
  805214:	08053d40 	call	8053d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  805218:	1000021e 	bne	r2,zero,805224 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80521c:	e0bffd17 	ldw	r2,-12(fp)
  805220:	00000706 	br	805240 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  805224:	e0bffd17 	ldw	r2,-12(fp)
  805228:	10800017 	ldw	r2,0(r2)
  80522c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  805230:	e0fffd17 	ldw	r3,-12(fp)
  805234:	d0a00404 	addi	r2,gp,-32752
  805238:	18bfcc1e 	bne	r3,r2,80516c <__alt_data_end+0xff80516c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80523c:	0005883a 	mov	r2,zero
}
  805240:	e037883a 	mov	sp,fp
  805244:	dfc00117 	ldw	ra,4(sp)
  805248:	df000017 	ldw	fp,0(sp)
  80524c:	dec00204 	addi	sp,sp,8
  805250:	f800283a 	ret

00805254 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  805254:	defffc04 	addi	sp,sp,-16
  805258:	df000315 	stw	fp,12(sp)
  80525c:	df000304 	addi	fp,sp,12
  805260:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  805264:	00bffa04 	movi	r2,-24
  805268:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80526c:	e03ffd15 	stw	zero,-12(fp)
  805270:	00001906 	br	8052d8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  805274:	00802034 	movhi	r2,128
  805278:	1097ee04 	addi	r2,r2,24504
  80527c:	e0fffd17 	ldw	r3,-12(fp)
  805280:	18c00324 	muli	r3,r3,12
  805284:	10c5883a 	add	r2,r2,r3
  805288:	10800017 	ldw	r2,0(r2)
  80528c:	10000f1e 	bne	r2,zero,8052cc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  805290:	00802034 	movhi	r2,128
  805294:	1097ee04 	addi	r2,r2,24504
  805298:	e0fffd17 	ldw	r3,-12(fp)
  80529c:	18c00324 	muli	r3,r3,12
  8052a0:	10c5883a 	add	r2,r2,r3
  8052a4:	e0ffff17 	ldw	r3,-4(fp)
  8052a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8052ac:	d0e00817 	ldw	r3,-32736(gp)
  8052b0:	e0bffd17 	ldw	r2,-12(fp)
  8052b4:	1880020e 	bge	r3,r2,8052c0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8052b8:	e0bffd17 	ldw	r2,-12(fp)
  8052bc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  8052c0:	e0bffd17 	ldw	r2,-12(fp)
  8052c4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8052c8:	00000606 	br	8052e4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8052cc:	e0bffd17 	ldw	r2,-12(fp)
  8052d0:	10800044 	addi	r2,r2,1
  8052d4:	e0bffd15 	stw	r2,-12(fp)
  8052d8:	e0bffd17 	ldw	r2,-12(fp)
  8052dc:	10800810 	cmplti	r2,r2,32
  8052e0:	103fe41e 	bne	r2,zero,805274 <__alt_data_end+0xff805274>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8052e4:	e0bffe17 	ldw	r2,-8(fp)
}
  8052e8:	e037883a 	mov	sp,fp
  8052ec:	df000017 	ldw	fp,0(sp)
  8052f0:	dec00104 	addi	sp,sp,4
  8052f4:	f800283a 	ret

008052f8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8052f8:	defffb04 	addi	sp,sp,-20
  8052fc:	df000415 	stw	fp,16(sp)
  805300:	df000404 	addi	fp,sp,16
  805304:	e13ffe15 	stw	r4,-8(fp)
  805308:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80530c:	e0bfff17 	ldw	r2,-4(fp)
  805310:	10820070 	cmpltui	r2,r2,2049
  805314:	1000021e 	bne	r2,zero,805320 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  805318:	00820004 	movi	r2,2048
  80531c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  805320:	e0fffe17 	ldw	r3,-8(fp)
  805324:	e0bfff17 	ldw	r2,-4(fp)
  805328:	1885883a 	add	r2,r3,r2
  80532c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  805330:	e0bffe17 	ldw	r2,-8(fp)
  805334:	e0bffc15 	stw	r2,-16(fp)
  805338:	00000506 	br	805350 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80533c:	e0bffc17 	ldw	r2,-16(fp)
  805340:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  805344:	e0bffc17 	ldw	r2,-16(fp)
  805348:	10800804 	addi	r2,r2,32
  80534c:	e0bffc15 	stw	r2,-16(fp)
  805350:	e0fffc17 	ldw	r3,-16(fp)
  805354:	e0bffd17 	ldw	r2,-12(fp)
  805358:	18bff836 	bltu	r3,r2,80533c <__alt_data_end+0xff80533c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80535c:	e0bffe17 	ldw	r2,-8(fp)
  805360:	108007cc 	andi	r2,r2,31
  805364:	10000226 	beq	r2,zero,805370 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  805368:	e0bffc17 	ldw	r2,-16(fp)
  80536c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  805370:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  805374:	0001883a 	nop
  805378:	e037883a 	mov	sp,fp
  80537c:	df000017 	ldw	fp,0(sp)
  805380:	dec00104 	addi	sp,sp,4
  805384:	f800283a 	ret

00805388 <atexit>:
  805388:	200b883a 	mov	r5,r4
  80538c:	000f883a 	mov	r7,zero
  805390:	000d883a 	mov	r6,zero
  805394:	0009883a 	mov	r4,zero
  805398:	08054501 	jmpi	805450 <__register_exitproc>

0080539c <exit>:
  80539c:	defffe04 	addi	sp,sp,-8
  8053a0:	000b883a 	mov	r5,zero
  8053a4:	dc000015 	stw	r16,0(sp)
  8053a8:	dfc00115 	stw	ra,4(sp)
  8053ac:	2021883a 	mov	r16,r4
  8053b0:	08055680 	call	805568 <__call_exitprocs>
  8053b4:	00802034 	movhi	r2,128
  8053b8:	109c6604 	addi	r2,r2,29080
  8053bc:	11000017 	ldw	r4,0(r2)
  8053c0:	20800f17 	ldw	r2,60(r4)
  8053c4:	10000126 	beq	r2,zero,8053cc <exit+0x30>
  8053c8:	103ee83a 	callr	r2
  8053cc:	8009883a 	mov	r4,r16
  8053d0:	08056e80 	call	8056e8 <_exit>

008053d4 <memcmp>:
  8053d4:	01c000c4 	movi	r7,3
  8053d8:	3980192e 	bgeu	r7,r6,805440 <memcmp+0x6c>
  8053dc:	2144b03a 	or	r2,r4,r5
  8053e0:	11c4703a 	and	r2,r2,r7
  8053e4:	10000f26 	beq	r2,zero,805424 <memcmp+0x50>
  8053e8:	20800003 	ldbu	r2,0(r4)
  8053ec:	28c00003 	ldbu	r3,0(r5)
  8053f0:	10c0151e 	bne	r2,r3,805448 <memcmp+0x74>
  8053f4:	31bfff84 	addi	r6,r6,-2
  8053f8:	01ffffc4 	movi	r7,-1
  8053fc:	00000406 	br	805410 <memcmp+0x3c>
  805400:	20800003 	ldbu	r2,0(r4)
  805404:	28c00003 	ldbu	r3,0(r5)
  805408:	31bfffc4 	addi	r6,r6,-1
  80540c:	10c00e1e 	bne	r2,r3,805448 <memcmp+0x74>
  805410:	21000044 	addi	r4,r4,1
  805414:	29400044 	addi	r5,r5,1
  805418:	31fff91e 	bne	r6,r7,805400 <__alt_data_end+0xff805400>
  80541c:	0005883a 	mov	r2,zero
  805420:	f800283a 	ret
  805424:	20c00017 	ldw	r3,0(r4)
  805428:	28800017 	ldw	r2,0(r5)
  80542c:	18bfee1e 	bne	r3,r2,8053e8 <__alt_data_end+0xff8053e8>
  805430:	31bfff04 	addi	r6,r6,-4
  805434:	21000104 	addi	r4,r4,4
  805438:	29400104 	addi	r5,r5,4
  80543c:	39bff936 	bltu	r7,r6,805424 <__alt_data_end+0xff805424>
  805440:	303fe91e 	bne	r6,zero,8053e8 <__alt_data_end+0xff8053e8>
  805444:	003ff506 	br	80541c <__alt_data_end+0xff80541c>
  805448:	10c5c83a 	sub	r2,r2,r3
  80544c:	f800283a 	ret

00805450 <__register_exitproc>:
  805450:	defffa04 	addi	sp,sp,-24
  805454:	dc000315 	stw	r16,12(sp)
  805458:	04002034 	movhi	r16,128
  80545c:	841c6604 	addi	r16,r16,29080
  805460:	80c00017 	ldw	r3,0(r16)
  805464:	dc400415 	stw	r17,16(sp)
  805468:	dfc00515 	stw	ra,20(sp)
  80546c:	18805217 	ldw	r2,328(r3)
  805470:	2023883a 	mov	r17,r4
  805474:	10003726 	beq	r2,zero,805554 <__register_exitproc+0x104>
  805478:	10c00117 	ldw	r3,4(r2)
  80547c:	010007c4 	movi	r4,31
  805480:	20c00e16 	blt	r4,r3,8054bc <__register_exitproc+0x6c>
  805484:	1a000044 	addi	r8,r3,1
  805488:	8800221e 	bne	r17,zero,805514 <__register_exitproc+0xc4>
  80548c:	18c00084 	addi	r3,r3,2
  805490:	18c7883a 	add	r3,r3,r3
  805494:	18c7883a 	add	r3,r3,r3
  805498:	12000115 	stw	r8,4(r2)
  80549c:	10c7883a 	add	r3,r2,r3
  8054a0:	19400015 	stw	r5,0(r3)
  8054a4:	0005883a 	mov	r2,zero
  8054a8:	dfc00517 	ldw	ra,20(sp)
  8054ac:	dc400417 	ldw	r17,16(sp)
  8054b0:	dc000317 	ldw	r16,12(sp)
  8054b4:	dec00604 	addi	sp,sp,24
  8054b8:	f800283a 	ret
  8054bc:	00800034 	movhi	r2,0
  8054c0:	10800004 	addi	r2,r2,0
  8054c4:	10002626 	beq	r2,zero,805560 <__register_exitproc+0x110>
  8054c8:	01006404 	movi	r4,400
  8054cc:	d9400015 	stw	r5,0(sp)
  8054d0:	d9800115 	stw	r6,4(sp)
  8054d4:	d9c00215 	stw	r7,8(sp)
  8054d8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8054dc:	d9400017 	ldw	r5,0(sp)
  8054e0:	d9800117 	ldw	r6,4(sp)
  8054e4:	d9c00217 	ldw	r7,8(sp)
  8054e8:	10001d26 	beq	r2,zero,805560 <__register_exitproc+0x110>
  8054ec:	81000017 	ldw	r4,0(r16)
  8054f0:	10000115 	stw	zero,4(r2)
  8054f4:	02000044 	movi	r8,1
  8054f8:	22405217 	ldw	r9,328(r4)
  8054fc:	0007883a 	mov	r3,zero
  805500:	12400015 	stw	r9,0(r2)
  805504:	20805215 	stw	r2,328(r4)
  805508:	10006215 	stw	zero,392(r2)
  80550c:	10006315 	stw	zero,396(r2)
  805510:	883fde26 	beq	r17,zero,80548c <__alt_data_end+0xff80548c>
  805514:	18c9883a 	add	r4,r3,r3
  805518:	2109883a 	add	r4,r4,r4
  80551c:	1109883a 	add	r4,r2,r4
  805520:	21802215 	stw	r6,136(r4)
  805524:	01800044 	movi	r6,1
  805528:	12406217 	ldw	r9,392(r2)
  80552c:	30cc983a 	sll	r6,r6,r3
  805530:	4992b03a 	or	r9,r9,r6
  805534:	12406215 	stw	r9,392(r2)
  805538:	21c04215 	stw	r7,264(r4)
  80553c:	01000084 	movi	r4,2
  805540:	893fd21e 	bne	r17,r4,80548c <__alt_data_end+0xff80548c>
  805544:	11006317 	ldw	r4,396(r2)
  805548:	218cb03a 	or	r6,r4,r6
  80554c:	11806315 	stw	r6,396(r2)
  805550:	003fce06 	br	80548c <__alt_data_end+0xff80548c>
  805554:	18805304 	addi	r2,r3,332
  805558:	18805215 	stw	r2,328(r3)
  80555c:	003fc606 	br	805478 <__alt_data_end+0xff805478>
  805560:	00bfffc4 	movi	r2,-1
  805564:	003fd006 	br	8054a8 <__alt_data_end+0xff8054a8>

00805568 <__call_exitprocs>:
  805568:	defff504 	addi	sp,sp,-44
  80556c:	df000915 	stw	fp,36(sp)
  805570:	dd400615 	stw	r21,24(sp)
  805574:	dc800315 	stw	r18,12(sp)
  805578:	dfc00a15 	stw	ra,40(sp)
  80557c:	ddc00815 	stw	r23,32(sp)
  805580:	dd800715 	stw	r22,28(sp)
  805584:	dd000515 	stw	r20,20(sp)
  805588:	dcc00415 	stw	r19,16(sp)
  80558c:	dc400215 	stw	r17,8(sp)
  805590:	dc000115 	stw	r16,4(sp)
  805594:	d9000015 	stw	r4,0(sp)
  805598:	2839883a 	mov	fp,r5
  80559c:	04800044 	movi	r18,1
  8055a0:	057fffc4 	movi	r21,-1
  8055a4:	00802034 	movhi	r2,128
  8055a8:	109c6604 	addi	r2,r2,29080
  8055ac:	12000017 	ldw	r8,0(r2)
  8055b0:	45005217 	ldw	r20,328(r8)
  8055b4:	44c05204 	addi	r19,r8,328
  8055b8:	a0001c26 	beq	r20,zero,80562c <__call_exitprocs+0xc4>
  8055bc:	a0800117 	ldw	r2,4(r20)
  8055c0:	15ffffc4 	addi	r23,r2,-1
  8055c4:	b8000d16 	blt	r23,zero,8055fc <__call_exitprocs+0x94>
  8055c8:	14000044 	addi	r16,r2,1
  8055cc:	8421883a 	add	r16,r16,r16
  8055d0:	8421883a 	add	r16,r16,r16
  8055d4:	84402004 	addi	r17,r16,128
  8055d8:	a463883a 	add	r17,r20,r17
  8055dc:	a421883a 	add	r16,r20,r16
  8055e0:	e0001e26 	beq	fp,zero,80565c <__call_exitprocs+0xf4>
  8055e4:	80804017 	ldw	r2,256(r16)
  8055e8:	e0801c26 	beq	fp,r2,80565c <__call_exitprocs+0xf4>
  8055ec:	bdffffc4 	addi	r23,r23,-1
  8055f0:	843fff04 	addi	r16,r16,-4
  8055f4:	8c7fff04 	addi	r17,r17,-4
  8055f8:	bd7ff91e 	bne	r23,r21,8055e0 <__alt_data_end+0xff8055e0>
  8055fc:	00800034 	movhi	r2,0
  805600:	10800004 	addi	r2,r2,0
  805604:	10000926 	beq	r2,zero,80562c <__call_exitprocs+0xc4>
  805608:	a0800117 	ldw	r2,4(r20)
  80560c:	1000301e 	bne	r2,zero,8056d0 <__call_exitprocs+0x168>
  805610:	a0800017 	ldw	r2,0(r20)
  805614:	10003226 	beq	r2,zero,8056e0 <__call_exitprocs+0x178>
  805618:	a009883a 	mov	r4,r20
  80561c:	98800015 	stw	r2,0(r19)
  805620:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  805624:	9d000017 	ldw	r20,0(r19)
  805628:	a03fe41e 	bne	r20,zero,8055bc <__alt_data_end+0xff8055bc>
  80562c:	dfc00a17 	ldw	ra,40(sp)
  805630:	df000917 	ldw	fp,36(sp)
  805634:	ddc00817 	ldw	r23,32(sp)
  805638:	dd800717 	ldw	r22,28(sp)
  80563c:	dd400617 	ldw	r21,24(sp)
  805640:	dd000517 	ldw	r20,20(sp)
  805644:	dcc00417 	ldw	r19,16(sp)
  805648:	dc800317 	ldw	r18,12(sp)
  80564c:	dc400217 	ldw	r17,8(sp)
  805650:	dc000117 	ldw	r16,4(sp)
  805654:	dec00b04 	addi	sp,sp,44
  805658:	f800283a 	ret
  80565c:	a0800117 	ldw	r2,4(r20)
  805660:	80c00017 	ldw	r3,0(r16)
  805664:	10bfffc4 	addi	r2,r2,-1
  805668:	15c01426 	beq	r2,r23,8056bc <__call_exitprocs+0x154>
  80566c:	80000015 	stw	zero,0(r16)
  805670:	183fde26 	beq	r3,zero,8055ec <__alt_data_end+0xff8055ec>
  805674:	95c8983a 	sll	r4,r18,r23
  805678:	a0806217 	ldw	r2,392(r20)
  80567c:	a5800117 	ldw	r22,4(r20)
  805680:	2084703a 	and	r2,r4,r2
  805684:	10000b26 	beq	r2,zero,8056b4 <__call_exitprocs+0x14c>
  805688:	a0806317 	ldw	r2,396(r20)
  80568c:	2088703a 	and	r4,r4,r2
  805690:	20000c1e 	bne	r4,zero,8056c4 <__call_exitprocs+0x15c>
  805694:	89400017 	ldw	r5,0(r17)
  805698:	d9000017 	ldw	r4,0(sp)
  80569c:	183ee83a 	callr	r3
  8056a0:	a0800117 	ldw	r2,4(r20)
  8056a4:	15bfbf1e 	bne	r2,r22,8055a4 <__alt_data_end+0xff8055a4>
  8056a8:	98800017 	ldw	r2,0(r19)
  8056ac:	153fcf26 	beq	r2,r20,8055ec <__alt_data_end+0xff8055ec>
  8056b0:	003fbc06 	br	8055a4 <__alt_data_end+0xff8055a4>
  8056b4:	183ee83a 	callr	r3
  8056b8:	003ff906 	br	8056a0 <__alt_data_end+0xff8056a0>
  8056bc:	a5c00115 	stw	r23,4(r20)
  8056c0:	003feb06 	br	805670 <__alt_data_end+0xff805670>
  8056c4:	89000017 	ldw	r4,0(r17)
  8056c8:	183ee83a 	callr	r3
  8056cc:	003ff406 	br	8056a0 <__alt_data_end+0xff8056a0>
  8056d0:	a0800017 	ldw	r2,0(r20)
  8056d4:	a027883a 	mov	r19,r20
  8056d8:	1029883a 	mov	r20,r2
  8056dc:	003fb606 	br	8055b8 <__alt_data_end+0xff8055b8>
  8056e0:	0005883a 	mov	r2,zero
  8056e4:	003ffb06 	br	8056d4 <__alt_data_end+0xff8056d4>

008056e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8056e8:	defffd04 	addi	sp,sp,-12
  8056ec:	df000215 	stw	fp,8(sp)
  8056f0:	df000204 	addi	fp,sp,8
  8056f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8056f8:	0001883a 	nop
  8056fc:	e0bfff17 	ldw	r2,-4(fp)
  805700:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  805704:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  805708:	10000226 	beq	r2,zero,805714 <_exit+0x2c>
    ALT_SIM_FAIL();
  80570c:	002af070 	cmpltui	zero,zero,43969
  805710:	00000106 	br	805718 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  805714:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  805718:	003fff06 	br	805718 <__alt_data_end+0xff805718>
